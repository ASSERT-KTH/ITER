bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  rows  =  Math.min(cols,  cols  +  1,  jTj.length);  [CE]  cannot  find  symbol  jTj  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  int  rows  =  Math.min(cols,  cols  +  1,  jTj.length);  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	int  rows  =  Math.min(cols,  cols  +  1,  jTj.length);	  int    rows    =    Math.min(cols,    cols    +    1);    	non-compiled	[CE]  cannot  find  symbol  jTj	29	None	replace
2	[BUG]  [BUGGY]  int  rows  =  Math.min(rows,  cols  +  1);  [CE]  cannot  find  symbol  jTj  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  int  rows  =  Math.min(rows,  cols  +  1);  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	int  rows  =  Math.min(rows,  cols  +  1);	  int    rows    =    Math.min(cols,    cols    +    1);    	non-compiled	[CE]  cannot  find  symbol  jTj	29	None	replace
3	[BUG]  [BUGGY]  double[][]  rows  =  new  double[cols][cols  -  2].doubleValue();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  double[][]  rows  =  new  double[cols][cols  -  2].doubleValue();  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	double[][]  rows  =  new  double[cols][cols  -  2].doubleValue();	  double[][]    rows    =    new    double[cols][cols    -    1].doubleValue();    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
4	[BUG]  [BUGGY]  double[][]  rows  =  new  double[cols][cols  /  1].doubleValue();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  double[][]  rows  =  new  double[cols][cols  /  1].doubleValue();  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	double[][]  rows  =  new  double[cols][cols  /  1].doubleValue();	  double[][]    rows    =    new    double[cols][cols    -    1].doubleValue();    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
5	[BUG]  [BUGGY]  double[][]  rows  =  new  double[cols][cols  *  1].doubleValue();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  double[][]  rows  =  new  double[cols][cols  *  1].doubleValue();  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	double[][]  rows  =  new  double[cols][cols  *  1].doubleValue();	  double[][]    rows    =    new    double[cols][cols    -    1].doubleValue();    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
6	[BUG]  [BUGGY]  double[][]  rows  =  new  double[cols][rows];  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  double[][]  rows  =  new  double[cols][rows];  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	double[][]  rows  =  new  double[cols][rows];	  double[][]    rows    =    new    double[rows][cols];    	non-compiled	[CE]  incompatible  types	75	None	replace
7	[BUG]  [BUGGY]  double[][]  rows  =  new  double[rows][cols  -  1];  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  double[][]  rows  =  new  double[rows][cols  -  1];  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	double[][]  rows  =  new  double[rows][cols  -  1];	  double[][]    rows    =    new    double[rows][cols];    	non-compiled	[CE]  incompatible  types	75	None	replace
8	[BUG]  [BUGGY]  double[][]  rows  =  new  double[rows][cols  /  2];  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  double[][]  rows  =  new  double[rows][cols  /  2];  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	double[][]  rows  =  new  double[rows][cols  /  2];	  double[][]    rows    =    new    double[rows][cols];    	non-compiled	[CE]  incompatible  types	75	None	replace
9	[BUG]  [BUGGY]  int  rows  =  getColumnCount()  +  1;  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  int  rows  =  getColumnCount()  +  1;  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	int  rows  =  getColumnCount()  +  1;	  int    rows    =    getRowCount()    +    1;    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
10	[BUG]  [BUGGY]  int  rows  =  getColsCount()  +  1;  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  int  rows  =  getColsCount()  +  1;  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	int  rows  =  getColsCount()  +  1;	  int    rows    =    getRowCount()    +    1;    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
11	[BUG]  [BUGGY]  double[][]  rows  =  _jF.getRows();  [CE]  cannot  find  symbol  _jF  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  double[][]  rows  =  _jF.getRows();  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	double[][]  rows  =  _jF.getRows();	  double[][]    rows    =    this.jF.getRows();    	non-compiled	[CE]  cannot  find  symbol  _jF	59	None	replace
12	[BUG]  [BUGGY]  double[][]  cols  =  new  double[rows][0];  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  double[][]  cols  =  new  double[rows][0];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	double[][]  cols  =  new  double[rows][0];	  double[][]    cols    =    new    double[cols][0];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	31	None	replace
13	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols.length][0];  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                    AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  double[][]  cols  =  new  double[cols.length][0];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	double[][]  cols  =  new  double[cols.length][0];	  double[][]    cols    =    new    double[cols][0];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	31	None	replace
14	[BUG]  [BUGGY]  InvalidMatrixFunction  ime  =  f,  function.getMatrixFunction();  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  InvalidMatrixFunction  ime  =  f,  function.getMatrixFunction();  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	InvalidMatrixFunction  ime  =  f,  function.getMatrixFunction();	  InvalidMatrixFunction    ime    =    f.getMatrixFunction();    	non-compiled	[CE]  ';'  expected	14	None	replace
15	[BUG]  [BUGGY]  InvalidMatrixFunction  ime  =  this.function.getMatrixFunction();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  InvalidMatrixFunction  ime  =  this.function.getMatrixFunction();  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	InvalidMatrixFunction  ime  =  this.function.getMatrixFunction();	  InvalidMatrixFunction    ime    =    f.getMatrixFunction();    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
16	[BUG]  [BUGGY]  int[][]  cols  =  new  int[cols][1];  [CE]  incompatible  types  [FE]        AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  int[][]  cols  =  new  int[cols][1];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	int[][]  cols  =  new  int[cols][1];	  double[][]    jTj    =    new    double[cols][1];    double[][]    cols    =    new    double[cols][1];    	non-compiled	[CE]  incompatible  types	72	None	replace
17	[BUG]  [BUGGY]  int  rows  =  Math.min(cols.length,  cols.length  -  1,  cols.length);  [CE]  int  cannot  be  dereferenced  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  int  rows  =  Math.min(cols.length,  cols.length  -  1,  cols.length);  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	int  rows  =  Math.min(cols.length,  cols.length  -  1,  cols.length);	  int    rows    =    Math.min(cols.length,    cols.length    -    1);    	non-compiled	[CE]  int  cannot  be  dereferenced	6	None	replace
18	[BUG]  [BUGGY]  int  rows  =  Math.min(cols,  cols.length  -  1);  [CE]  int  cannot  be  dereferenced  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  int  rows  =  Math.min(cols,  cols.length  -  1);  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	int  rows  =  Math.min(cols,  cols.length  -  1);	  int    rows    =    Math.min(cols.length,    cols.length    -    1);    	non-compiled	[CE]  int  cannot  be  dereferenced	6	None	replace
19	[BUG]  [BUGGY]  int  rows  =  Math.min(cols.length,  cols.length  -  2);  [CE]  int  cannot  be  dereferenced  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  int  rows  =  Math.min(cols.length,  cols.length  -  2);  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	int  rows  =  Math.min(cols.length,  cols.length  -  2);	  int    rows    =    Math.min(cols.length,    cols.length    -    1);    	non-compiled	[CE]  int  cannot  be  dereferenced	6	None	replace
20	[BUG]  [BUGGY]  int  rows  =  Math.min(cols,  DEFAULT_MAX_ITERATIONS);  int  cols  =  Math.min(cols,  DEFAULT_MAX_ITERATIONS);  [CE]  cannot  find  symbol  jTj  [FE]          AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  int  rows  =  Math.min(cols,  DEFAULT_MAX_ITERATIONS);  int  cols  =  Math.min(cols,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	int  rows  =  Math.min(cols,  DEFAULT_MAX_ITERATIONS);  int  cols  =  Math.min(cols,  DEFAULT_MAX_ITERATIONS);	          int    rows    =    Math.min(cols,    cols);    int    cols    =    Math.min(cols,    cols);    	non-compiled	[CE]  cannot  find  symbol  jTj	62	None	replace
21	[BUG]  [BUGGY]  int  rows  =  Math.min(rows,  row);  int  cols  =  Math.min(rows,  row);  [CE]  cannot  find  symbol  row  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  int  rows  =  Math.min(rows,  row);  int  cols  =  Math.min(rows,  row);  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	int  rows  =  Math.min(rows,  row);  int  cols  =  Math.min(rows,  row);	          int    rows    =    Math.min(cols,    cols);    int    cols    =    Math.min(cols,    cols);    	non-compiled	[CE]  cannot  find  symbol  row	62	None	replace
22	[BUG]  [BUGGY]  int  cols  =  Math.min(cols,  cols);  [CE]  cannot  find  symbol  jTj  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  int  cols  =  Math.min(cols,  cols);  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	int  cols  =  Math.min(cols,  cols);	          int    rows    =    Math.min(cols,    cols);    int    cols    =    Math.min(cols,    cols);    	non-compiled	[CE]  cannot  find  symbol  jTj	62	None	replace
23	[BUG]  [BUGGY]  int  rows  =  Math.min(rows,  cols);  int  cols  =  Math.min(rows,  cols);  [CE]  cannot  find  symbol  jTj  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  int  rows  =  Math.min(rows,  cols);  int  cols  =  Math.min(rows,  cols);  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	int  rows  =  Math.min(rows,  cols);  int  cols  =  Math.min(rows,  cols);	          int    rows    =    Math.min(cols,    cols);    int    cols    =    Math.min(cols,    cols);    	non-compiled	[CE]  cannot  find  symbol  jTj	62	None	replace
24	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][0];  jTj  =  new  double[cols][1];  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  double[][]  cols  =  new  double[cols][0];  jTj  =  new  double[cols][1];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	double[][]  cols  =  new  double[cols][0];  jTj  =  new  double[cols][1];	  double[][]    jTj    =    new    double[cols][0];    jTj    =    new    double[cols][0];    	non-compiled	[CE]  incompatible  types	53	None	replace
25	[BUG]  [BUGGY]  double[][]  rows  =  new  double[cols][0];  jTj  =  new  double[cols][1];  [CE]  cannot  find  symbol  jTj  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  double[][]  rows  =  new  double[cols][0];  jTj  =  new  double[cols][1];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	double[][]  rows  =  new  double[cols][0];  jTj  =  new  double[cols][1];	  double[][]    jTj    =    new    double[cols][0];    jTj    =    new    double[cols][0];    	non-compiled	[CE]  cannot  find  symbol  jTj	53	None	replace
26	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][cols].value();  [CE]  incompatible  types  [FE]                      AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  double[][]  cols  =  new  double[cols][cols].value();  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	double[][]  cols  =  new  double[cols][cols].value();	  double[][]    jTj    =    new    double[cols][cols].value();    	non-compiled	[CE]  incompatible  types	71	None	replace
27	[BUG]  [BUGGY]  double[][]  colsTj  =  new  double[cols][cols].value();  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  double[][]  colsTj  =  new  double[cols][cols].value();  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	double[][]  colsTj  =  new  double[cols][cols].value();	  double[][]    jTj    =    new    double[cols][cols].value();    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
28	[BUG]  [BUGGY]  double[][]  cols  jTj  =  new  double[cols][cols].value();  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  double[][]  cols  jTj  =  new  double[cols][cols].value();  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	double[][]  cols  jTj  =  new  double[cols][cols].value();	  double[][]    jTj    =    new    double[cols][cols].value();    	non-compiled	[CE]  ';'  expected	71	None	replace
29	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][cols.length].doubleValue();  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  double[][]  cols  =  new  double[cols][cols.length].doubleValue();  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	double[][]  cols  =  new  double[cols][cols.length].doubleValue();	  double[][]    cols    =    new    double[cols][cols].doubleValue();    	non-compiled	[CE]  incompatible  types	20	None	replace
30	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][cols].doubleValue()  /  2;  [CE]  incompatible  types  [FE]                      AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  double[][]  cols  =  new  double[cols][cols].doubleValue()  /  2;  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	double[][]  cols  =  new  double[cols][cols].doubleValue()  /  2;	  double[][]    cols    =    new    double[cols][cols].doubleValue();    	non-compiled	[CE]  incompatible  types	20	None	replace
31	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][cols].doubleValue().doubleValue();  [CE]  incompatible  types  [FE]                        AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  double[][]  cols  =  new  double[cols][cols].doubleValue().doubleValue();  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	double[][]  cols  =  new  double[cols][cols].doubleValue().doubleValue();	  double[][]    cols    =    new    double[cols][cols].doubleValue();    	non-compiled	[CE]  incompatible  types	20	None	replace
32	[BUG]  [BUGGY]  int  rows  =  Math.min(cols,  rows);  [CE]  cannot  find  symbol  jTj  [FE]        AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  int  rows  =  Math.min(cols,  rows);  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	int  rows  =  Math.min(cols,  rows);	  int    rows    =    Math.min(rows,    cols);    	non-compiled	[CE]  cannot  find  symbol  jTj	26	None	replace
33	[BUG]  [BUGGY]  int  rows  =  Math.min(rows,  cols  -  1);  [CE]  cannot  find  symbol  jTj  [FE]          AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  int  rows  =  Math.min(rows,  cols  -  1);  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	int  rows  =  Math.min(rows,  cols  -  1);	  int    rows    =    Math.min(rows,    cols);    	non-compiled	[CE]  cannot  find  symbol  jTj	26	None	replace
34	[BUG]  [BUGGY]  [FE]  OptimizationException  [FE]    OptimizationException    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  double[][]  jTj  =  new  double[cols][cols  +  1];  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	add	double[][]  jTj  =  new  double[cols][cols  +  1];	  double[][]    jTj    =    new    double[cols][rows];    	compilable	  [FE]  OptimizationException  	47	1	replace
35	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols  +  1];  [FE]  OptimizationException  [FE]    OptimizationException    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  double[][]  jTj  =  new  double[cols][cols  +  1];  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	double[][]  jTj  =  new  double[cols][cols  +  1];	  double[][]    jTj    =    new    double[cols][rows];    	compilable	  [FE]  OptimizationException  	47	1	replace
36	[BUG]  [BUGGY]  double[][]  colsTj  =  new  double[cols][cols.length].doubleValue();  [CE]  int  cannot  be  dereferenced  [FE]                      AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  double[][]  colsTj  =  new  double[cols][cols.length].doubleValue();  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	double[][]  colsTj  =  new  double[cols][cols.length].doubleValue();	  double[][]    colsTj    =    new    double[cols][cols].doubleValue();    	non-compiled	[CE]  int  cannot  be  dereferenced	21	None	replace
37	[BUG]  [BUGGY]  Double[][]  colsTj  =  new  double[cols][cols].doubleValue();  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  Double[][]  colsTj  =  new  double[cols][cols].doubleValue();  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	Double[][]  colsTj  =  new  double[cols][cols].doubleValue();	  double[][]    colsTj    =    new    double[cols][cols].doubleValue();    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
38	[BUG]  [BUGGY]  InvalidMatrixFunction  ime  =  mF,  function.getMatrixFunction();  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  InvalidMatrixFunction  ime  =  mF,  function.getMatrixFunction();  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	InvalidMatrixFunction  ime  =  mF,  function.getMatrixFunction();	  InvalidMatrixFunction    ime    =    mF.getMatrixFunction();    	non-compiled	[CE]  ';'  expected	15	None	replace
39	[BUG]  [BUGGY]  InvalidMatrixFunction  ime  =  jF.getMatrixFunction();  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  InvalidMatrixFunction  ime  =  jF.getMatrixFunction();  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	InvalidMatrixFunction  ime  =  jF.getMatrixFunction();	  InvalidMatrixFunction    ime    =    mF.getMatrixFunction();    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
40	[BUG]  [BUGGY]  int  rows  =  Math.min(cols,  1);  [CE]  cannot  find  symbol  jTj  [FE]        AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  int  rows  =  Math.min(cols,  1);  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	int  rows  =  Math.min(cols,  1);	  int    rows    =    Math.min(cols,    0);    	non-compiled	[CE]  cannot  find  symbol  jTj	67	None	replace
41	[BUG]  [BUGGY]  int  rows  =  Math.min(cols,  2);  [CE]  cannot  find  symbol  jTj  [FE]          AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  int  rows  =  Math.min(cols,  2);  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	int  rows  =  Math.min(cols,  2);	  int    rows    =    Math.min(cols,    0);    	non-compiled	[CE]  cannot  find  symbol  jTj	67	None	replace
42	[BUG]  [BUGGY]  int  rows  =  Math.min(cols,  0,  cols.length);  [CE]  int  cannot  be  dereferenced  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  int  rows  =  Math.min(cols,  0,  cols.length);  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	int  rows  =  Math.min(cols,  0,  cols.length);	  int    rows    =    Math.min(cols,    0);    	non-compiled	[CE]  int  cannot  be  dereferenced	67	None	replace
43	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][0];  Double[][]  jTj  =  new  double[cols][1];  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  double[][]  cols  =  new  double[cols][0];  Double[][]  jTj  =  new  double[cols][1];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	double[][]  cols  =  new  double[cols][0];  Double[][]  jTj  =  new  double[cols][1];	  double[][]    jTj    =    new    double[cols][0];    Double[][]    jTj    =    new    double[cols][1];    	non-compiled	[CE]  incompatible  types	54	None	replace
44	[BUG]  [BUGGY]  int  rows  =  Math.max(0,  cols][cols);  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  int  rows  =  Math.max(0,  cols][cols);  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	int  rows  =  Math.max(0,  cols][cols);	  int    rows    =    Math.max(0,    cols);    	non-compiled	[CE]  ')'  expected	28	None	replace
45	[BUG]  [BUGGY]  int  rows  =  Math.max(0,  cols  -  1);  [CE]  cannot  find  symbol  jTj  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  int  rows  =  Math.max(0,  cols  -  1);  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	int  rows  =  Math.max(0,  cols  -  1);	  int    rows    =    Math.max(0,    cols);    	non-compiled	[CE]  cannot  find  symbol  jTj	28	None	replace
46	[BUG]  [BUGGY]  int  rows  =  Math.max(0,  cols  +  1);  [CE]  cannot  find  symbol  jTj  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  int  rows  =  Math.max(0,  cols  +  1);  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	int  rows  =  Math.max(0,  cols  +  1);	  int    rows    =    Math.max(0,    cols);    	non-compiled	[CE]  cannot  find  symbol  jTj	28	None	replace
47	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][rows];  double[][]  jTj  =  new  double[cols][rows];  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]    OptimizationException    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  double[][]  jTj  =  new  double[cols][rows];  double[][]  jTj  =  new  double[cols][rows];  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	double[][]    jTj    =    new    double[cols][rows];    double[][]  jTj  =  new  double[cols][rows];	  	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	46	None	add
48	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][rows];  for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  jTj  =  new  double[cols][rows];  [CE]  illegal  start  of  expression  [FE]      OptimizationException    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  double[][]  jTj  =  new  double[cols][rows];  for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  jTj  =  new  double[cols][rows];  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	double[][]    jTj    =    new    double[cols][rows];    for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  jTj  =  new  double[cols][rows];	  	non-compiled	[CE]  illegal  start  of  expression	46	None	add
49	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][rows];  int[][]  jTj  =  new  double[cols][rows];  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]        OptimizationException    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  double[][]  jTj  =  new  double[cols][rows];  int[][]  jTj  =  new  double[cols][rows];  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	double[][]    jTj    =    new    double[cols][rows];    int[][]  jTj  =  new  double[cols][rows];	  	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	46	None	add
50	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][rows];  for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  jTj  =  new  double[cols][rows];  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]          OptimizationException    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  double[][]  jTj  =  new  double[cols][rows];  for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  jTj  =  new  double[cols][rows];  }  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	double[][]    jTj    =    new    double[cols][rows];    for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  jTj  =  new  double[cols][rows];  }	  	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	46	None	add
51	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][rows];  Double[][]  jTj  =  new  double[cols][rows];  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]            OptimizationException    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  double[][]  jTj  =  new  double[cols][rows];  Double[][]  jTj  =  new  double[cols][rows];  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	double[][]    jTj    =    new    double[cols][rows];    Double[][]  jTj  =  new  double[cols][rows];	  	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	46	None	add
52	[BUG]  [BUGGY]  int  rows  =  getColsCount();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  int  rows  =  getColsCount();  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	int  rows  =  getColsCount();	  int    rows    =    getRowCount()    -    2;    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
53	[BUG]  [BUGGY]  double[][]  rows  =  jTj.getRows();  [CE]  cannot  find  symbol  jTj  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  double[][]  rows  =  jTj.getRows();  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	double[][]  rows  =  jTj.getRows();	  double[][]    rows    =    jf.getRows();    	non-compiled	[CE]  cannot  find  symbol  jTj	45	None	replace
54	[BUG]  [BUGGY]  double[][]  rows  =  ji.getRows();  [CE]  cannot  find  symbol  ji  [FE]                    AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  double[][]  rows  =  ji.getRows();  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	double[][]  rows  =  ji.getRows();	  double[][]    rows    =    jf.getRows();    	non-compiled	[CE]  cannot  find  symbol  ji	45	None	replace
55	[BUG]  [BUGGY]  Integer  rows  =  Math.min(cols,  cols);  [CE]  cannot  find  symbol  jTj  [FE]        AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  Integer  rows  =  Math.min(cols,  cols);  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	Integer  rows  =  Math.min(cols,  cols);	          int    rows    =    Math.min(cols,    cols);    Integer    rows    =    Math.min(cols,    cols);    	non-compiled	[CE]  cannot  find  symbol  jTj	61	None	replace
56	[BUG]  [BUGGY]  int  rows  =  Math.min(rows,  cols);  Integer  rows  =  Math.min(cols,  cols);  [CE]  variable  rows  is  already  defined  in  method  getCovariances()  [FE]          AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  int  rows  =  Math.min(rows,  cols);  Integer  rows  =  Math.min(cols,  cols);  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	int  rows  =  Math.min(rows,  cols);  Integer  rows  =  Math.min(cols,  cols);	          int    rows    =    Math.min(cols,    cols);    Integer    rows    =    Math.min(cols,    cols);    	non-compiled	[CE]  variable  rows  is  already  defined  in  method  getCovariances()	61	None	replace
57	[BUG]  [BUGGY]  double[][]  colsJTj  =  new  double[cols][cols.length].doubleValue();  [CE]  int  cannot  be  dereferenced  [FE]                        AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  double[][]  colsJTj  =  new  double[cols][cols.length].doubleValue();  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	double[][]  colsJTj  =  new  double[cols][cols.length].doubleValue();	  double[][]    colsJTj    =    new    double[cols][cols].doubleValue();    	non-compiled	[CE]  int  cannot  be  dereferenced	22	None	replace
58	[BUG]  [BUGGY]  Double[][]  colsJTj  =  new  double[cols][cols].doubleValue();  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  Double[][]  colsJTj  =  new  double[cols][cols].doubleValue();  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	Double[][]  colsJTj  =  new  double[cols][cols].doubleValue();	  double[][]    colsJTj    =    new    double[cols][cols].doubleValue();    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
59	[BUG]  [BUGGY]  int  rows  =  Math.max(rows,  cols);  [CE]  cannot  find  symbol  jTj  [FE]        AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  int  rows  =  Math.max(rows,  cols);  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	int  rows  =  Math.max(rows,  cols);	  int    rows    =    Math.max(cols,    cols);    	non-compiled	[CE]  cannot  find  symbol  jTj	60	None	replace
60	[BUG]  [BUGGY]  int  rows  =  Math.max(cols,  cols  -  1);  [CE]  cannot  find  symbol  jTj  [FE]          AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  int  rows  =  Math.max(cols,  cols  -  1);  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	int  rows  =  Math.max(cols,  cols  -  1);	  int    rows    =    Math.max(cols,    cols);    	non-compiled	[CE]  cannot  find  symbol  jTj	60	None	replace
61	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][3];  [CE]  incompatible  types  [FE]        AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  double[][]  cols  =  new  double[cols][3];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	double[][]  cols  =  new  double[cols][3];	  double[][]    jTj    =    new    double[cols][1];    double[][]    jTj    =    new    double[cols][3];    	non-compiled	[CE]  incompatible  types	64	None	replace
62	[BUG]  [BUGGY]  InvalidMatrixFunction  ime  =  this.mean.getMatrixFunction();  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  InvalidMatrixFunction  ime  =  this.mean.getMatrixFunction();  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	InvalidMatrixFunction  ime  =  this.mean.getMatrixFunction();	  InvalidMatrixFunction    ime    =    this.ime.getMatrixFunction();    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
63	[BUG]  [BUGGY]  int  rows  =  cols.getRowCount();  [CE]  int  cannot  be  dereferenced  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  int  rows  =  cols.getRowCount();  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	int  rows  =  cols.getRowCount();	  int    rows    =    this.getRowCount();    	non-compiled	[CE]  int  cannot  be  dereferenced	63	None	replace
64	[BUG]  [BUGGY]  int  rows  =  this.rows.getRowCount();  [CE]  int  cannot  be  dereferenced  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  int  rows  =  this.rows.getRowCount();  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	int  rows  =  this.rows.getRowCount();	  int    rows    =    this.getRowCount();    	non-compiled	[CE]  int  cannot  be  dereferenced	63	None	replace
65	[BUG]  [BUGGY]  int  rows  =  this.cols.getRowCount();  [CE]  int  cannot  be  dereferenced  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  int  rows  =  this.cols.getRowCount();  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	int  rows  =  this.cols.getRowCount();	  int    rows    =    this.getRowCount();    	non-compiled	[CE]  int  cannot  be  dereferenced	63	None	replace
66	[BUG]  [BUGGY]  int  rows  =  Math.min(0,  cols);  [CE]  cannot  find  symbol  jTj  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  int  rows  =  Math.min(0,  cols);  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	int  rows  =  Math.min(0,  cols);	          int    rows    =    Math.min(cols,    cols);    int    rows    =    Math.min(0,    cols);    	non-compiled	[CE]  cannot  find  symbol  jTj	12	None	replace
67	[BUG]  [BUGGY]  int  rows  =  Math.min(1,  cols);  [CE]  cannot  find  symbol  jTj  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  int  rows  =  Math.min(1,  cols);  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	int  rows  =  Math.min(1,  cols);	          int    rows    =    Math.min(cols,    cols);    int    rows    =    Math.min(0,    cols);    	non-compiled	[CE]  cannot  find  symbol  jTj	12	None	replace
68	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][0];  double[][]  jTj  =  new  double[rows][0];  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  double[][]  jTj  =  new  double[rows][0];  double[][]  jTj  =  new  double[rows][0];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	double[][]    jTj    =    new    double[rows][0];    double[][]  jTj  =  new  double[rows][0];	  	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	55	None	add
69	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][0];  int[][]  jTj  =  new  double[rows][0];  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]      AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  double[][]  jTj  =  new  double[rows][0];  int[][]  jTj  =  new  double[rows][0];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	double[][]    jTj    =    new    double[rows][0];    int[][]  jTj  =  new  double[rows][0];	  	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	55	None	add
70	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][0];  Double[][]  jTj  =  new  double[rows][0];  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]        AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  double[][]  jTj  =  new  double[rows][0];  Double[][]  jTj  =  new  double[rows][0];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	double[][]    jTj    =    new    double[rows][0];    Double[][]  jTj  =  new  double[rows][0];	  	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	55	None	add
71	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][0];  double[][]  jTj  =  new  double[rows][1];  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]          AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  double[][]  jTj  =  new  double[rows][0];  double[][]  jTj  =  new  double[rows][1];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	double[][]    jTj    =    new    double[rows][0];    double[][]  jTj  =  new  double[rows][1];	  	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	55	None	add
72	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][0];  jTj  =  new  double[rows][0];  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]            AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  double[][]  jTj  =  new  double[rows][0];  jTj  =  new  double[rows][0];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	double[][]    jTj    =    new    double[rows][0];    jTj  =  new  double[rows][0];	  	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	55	None	add
73	[BUG]  [BUGGY]  double[][]  cols  =  new  double[rows][1];  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]          AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  double[][]  cols  =  new  double[rows][1];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	double[][]  cols  =  new  double[rows][1];	  double[][]    cols    =    new    double[cols][1];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	25	None	replace
74	[BUG]  [BUGGY]  MultivariateVectorialFunction  jTj  =  function.getMultivariateVectorialFunction();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  MultivariateVectorialFunction  jTj  =  function.getMultivariateVectorialFunction();  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	MultivariateVectorialFunction  jTj  =  function.getMultivariateVectorialFunction();	  double[][]    jTj    =    new    double[cols][0];    MultivariateVectorialFunction    jTj    =    function.getMultivariateVectorialFunction();    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
75	[BUG]  [BUGGY]  double[][]  cols  =  function.getCols();  MultivariateVectorialFunction  jTj  =  function.getMultivariateVectorialFunction();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  double[][]  cols  =  function.getCols();  MultivariateVectorialFunction  jTj  =  function.getMultivariateVectorialFunction();  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	double[][]  cols  =  function.getCols();  MultivariateVectorialFunction  jTj  =  function.getMultivariateVectorialFunction();	  double[][]    jTj    =    new    double[cols][0];    MultivariateVectorialFunction    jTj    =    function.getMultivariateVectorialFunction();    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
76	[BUG]  [BUGGY]  MultipleVectorialFunction  jTj  =  function.getMultivariateVectorialFunction();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  MultipleVectorialFunction  jTj  =  function.getMultivariateVectorialFunction();  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	MultipleVectorialFunction  jTj  =  function.getMultivariateVectorialFunction();	  double[][]    jTj    =    new    double[cols][0];    MultivariateVectorialFunction    jTj    =    function.getMultivariateVectorialFunction();    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
77	[BUG]  [BUGGY]  int  rows  =  Math.min(cols,  cols.length  -  2);  [CE]  int  cannot  be  dereferenced  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  int  rows  =  Math.min(cols,  cols.length  -  2);  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	int  rows  =  Math.min(cols,  cols.length  -  2);	  int    rows    =    Math.min(cols,    cols.length);    	non-compiled	[CE]  int  cannot  be  dereferenced	7	None	replace
78	[BUG]  [BUGGY]  int  rows  =  Math.min(cols,  cols.length  +  1);  [CE]  int  cannot  be  dereferenced  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  int  rows  =  Math.min(cols,  cols.length  +  1);  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	int  rows  =  Math.min(cols,  cols.length  +  1);	  int    rows    =    Math.min(cols,    cols.length);    	non-compiled	[CE]  int  cannot  be  dereferenced	7	None	replace
79	[BUG]  [BUGGY]  double[][]  rows  =  cols.getColumns();  [CE]  int  cannot  be  dereferenced  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  double[][]  rows  =  cols.getColumns();  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	double[][]  rows  =  cols.getColumns();	  double[][]    rows    =    jF.getColumns();    	non-compiled	[CE]  int  cannot  be  dereferenced	44	None	replace
80	[BUG]  [BUGGY]  double[][]  rows  =  jF,  cols.getColumns();  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  double[][]  rows  =  jF,  cols.getColumns();  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	double[][]  rows  =  jF,  cols.getColumns();	  double[][]    rows    =    jF.getColumns();    	non-compiled	[CE]  ';'  expected	44	None	replace
81	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols].varianceValue();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  double[][]  jTj  =  new  double[cols][cols].varianceValue();  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	double[][]  jTj  =  new  double[cols][cols].varianceValue();	  double[][]    jTj    =    new    double[cols][cols].remainderValue();    	non-compiled	[CE]  cannot  find  symbol	70	None	replace
82	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols].variance();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  double[][]  jTj  =  new  double[cols][cols].variance();  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	double[][]  jTj  =  new  double[cols][cols].variance();	  double[][]    jTj    =    new    double[cols][cols].remainderValue();    	non-compiled	[CE]  cannot  find  symbol	70	None	replace
83	[BUG]  [BUGGY]  int  rows  =  Math.min(cols.length,  cols.length  +  1,  cols.length);  [CE]  int  cannot  be  dereferenced  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  int  rows  =  Math.min(cols.length,  cols.length  +  1,  cols.length);  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	int  rows  =  Math.min(cols.length,  cols.length  +  1,  cols.length);	  int    rows    =    Math.min(cols.length,    cols.length    +    1);    	non-compiled	[CE]  int  cannot  be  dereferenced	8	None	replace
84	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][2];  double[][]  jTj  =  new  double[rows][2];  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  double[][]  jTj  =  new  double[rows][2];  double[][]  jTj  =  new  double[rows][2];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	double[][]    jTj    =    new    double[rows][2];    double[][]  jTj  =  new  double[rows][2];	  	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	34	None	add
85	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][2];  int[][]  jTj  =  new  double[rows][2];  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]      AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  double[][]  jTj  =  new  double[rows][2];  int[][]  jTj  =  new  double[rows][2];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	double[][]    jTj    =    new    double[rows][2];    int[][]  jTj  =  new  double[rows][2];	  	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	34	None	add
86	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][2];  Double[][]  jTj  =  new  double[rows][2];  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]        AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  double[][]  jTj  =  new  double[rows][2];  Double[][]  jTj  =  new  double[rows][2];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	double[][]    jTj    =    new    double[rows][2];    Double[][]  jTj  =  new  double[rows][2];	  	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	34	None	add
87	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][2];  double[][]  jTj  =  new  double[rows][3];  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]          AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  double[][]  jTj  =  new  double[rows][2];  double[][]  jTj  =  new  double[rows][3];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	double[][]    jTj    =    new    double[rows][2];    double[][]  jTj  =  new  double[rows][3];	  	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	34	None	add
88	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][2];  double[][]  jTj  =  new  double[rows][1];  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]            AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  double[][]  jTj  =  new  double[rows][2];  double[][]  jTj  =  new  double[rows][1];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	double[][]    jTj    =    new    double[rows][2];    double[][]  jTj  =  new  double[rows][1];	  	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	34	None	add
89	[BUG]  [BUGGY]  double[][]  rows  =  new  double[cols][1];  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]        AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  double[][]  rows  =  new  double[cols][1];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	double[][]  rows  =  new  double[cols][1];	  double[][]    rows    =    new    double[cols][0];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	74	None	replace
90	[BUG]  [BUGGY]  double[][]  rows  =  new  double[cols][2];  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]          AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  double[][]  rows  =  new  double[cols][2];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	double[][]  rows  =  new  double[cols][2];	  double[][]    rows    =    new    double[cols][0];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	74	None	replace
91	[BUG]  [BUGGY]  double[][]  rows  =  new  double[rows][0];  [CE]  incompatible  types  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  double[][]  rows  =  new  double[rows][0];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	double[][]  rows  =  new  double[rows][0];	  double[][]    rows    =    new    double[cols][0];    	non-compiled	[CE]  incompatible  types	74	None	replace
92	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][1];  jTj[][]  jTj  =  new  double[cols][1];  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  double[][]  cols  =  new  double[cols][1];  jTj[][]  jTj  =  new  double[cols][1];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	double[][]  cols  =  new  double[cols][1];  jTj[][]  jTj  =  new  double[cols][1];	  double[][]    jTj    =    new    double[cols][1];    jTj[][]    jTj    =    new    double[cols][1];    	non-compiled	[CE]  incompatible  types	5	None	replace
93	[BUG]  [BUGGY]  Double[][]  rows  =  new  double[cols][cols.length].doubleValue();  [CE]  int  cannot  be  dereferenced  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  Double[][]  rows  =  new  double[cols][cols.length].doubleValue();  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	Double[][]  rows  =  new  double[cols][cols.length].doubleValue();	  Double[][]    rows    =    new    double[cols][cols].doubleValue();    	non-compiled	[CE]  int  cannot  be  dereferenced	57	None	replace
94	[BUG]  [BUGGY]  Double[][]  rows  =  new  double[rows][cols].doubleValue();  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  Double[][]  rows  =  new  double[rows][cols].doubleValue();  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	Double[][]  rows  =  new  double[rows][cols].doubleValue();	  Double[][]    rows    =    new    double[cols][cols].doubleValue();    	non-compiled	[CE]  incompatible  types	57	None	replace
95	[BUG]  [BUGGY]  double[][]  rows  =  new  double[cols][cols.length];  [CE]  int  cannot  be  dereferenced  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  double[][]  rows  =  new  double[cols][cols.length];  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	double[][]  rows  =  new  double[cols][cols.length];	  double[][]    rows    =    new    double[cols][cols];    	non-compiled	[CE]  int  cannot  be  dereferenced	33	None	replace
96	[BUG]  [BUGGY]  double[][]  rows  =  new  double[cols][cols  -  1];  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  double[][]  rows  =  new  double[cols][cols  -  1];  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	double[][]  rows  =  new  double[cols][cols  -  1];	  double[][]    rows    =    new    double[cols][cols];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	33	None	replace
97	[BUG]  [BUGGY]  double[][]  rows  =  new  double[cols][cols  +  1];  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  double[][]  rows  =  new  double[cols][cols  +  1];  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	double[][]  rows  =  new  double[cols][cols  +  1];	  double[][]    rows    =    new    double[cols][cols];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	33	None	replace
98	[BUG]  [BUGGY]  double[][]  rows  =  new  double[cols][cols  /  2];  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  double[][]  rows  =  new  double[cols][cols  /  2];  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	double[][]  rows  =  new  double[cols][cols  /  2];	  double[][]    rows    =    new    double[cols][cols];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	33	None	replace
99	[BUG]  [BUGGY]  InvalidMatrixFunction  ime  =  this.functions.getMatrixFunction();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  InvalidMatrixFunction  ime  =  this.functions.getMatrixFunction();  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	InvalidMatrixFunction  ime  =  this.functions.getMatrixFunction();	  InvalidMatrixFunction    ime    =    functions.getMatrixFunction();    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
100	[BUG]  [BUGGY]  InvalidMatrixFunction  ime  =  fns.getMatrixFunction();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  InvalidMatrixFunction  ime  =  fns.getMatrixFunction();  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	InvalidMatrixFunction  ime  =  fns.getMatrixFunction();	  InvalidMatrixFunction    ime    =    functions.getMatrixFunction();    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
101	[BUG]  [BUGGY]  double[][]  rows  =  cols.getCols();  [CE]  int  cannot  be  dereferenced  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  double[][]  rows  =  cols.getCols();  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	double[][]  rows  =  cols.getCols();	  double[][]    rows    =    jF.getCols();    	non-compiled	[CE]  int  cannot  be  dereferenced	43	None	replace
102	[BUG]  [BUGGY]  double[][]  rows  =  jF,  cols.getCols();  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  double[][]  rows  =  jF,  cols.getCols();  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	double[][]  rows  =  jF,  cols.getCols();	  double[][]    rows    =    jF.getCols();    	non-compiled	[CE]  ';'  expected	43	None	replace
103	[BUG]  [BUGGY]  double[][]  cols  =  new  double[rows][2];  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                    AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  double[][]  cols  =  new  double[rows][2];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	double[][]  cols  =  new  double[rows][2];	  double[][]    cols    =    new    double[cols][2];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	32	None	replace
104	[BUG]  [BUGGY]  double[][]  cols  =  new  double[rows][cols.length];  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  double[][]  cols  =  new  double[rows][cols.length];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	double[][]  cols  =  new  double[rows][cols.length];	  double[][]    cols    =    new    double[rows][cols];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	30	None	replace
105	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols];  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  double[][]  cols  =  new  double[cols];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	double[][]  cols  =  new  double[cols];	  double[][]    cols    =    new    double[rows][cols];    	non-compiled	[CE]  incompatible  types	30	None	replace
106	[BUG]  [BUGGY]  InvalidMatrixFunction  ime  =  this.variantFunction.getMatrixFunction();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  InvalidMatrixFunction  ime  =  this.variantFunction.getMatrixFunction();  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	InvalidMatrixFunction  ime  =  this.variantFunction.getMatrixFunction();	  InvalidMatrixFunction    ime    =    _variantFunction.getMatrixFunction();    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
107	[BUG]  [BUGGY]  InvalidMatrixFunction  ime  =  _variantFunction,  function.getMatrixFunction();  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  InvalidMatrixFunction  ime  =  _variantFunction,  function.getMatrixFunction();  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	InvalidMatrixFunction  ime  =  _variantFunction,  function.getMatrixFunction();	  InvalidMatrixFunction    ime    =    _variantFunction.getMatrixFunction();    	non-compiled	[CE]  ';'  expected	73	None	replace
108	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols.length  -  1].doubleValue();  [CE]  int  cannot  be  dereferenced  [FE]                    AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  double[][]  jTj  =  new  double[cols][cols.length  -  1].doubleValue();  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	double[][]  jTj  =  new  double[cols][cols.length  -  1].doubleValue();	  double[][]    jTj    =    new    double[cols][cols.length].doubleValue();    	non-compiled	[CE]  int  cannot  be  dereferenced	66	None	replace
109	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][1];  double[][]  jTj  =  new  double[rows][1];  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  double[][]  jTj  =  new  double[rows][1];  double[][]  jTj  =  new  double[rows][1];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	double[][]    jTj    =    new    double[rows][1];    double[][]  jTj  =  new  double[rows][1];	  	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	23	None	add
110	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][1];  int[][]  jTj  =  new  double[rows][1];  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]      AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  double[][]  jTj  =  new  double[rows][1];  int[][]  jTj  =  new  double[rows][1];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	double[][]    jTj    =    new    double[rows][1];    int[][]  jTj  =  new  double[rows][1];	  	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	23	None	add
111	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][1];  double[][]  jTj  =  new  double[rows][2];  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]        AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  double[][]  jTj  =  new  double[rows][1];  double[][]  jTj  =  new  double[rows][2];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	double[][]    jTj    =    new    double[rows][1];    double[][]  jTj  =  new  double[rows][2];	  	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	23	None	add
112	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][1];  Double[][]  jTj  =  new  double[rows][1];  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]          AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  double[][]  jTj  =  new  double[rows][1];  Double[][]  jTj  =  new  double[rows][1];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	double[][]    jTj    =    new    double[rows][1];    Double[][]  jTj  =  new  double[rows][1];	  	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	23	None	add
113	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][1];  double[][]  jTj  =  new  double[rows][0];  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]            AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  double[][]  jTj  =  new  double[rows][1];  double[][]  jTj  =  new  double[rows][0];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	double[][]    jTj    =    new    double[rows][1];    double[][]  jTj  =  new  double[rows][0];	  	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	23	None	add
114	[BUG]  [BUGGY]  int[][]  cols  =  new  int[cols][0];  [CE]  incompatible  types  [FE]        AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  int[][]  cols  =  new  int[cols][0];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	int[][]  cols  =  new  int[cols][0];	  double[][]    jTj    =    new    double[cols][0];    double[][]    cols    =    new    double[cols][0];    	non-compiled	[CE]  incompatible  types	68	None	replace
115	[BUG]  [BUGGY]  cols  =  new  double[cols][0];  [CE]  incompatible  types  [FE]          AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  cols  =  new  double[cols][0];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	cols  =  new  double[cols][0];	  double[][]    jTj    =    new    double[cols][0];    double[][]    cols    =    new    double[cols][0];    	non-compiled	[CE]  incompatible  types	68	None	replace
116	[BUG]  [BUGGY]  double[][]  row  =  new  double[rows][cols];  [CE]  cannot  find  symbol  jTj  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  double[][]  row  =  new  double[rows][cols];  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	double[][]  row  =  new  double[rows][cols];	  double[][]    row    =    new    double[cols][cols];    	non-compiled	[CE]  cannot  find  symbol  jTj	76	None	replace
117	[BUG]  [BUGGY]  double[][]  row  =  new  double[cols][cols  -  1];  [CE]  cannot  find  symbol  jTj  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  double[][]  row  =  new  double[cols][cols  -  1];  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	double[][]  row  =  new  double[cols][cols  -  1];	  double[][]    row    =    new    double[cols][cols];    	non-compiled	[CE]  cannot  find  symbol  jTj	76	None	replace
118	[BUG]  [BUGGY]  int  rows  =  getColsCount()  -  1;  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  int  rows  =  getColsCount()  -  1;  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	int  rows  =  getColsCount()  -  1;	  int    rows    =    getRowCount()    -    1;    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
119	[BUG]  [BUGGY]  int  rows  =  getColumnsCount()  -  1;  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  int  rows  =  getColumnsCount()  -  1;  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	int  rows  =  getColumnsCount()  -  1;	  int    rows    =    getRowCount()    -    1;    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
120	[BUG]  [BUGGY]  double[][]  rows  =  new  double[cols][cols.length  -  1].doubleValue();  [CE]  int  cannot  be  dereferenced  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  double[][]  rows  =  new  double[cols][cols.length  -  1].doubleValue();  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	double[][]  rows  =  new  double[cols][cols.length  -  1].doubleValue();	  double[][]    rows    =    new    double[cols][cols.length].doubleValue();    	non-compiled	[CE]  int  cannot  be  dereferenced	48	None	replace
121	[BUG]  [BUGGY]  double[][]  rows  =  new  double[cols][cols.length  -  2].doubleValue();  [CE]  int  cannot  be  dereferenced  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  double[][]  rows  =  new  double[cols][cols.length  -  2].doubleValue();  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	double[][]  rows  =  new  double[cols][cols.length  -  2].doubleValue();	  double[][]    rows    =    new    double[cols][cols.length].doubleValue();    	non-compiled	[CE]  int  cannot  be  dereferenced	48	None	replace
122	[BUG]  [BUGGY]  int  rows  =  Math.min(cols,  cols  -  2);  [CE]  cannot  find  symbol  jTj  [FE]          AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  int  rows  =  Math.min(cols,  cols  -  2);  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	int  rows  =  Math.min(cols,  cols  -  2);	  int    rows    =    Math.min(cols,    cols    -    1);    	non-compiled	[CE]  cannot  find  symbol  jTj	27	None	replace
123	[BUG]  [BUGGY]  double[][]  colsTj  =  new  double[cols][cols  -  1].doubleValue();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  double[][]  colsTj  =  new  double[cols][cols  -  1].doubleValue();  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	double[][]  colsTj  =  new  double[cols][cols  -  1].doubleValue();	  double[][]    colsTj    =    new    double[cols][cols].doubleValue();    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
124	[BUG]  [BUGGY]  int  rows  =  Math.min(cols,  0,  cols);  [CE]  no  suitable  method  found  for  min(int,int,int)  [FE]        AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  int  rows  =  Math.min(cols,  0,  cols);  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	int  rows  =  Math.min(cols,  0,  cols);	  int    rows    =    Math.min(cols,    0);    	non-compiled	[CE]  no  suitable  method  found  for  min(int,int,int)	67	None	replace
125	[BUG]  [BUGGY]  double[][]  colsJTj  =  new  double[cols][cols  -  1].doubleValue();  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  double[][]  colsJTj  =  new  double[cols][cols  -  1].doubleValue();  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	double[][]  colsJTj  =  new  double[cols][cols  -  1].doubleValue();	  double[][]    colsJTj    =    new    double[cols][cols].doubleValue();    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
126	[BUG]  [BUGGY]  InvalidMatrixFunction  ime  =  functions.getMatrixFunction(function);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  InvalidMatrixFunction  ime  =  functions.getMatrixFunction(function);  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	InvalidMatrixFunction  ime  =  functions.getMatrixFunction(function);	  InvalidMatrixFunction    ime    =    functions.getMatrixFunction();    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
127	[BUG]  [BUGGY]  ImerialMatrixFunction  ime  =  functions.getMatrixFunction();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  ImerialMatrixFunction  ime  =  functions.getMatrixFunction();  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	ImerialMatrixFunction  ime  =  functions.getMatrixFunction();	  InvalidMatrixFunction    ime    =    functions.getMatrixFunction();    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
128	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols].multivariate();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  double[][]  jTj  =  new  double[cols][cols].multivariate();  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	double[][]  jTj  =  new  double[cols][cols].multivariate();	  double[][]    jTj    =    new    double[cols][cols].value();    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
129	[BUG]  [BUGGY]  double[][]  rows  =  function.getRows();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  double[][]  rows  =  function.getRows();  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	double[][]  rows  =  function.getRows();	  double[][]    rows    =    jf.getRows();    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
130	[BUG]  [BUGGY]  double[][]  rows  =  f.getRows();  [CE]  cannot  find  symbol  f  [FE]                    AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  double[][]  rows  =  f.getRows();  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	double[][]  rows  =  f.getRows();	  double[][]    rows    =    jf.getRows();    	non-compiled	[CE]  cannot  find  symbol  f	45	None	replace
131	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][2];  double[][]  jTj  =  new  double[rows][0];  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  double[][]  jTj  =  new  double[rows][2];  double[][]  jTj  =  new  double[rows][0];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	double[][]    jTj    =    new    double[rows][2];    double[][]  jTj  =  new  double[rows][0];	  	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	34	None	add
132	[BUG]  [BUGGY]  int  rows  =  getColumnsCount();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  int  rows  =  getColumnsCount();  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	int  rows  =  getColumnsCount();	  int    rows    =    getRowCount()    +    1;    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
133	[BUG]  [BUGGY]  InvalidMatrixFunction  ime  =  _variantFunction.getMatrixFunction(function);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  InvalidMatrixFunction  ime  =  _variantFunction.getMatrixFunction(function);  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	InvalidMatrixFunction  ime  =  _variantFunction.getMatrixFunction(function);	  InvalidMatrixFunction    ime    =    _variantFunction.getMatrixFunction();    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
134	[BUG]  [BUGGY]  int  rows  =  this.getColumnCount();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  int  rows  =  this.getColumnCount();  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	int  rows  =  this.getColumnCount();	  int    rows    =    this.getRowCount();    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
135	[BUG]  [BUGGY]  int  rows  =  jF.getRowCount();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  int  rows  =  jF.getRowCount();  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	int  rows  =  jF.getRowCount();	  int    rows    =    this.getRowCount();    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
136	[BUG]  [BUGGY]  ImerialMatrixFunction  ime  =  function.getMatrixFunction();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  ImerialMatrixFunction  ime  =  function.getMatrixFunction();  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	ImerialMatrixFunction  ime  =  function.getMatrixFunction();	  InvalidMatrixFunction    ime    =    function.getMatrixFunction();    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
137	[BUG]  [BUGGY]  Double[][]  rows  =  new  double[cols][cols  -  1].doubleValue();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  Double[][]  rows  =  new  double[cols][cols  -  1].doubleValue();  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	Double[][]  rows  =  new  double[cols][cols  -  1].doubleValue();	  Double[][]    rows    =    new    double[cols][cols].doubleValue();    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
138	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  double[][]  jTj  =  new  double[2][0];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	add	double[][]  jTj  =  new  double[2][0];	  double[][]    jTj    =    new    double[rows][0];    	compilable	  [FE]  AssertionFailedError  	56	2	replace
139	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[2][0];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  double[][]  jTj  =  new  double[2][0];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	double[][]  jTj  =  new  double[2][0];	  double[][]    jTj    =    new    double[rows][0];    	compilable	  [FE]  AssertionFailedError  	56	2	replace
140	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][1];  MultivariateVectorialFunction  jTj  =  function.getMultivariateVectorialFunction();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  double[][]  jTj  =  new  double[cols][1];  MultivariateVectorialFunction  jTj  =  function.getMultivariateVectorialFunction();  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	double[][]  jTj  =  new  double[cols][1];  MultivariateVectorialFunction  jTj  =  function.getMultivariateVectorialFunction();	  double[][]    jTj    =    new    double[cols][0];    MultivariateVectorialFunction    jTj    =    function.getMultivariateVectorialFunction();    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
141	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][0];  MultivariateVectorialFunction  function  =  function.getMultivariateVectorialFunction();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  double[][]  jTj  =  new  double[cols][0];  MultivariateVectorialFunction  function  =  function.getMultivariateVectorialFunction();  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	double[][]  jTj  =  new  double[cols][0];  MultivariateVectorialFunction  function  =  function.getMultivariateVectorialFunction();	  double[][]    jTj    =    new    double[cols][0];    MultivariateVectorialFunction    jTj    =    function.getMultivariateVectorialFunction();    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
142	[BUG]  [BUGGY]  int  rows  =  Math.min(cols,  0);  Integer  rows  =  Math.min(cols,  0);  [CE]  variable  rows  is  already  defined  in  method  getCovariances()  [FE]        AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  int  rows  =  Math.min(cols,  0);  Integer  rows  =  Math.min(cols,  0);  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	int  rows  =  Math.min(cols,  0);  Integer  rows  =  Math.min(cols,  0);	          int    rows    =    Math.min(cols,    cols);    Integer    rows    =    Math.min(cols,    cols);    	non-compiled	[CE]  variable  rows  is  already  defined  in  method  getCovariances()	61	None	replace
143	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][1];  for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  jTj  =  new  double[rows][1];  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  double[][]  jTj  =  new  double[rows][1];  for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  jTj  =  new  double[rows][1];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	double[][]    jTj    =    new    double[rows][1];    for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  jTj  =  new  double[rows][1];	  	non-compiled	[CE]  illegal  start  of  expression	23	None	add
144	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][1];  for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  jTj  =  new  double[rows][1];  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]      AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  double[][]  jTj  =  new  double[rows][1];  for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  jTj  =  new  double[rows][1];  }  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	double[][]    jTj    =    new    double[rows][1];    for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  jTj  =  new  double[rows][1];  }	  	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	23	None	add
145	[BUG]  [BUGGY]  int  rows  =  Math.min(cols,  0);  int  cols  =  Math.min(cols,  0);  [CE]  cannot  find  symbol  jTj  [FE]          AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  int  rows  =  Math.min(cols,  0);  int  cols  =  Math.min(cols,  0);  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	int  rows  =  Math.min(cols,  0);  int  cols  =  Math.min(cols,  0);	          int    rows    =    Math.min(cols,    cols);    int    cols    =    Math.min(cols,    cols);    	non-compiled	[CE]  cannot  find  symbol  jTj	62	None	replace
146	[BUG]  [BUGGY]  int  rows  =  Math.min(cols,  DEFAULT_MAX_ITERATIONS);  int  cols  =  Math.min(cols,  DEFAULT_MIN_ITERATIONS);  [CE]  cannot  find  symbol  DEFAULT_MIN_ITERATIONS  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  int  rows  =  Math.min(cols,  DEFAULT_MAX_ITERATIONS);  int  cols  =  Math.min(cols,  DEFAULT_MIN_ITERATIONS);  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	int  rows  =  Math.min(cols,  DEFAULT_MAX_ITERATIONS);  int  cols  =  Math.min(cols,  DEFAULT_MIN_ITERATIONS);	          int    rows    =    Math.min(cols,    cols);    int    cols    =    Math.min(cols,    cols);    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_MIN_ITERATIONS	62	None	replace
147	[BUG]  [BUGGY]  double[][]  rows  =  new  double[len][0];  [CE]  cannot  find  symbol  len  [FE]        AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  double[][]  rows  =  new  double[len][0];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	double[][]  rows  =  new  double[len][0];	  double[][]    rows    =    new    double[cols][0];    	non-compiled	[CE]  cannot  find  symbol  len	74	None	replace
148	[BUG]  [BUGGY]  double[][]  row  =  new  double[cols][cols  +  1];  [CE]  cannot  find  symbol  jTj  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  double[][]  row  =  new  double[cols][cols  +  1];  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	double[][]  row  =  new  double[cols][cols  +  1];	  double[][]    row    =    new    double[cols][cols];    	non-compiled	[CE]  cannot  find  symbol  jTj	76	None	replace
149	[BUG]  [BUGGY]  double[][]  row  =  new  double[cols][0];  [CE]  cannot  find  symbol  jTj  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  double[][]  row  =  new  double[cols][0];  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	double[][]  row  =  new  double[cols][0];	  double[][]    row    =    new    double[cols][cols];    	non-compiled	[CE]  cannot  find  symbol  jTj	76	None	replace
150	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][0];  for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  jTj  =  new  double[rows][0];  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  double[][]  jTj  =  new  double[rows][0];  for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  jTj  =  new  double[rows][0];  }  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	double[][]    jTj    =    new    double[rows][0];    for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  jTj  =  new  double[rows][0];  }	  	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	55	None	add
151	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][0];  for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  jTj  =  new  double[rows][0];  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  double[][]  jTj  =  new  double[rows][0];  for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  jTj  =  new  double[rows][0];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	double[][]    jTj    =    new    double[rows][0];    for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  jTj  =  new  double[rows][0];	  	non-compiled	[CE]  illegal  start  of  expression	55	None	add
152	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][0];  for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  jTj  =  new  double[rows][1];  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]        AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  double[][]  jTj  =  new  double[rows][0];  for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  jTj  =  new  double[rows][1];  }  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	double[][]    jTj    =    new    double[rows][0];    for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  jTj  =  new  double[rows][1];  }	  	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	55	None	add
153	[BUG]  [BUGGY]  int  rows  =  Math.min(cols,  cols  -  1  +  1);  [CE]  cannot  find  symbol  jTj  [FE]          AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  int  rows  =  Math.min(cols,  cols  -  1  +  1);  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	int  rows  =  Math.min(cols,  cols  -  1  +  1);	  int    rows    =    Math.min(cols,    cols    -    1);    	non-compiled	[CE]  cannot  find  symbol  jTj	27	None	replace
154	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols].multivariateVector();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  double[][]  jTj  =  new  double[cols][cols].multivariateVector();  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	double[][]  jTj  =  new  double[cols][cols].multivariateVector();	  double[][]    jTj    =    new    double[cols][cols].remainderValue();    	non-compiled	[CE]  cannot  find  symbol	70	None	replace
155	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols].varianceCheck();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  double[][]  jTj  =  new  double[cols][cols].varianceCheck();  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	double[][]  jTj  =  new  double[cols][cols].varianceCheck();	  double[][]    jTj    =    new    double[cols][cols].remainderValue();    	non-compiled	[CE]  cannot  find  symbol	70	None	replace
156	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols].multivariateVectorialFunction();  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  double[][]  jTj  =  new  double[cols][cols].multivariateVectorialFunction();  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	double[][]  jTj  =  new  double[cols][cols].multivariateVectorialFunction();	  double[][]    jTj    =    new    double[cols][cols].remainderValue();    	non-compiled	[CE]  cannot  find  symbol	70	None	replace
157	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols.length  +  1].doubleValue();  [CE]  int  cannot  be  dereferenced  [FE]                    AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  double[][]  jTj  =  new  double[cols][cols.length  +  1].doubleValue();  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	double[][]  jTj  =  new  double[cols][cols.length  +  1].doubleValue();	  double[][]    jTj    =    new    double[cols][cols.length].doubleValue();    	non-compiled	[CE]  int  cannot  be  dereferenced	66	None	replace
158	[BUG]  [BUGGY]  Double[][]  cols  =  new  double[cols][0];  [CE]  incompatible  types  [FE]        AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  Double[][]  cols  =  new  double[cols][0];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	Double[][]  cols  =  new  double[cols][0];	  double[][]    jTj    =    new    double[cols][0];    double[][]    cols    =    new    double[cols][0];    	non-compiled	[CE]  incompatible  types	68	None	replace
159	[BUG]  [BUGGY]  double[][]  rows  =  function.getColumns();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  double[][]  rows  =  function.getColumns();  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	double[][]  rows  =  function.getColumns();	  double[][]    rows    =    jF.getColumns();    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
160	[BUG]  [BUGGY]  int  rows  =  Math.min(cols,  DEFAULT_MAX_ITERATIONS);  [CE]  cannot  find  symbol  jTj  [FE]        AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  int  rows  =  Math.min(cols,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	int  rows  =  Math.min(cols,  DEFAULT_MAX_ITERATIONS);	          int    rows    =    Math.min(cols,    cols);    int    rows    =    Math.min(cols,    cols);    	non-compiled	[CE]  cannot  find  symbol  jTj	9	None	replace
161	[BUG]  [BUGGY]  InvalidMatrixFunction  ime  =  this.mF.getMatrixFunction();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  InvalidMatrixFunction  ime  =  this.mF.getMatrixFunction();  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	InvalidMatrixFunction  ime  =  this.mF.getMatrixFunction();	  InvalidMatrixFunction    ime    =    mF.getMatrixFunction();    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
162	[BUG]  [BUGGY]  double[][]  rows  =  new  double[rows][cols  +  1];  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  double[][]  rows  =  new  double[rows][cols  +  1];  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	double[][]  rows  =  new  double[rows][cols  +  1];	  double[][]    rows    =    new    double[rows][cols];    	non-compiled	[CE]  incompatible  types	75	None	replace
163	[BUG]  [BUGGY]  int  rows  =  Math.max(cols,  0);  [CE]  cannot  find  symbol  jTj  [FE]        AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  int  rows  =  Math.max(cols,  0);  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	int  rows  =  Math.max(cols,  0);	  int    rows    =    Math.max(cols,    cols);    	non-compiled	[CE]  cannot  find  symbol  jTj	60	None	replace
164	[BUG]  [BUGGY]  double[][]  cols  =  new  double[cols][cols  -  1].doubleValue();  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  double[][]  cols  =  new  double[cols][cols  -  1].doubleValue();  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	double[][]  cols  =  new  double[cols][cols  -  1].doubleValue();	  double[][]    cols    =    new    double[cols][cols].doubleValue();    	non-compiled	[CE]  incompatible  types	20	None	replace
165	[BUG]  [BUGGY]  double[][]  cols  =  new  double[1][cols];  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  double[][]  cols  =  new  double[1][cols];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	double[][]  cols  =  new  double[1][cols];	  double[][]    cols    =    new    double[rows][cols];    	non-compiled	[CE]  incompatible  types	30	None	replace
166	[BUG]  [BUGGY]  double[][]  cols  =  new  double[2][cols];  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  double[][]  cols  =  new  double[2][cols];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	double[][]  cols  =  new  double[2][cols];	  double[][]    cols    =    new    double[rows][cols];    	non-compiled	[CE]  incompatible  types	30	None	replace
167	[BUG]  [BUGGY]  double[][]  rows  =  new  double[cols][cols  -  3].doubleValue();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  double[][]  rows  =  new  double[cols][cols  -  3].doubleValue();  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	double[][]  rows  =  new  double[cols][cols  -  3].doubleValue();	  double[][]    rows    =    new    double[cols][cols    -    1].doubleValue();    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
168	[BUG]  [BUGGY]  int  rows  =  Math.min(cols,  cols  +  2);  [CE]  cannot  find  symbol  jTj  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  int  rows  =  Math.min(cols,  cols  +  2);  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	int  rows  =  Math.min(cols,  cols  +  2);	  int    rows    =    Math.min(cols,    cols    +    1);    	non-compiled	[CE]  cannot  find  symbol  jTj	29	None	replace
169	[BUG]  [BUGGY]  int  rows  =  Math.min(cols,  cols  +  1,  0);  [CE]  no  suitable  method  found  for  min(int,int,int)  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  int  rows  =  Math.min(cols,  cols  +  1,  0);  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	int  rows  =  Math.min(cols,  cols  +  1,  0);	  int    rows    =    Math.min(cols,    cols    +    1);    	non-compiled	[CE]  no  suitable  method  found  for  min(int,int,int)	29	None	replace
170	[BUG]  [BUGGY]  InvalidMatrixFunction  ime  =  this.f.getMatrixFunction();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  InvalidMatrixFunction  ime  =  this.f.getMatrixFunction();  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	InvalidMatrixFunction  ime  =  this.f.getMatrixFunction();	  InvalidMatrixFunction    ime    =    f.getMatrixFunction();    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
171	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][rows];  for(int  i  =  0;  i  <  rows;  ++i)  {  double[][]  jTj  =  new  double[cols][rows];  [CE]  illegal  start  of  expression  [FE]    OptimizationException    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  double[][]  jTj  =  new  double[cols][rows];  for(int  i  =  0;  i  <  rows;  ++i)  {  double[][]  jTj  =  new  double[cols][rows];  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	double[][]    jTj    =    new    double[cols][rows];    for(int  i  =  0;  i  <  rows;  ++i)  {  double[][]  jTj  =  new  double[cols][rows];	  	non-compiled	[CE]  illegal  start  of  expression	46	None	add
172	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][0];  for(int  i  =  0;  i  <  rows;  ++i)  {  double[][]  jTj  =  new  double[rows][0];  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  double[][]  jTj  =  new  double[rows][0];  for(int  i  =  0;  i  <  rows;  ++i)  {  double[][]  jTj  =  new  double[rows][0];  }  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	double[][]    jTj    =    new    double[rows][0];    for(int  i  =  0;  i  <  rows;  ++i)  {  double[][]  jTj  =  new  double[rows][0];  }	  	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	55	None	add
173	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][0];  for(int  i  =  0;  i  <  rows;  ++i)  {  double[][]  jTj  =  new  double[rows][0];  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  double[][]  jTj  =  new  double[rows][0];  for(int  i  =  0;  i  <  rows;  ++i)  {  double[][]  jTj  =  new  double[rows][0];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	double[][]    jTj    =    new    double[rows][0];    for(int  i  =  0;  i  <  rows;  ++i)  {  double[][]  jTj  =  new  double[rows][0];	  	non-compiled	[CE]  illegal  start  of  expression	55	None	add
174	[BUG]  [BUGGY]  double[][]  rows  =  new  double[rows][cols].remainder;  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  double[][]  rows  =  new  double[rows][cols].remainder;  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	double[][]  rows  =  new  double[rows][cols].remainder;	  double[][]    rows    =    new    double[rows][cols];    	non-compiled	[CE]  incompatible  types	75	None	replace
175	[BUG]  [BUGGY]  int  rows  =  Math.min(cols,  DEFAULT_MAX_ITERATIONS);  int  cols  =  Math.min(cols,  DEFAULT_COLUMNS);  [CE]  cannot  find  symbol  DEFAULT_COLUMNS  [FE]          AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  int  rows  =  Math.min(cols,  DEFAULT_MAX_ITERATIONS);  int  cols  =  Math.min(cols,  DEFAULT_COLUMNS);  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	int  rows  =  Math.min(cols,  DEFAULT_MAX_ITERATIONS);  int  cols  =  Math.min(cols,  DEFAULT_COLUMNS);	          int    rows    =    Math.min(cols,    cols);    int    cols    =    Math.min(cols,    cols);    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_COLUMNS	62	None	replace
176	[BUG]  [BUGGY]  int  rows  =  Math.min(cols,  2);  int  cols  =  Math.min(cols,  2);  [CE]  cannot  find  symbol  jTj  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  int  rows  =  Math.min(cols,  2);  int  cols  =  Math.min(cols,  2);  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	int  rows  =  Math.min(cols,  2);  int  cols  =  Math.min(cols,  2);	          int    rows    =    Math.min(cols,    cols);    int    cols    =    Math.min(cols,    cols);    	non-compiled	[CE]  cannot  find  symbol  jTj	62	None	replace
177	[BUG]  [BUGGY]  Double[][]  jTj  =  new  double[cols][0];  MultivariateVectorialFunction  jTj  =  function.getMultivariateVectorialFunction();  [CE]  incompatible  types  [FE]        AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  Double[][]  jTj  =  new  double[cols][0];  MultivariateVectorialFunction  jTj  =  function.getMultivariateVectorialFunction();  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	Double[][]  jTj  =  new  double[cols][0];  MultivariateVectorialFunction  jTj  =  function.getMultivariateVectorialFunction();	  double[][]    jTj    =    new    double[cols][0];    MultivariateVectorialFunction    jTj    =    function.getMultivariateVectorialFunction();    	non-compiled	[CE]  incompatible  types	65	None	replace
178	[BUG]  [BUGGY]  double[][]  cols  =  function.getMultivariateVectorialFunctions();  MultivariateVectorialFunction  jTj  =  new  MultivariateVectorialFunction[cols][0];  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  double[][]  cols  =  function.getMultivariateVectorialFunctions();  MultivariateVectorialFunction  jTj  =  new  MultivariateVectorialFunction[cols][0];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	double[][]  cols  =  function.getMultivariateVectorialFunctions();  MultivariateVectorialFunction  jTj  =  new  MultivariateVectorialFunction[cols][0];	  double[][]    jTj    =    new    double[cols][0];    MultivariateVectorialFunction    jTj    =    function.getMultivariateVectorialFunction();    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
179	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][1];  for(int  i  =  0;  i  <  rows;  ++i)  {  double[][]  jTj  =  new  double[rows][1];  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  double[][]  jTj  =  new  double[rows][1];  for(int  i  =  0;  i  <  rows;  ++i)  {  double[][]  jTj  =  new  double[rows][1];  }  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	double[][]    jTj    =    new    double[rows][1];    for(int  i  =  0;  i  <  rows;  ++i)  {  double[][]  jTj  =  new  double[rows][1];  }	  	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	23	None	add
180	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][1];  for(int  i  =  0;  i  <  rows;  ++i)  {  double[][]  jTj  =  new  double[rows][1];  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  double[][]  jTj  =  new  double[rows][1];  for(int  i  =  0;  i  <  rows;  ++i)  {  double[][]  jTj  =  new  double[rows][1];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	double[][]    jTj    =    new    double[rows][1];    for(int  i  =  0;  i  <  rows;  ++i)  {  double[][]  jTj  =  new  double[rows][1];	  	non-compiled	[CE]  illegal  start  of  expression	23	None	add
181	[BUG]  [BUGGY]  double[][]  rows  =  new  double[2][0];  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]        AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  double[][]  rows  =  new  double[2][0];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	double[][]  rows  =  new  double[2][0];	  double[][]    rows    =    new    double[cols][0];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	74	None	replace
182	[BUG]  [BUGGY]  int  rows  =  Math.min(cols,  3);  [CE]  cannot  find  symbol  jTj  [FE]        AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  int  rows  =  Math.min(cols,  3);  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	int  rows  =  Math.min(cols,  3);	  int    rows    =    Math.min(cols,    0);    	non-compiled	[CE]  cannot  find  symbol  jTj	67	None	replace
183	[BUG]  [BUGGY]  double[][]  rows  =  jf.getColumns();  [CE]  cannot  find  symbol  jf  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  double[][]  rows  =  jf.getColumns();  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	double[][]  rows  =  jf.getColumns();	  double[][]    rows    =    jf.getRows();    	non-compiled	[CE]  cannot  find  symbol  jf	45	None	replace
184	[BUG]  [BUGGY]  InvalidMatrixFunction  ime  =  _valueFunction.getMatrixFunction();  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  InvalidMatrixFunction  ime  =  _valueFunction.getMatrixFunction();  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	InvalidMatrixFunction  ime  =  _valueFunction.getMatrixFunction();	  InvalidMatrixFunction    ime    =    this.ime.getMatrixFunction();    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
185	[BUG]  [BUGGY]  InvalidMatrixFunction  ime  =  _valueFunctions.getMatrixFunction();  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  InvalidMatrixFunction  ime  =  _valueFunctions.getMatrixFunction();  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	InvalidMatrixFunction  ime  =  _valueFunctions.getMatrixFunction();	  InvalidMatrixFunction    ime    =    this.ime.getMatrixFunction();    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
186	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols].remainder;  [CE]  cannot  find  symbol  remainder  [FE]    OptimizationException    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  double[][]  jTj  =  new  double[cols][cols].remainder;  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	double[][]  jTj  =  new  double[cols][cols].remainder;	  double[][]    jTj    =    new    double[cols][rows];    	non-compiled	[CE]  cannot  find  symbol  remainder	47	None	replace
187	[BUG]  [BUGGY]  double[][]  rows  =  new  double[cols][cols  -  1,  cols.length].doubleValue();  [CE]  ']'  expected  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  double[][]  rows  =  new  double[cols][cols  -  1,  cols.length].doubleValue();  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	double[][]  rows  =  new  double[cols][cols  -  1,  cols.length].doubleValue();	  double[][]    rows    =    new    double[cols][cols    -    1].doubleValue();    	non-compiled	[CE]  ']'  expected	49	None	replace
188	[BUG]  [BUGGY]  double[][]  rows  =  new  double[cols][cols  -  1,  cols].doubleValue();  [CE]  ']'  expected  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  double[][]  rows  =  new  double[cols][cols  -  1,  cols].doubleValue();  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	double[][]  rows  =  new  double[cols][cols  -  1,  cols].doubleValue();	  double[][]    rows    =    new    double[cols][cols    -    1].doubleValue();    	non-compiled	[CE]  ']'  expected	49	None	replace
189	[BUG]  [BUGGY]  double[][]  rows  =  jf.getCols();  [CE]  cannot  find  symbol  jf  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  double[][]  rows  =  jf.getCols();  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	double[][]  rows  =  jf.getCols();	  double[][]    rows    =    jF.getCols();    	non-compiled	[CE]  cannot  find  symbol  jf	43	None	replace
190	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][rows];  for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  jTj  =  new  double[cols][rows];  System.arraycopy(jacobian,  0,  [CE]  '.class'  expected  [FE]    OptimizationException    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  double[][]  jTj  =  new  double[cols][rows];  for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  jTj  =  new  double[cols][rows];  System.arraycopy(jacobian,  0,  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	double[][]    jTj    =    new    double[cols][rows];    for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  jTj  =  new  double[cols][rows];  System.arraycopy(jacobian,  0,	  	non-compiled	[CE]  '.class'  expected	46	None	add
191	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[1];  [CE]  incompatible  types  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  double[][]  jTj  =  new  double[1];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	double[][]  jTj  =  new  double[1];	  double[][]    jTj    =    new    double[rows][0];    	non-compiled	[CE]  incompatible  types	56	None	replace
192	[BUG]  [BUGGY]  [FE]  OptimizationException  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  double[][]  jTj  =  new  double[cols][3];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	add	double[][]  jTj  =  new  double[cols][3];	  double[][]    jTj    =    new    double[cols][2];    double[][]    jTj    =    new    double[cols][3];    	compilable	  [FE]  OptimizationException  	38	1	replace
193	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][3];  [FE]  OptimizationException  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  double[][]  jTj  =  new  double[cols][3];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	double[][]  jTj  =  new  double[cols][3];	  double[][]    jTj    =    new    double[cols][2];    double[][]    jTj    =    new    double[cols][3];    	compilable	  [FE]  OptimizationException  	38	1	replace
194	[BUG]  [BUGGY]  double[][]  cols  =  new  double[rows][cols].doubleValue();  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  double[][]  cols  =  new  double[rows][cols].doubleValue();  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	double[][]  cols  =  new  double[rows][cols].doubleValue();	  double[][]    cols    =    new    double[cols][cols].doubleValue();    	non-compiled	[CE]  incompatible  types	20	None	replace
195	[BUG]  [BUGGY]  int  rows  =  Math.min(cols.length,  cols.length  +  2);  [CE]  int  cannot  be  dereferenced  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  int  rows  =  Math.min(cols.length,  cols.length  +  2);  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	int  rows  =  Math.min(cols.length,  cols.length  +  2);	  int    rows    =    Math.min(cols.length,    cols.length    +    1);    	non-compiled	[CE]  int  cannot  be  dereferenced	8	None	replace
196	[BUG]  [BUGGY]  Double[][]  cols  =  new  Double[cols][0];  [CE]  incompatible  types  [FE]        AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  Double[][]  cols  =  new  Double[cols][0];  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	Double[][]  cols  =  new  Double[cols][0];	  double[][]    jTj    =    new    double[cols][0];    double[][]    cols    =    new    double[cols][0];    	non-compiled	[CE]  incompatible  types	68	None	replace
197	[BUG]  [BUGGY]  double[][]  colsjTj  =  new  double[cols][cols].doubleValue();  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  double[][]  colsjTj  =  new  double[cols][cols].doubleValue();  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	double[][]  colsjTj  =  new  double[cols][cols].doubleValue();	  double[][]    colsJTj    =    new    double[cols][cols].doubleValue();    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
198	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[cols][cols].remainder();  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  double[][]  jTj  =  new  double[cols][cols].remainder();  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	double[][]  jTj  =  new  double[cols][cols].remainder();	  double[][]    jTj    =    new    double[cols][cols].value();    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
199	[BUG]  [BUGGY]  InvalidMatrixFunction  ime  =  _function.getMatrixFunction();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  InvalidMatrixFunction  ime  =  _function.getMatrixFunction();  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	InvalidMatrixFunction  ime  =  _function.getMatrixFunction();	  InvalidMatrixFunction    ime    =    function.getMatrixFunction();    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
200	[BUG]  [BUGGY]  int  rows  =  Math.max(0,  cols]);  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  int  rows  =  Math.max(0,  cols]);  [BUGGY]      double[][]  jTj  =  new  double[cols][cols];  for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	int  rows  =  Math.max(0,  cols]);	  int    rows    =    Math.max(0,    cols);    	non-compiled	[CE]  ')'  expected	28	None	replace
201	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][2];  for(int  i  =  0;  i  <  rows;  ++i)  {  double[][]  jTj  =  new  double[rows][2];  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  double[][]  jTj  =  new  double[rows][2];  for(int  i  =  0;  i  <  rows;  ++i)  {  double[][]  jTj  =  new  double[rows][2];  }  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	double[][]    jTj    =    new    double[rows][2];    for(int  i  =  0;  i  <  rows;  ++i)  {  double[][]  jTj  =  new  double[rows][2];  }	  	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	34	None	add
202	[BUG]  [BUGGY]  double[][]  jTj  =  new  double[rows][2];  for(int  i  =  0;  i  <  rows;  ++i)  {  double[][]  jTj  =  new  double[rows][1];  }  [CE]  variable  jTj  is  already  defined  in  method  getCovariances()  [FE]      AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  updateJacobian();        [BUGGY]  double[][]  jTj  =  new  double[rows][2];  for(int  i  =  0;  i  <  rows;  ++i)  {  double[][]  jTj  =  new  double[rows][1];  }  [BUGGY]      for  (int  i  =  0;  i  <  cols;  ++i)  {  for  (int  j  =  i;  j  <  cols;  ++j)  {  double  sum  =  0;  for  (int  k  =  0;  k  <  rows;  ++k)  {  sum  +=  jacobian[k][i]  *  jacobian[k][j];  }  jTj[i][j]  =  sum;  jTj[j][i]  =  sum;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  getCovariances  [RETURN_TYPE]  double[][]  [VARIABLES]  InvalidMatrixException  ime  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  RealMatrix  inverse  double  chiSquare  cost  criterion  factor  residual  sum  double[][]  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.7071067811865475	278	278	1	replace	double[][]    jTj    =    new    double[rows][2];    for(int  i  =  0;  i  <  rows;  ++i)  {  double[][]  jTj  =  new  double[rows][1];  }	  	non-compiled	[CE]  variable  jTj  is  already  defined  in  method  getCovariances()	34	None	add
