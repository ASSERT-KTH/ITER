bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {    [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  *(rows  -  i));  [BUGGY]    errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	add	errors[i]  =  Math.sqrt(getChiSquare()  *(rows  -  i));	      errors[i]    =    Math.sqrt(getChiSquare()    /(rows    -    i));    	compilable	  [FE]  AssertionFailedError  	11	1	replace
2	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  *(rows  -  i));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {    [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  *(rows  -  i));  [BUGGY]    errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(getChiSquare()  *(rows  -  i));	      errors[i]    =    Math.sqrt(getChiSquare()    /(rows    -    i));    	compilable	  [FE]  AssertionFailedError  	11	1	replace
3	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {    [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  /(cols  -  i));  [BUGGY]    errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	add	errors[i]  =  Math.sqrt(getChiSquare()  /(cols  -  i));	      errors[i]    =    Math.sqrt(getChiSquare()    /(rows    -    i));    	compilable	  [FE]  AssertionFailedError  	11	1	replace
4	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  /(cols  -  i));  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {    [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  /(cols  -  i));  [BUGGY]    errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(getChiSquare()  /(cols  -  i));	      errors[i]    =    Math.sqrt(getChiSquare()    /(rows    -    i));    	compilable	  [FE]  AssertionFailedError  	11	1	replace
5	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {    [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i)+  1);  [BUGGY]    errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	add	errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i)+  1);	      errors[i]    =    Math.sqrt(getChiSquare()    /(rows    -    i));    	compilable	  [FE]  AssertionFailedError  	11	1	replace
6	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i)+  1);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {    [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i)+  1);  [BUGGY]    errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i)+  1);	      errors[i]    =    Math.sqrt(getChiSquare()    /(rows    -    i));    	compilable	  [FE]  AssertionFailedError  	11	1	replace
7	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {    [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  *  i));  [BUGGY]    errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	add	errors[i]  =  Math.sqrt(getChiSquare()  /(rows  *  i));	      errors[i]    =    Math.sqrt(getChiSquare()    /(rows    -    i));    	compilable	  [FE]  AssertionFailedError  	11	1	replace
8	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  *  i));  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {    [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  *  i));  [BUGGY]    errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(getChiSquare()  /(rows  *  i));	      errors[i]    =    Math.sqrt(getChiSquare()    /(rows    -    i));    	compilable	  [FE]  AssertionFailedError  	11	1	replace
9	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  1]  *  c;  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {    [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  1]  *  c;  [BUGGY]    }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i]  /  1]  *  c;	  errors[i]    =    Math.sqrt(covar[i][i]    -    1]    *    c;    	non-compiled	[CE]  ')'  expected	15	None	replace
10	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  -  1]  *  jTj;  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {    [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  -  1]  *  jTj;  [BUGGY]    }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i]  -  1]  *  jTj;	  errors[i]    =    Math.sqrt(covar[i][i]    -    1]    *    c;    	non-compiled	[CE]  ')'  expected	15	None	replace
11	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  2]  *  c;  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {    [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  2]  *  c;  [BUGGY]    }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i]  /  2]  *  c;	  errors[i]    =    Math.sqrt(covar[i][i]    -    1]    *    c;    	non-compiled	[CE]  ')'  expected	15	None	replace
12	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {    [BUGGY]      errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i));  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i));  [BUGGY]    errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	add	        errors[i]    =    Math.sqrt(getChiSquare()    /(rows    -    i));    errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i));	  	compilable	  [FE]  AssertionFailedError  	10	1	add
13	[BUG]  [BUGGY]      errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i));  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {    [BUGGY]      errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i));  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i));  [BUGGY]    errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	        errors[i]    =    Math.sqrt(getChiSquare()    /(rows    -    i));    errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i));	  	compilable	  [FE]  AssertionFailedError  	10	1	add
14	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {    [BUGGY]      errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i));  errors[i]  =  Math.sqrt(getChiSquare()  /(cols  -  i));  [BUGGY]    errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	add	        errors[i]    =    Math.sqrt(getChiSquare()    /(rows    -    i));    errors[i]  =  Math.sqrt(getChiSquare()  /(cols  -  i));	  	compilable	  [FE]  AssertionFailedError  	10	1	add
15	[BUG]  [BUGGY]      errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i));  errors[i]  =  Math.sqrt(getChiSquare()  /(cols  -  i));  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {    [BUGGY]      errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i));  errors[i]  =  Math.sqrt(getChiSquare()  /(cols  -  i));  [BUGGY]    errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	        errors[i]    =    Math.sqrt(getChiSquare()    /(rows    -    i));    errors[i]  =  Math.sqrt(getChiSquare()  /(cols  -  i));	  	compilable	  [FE]  AssertionFailedError  	10	1	add
16	[BUG]  [BUGGY]      errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i));  mistakes[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i));  [CE]  cannot  find  symbol  mistakes  [FE]        AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {    [BUGGY]      errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i));  mistakes[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i));  [BUGGY]    errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	        errors[i]    =    Math.sqrt(getChiSquare()    /(rows    -    i));    mistakes[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i));	  	non-compiled	[CE]  cannot  find  symbol  mistakes	10	None	add
17	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {    [BUGGY]      errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i));  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  *  i));  [BUGGY]    errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	add	        errors[i]    =    Math.sqrt(getChiSquare()    /(rows    -    i));    errors[i]  =  Math.sqrt(getChiSquare()  /(rows  *  i));	  	compilable	  [FE]  AssertionFailedError  	10	1	add
18	[BUG]  [BUGGY]      errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i));  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  *  i));  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {    [BUGGY]      errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i));  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  *  i));  [BUGGY]    errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	        errors[i]    =    Math.sqrt(getChiSquare()    /(rows    -    i));    errors[i]  =  Math.sqrt(getChiSquare()  /(rows  *  i));	  	compilable	  [FE]  AssertionFailedError  	10	1	add
19	[BUG]  [BUGGY]  errors[i][i]  =  Math.sqrt(covar[i][i]  *  c);  [CE]  array  required,  but  double  found  [FE]        AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {    [BUGGY]  errors[i][i]  =  Math.sqrt(covar[i][i]  *  c);  [BUGGY]    errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i][i]  =  Math.sqrt(covar[i][i]  *  c);	      c    =    Math.sqrt(getChiSquare()    /(rows    -    i));    errors[i][i]    =    Math.sqrt(covar[i][i]    *    c);    	non-compiled	[CE]  array  required,  but  double  found	17	None	replace
20	[BUG]  [BUGGY]  errors[i][i]  =  Math.sqrt(covar[i][i]  *  jTj);  [CE]  array  required,  but  double  found  [FE]          AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {    [BUGGY]  errors[i][i]  =  Math.sqrt(covar[i][i]  *  jTj);  [BUGGY]    errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i][i]  =  Math.sqrt(covar[i][i]  *  jTj);	      c    =    Math.sqrt(getChiSquare()    /(rows    -    i));    errors[i][i]    =    Math.sqrt(covar[i][i]    *    c);    	non-compiled	[CE]  array  required,  but  double  found	17	None	replace
21	[BUG]  [BUGGY]  c  =  Math.sqrt(getChiSquare()  /(rows  -  i));  errors[i][i]  =  Math.sqrt(covar[i][i]  *  jTj);  [CE]  cannot  assign  a  value  to  final  variable  c  [FE]            AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {    [BUGGY]  c  =  Math.sqrt(getChiSquare()  /(rows  -  i));  errors[i][i]  =  Math.sqrt(covar[i][i]  *  jTj);  [BUGGY]    errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	c  =  Math.sqrt(getChiSquare()  /(rows  -  i));  errors[i][i]  =  Math.sqrt(covar[i][i]  *  jTj);	      c    =    Math.sqrt(getChiSquare()    /(rows    -    i));    errors[i][i]    =    Math.sqrt(covar[i][i]    *    c);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  c	17	None	replace
22	[BUG]  [BUGGY]  c  =  Math.sqrt(getChiSquare()  *(rows  -  i));  errors[i][i]  =  Math.sqrt(covar[i][i]  *  jTj);  [CE]  cannot  assign  a  value  to  final  variable  c  [FE]              AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {    [BUGGY]  c  =  Math.sqrt(getChiSquare()  *(rows  -  i));  errors[i][i]  =  Math.sqrt(covar[i][i]  *  jTj);  [BUGGY]    errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	c  =  Math.sqrt(getChiSquare()  *(rows  -  i));  errors[i][i]  =  Math.sqrt(covar[i][i]  *  jTj);	      c    =    Math.sqrt(getChiSquare()    /(rows    -    i));    errors[i][i]    =    Math.sqrt(covar[i][i]    *    c);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  c	17	None	replace
23	[BUG]  [BUGGY]  c  =  Math.sqrt(getChiSquare()  /(cols  -  i));  [CE]  cannot  assign  a  value  to  final  variable  c  [FE]          AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {    [BUGGY]  c  =  Math.sqrt(getChiSquare()  /(cols  -  i));  [BUGGY]    errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	c  =  Math.sqrt(getChiSquare()  /(cols  -  i));	      c    =    Math.sqrt(getChiSquare()    /(rows    -    i));    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  c	12	None	replace
24	[BUG]  [BUGGY]  c  =  Math.sqrt(getChiSquare()  /(rows  *  i));  [CE]  cannot  assign  a  value  to  final  variable  c  [FE]            AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {    [BUGGY]  c  =  Math.sqrt(getChiSquare()  /(rows  *  i));  [BUGGY]    errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	c  =  Math.sqrt(getChiSquare()  /(rows  *  i));	      c    =    Math.sqrt(getChiSquare()    /(rows    -    i));    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  c	12	None	replace
25	[BUG]  [BUGGY]  c  =  Math.sqrt(getChiSquare()  /(rows  -  i));  errors[i]  =  Math.sqrt(covar[i][i])*  jTj;  [CE]  cannot  assign  a  value  to  final  variable  c  [FE]            AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {    [BUGGY]  c  =  Math.sqrt(getChiSquare()  /(rows  -  i));  errors[i]  =  Math.sqrt(covar[i][i])*  jTj;  [BUGGY]    errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	c  =  Math.sqrt(getChiSquare()  /(rows  -  i));  errors[i]  =  Math.sqrt(covar[i][i])*  jTj;	      c    =    Math.sqrt(getChiSquare()    /(rows    -    i));    errors[i]    =    Math.sqrt(covar[i][i])*    c;    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  c	13	None	replace
26	[BUG]  [BUGGY]  c  =  Math.sqrt(getChiSquare()  *(rows  -  i));  errors[i]  =  Math.sqrt(covar[i][i])*  c;  [CE]  cannot  assign  a  value  to  final  variable  c  [FE]              AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {    [BUGGY]  c  =  Math.sqrt(getChiSquare()  *(rows  -  i));  errors[i]  =  Math.sqrt(covar[i][i])*  c;  [BUGGY]    errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	c  =  Math.sqrt(getChiSquare()  *(rows  -  i));  errors[i]  =  Math.sqrt(covar[i][i])*  c;	      c    =    Math.sqrt(getChiSquare()    /(rows    -    i));    errors[i]    =    Math.sqrt(covar[i][i])*    c;    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  c	13	None	replace
27	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i])*  jTj;  [CE]  cannot  find  symbol  jTj  [FE]                AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {    [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i])*  jTj;  [BUGGY]    errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i])*  jTj;	      c    =    Math.sqrt(getChiSquare()    /(rows    -    i));    errors[i]    =    Math.sqrt(covar[i][i])*    c;    	non-compiled	[CE]  cannot  find  symbol  jTj	13	None	replace
28	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  cost)*  c;  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {    [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  cost)*  c;  [BUGGY]    }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i],  cost)*  c;	  errors[i]    =    Math.sqrt(covar[i][i],    c)*    c;    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	20	None	replace
29	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  c,  cost)*  c;  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {    [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  c,  cost)*  c;  [BUGGY]    }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i],  c,  cost)*  c;	  errors[i]    =    Math.sqrt(covar[i][i],    c)*    c;    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	20	None	replace
30	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  c),  cost,  c;  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {    [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  c),  cost,  c;  [BUGGY]    }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i],  c),  cost,  c;	  errors[i]    =    Math.sqrt(covar[i][i],    c)*    c;    	non-compiled	[CE]  ';'  expected	20	None	replace
31	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  c),  cost,  c);  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {    [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  c),  cost,  c);  [BUGGY]    }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i],  c),  cost,  c);	  errors[i]    =    Math.sqrt(covar[i][i],    c)*    c;    	non-compiled	[CE]  ';'  expected	20	None	replace
32	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  c]);  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {    [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  c]);  [BUGGY]    }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i]  /  c]);	  errors[i]    =    Math.sqrt(covar[i][i]    +    c]);    	non-compiled	[CE]  ')'  expected	21	None	replace
33	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  *  c]);  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {    [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  *  c]);  [BUGGY]    }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i]  *  c]);	  errors[i]    =    Math.sqrt(covar[i][i]    +    c]);    	non-compiled	[CE]  ')'  expected	21	None	replace
34	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  -  c]);  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {    [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  -  c]);  [BUGGY]    }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i]  -  c]);	  errors[i]    =    Math.sqrt(covar[i][i]    +    c]);    	non-compiled	[CE]  ')'  expected	21	None	replace
35	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  +  c],  cost);  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {    [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  +  c],  cost);  [BUGGY]    }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i]  +  c],  cost);	  errors[i]    =    Math.sqrt(covar[i][i]    +    c]);    	non-compiled	[CE]  ')'  expected	21	None	replace
36	[BUG]  [BUGGY]  c  =  Math.sqrt(getChiSquare()  /(rows  -  i));  errors[i]  =  Math.sqrt(covar[i][i]  *  jTj);  [CE]  cannot  assign  a  value  to  final  variable  c  [FE]              AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {    [BUGGY]  c  =  Math.sqrt(getChiSquare()  /(rows  -  i));  errors[i]  =  Math.sqrt(covar[i][i]  *  jTj);  [BUGGY]    errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	c  =  Math.sqrt(getChiSquare()  /(rows  -  i));  errors[i]  =  Math.sqrt(covar[i][i]  *  jTj);	      c    =    Math.sqrt(getChiSquare()    /(rows    -    i));    errors[i]    =    Math.sqrt(covar[i][i]    *    c);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  c	14	None	replace
37	[BUG]  [BUGGY]  c  =  Math.sqrt(getChiSquare()  /(rows  -  i)+  1);  errors[i]  =  Math.sqrt(covar[i][i]  *  jTj);  [CE]  cannot  assign  a  value  to  final  variable  c  [FE]                AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {    [BUGGY]  c  =  Math.sqrt(getChiSquare()  /(rows  -  i)+  1);  errors[i]  =  Math.sqrt(covar[i][i]  *  jTj);  [BUGGY]    errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	c  =  Math.sqrt(getChiSquare()  /(rows  -  i)+  1);  errors[i]  =  Math.sqrt(covar[i][i]  *  jTj);	      c    =    Math.sqrt(getChiSquare()    /(rows    -    i));    errors[i]    =    Math.sqrt(covar[i][i]    *    c);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  c	14	None	replace
38	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {    [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  *  cost);  [BUGGY]    }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	add	errors[i]  =  Math.sqrt(covar[i][i]  *  cost);	  errors[i]    =    Math.sqrt(covar[i][i]    *    jTj);    	compilable	  [FE]  AssertionFailedError  	5	1	replace
39	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  *  cost);  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {    [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  *  cost);  [BUGGY]    }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i]  *  cost);	  errors[i]    =    Math.sqrt(covar[i][i]    *    jTj);    	compilable	  [FE]  AssertionFailedError  	5	1	replace
40	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  *  price);  [CE]  cannot  find  symbol  price  [FE]              AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {    [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  *  price);  [BUGGY]    }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i]  *  price);	  errors[i]    =    Math.sqrt(covar[i][i]    *    jTj);    	non-compiled	[CE]  cannot  find  symbol  price	5	None	replace
41	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  *  jF);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {    [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  *  jF);  [BUGGY]    }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i]  *  jF);	  errors[i]    =    Math.sqrt(covar[i][i]    *    jTj);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	5	None	replace
42	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  /(rows  -  i));  errors[i]  =  Math.sqrt(covar[i][i]  *  c);  [CE]  variable  c  is  already  defined  in  method  guessParametersErrors()  [FE]          AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {    [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  /(rows  -  i));  errors[i]  =  Math.sqrt(covar[i][i]  *  c);  [BUGGY]    errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	final  double  c  =  Math.sqrt(getChiSquare()  /(rows  -  i));  errors[i]  =  Math.sqrt(covar[i][i]  *  c);	      double    c    =    Math.sqrt(getChiSquare()    /(rows    -    i));    errors[i]    =    Math.sqrt(covar[i][i]    *    c);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  guessParametersErrors()	18	None	replace
43	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {    [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  c);  errors[i]  =  Math.sqrt(covar[i][i]  /  c);  [BUGGY]    }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	add	errors[i]    =    Math.sqrt(covar[i][i]    /    c);    errors[i]  =  Math.sqrt(covar[i][i]  /  c);	  	compilable	  [FE]  AssertionFailedError  	3	1	add
44	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  c);  errors[i]  =  Math.sqrt(covar[i][i]  /  c);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {    [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  c);  errors[i]  =  Math.sqrt(covar[i][i]  /  c);  [BUGGY]    }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]    =    Math.sqrt(covar[i][i]    /    c);    errors[i]  =  Math.sqrt(covar[i][i]  /  c);	  	compilable	  [FE]  AssertionFailedError  	3	1	add
45	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  c);  mistakes[i]  =  Math.sqrt(covar[i][i]  /  c);  [CE]  cannot  find  symbol  mistakes  [FE]      AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {    [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  c);  mistakes[i]  =  Math.sqrt(covar[i][i]  /  c);  [BUGGY]    }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]    =    Math.sqrt(covar[i][i]    /    c);    mistakes[i]  =  Math.sqrt(covar[i][i]  /  c);	  	non-compiled	[CE]  cannot  find  symbol  mistakes	3	None	add
46	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  c);  errors[i]  =  Math.sqrt(covar[i][i]  /  c));  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {    [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  c);  errors[i]  =  Math.sqrt(covar[i][i]  /  c));  [BUGGY]    }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]    =    Math.sqrt(covar[i][i]    /    c);    errors[i]  =  Math.sqrt(covar[i][i]  /  c));	  	non-compiled	[CE]  ';'  expected	3	None	add
47	[BUG]  [BUGGY]  double  c  =  Math.sqrt(getChiSquare()  *(rows  -  i));  [CE]  variable  c  is  already  defined  in  method  guessParametersErrors()  [FE]        AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {    [BUGGY]  double  c  =  Math.sqrt(getChiSquare()  *(rows  -  i));  [BUGGY]    errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	double  c  =  Math.sqrt(getChiSquare()  *(rows  -  i));	      double    c    =    Math.sqrt(getChiSquare()    /(rows    -    i));    	non-compiled	[CE]  variable  c  is  already  defined  in  method  guessParametersErrors()	16	None	replace
48	[BUG]  [BUGGY]  double  c  =  Math.sqrt(getChiSquare()  /(cols  -  i));  [CE]  variable  c  is  already  defined  in  method  guessParametersErrors()  [FE]          AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {    [BUGGY]  double  c  =  Math.sqrt(getChiSquare()  /(cols  -  i));  [BUGGY]    errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	double  c  =  Math.sqrt(getChiSquare()  /(cols  -  i));	      double    c    =    Math.sqrt(getChiSquare()    /(rows    -    i));    	non-compiled	[CE]  variable  c  is  already  defined  in  method  guessParametersErrors()	16	None	replace
49	[BUG]  [BUGGY]  double  c  =  Math.sqrt(getChiSquare()  /(rows  *  i));  [CE]  variable  c  is  already  defined  in  method  guessParametersErrors()  [FE]            AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {    [BUGGY]  double  c  =  Math.sqrt(getChiSquare()  /(rows  *  i));  [BUGGY]    errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	double  c  =  Math.sqrt(getChiSquare()  /(rows  *  i));	      double    c    =    Math.sqrt(getChiSquare()    /(rows    -    i));    	non-compiled	[CE]  variable  c  is  already  defined  in  method  guessParametersErrors()	16	None	replace
50	[BUG]  [BUGGY]  errors[i]  =  covar[i].doubleValue();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {    [BUGGY]  errors[i]  =  covar[i].doubleValue();  [BUGGY]    }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  covar[i].doubleValue();	      	non-compiled	[CE]  cannot  find  symbol	9	None	replace
51	[BUG]  [BUGGY]  errors[i][i]  =  covar[i].doubleValue();  [CE]  array  required,  but  double  found  [FE]      AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {    [BUGGY]  errors[i][i]  =  covar[i].doubleValue();  [BUGGY]    }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i][i]  =  covar[i].doubleValue();	      	non-compiled	[CE]  array  required,  but  double  found	9	None	replace
52	[BUG]  [BUGGY]  errors[i]  =  covar[i];  [CE]  incompatible  types  [FE]        AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {    [BUGGY]  errors[i]  =  covar[i];  [BUGGY]    }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  covar[i];	      	non-compiled	[CE]  incompatible  types	9	None	replace
53	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {    [BUGGY]  errors[i]  =  c;  [BUGGY]    }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	add	errors[i]  =  c;	      	compilable	  [FE]  AssertionFailedError  	9	1	replace
54	[BUG]  [BUGGY]  errors[i]  =  c;  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {    [BUGGY]  errors[i]  =  c;  [BUGGY]    }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  c;	      	compilable	  [FE]  AssertionFailedError  	9	1	replace
55	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {    [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i])/  2;  [BUGGY]    }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	add	errors[i]  =  Math.sqrt(covar[i][i])/  2;	  errors[i]    =    Math.sqrt(covar[i][i])/    c;    	compilable	  [FE]  AssertionFailedError  	2	1	replace
56	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i])/  2;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {    [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i])/  2;  [BUGGY]    }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i])/  2;	  errors[i]    =    Math.sqrt(covar[i][i])/    c;    	compilable	  [FE]  AssertionFailedError  	2	1	replace
57	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {    [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i])/  3;  [BUGGY]    }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	add	errors[i]  =  Math.sqrt(covar[i][i])/  3;	  errors[i]    =    Math.sqrt(covar[i][i])/    c;    	compilable	  [FE]  AssertionFailedError  	2	1	replace
58	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i])/  3;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {    [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i])/  3;  [BUGGY]    }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i])/  3;	  errors[i]    =    Math.sqrt(covar[i][i])/    c;    	compilable	  [FE]  AssertionFailedError  	2	1	replace
59	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {    [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i])/  c  +  1;  [BUGGY]    }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	add	errors[i]  =  Math.sqrt(covar[i][i])/  c  +  1;	  errors[i]    =    Math.sqrt(covar[i][i])/    c;    	compilable	  [FE]  AssertionFailedError  	2	1	replace
60	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i])/  c  +  1;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {    [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i])/  c  +  1;  [BUGGY]    }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i])/  c  +  1;	  errors[i]    =    Math.sqrt(covar[i][i])/    c;    	compilable	  [FE]  AssertionFailedError  	2	1	replace
61	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {    [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  *  c);  errors[i]  =  Math.sqrt(covar[i][i]  *  c);  [BUGGY]    }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	add	errors[i]    =    Math.sqrt(covar[i][i]    *    c);    errors[i]  =  Math.sqrt(covar[i][i]  *  c);	  	compilable	  [FE]  AssertionFailedError  	6	1	add
62	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  *  c);  errors[i]  =  Math.sqrt(covar[i][i]  *  c);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {    [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  *  c);  errors[i]  =  Math.sqrt(covar[i][i]  *  c);  [BUGGY]    }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]    =    Math.sqrt(covar[i][i]    *    c);    errors[i]  =  Math.sqrt(covar[i][i]  *  c);	  	compilable	  [FE]  AssertionFailedError  	6	1	add
63	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  *  c);  mistakes[i]  =  Math.sqrt(covar[i][i]  *  c);  [CE]  cannot  find  symbol  mistakes  [FE]      AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {    [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  *  c);  mistakes[i]  =  Math.sqrt(covar[i][i]  *  c);  [BUGGY]    }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]    =    Math.sqrt(covar[i][i]    *    c);    mistakes[i]  =  Math.sqrt(covar[i][i]  *  c);	  	non-compiled	[CE]  cannot  find  symbol  mistakes	6	None	add
64	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  *  c);  errors[i]  =  Math.sqrt(covar[i][i]  *  c));  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {    [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  *  c);  errors[i]  =  Math.sqrt(covar[i][i]  *  c));  [BUGGY]    }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]    =    Math.sqrt(covar[i][i]    *    c);    errors[i]  =  Math.sqrt(covar[i][i]  *  c));	  	non-compiled	[CE]  ';'  expected	6	None	add
65	[BUG]  [BUGGY]  c  =  Math.sqrt(getChiSquare()  *(cols  -  i));  [CE]  cannot  assign  a  value  to  final  variable  c  [FE]            AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {    [BUGGY]  c  =  Math.sqrt(getChiSquare()  *(cols  -  i));  [BUGGY]    errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	c  =  Math.sqrt(getChiSquare()  *(cols  -  i));	      c    =    Math.sqrt(getChiSquare()    *(rows    -    i));    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  c	19	None	replace
66	[BUG]  [BUGGY]  c  =  Math.sqrt(getChiSquare()  *(rows[i]  -  i));  [CE]  cannot  assign  a  value  to  final  variable  c  [FE]              AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {    [BUGGY]  c  =  Math.sqrt(getChiSquare()  *(rows[i]  -  i));  [BUGGY]    errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	c  =  Math.sqrt(getChiSquare()  *(rows[i]  -  i));	      c    =    Math.sqrt(getChiSquare()    *(rows    -    i));    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  c	19	None	replace
67	[BUG]  [BUGGY]  c  =  Math.sqrt(getChiSquare()  *(i  +  1));  [CE]  cannot  assign  a  value  to  final  variable  c  [FE]                AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {    [BUGGY]  c  =  Math.sqrt(getChiSquare()  *(i  +  1));  [BUGGY]    errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	c  =  Math.sqrt(getChiSquare()  *(i  +  1));	      c    =    Math.sqrt(getChiSquare()    *(rows    -    i));    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  c	19	None	replace
68	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {    [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i])/  c;  errors[i]  =  Math.sqrt(covar[i][i])/  c;  [BUGGY]    }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	add	errors[i]    =    Math.sqrt(covar[i][i])/    c;    errors[i]  =  Math.sqrt(covar[i][i])/  c;	  	compilable	  [FE]  AssertionFailedError  	1	1	add
69	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i])/  c;  errors[i]  =  Math.sqrt(covar[i][i])/  c;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {    [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i])/  c;  errors[i]  =  Math.sqrt(covar[i][i])/  c;  [BUGGY]    }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]    =    Math.sqrt(covar[i][i])/    c;    errors[i]  =  Math.sqrt(covar[i][i])/  c;	  	compilable	  [FE]  AssertionFailedError  	1	1	add
70	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i])/  c;  errors[i]  =  Math.sqrt(covar[i][i])/  c);  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {    [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i])/  c;  errors[i]  =  Math.sqrt(covar[i][i])/  c);  [BUGGY]    }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]    =    Math.sqrt(covar[i][i])/    c;    errors[i]  =  Math.sqrt(covar[i][i])/  c);	  	non-compiled	[CE]  ';'  expected	1	None	add
71	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i])/  c;  mistakes[i]  =  Math.sqrt(covar[i][i])/  c;  [CE]  cannot  find  symbol  mistakes  [FE]        AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {    [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i])/  c;  mistakes[i]  =  Math.sqrt(covar[i][i])/  c;  [BUGGY]    }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]    =    Math.sqrt(covar[i][i])/    c;    mistakes[i]  =  Math.sqrt(covar[i][i])/  c;	  	non-compiled	[CE]  cannot  find  symbol  mistakes	1	None	add
72	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {    [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  2);  [BUGGY]    }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	add	errors[i]  =  Math.sqrt(covar[i][i]  /  2);	  errors[i]    =    Math.sqrt(covar[i][i]    /    c);    	compilable	  [FE]  AssertionFailedError  	4	1	replace
73	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  2);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {    [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  2);  [BUGGY]    }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i]  /  2);	  errors[i]    =    Math.sqrt(covar[i][i]    /    c);    	compilable	  [FE]  AssertionFailedError  	4	1	replace
74	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  c,  cost);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]      AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {    [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  c,  cost);  [BUGGY]    }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i]  /  c,  cost);	  errors[i]    =    Math.sqrt(covar[i][i]    /    c);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	4	None	replace
75	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {    [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  3);  [BUGGY]    }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	add	errors[i]  =  Math.sqrt(covar[i][i]  /  3);	  errors[i]    =    Math.sqrt(covar[i][i]    /    c);    	compilable	  [FE]  AssertionFailedError  	4	1	replace
76	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  3);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {    [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  3);  [BUGGY]    }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i]  /  3);	  errors[i]    =    Math.sqrt(covar[i][i]    /    c);    	compilable	  [FE]  AssertionFailedError  	4	1	replace
77	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  *  c,  cost);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {    [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  *  c,  cost);  [BUGGY]    }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i]  *  c,  cost);	  errors[i]    =    Math.sqrt(covar[i][i]    *    c);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	7	None	replace
78	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  *  c,  errorCount);  [CE]  cannot  find  symbol  errorCount  [FE]      AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {    [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  *  c,  errorCount);  [BUGGY]    }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i]  *  c,  errorCount);	  errors[i]    =    Math.sqrt(covar[i][i]    *    c);    	non-compiled	[CE]  cannot  find  symbol  errorCount	7	None	replace
79	[BUG]  [BUGGY]      errors[i][i]  =  covar[i][0];  [CE]  array  required,  but  double  found  [FE]    AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {    [BUGGY]      errors[i][i]  =  covar[i][0];  [BUGGY]    }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	        errors[i][i]  =  covar[i][0];	  	non-compiled	[CE]  array  required,  but  double  found	8	None	add
80	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  cost  +  c]);  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {    [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  cost  +  c]);  [BUGGY]    }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i],  cost  +  c]);	  errors[i]    =    Math.sqrt(covar[i][i]    +    c]);    	non-compiled	[CE]  ')'  expected	21	None	replace
81	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  c  +  1]);  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {    [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  c  +  1]);  [BUGGY]    }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i],  c  +  1]);	  errors[i]    =    Math.sqrt(covar[i][i]    +    c]);    	non-compiled	[CE]  ')'  expected	21	None	replace
82	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {    [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i)*  c);  [BUGGY]    errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	add	errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i)*  c);	      errors[i]    =    Math.sqrt(getChiSquare()    /(rows    -    i));    	compilable	  [FE]  AssertionFailedError  	11	1	replace
83	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i)*  c);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {    [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i)*  c);  [BUGGY]    errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i)*  c);	      errors[i]    =    Math.sqrt(getChiSquare()    /(rows    -    i));    	compilable	  [FE]  AssertionFailedError  	11	1	replace
84	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i])/  c;  i]  =  Math.sqrt(covar[i][i])/  c;  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {    [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i])/  c;  i]  =  Math.sqrt(covar[i][i])/  c;  [BUGGY]    }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]    =    Math.sqrt(covar[i][i])/    c;    i]  =  Math.sqrt(covar[i][i])/  c;	  	non-compiled	[CE]  not  a  statement	1	None	add
85	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i])/  c;  c  =  Math.sqrt(covar[i][i])/  c;  [CE]  cannot  assign  a  value  to  final  variable  c  [FE]      AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {    [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i])/  c;  c  =  Math.sqrt(covar[i][i])/  c;  [BUGGY]    }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]    =    Math.sqrt(covar[i][i])/    c;    c  =  Math.sqrt(covar[i][i])/  c;	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  c	1	None	add
86	[BUG]  [BUGGY]  double  c  =  Math.sqrt(getChiSquare()  *(rows  -  i));  errors[i]  =  Math.sqrt(covar[i][i]  *  jTj);  [CE]  variable  c  is  already  defined  in  method  guessParametersErrors()  [FE]          AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {    [BUGGY]  double  c  =  Math.sqrt(getChiSquare()  *(rows  -  i));  errors[i]  =  Math.sqrt(covar[i][i]  *  jTj);  [BUGGY]    errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	double  c  =  Math.sqrt(getChiSquare()  *(rows  -  i));  errors[i]  =  Math.sqrt(covar[i][i]  *  jTj);	      double    c    =    Math.sqrt(getChiSquare()    /(rows    -    i));    errors[i]    =    Math.sqrt(covar[i][i]    *    c);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  guessParametersErrors()	18	None	replace
87	[BUG]  [BUGGY]  double  c  =  Math.sqrt(getChiSquare()  /(rows  -  i));  errors[i]  =  Math.sqrt(covar[i][i]  *  jTj);  [CE]  variable  c  is  already  defined  in  method  guessParametersErrors()  [FE]            AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {    [BUGGY]  double  c  =  Math.sqrt(getChiSquare()  /(rows  -  i));  errors[i]  =  Math.sqrt(covar[i][i]  *  jTj);  [BUGGY]    errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	double  c  =  Math.sqrt(getChiSquare()  /(rows  -  i));  errors[i]  =  Math.sqrt(covar[i][i]  *  jTj);	      double    c    =    Math.sqrt(getChiSquare()    /(rows    -    i));    errors[i]    =    Math.sqrt(covar[i][i]    *    c);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  guessParametersErrors()	18	None	replace
88	[BUG]  [BUGGY]  double  c  =  Math.sqrt(getChiSquare()  /(rows  -  i)+  1);  [CE]  variable  c  is  already  defined  in  method  guessParametersErrors()  [FE]        AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {    [BUGGY]  double  c  =  Math.sqrt(getChiSquare()  /(rows  -  i)+  1);  [BUGGY]    errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	double  c  =  Math.sqrt(getChiSquare()  /(rows  -  i)+  1);	      double    c    =    Math.sqrt(getChiSquare()    /(rows    -    i));    	non-compiled	[CE]  variable  c  is  already  defined  in  method  guessParametersErrors()	16	None	replace
89	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {    [BUGGY]      errors[i]  =  covar[i][0];  [BUGGY]    }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	add	        errors[i]  =  covar[i][0];	  	compilable	  [FE]  AssertionFailedError  	8	1	add
90	[BUG]  [BUGGY]      errors[i]  =  covar[i][0];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {    [BUGGY]      errors[i]  =  covar[i][0];  [BUGGY]    }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	        errors[i]  =  covar[i][0];	  	compilable	  [FE]  AssertionFailedError  	8	1	add
91	[BUG]  [BUGGY]      errors[i]  =  covar[i][c];  [CE]  possible  loss  of  precision  [FE]      AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {    [BUGGY]      errors[i]  =  covar[i][c];  [BUGGY]    }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	        errors[i]  =  covar[i][c];	  	non-compiled	[CE]  possible  loss  of  precision	8	None	add
92	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {    [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  c  +  1);  [BUGGY]    }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	add	errors[i]  =  Math.sqrt(covar[i][i]  /  c  +  1);	  errors[i]    =    Math.sqrt(covar[i][i]    /    c);    	compilable	  [FE]  AssertionFailedError  	4	1	replace
93	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  c  +  1);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {    [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  c  +  1);  [BUGGY]    }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i]  /  c  +  1);	  errors[i]    =    Math.sqrt(covar[i][i]    /    c);    	compilable	  [FE]  AssertionFailedError  	4	1	replace
94	[BUG]  [BUGGY]  c  =  Math.sqrt(getChiSquare()  *(covars  -  i));  [CE]  cannot  assign  a  value  to  final  variable  c  [FE]            AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {    [BUGGY]  c  =  Math.sqrt(getChiSquare()  *(covars  -  i));  [BUGGY]    errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	c  =  Math.sqrt(getChiSquare()  *(covars  -  i));	      c    =    Math.sqrt(getChiSquare()    *(rows    -    i));    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  c	19	None	replace
95	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  c);  i]  =  Math.sqrt(covar[i][i]  /  c);  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {    [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  c);  i]  =  Math.sqrt(covar[i][i]  /  c);  [BUGGY]    }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]    =    Math.sqrt(covar[i][i]    /    c);    i]  =  Math.sqrt(covar[i][i]  /  c);	  	non-compiled	[CE]  not  a  statement	3	None	add
96	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  c);  int  i]  =  Math.sqrt(covar[i][i]  /  c);  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {    [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  c);  int  i]  =  Math.sqrt(covar[i][i]  /  c);  [BUGGY]    }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]    =    Math.sqrt(covar[i][i]    /    c);    int  i]  =  Math.sqrt(covar[i][i]  /  c);	  	non-compiled	[CE]  ';'  expected	3	None	add
97	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {    [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  c);  errors[i]  =  Math.sqrt(covar[i][i]  *  c);  [BUGGY]    }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	add	errors[i]    =    Math.sqrt(covar[i][i]    /    c);    errors[i]  =  Math.sqrt(covar[i][i]  *  c);	  	compilable	  [FE]  AssertionFailedError  	3	1	add
98	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  c);  errors[i]  =  Math.sqrt(covar[i][i]  *  c);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {    [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  c);  errors[i]  =  Math.sqrt(covar[i][i]  *  c);  [BUGGY]    }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]    =    Math.sqrt(covar[i][i]    /    c);    errors[i]  =  Math.sqrt(covar[i][i]  *  c);	  	compilable	  [FE]  AssertionFailedError  	3	1	add
99	[BUG]  [BUGGY]  c  =  Math.sqrt(getChiSquare()  /(rows  -  i)+  1);  [CE]  cannot  assign  a  value  to  final  variable  c  [FE]          AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {    [BUGGY]  c  =  Math.sqrt(getChiSquare()  /(rows  -  i)+  1);  [BUGGY]    errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	c  =  Math.sqrt(getChiSquare()  /(rows  -  i)+  1);	      c    =    Math.sqrt(getChiSquare()    /(rows    -    i));    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  c	12	None	replace
100	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  c);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {    [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  c);  [BUGGY]    }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i],  c);	  errors[i]    =    Math.sqrt(covar[i][i]    *    c);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	7	None	replace
101	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  c  *  jTj);  [CE]  cannot  find  symbol  jTj  [FE]      AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {    [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  c  *  jTj);  [BUGGY]    }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i],  c  *  jTj);	  errors[i]    =    Math.sqrt(covar[i][i]    *    c);    	non-compiled	[CE]  cannot  find  symbol  jTj	7	None	replace
102	[BUG]  [BUGGY]  c  =  Math.sqrt(getChiSquare()  /(rows  -  i)+  1);  errors[i]  =  Math.sqrt(covar[i][i])*  c;  [CE]  cannot  assign  a  value  to  final  variable  c  [FE]            AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {    [BUGGY]  c  =  Math.sqrt(getChiSquare()  /(rows  -  i)+  1);  errors[i]  =  Math.sqrt(covar[i][i])*  c;  [BUGGY]    errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	c  =  Math.sqrt(getChiSquare()  /(rows  -  i)+  1);  errors[i]  =  Math.sqrt(covar[i][i])*  c;	      c    =    Math.sqrt(getChiSquare()    /(rows    -    i));    errors[i]    =    Math.sqrt(covar[i][i])*    c;    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  c	13	None	replace
103	[BUG]  [BUGGY]      errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i));  i]  =  Math.sqrt(getChiSquare()  /(rows  -  i));  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {    [BUGGY]      errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i));  i]  =  Math.sqrt(getChiSquare()  /(rows  -  i));  [BUGGY]    errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	        errors[i]    =    Math.sqrt(getChiSquare()    /(rows    -    i));    i]  =  Math.sqrt(getChiSquare()  /(rows  -  i));	  	non-compiled	[CE]  not  a  statement	10	None	add
104	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  *  c);  i]  =  Math.sqrt(covar[i][i]  *  c);  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {    [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  *  c);  i]  =  Math.sqrt(covar[i][i]  *  c);  [BUGGY]    }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]    =    Math.sqrt(covar[i][i]    *    c);    i]  =  Math.sqrt(covar[i][i]  *  c);	  	non-compiled	[CE]  not  a  statement	6	None	add
105	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  *  c);  int  i]  =  Math.sqrt(covar[i][i]  *  c);  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {    [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  *  c);  int  i]  =  Math.sqrt(covar[i][i]  *  c);  [BUGGY]    }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]    =    Math.sqrt(covar[i][i]    *    c);    int  i]  =  Math.sqrt(covar[i][i]  *  c);	  	non-compiled	[CE]  ';'  expected	6	None	add
106	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  c)*  cost;  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {    [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  c)*  cost;  [BUGGY]    }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i],  c)*  cost;	  errors[i]    =    Math.sqrt(covar[i][i],    c)*    c;    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	20	None	replace
107	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  c)/  c;  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {    [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  c)/  c;  [BUGGY]    }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i],  c)/  c;	  errors[i]    =    Math.sqrt(covar[i][i],    c)*    c;    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	20	None	replace
108	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  cost)/  c;  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {    [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  cost)/  c;  [BUGGY]    }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i],  cost)/  c;	  errors[i]    =    Math.sqrt(covar[i][i])/    c;    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	2	None	replace
109	[BUG]  [BUGGY]  c  =  Math.sqrt(getChiSquare()  /(rows  -  i));  errors[i][i]  =  Math.sqrt(covar[i][i]  *  chiSquare);  [CE]  cannot  assign  a  value  to  final  variable  c  [FE]        AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {    [BUGGY]  c  =  Math.sqrt(getChiSquare()  /(rows  -  i));  errors[i][i]  =  Math.sqrt(covar[i][i]  *  chiSquare);  [BUGGY]    errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	c  =  Math.sqrt(getChiSquare()  /(rows  -  i));  errors[i][i]  =  Math.sqrt(covar[i][i]  *  chiSquare);	      c    =    Math.sqrt(getChiSquare()    /(rows    -    i));    errors[i][i]    =    Math.sqrt(covar[i][i]    *    c);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  c	17	None	replace
110	[BUG]  [BUGGY]  c  =  Math.sqrt(getChiSquare()  /(rows  -  i));  errors[i]  =  Math.sqrt(covar[i][i]  *  chiSquare);  [CE]  cannot  assign  a  value  to  final  variable  c  [FE]              AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {    [BUGGY]  c  =  Math.sqrt(getChiSquare()  /(rows  -  i));  errors[i]  =  Math.sqrt(covar[i][i]  *  chiSquare);  [BUGGY]    errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	c  =  Math.sqrt(getChiSquare()  /(rows  -  i));  errors[i]  =  Math.sqrt(covar[i][i]  *  chiSquare);	      c    =    Math.sqrt(getChiSquare()    /(rows    -    i));    errors[i]    =    Math.sqrt(covar[i][i]    *    c);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  c	14	None	replace
111	[BUG]  [BUGGY]  errorCount  =  Math.sqrt(getChiSquare()  /(rows  -  i));  errors[i]  =  Math.sqrt(covar[i][i])*  c;  [CE]  cannot  find  symbol  errorCount  [FE]            AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {    [BUGGY]  errorCount  =  Math.sqrt(getChiSquare()  /(rows  -  i));  errors[i]  =  Math.sqrt(covar[i][i])*  c;  [BUGGY]    errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errorCount  =  Math.sqrt(getChiSquare()  /(rows  -  i));  errors[i]  =  Math.sqrt(covar[i][i])*  c;	      c    =    Math.sqrt(getChiSquare()    /(rows    -    i));    errors[i]    =    Math.sqrt(covar[i][i])*    c;    	non-compiled	[CE]  cannot  find  symbol  errorCount	13	None	replace
112	[BUG]  [BUGGY]      errors[i]  =  Math.sqrt(covar[i]  *  c);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]    AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {    [BUGGY]      errors[i]  =  Math.sqrt(covar[i]  *  c);  [BUGGY]    }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	        errors[i]  =  Math.sqrt(covar[i]  *  c);	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	8	None	add
113	[BUG]  [BUGGY]  double  c  =  Math.sqrt(getChiSquare()  *(rows  -  i));  errors[i]  =  Math.sqrt(covar[i][i]  *  c);  [CE]  variable  c  is  already  defined  in  method  guessParametersErrors()  [FE]          AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {    [BUGGY]  double  c  =  Math.sqrt(getChiSquare()  *(rows  -  i));  errors[i]  =  Math.sqrt(covar[i][i]  *  c);  [BUGGY]    errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	double  c  =  Math.sqrt(getChiSquare()  *(rows  -  i));  errors[i]  =  Math.sqrt(covar[i][i]  *  c);	      double    c    =    Math.sqrt(getChiSquare()    /(rows    -    i));    errors[i]    =    Math.sqrt(covar[i][i]    *    c);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  guessParametersErrors()	18	None	replace
114	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  *  C);  [CE]  cannot  find  symbol  C  [FE]            AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {    [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  *  C);  [BUGGY]    }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i]  *  C);	  errors[i]    =    Math.sqrt(covar[i][i]    *    jTj);    	non-compiled	[CE]  cannot  find  symbol  C	5	None	replace
115	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  *  coefficient);  [CE]  cannot  find  symbol  coefficient  [FE]              AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {    [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  *  coefficient);  [BUGGY]    }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i]  *  coefficient);	  errors[i]    =    Math.sqrt(covar[i][i]    *    jTj);    	non-compiled	[CE]  cannot  find  symbol  coefficient	5	None	replace
116	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  -  1]  *  c);  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {    [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  -  1]  *  c);  [BUGGY]    }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i]  -  1]  *  c);	  errors[i]    =    Math.sqrt(covar[i][i]    -    1]    *    c;    	non-compiled	[CE]  ')'  expected	15	None	replace
117	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  -  1]  *  c,  cost);  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {    [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  -  1]  *  c,  cost);  [BUGGY]    }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i]  -  1]  *  c,  cost);	  errors[i]    =    Math.sqrt(covar[i][i]    -    1]    *    c;    	non-compiled	[CE]  ')'  expected	15	None	replace
118	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  *  c);  cols[i]  =  Math.sqrt(covar[i][i]  *  c);  [CE]  array  required,  but  int  found  [FE]    AssertionFailedError    [CONTEXT]    throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {    [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  *  c);  cols[i]  =  Math.sqrt(covar[i][i]  *  c);  [BUGGY]    }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]    =    Math.sqrt(covar[i][i]    *    c);    cols[i]  =  Math.sqrt(covar[i][i]  *  c);	  	non-compiled	[CE]  array  required,  but  int  found	6	None	add
