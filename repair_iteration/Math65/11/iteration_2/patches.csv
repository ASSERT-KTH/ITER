bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  errors[i][i]  =  c[i].doubleValue();  [CE]  array  required,  but  double  found  [FE]          AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i][i]  =  c[i].doubleValue();  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i][i]  =  c[i].doubleValue();	  errors[i][i]    =    covar[i].doubleValue();    	non-compiled	[CE]  array  required,  but  double  found	51	None	replace
2	[BUG]  [BUGGY]  errors[i][i]  =  covar[i].doubleValue()  +  1;  [CE]  array  required,  but  double  found  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i][i]  =  covar[i].doubleValue()  +  1;  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i][i]  =  covar[i].doubleValue()  +  1;	  errors[i][i]    =    covar[i].doubleValue();    	non-compiled	[CE]  array  required,  but  double  found	51	None	replace
3	[BUG]  [BUGGY]  errors[i][i]  =  covar[i].doubleValue()  +  c;  [CE]  array  required,  but  double  found  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i][i]  =  covar[i].doubleValue()  +  c;  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i][i]  =  covar[i].doubleValue()  +  c;	  errors[i][i]    =    covar[i].doubleValue();    	non-compiled	[CE]  array  required,  but  double  found	51	None	replace
4	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  *  C,  cost);  [CE]  cannot  find  symbol  C  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  *  C,  cost);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i]  *  C,  cost);	  errors[i]    =    Math.sqrt(covar[i][i]    *    C);    	non-compiled	[CE]  cannot  find  symbol  C	114	None	replace
5	[BUG]  [BUGGY]  mistakes[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i));  [CE]  cannot  find  symbol  mistakes  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  mistakes[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i));  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	mistakes[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i));	          errors[i]    =    Math.sqrt(getChiSquare()    /(rows    -    i));    mistakes[i]    =    Math.sqrt(getChiSquare()    /(rows    -    i));    	non-compiled	[CE]  cannot  find  symbol  mistakes	16	None	replace
6	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i])/  c);  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i])/  c);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i])/  c);	  errors[i]    =    Math.sqrt(covar[i][i])/    c;    errors[i]    =    Math.sqrt(covar[i][i])/    c);    	non-compiled	[CE]  ';'  expected	70	None	replace
7	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i])/  c,  cost);  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i])/  c,  cost);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i])/  c,  cost);	  errors[i]    =    Math.sqrt(covar[i][i])/    c;    errors[i]    =    Math.sqrt(covar[i][i])/    c);    	non-compiled	[CE]  ';'  expected	70	None	replace
8	[BUG]  [BUGGY]  errors[i][i]  =  covar[i][1];  [CE]  array  required,  but  double  found  [FE]        AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i][i]  =  covar[i][1];  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i][i]  =  covar[i][1];	          errors[i][i]    =    covar[i][0];    	non-compiled	[CE]  array  required,  but  double  found	79	None	replace
9	[BUG]  [BUGGY]  errors[i][i]  =  c[i][0];  [CE]  array  required,  but  double  found  [FE]          AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i][i]  =  c[i][0];  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i][i]  =  c[i][0];	          errors[i][i]    =    covar[i][0];    	non-compiled	[CE]  array  required,  but  double  found	79	None	replace
10	[BUG]  [BUGGY]  errors[i][i]  =  covar[i][0]  /  2;  [CE]  array  required,  but  double  found  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i][i]  =  covar[i][0]  /  2;  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i][i]  =  covar[i][0]  /  2;	          errors[i][i]    =    covar[i][0];    	non-compiled	[CE]  array  required,  but  double  found	79	None	replace
11	[BUG]  [BUGGY]  c  =  Math.sqrt(getChiSquare()  *(rows  -  i));  errors[i]  =  Math.sqrt(covar[i][i]  *  jTj);  [CE]  cannot  assign  a  value  to  final  variable  c  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  c  =  Math.sqrt(getChiSquare()  *(rows  -  i));  errors[i]  =  Math.sqrt(covar[i][i]  *  jTj);  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	c  =  Math.sqrt(getChiSquare()  *(rows  -  i));  errors[i]  =  Math.sqrt(covar[i][i]  *  jTj);	  c    =    Math.sqrt(getChiSquare()    /(rows    -    i));    errors[i]    =    Math.sqrt(covar[i][i]    *    jTj);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  c	36	None	replace
12	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  cost,  c);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  cost,  c);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i],  cost,  c);	  errors[i]    =    Math.sqrt(covar[i][i],    c);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	100	None	replace
13	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  cost);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  cost);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i],  cost);	  errors[i]    =    Math.sqrt(covar[i][i],    c);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	100	None	replace
14	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  c,  cost);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  c,  cost);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i],  c,  cost);	  errors[i]    =    Math.sqrt(covar[i][i],    c);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	100	None	replace
15	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][0],  c);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][0],  c);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][0],  c);	  errors[i]    =    Math.sqrt(covar[i][i],    c);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	100	None	replace
16	[BUG]  [BUGGY]  c  =  Math.sqrt(getChiSquare()  /(rows  *  i)+  1);  [CE]  cannot  assign  a  value  to  final  variable  c  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  c  =  Math.sqrt(getChiSquare()  /(rows  *  i)+  1);  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	c  =  Math.sqrt(getChiSquare()  /(rows  *  i)+  1);	  c    =    Math.sqrt(getChiSquare()    /(rows    *    i));    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  c	24	None	replace
17	[BUG]  [BUGGY]  c  =  Math.sqrt(getChiSquare()  /(rows  *  cols));  [CE]  cannot  assign  a  value  to  final  variable  c  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  c  =  Math.sqrt(getChiSquare()  /(rows  *  cols));  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	c  =  Math.sqrt(getChiSquare()  /(rows  *  cols));	  c    =    Math.sqrt(getChiSquare()    /(rows    *    i));    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  c	24	None	replace
18	[BUG]  [BUGGY]  c  =  Math.sqrt(getChiSquare()  /(cols  *  i));  [CE]  cannot  assign  a  value  to  final  variable  c  [FE]                    AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  c  =  Math.sqrt(getChiSquare()  /(cols  *  i));  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	c  =  Math.sqrt(getChiSquare()  /(cols  *  i));	  c    =    Math.sqrt(getChiSquare()    /(rows    *    i));    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  c	24	None	replace
19	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  *(rows  -  i)*  c);  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	add	errors[i]  =  Math.sqrt(getChiSquare()  *(rows  -  i)*  c);	  errors[i]    =    Math.sqrt(getChiSquare()    /(rows    -    i)*    c);    	compilable	  [FE]  AssertionFailedError  	83	1	replace
20	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  *(rows  -  i)*  c);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  *(rows  -  i)*  c);  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(getChiSquare()  *(rows  -  i)*  c);	  errors[i]    =    Math.sqrt(getChiSquare()    /(rows    -    i)*    c);    	compilable	  [FE]  AssertionFailedError  	83	1	replace
21	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i)*  cols);  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	add	errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i)*  cols);	  errors[i]    =    Math.sqrt(getChiSquare()    /(rows    -    i)*    c);    	compilable	  [FE]  AssertionFailedError  	83	1	replace
22	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i)*  cols);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i)*  cols);  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i)*  cols);	  errors[i]    =    Math.sqrt(getChiSquare()    /(rows    -    i)*    c);    	compilable	  [FE]  AssertionFailedError  	83	1	replace
23	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i)*  covar[i]);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]        AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i)*  covar[i]);  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i)*  covar[i]);	  errors[i]    =    Math.sqrt(getChiSquare()    /(rows    -    i)*    c);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	83	None	replace
24	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i])/  4;  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	add	errors[i]  =  Math.sqrt(covar[i][i])/  4;	  errors[i]    =    Math.sqrt(covar[i][i])/    3;    	compilable	  [FE]  AssertionFailedError  	58	1	replace
25	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i])/  4;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i])/  4;  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i])/  4;	  errors[i]    =    Math.sqrt(covar[i][i])/    3;    	compilable	  [FE]  AssertionFailedError  	58	1	replace
26	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i])/  1;  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	add	errors[i]  =  Math.sqrt(covar[i][i])/  1;	  errors[i]    =    Math.sqrt(covar[i][i])/    3;    	compilable	  [FE]  AssertionFailedError  	58	1	replace
27	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i])/  1;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i])/  1;  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i])/  1;	  errors[i]    =    Math.sqrt(covar[i][i])/    3;    	compilable	  [FE]  AssertionFailedError  	58	1	replace
28	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  *(cols  -  i));  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	add	errors[i]  =  Math.sqrt(getChiSquare()  *(cols  -  i));	  errors[i]    =    Math.sqrt(getChiSquare()    /(cols    -    i));    	compilable	  [FE]  AssertionFailedError  	4	1	replace
29	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  *(cols  -  i));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  *(cols  -  i));  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(getChiSquare()  *(cols  -  i));	  errors[i]    =    Math.sqrt(getChiSquare()    /(cols    -    i));    	compilable	  [FE]  AssertionFailedError  	4	1	replace
30	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  c,  errorCount,  c);  [CE]  cannot  find  symbol  errorCount  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  c,  errorCount,  c);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i],  c,  errorCount,  c);	  errors[i]    =    Math.sqrt(covar[i][i],    c),    cost,    c);    	non-compiled	[CE]  cannot  find  symbol  errorCount	31	None	replace
31	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  c),  cost,  1);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  c),  cost,  1);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i],  c),  cost,  1);	  errors[i]    =    Math.sqrt(covar[i][i],    c),    cost,    c);    	non-compiled	[CE]  ';'  expected	31	None	replace
32	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  c),  cost,  2);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  c),  cost,  2);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i],  c),  cost,  2);	  errors[i]    =    Math.sqrt(covar[i][i],    c),    cost,    c);    	non-compiled	[CE]  ';'  expected	31	None	replace
33	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  0,  c,  errorCount);  [CE]  cannot  find  symbol  errorCount  [FE]                        AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  0,  c,  errorCount);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i],  0,  c,  errorCount);	  errors[i]    =    Math.sqrt(covar[i][i],    c),    cost,    c);    	non-compiled	[CE]  cannot  find  symbol  errorCount	31	None	replace
34	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  2);  errors[i]  =  Math.sqrt(covar[i][i]  /  2);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	add	errors[i]    =    Math.sqrt(covar[i][i]    /    2);    errors[i]  =  Math.sqrt(covar[i][i]  /  2);	  	compilable	  [FE]  AssertionFailedError  	72	1	add
35	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  2);  errors[i]  =  Math.sqrt(covar[i][i]  /  2);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  2);  errors[i]  =  Math.sqrt(covar[i][i]  /  2);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]    =    Math.sqrt(covar[i][i]    /    2);    errors[i]  =  Math.sqrt(covar[i][i]  /  2);	  	compilable	  [FE]  AssertionFailedError  	72	1	add
36	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  2);  mistakes[i]  =  Math.sqrt(covar[i][i]  /  2);  [CE]  cannot  find  symbol  mistakes  [FE]      AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  2);  mistakes[i]  =  Math.sqrt(covar[i][i]  /  2);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]    =    Math.sqrt(covar[i][i]    /    2);    mistakes[i]  =  Math.sqrt(covar[i][i]  /  2);	  	non-compiled	[CE]  cannot  find  symbol  mistakes	72	None	add
37	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  2);  errors[i]  =  Math.sqrt(covar[i][i]  /  2));  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  2);  errors[i]  =  Math.sqrt(covar[i][i]  /  2));  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]    =    Math.sqrt(covar[i][i]    /    2);    errors[i]  =  Math.sqrt(covar[i][i]  /  2));	  	non-compiled	[CE]  ';'  expected	72	None	add
38	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  cost  +  1]);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  cost  +  1]);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i],  cost  +  1]);	  errors[i]    =    Math.sqrt(covar[i][i],    c    +    1]);    	non-compiled	[CE]  ')'  expected	81	None	replace
39	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][0],  c  +  1]);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][0],  c  +  1]);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][0],  c  +  1]);	  errors[i]    =    Math.sqrt(covar[i][i],    c    +    1]);    	non-compiled	[CE]  ')'  expected	81	None	replace
40	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  cols  +  1]);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  cols  +  1]);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i],  cols  +  1]);	  errors[i]    =    Math.sqrt(covar[i][i],    c    +    1]);    	non-compiled	[CE]  ')'  expected	81	None	replace
41	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  c  +  1,  cols  +  1]);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  c  +  1,  cols  +  1]);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i],  c  +  1,  cols  +  1]);	  errors[i]    =    Math.sqrt(covar[i][i],    c    +    1]);    	non-compiled	[CE]  ')'  expected	81	None	replace
42	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  cost,  covar[i])*  c;  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  cost,  covar[i])*  c;  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i],  cost,  covar[i])*  c;	  errors[i]    =    Math.sqrt(covar[i][i],    c,    cost)*    c;    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	29	None	replace
43	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  jTj,  covar[i],  cost)*  c;  [CE]  cannot  find  symbol  jTj  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  jTj,  covar[i],  cost)*  c;  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i],  jTj,  covar[i],  cost)*  c;	  errors[i]    =    Math.sqrt(covar[i][i],    c,    cost)*    c;    	non-compiled	[CE]  cannot  find  symbol  jTj	29	None	replace
44	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  c,  errorCount,  cost)*  c;  [CE]  cannot  find  symbol  errorCount  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  c,  errorCount,  cost)*  c;  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i],  c,  errorCount,  cost)*  c;	  errors[i]    =    Math.sqrt(covar[i][i],    c,    cost)*    c;    	non-compiled	[CE]  cannot  find  symbol  errorCount	29	None	replace
45	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  cost,  covar[c])*  jTj;  [CE]  possible  loss  of  precision  [FE]                    AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  cost,  covar[c])*  jTj;  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i],  cost,  covar[c])*  jTj;	  errors[i]    =    Math.sqrt(covar[i][i],    c,    cost)*    c;    	non-compiled	[CE]  possible  loss  of  precision	29	None	replace
46	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i])/  3;  errors[i]  =  Math.sqrt(covar[i][i])/  3;  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	add	errors[i]    =    Math.sqrt(covar[i][i])/    3;    errors[i]  =  Math.sqrt(covar[i][i])/  3;	  	compilable	  [FE]  AssertionFailedError  	57	1	add
47	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i])/  3;  errors[i]  =  Math.sqrt(covar[i][i])/  3;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i])/  3;  errors[i]  =  Math.sqrt(covar[i][i])/  3;  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]    =    Math.sqrt(covar[i][i])/    3;    errors[i]  =  Math.sqrt(covar[i][i])/  3;	  	compilable	  [FE]  AssertionFailedError  	57	1	add
48	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i])/  3;  mistakes[i]  =  Math.sqrt(covar[i][i])/  3;  [CE]  cannot  find  symbol  mistakes  [FE]      AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i])/  3;  mistakes[i]  =  Math.sqrt(covar[i][i])/  3;  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]    =    Math.sqrt(covar[i][i])/    3;    mistakes[i]  =  Math.sqrt(covar[i][i])/  3;	  	non-compiled	[CE]  cannot  find  symbol  mistakes	57	None	add
49	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  *  c],  cost);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  *  c],  cost);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i]  *  c],  cost);	  errors[i]    =    Math.sqrt(covar[i][i]    *    c]);    	non-compiled	[CE]  ')'  expected	33	None	replace
50	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  *  jTj]);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  *  jTj]);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i]  *  jTj]);	  errors[i]    =    Math.sqrt(covar[i][i]    *    c]);    	non-compiled	[CE]  ')'  expected	33	None	replace
51	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  cost  *  jTj);  [CE]  cannot  find  symbol  jTj  [FE]          AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  cost  *  jTj);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i],  cost  *  jTj);	  errors[i]    =    Math.sqrt(covar[i][i],    c    *    jTj);    	non-compiled	[CE]  cannot  find  symbol  jTj	101	None	replace
52	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  cost  *  c);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  cost  *  c);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i],  cost  *  c);	  errors[i]    =    Math.sqrt(covar[i][i],    c    *    jTj);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	101	None	replace
53	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  c  *  cost);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  c  *  cost);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i],  c  *  cost);	  errors[i]    =    Math.sqrt(covar[i][i],    c    *    jTj);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	101	None	replace
54	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  c  *  jF);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  c  *  jF);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i],  c  *  jF);	  errors[i]    =    Math.sqrt(covar[i][i],    c    *    jTj);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	101	None	replace
55	[BUG]  [BUGGY]  c  =  Math.sqrt(getChiSquare()  *(rows  -  i)+  1);  errors[i]  =  Math.sqrt(covar[i][i]  *  jTj);  [CE]  cannot  assign  a  value  to  final  variable  c  [FE]                    AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  c  =  Math.sqrt(getChiSquare()  *(rows  -  i)+  1);  errors[i]  =  Math.sqrt(covar[i][i]  *  jTj);  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	c  =  Math.sqrt(getChiSquare()  *(rows  -  i)+  1);  errors[i]  =  Math.sqrt(covar[i][i]  *  jTj);	  c    =    Math.sqrt(getChiSquare()    /(rows    -    i)+    1);    errors[i]    =    Math.sqrt(covar[i][i]    *    jTj);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  c	37	None	replace
56	[BUG]  [BUGGY]  c  =  Math.sqrt(getChiSquare()  /(rows  -  i)+  2);  errors[i]  =  Math.sqrt(covar[i][i]  *  jTj);  [CE]  cannot  assign  a  value  to  final  variable  c  [FE]                      AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  c  =  Math.sqrt(getChiSquare()  /(rows  -  i)+  2);  errors[i]  =  Math.sqrt(covar[i][i]  *  jTj);  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	c  =  Math.sqrt(getChiSquare()  /(rows  -  i)+  2);  errors[i]  =  Math.sqrt(covar[i][i]  *  jTj);	  c    =    Math.sqrt(getChiSquare()    /(rows    -    i)+    1);    errors[i]    =    Math.sqrt(covar[i][i]    *    jTj);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  c	37	None	replace
57	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  2]);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  2]);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i]  /  2]);	  errors[i]    =    Math.sqrt(covar[i][i]    /    c]);    	non-compiled	[CE]  ')'  expected	32	None	replace
58	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  3]);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  3]);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i]  /  3]);	  errors[i]    =    Math.sqrt(covar[i][i]    /    c]);    	non-compiled	[CE]  ')'  expected	32	None	replace
59	[BUG]  [BUGGY]  cols[i]  =  Math.sqrt(covar[i][i]  *  c);  [CE]  array  required,  but  int  found  [FE]        AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  cols[i]  =  Math.sqrt(covar[i][i]  *  c);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	cols[i]  =  Math.sqrt(covar[i][i]  *  c);	  errors[i]    =    Math.sqrt(covar[i][i]    *    c);    cols[i]    =    Math.sqrt(covar[i][i]    *    c);    	non-compiled	[CE]  array  required,  but  int  found	118	None	replace
60	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  *  c,  errors[i]);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  *  c,  errors[i]);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i]  *  c,  errors[i]);	  errors[i]    =    Math.sqrt(covar[i][i]    *    c);    cols[i]    =    Math.sqrt(covar[i][i]    *    c);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	118	None	replace
61	[BUG]  [BUGGY]  c  =  Math.sqrt(getChiSquare()  *(i  -  cols));  [CE]  cannot  assign  a  value  to  final  variable  c  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  c  =  Math.sqrt(getChiSquare()  *(i  -  cols));  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	c  =  Math.sqrt(getChiSquare()  *(i  -  cols));	  c    =    Math.sqrt(getChiSquare()    *(cols    -    i));    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  c	65	None	replace
62	[BUG]  [BUGGY]  c  =  Math.sqrt(getChiSquare()  *(cols[i]  -  i));  [CE]  cannot  assign  a  value  to  final  variable  c  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  c  =  Math.sqrt(getChiSquare()  *(cols[i]  -  i));  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	c  =  Math.sqrt(getChiSquare()  *(cols[i]  -  i));	  c    =    Math.sqrt(getChiSquare()    *(cols    -    i));    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  c	65	None	replace
63	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  1]  *  c);  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  1]  *  c);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i]  /  1]  *  c);	  errors[i]    =    Math.sqrt(covar[i][i]    -    1]    *    c);    	non-compiled	[CE]  ')'  expected	116	None	replace
64	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  -  1]  *  jTj);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  -  1]  *  jTj);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i]  -  1]  *  jTj);	  errors[i]    =    Math.sqrt(covar[i][i]    -    1]    *    c);    	non-compiled	[CE]  ')'  expected	116	None	replace
65	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]          errors[i]    =    Math.sqrt(getChiSquare()    /(rows    -    i));    errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i));  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i));  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i));  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	add	                errors[i]        =        Math.sqrt(getChiSquare()        /(rows        -        i));        errors[i]    =    Math.sqrt(getChiSquare()    /(rows    -    i));    errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i));  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i));	  	compilable	  [FE]  AssertionFailedError  	12	1	add
66	[BUG]  [BUGGY]          errors[i]    =    Math.sqrt(getChiSquare()    /(rows    -    i));    errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i));  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i));  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]          errors[i]    =    Math.sqrt(getChiSquare()    /(rows    -    i));    errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i));  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i));  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i));  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	                errors[i]        =        Math.sqrt(getChiSquare()        /(rows        -        i));        errors[i]    =    Math.sqrt(getChiSquare()    /(rows    -    i));    errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i));  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i));	  	compilable	  [FE]  AssertionFailedError  	12	1	add
67	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]          errors[i]    =    Math.sqrt(getChiSquare()    /(rows    -    i));    errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i));  errors[i]  =  Math.sqrt(getChiSquare()  /(cols  -  i));  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i));  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	add	                errors[i]        =        Math.sqrt(getChiSquare()        /(rows        -        i));        errors[i]    =    Math.sqrt(getChiSquare()    /(rows    -    i));    errors[i]  =  Math.sqrt(getChiSquare()  /(cols  -  i));  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i));	  	compilable	  [FE]  AssertionFailedError  	12	1	add
68	[BUG]  [BUGGY]          errors[i]    =    Math.sqrt(getChiSquare()    /(rows    -    i));    errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i));  errors[i]  =  Math.sqrt(getChiSquare()  /(cols  -  i));  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i));  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]          errors[i]    =    Math.sqrt(getChiSquare()    /(rows    -    i));    errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i));  errors[i]  =  Math.sqrt(getChiSquare()  /(cols  -  i));  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i));  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	                errors[i]        =        Math.sqrt(getChiSquare()        /(rows        -        i));        errors[i]    =    Math.sqrt(getChiSquare()    /(rows    -    i));    errors[i]  =  Math.sqrt(getChiSquare()  /(cols  -  i));  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i));	  	compilable	  [FE]  AssertionFailedError  	12	1	add
69	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]          errors[i]    =    Math.sqrt(getChiSquare()    /(rows    -    i));    errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i));  errors[i]  =  Math.sqrt(getChiSquare()  /(c  -  i));  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i));  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	add	                errors[i]        =        Math.sqrt(getChiSquare()        /(rows        -        i));        errors[i]    =    Math.sqrt(getChiSquare()    /(rows    -    i));    errors[i]  =  Math.sqrt(getChiSquare()  /(c  -  i));  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i));	  	compilable	  [FE]  AssertionFailedError  	12	1	add
70	[BUG]  [BUGGY]          errors[i]    =    Math.sqrt(getChiSquare()    /(rows    -    i));    errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i));  errors[i]  =  Math.sqrt(getChiSquare()  /(c  -  i));  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i));  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]          errors[i]    =    Math.sqrt(getChiSquare()    /(rows    -    i));    errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i));  errors[i]  =  Math.sqrt(getChiSquare()  /(c  -  i));  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i));  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	                errors[i]        =        Math.sqrt(getChiSquare()        /(rows        -        i));        errors[i]    =    Math.sqrt(getChiSquare()    /(rows    -    i));    errors[i]  =  Math.sqrt(getChiSquare()  /(c  -  i));  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i));	  	compilable	  [FE]  AssertionFailedError  	12	1	add
71	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]          errors[i]    =    Math.sqrt(getChiSquare()    /(rows    -    i));    errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i));  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  *  i));  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i));  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	add	                errors[i]        =        Math.sqrt(getChiSquare()        /(rows        -        i));        errors[i]    =    Math.sqrt(getChiSquare()    /(rows    -    i));    errors[i]  =  Math.sqrt(getChiSquare()  /(rows  *  i));  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i));	  	compilable	  [FE]  AssertionFailedError  	12	1	add
72	[BUG]  [BUGGY]          errors[i]    =    Math.sqrt(getChiSquare()    /(rows    -    i));    errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i));  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  *  i));  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i));  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]          errors[i]    =    Math.sqrt(getChiSquare()    /(rows    -    i));    errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i));  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  *  i));  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i));  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	                errors[i]        =        Math.sqrt(getChiSquare()        /(rows        -        i));        errors[i]    =    Math.sqrt(getChiSquare()    /(rows    -    i));    errors[i]  =  Math.sqrt(getChiSquare()  /(rows  *  i));  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i));	  	compilable	  [FE]  AssertionFailedError  	12	1	add
73	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]          errors[i]    =    Math.sqrt(getChiSquare()    /(rows    -    i));    errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i));  errors[i]  =  Math.sqrt(getChiSquare()  *(rows  -  i));  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i));  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	add	                errors[i]        =        Math.sqrt(getChiSquare()        /(rows        -        i));        errors[i]    =    Math.sqrt(getChiSquare()    /(rows    -    i));    errors[i]  =  Math.sqrt(getChiSquare()  *(rows  -  i));  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i));	  	compilable	  [FE]  AssertionFailedError  	12	1	add
74	[BUG]  [BUGGY]          errors[i]    =    Math.sqrt(getChiSquare()    /(rows    -    i));    errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i));  errors[i]  =  Math.sqrt(getChiSquare()  *(rows  -  i));  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i));  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]          errors[i]    =    Math.sqrt(getChiSquare()    /(rows    -    i));    errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i));  errors[i]  =  Math.sqrt(getChiSquare()  *(rows  -  i));  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i));  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	                errors[i]        =        Math.sqrt(getChiSquare()        /(rows        -        i));        errors[i]    =    Math.sqrt(getChiSquare()    /(rows    -    i));    errors[i]  =  Math.sqrt(getChiSquare()  *(rows  -  i));  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i));	  	compilable	  [FE]  AssertionFailedError  	12	1	add
75	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.log(covar[i][i]  *  c);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	add	errors[i]  =  Math.log(covar[i][i]  *  c);	  errors[i]    =    Math.sqrt(covar[i][i]    /    c);    errors[i]    =    Math.sqrt(covar[i][i]    *    c);    	compilable	  [FE]  AssertionFailedError  	98	1	replace
76	[BUG]  [BUGGY]  errors[i]  =  Math.log(covar[i][i]  *  c);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.log(covar[i][i]  *  c);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.log(covar[i][i]  *  c);	  errors[i]    =    Math.sqrt(covar[i][i]    /    c);    errors[i]    =    Math.sqrt(covar[i][i]    *    c);    	compilable	  [FE]  AssertionFailedError  	98	1	replace
77	[BUG]  [BUGGY]  mistakes[i]  =  Math.sqrt(covar[i][i])/  c;  [CE]  cannot  find  symbol  mistakes  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  mistakes[i]  =  Math.sqrt(covar[i][i])/  c;  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	mistakes[i]  =  Math.sqrt(covar[i][i])/  c;	  errors[i]    =    Math.sqrt(covar[i][i])/    c;    mistakes[i]    =    Math.sqrt(covar[i][i])/    c;    	non-compiled	[CE]  cannot  find  symbol  mistakes	71	None	replace
78	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i])/  cost;  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	add	errors[i]  =  Math.sqrt(covar[i][i])/  cost;	  errors[i]    =    Math.sqrt(covar[i][i])/    c;    mistakes[i]    =    Math.sqrt(covar[i][i])/    c;    	compilable	  [FE]  AssertionFailedError  	71	1	replace
79	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i])/  cost;  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i])/  cost;  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i])/  cost;	  errors[i]    =    Math.sqrt(covar[i][i])/    c;    mistakes[i]    =    Math.sqrt(covar[i][i])/    c;    	compilable	  [FE]  AssertionFailedError  	71	1	replace
80	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i])/  jTj;  [CE]  cannot  find  symbol  jTj  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i])/  jTj;  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i])/  jTj;	  errors[i]    =    Math.sqrt(covar[i][i])/    c;    mistakes[i]    =    Math.sqrt(covar[i][i])/    c;    	non-compiled	[CE]  cannot  find  symbol  jTj	71	None	replace
81	[BUG]  [BUGGY]  errors[i]  =  c[i].doubleValue();  [CE]  array  required,  but  double  found  [FE]        AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  c[i].doubleValue();  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  c[i].doubleValue();	  errors[i]    =    covar[i].doubleValue();    	non-compiled	[CE]  array  required,  but  double  found	50	None	replace
82	[BUG]  [BUGGY]  errors[i]  =  covariance[i].doubleValue();  [CE]  cannot  find  symbol  covariance  [FE]          AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  covariance[i].doubleValue();  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  covariance[i].doubleValue();	  errors[i]    =    covar[i].doubleValue();    	non-compiled	[CE]  cannot  find  symbol  covariance	50	None	replace
83	[BUG]  [BUGGY]  errors[i]  =  cols[i].doubleValue();  [CE]  array  required,  but  int  found  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  cols[i].doubleValue();  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  cols[i].doubleValue();	  errors[i]    =    covar[i].doubleValue();    	non-compiled	[CE]  array  required,  but  int  found	50	None	replace
84	[BUG]  [BUGGY]  c  =  Math.sqrt(getChiSquare()  /(rows  -  i));  errors[i][i]  =  Math.sqrt(covar[i][i]  *  jTj,  errorCount);  [CE]  cannot  assign  a  value  to  final  variable  c  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  c  =  Math.sqrt(getChiSquare()  /(rows  -  i));  errors[i][i]  =  Math.sqrt(covar[i][i]  *  jTj,  errorCount);  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	c  =  Math.sqrt(getChiSquare()  /(rows  -  i));  errors[i][i]  =  Math.sqrt(covar[i][i]  *  jTj,  errorCount);	  c    =    Math.sqrt(getChiSquare()    /(rows    -    i));    errors[i][i]    =    Math.sqrt(covar[i][i]    *    jTj);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  c	21	None	replace
85	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i])/  2  +  1;  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	add	errors[i]  =  Math.sqrt(covar[i][i])/  2  +  1;	  errors[i]    =    Math.sqrt(covar[i][i])/    c    +    1;    	compilable	  [FE]  AssertionFailedError  	60	1	replace
86	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i])/  2  +  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i])/  2  +  1;  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i])/  2  +  1;	  errors[i]    =    Math.sqrt(covar[i][i])/    c    +    1;    	compilable	  [FE]  AssertionFailedError  	60	1	replace
87	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i])/  cost  +  1;  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	add	errors[i]  =  Math.sqrt(covar[i][i])/  cost  +  1;	  errors[i]    =    Math.sqrt(covar[i][i])/    c    +    1;    	compilable	  [FE]  AssertionFailedError  	60	1	replace
88	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i])/  cost  +  1;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i])/  cost  +  1;  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i])/  cost  +  1;	  errors[i]    =    Math.sqrt(covar[i][i])/    c    +    1;    	compilable	  [FE]  AssertionFailedError  	60	1	replace
89	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i])/  3  +  1;  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	add	errors[i]  =  Math.sqrt(covar[i][i])/  3  +  1;	  errors[i]    =    Math.sqrt(covar[i][i])/    c    +    1;    	compilable	  [FE]  AssertionFailedError  	60	1	replace
90	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i])/  3  +  1;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i])/  3  +  1;  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i])/  3  +  1;	  errors[i]    =    Math.sqrt(covar[i][i])/    c    +    1;    	compilable	  [FE]  AssertionFailedError  	60	1	replace
91	[BUG]  [BUGGY]  double  c  =  Math.sqrt(getChiSquare()  *(cols  -  i));  [CE]  variable  c  is  already  defined  in  method  guessParametersErrors()  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  double  c  =  Math.sqrt(getChiSquare()  *(cols  -  i));  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	double  c  =  Math.sqrt(getChiSquare()  *(cols  -  i));	  double    c    =    Math.sqrt(getChiSquare()    /(cols    -    i));    	non-compiled	[CE]  variable  c  is  already  defined  in  method  guessParametersErrors()	48	None	replace
92	[BUG]  [BUGGY]  errors[i]  =  covar[i][c]  /  2;  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  covar[i][c]  /  2;  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  covar[i][c]  /  2;	          errors[i]    =    covar[i][c];    	non-compiled	[CE]  possible  loss  of  precision	91	None	replace
93	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  covar[i][i];  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	add	errors[i]  =  covar[i][i];	          errors[i]    =    covar[i][c];    	compilable	  [FE]  AssertionFailedError  	91	1	replace
94	[BUG]  [BUGGY]  errors[i]  =  covar[i][i];  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  covar[i][i];  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  covar[i][i];	          errors[i]    =    covar[i][c];    	compilable	  [FE]  AssertionFailedError  	91	1	replace
95	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  1]  *  jTj;  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  1]  *  jTj;  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i]  /  1]  *  jTj;	  errors[i]    =    Math.sqrt(covar[i][i]    -    1]    *    jTj;    	non-compiled	[CE]  ')'  expected	10	None	replace
96	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  2]  *  jTj;  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  2]  *  jTj;  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i]  /  2]  *  jTj;	  errors[i]    =    Math.sqrt(covar[i][i]    -    1]    *    jTj;    	non-compiled	[CE]  ')'  expected	10	None	replace
97	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i])/  2;  i]  =  Math.sqrt(covar[i][i])/  2;  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i])/  2;  i]  =  Math.sqrt(covar[i][i])/  2;  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i])/  2;  i]  =  Math.sqrt(covar[i][i])/  2;	  errors[i]    =    Math.sqrt(covar[i][i])/    c;    i]    =    Math.sqrt(covar[i][i])/    c;    	non-compiled	[CE]  not  a  statement	84	None	replace
98	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i])/  2;  i]  =  Math.sqrt(covar[i][i])/  3;  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i])/  2;  i]  =  Math.sqrt(covar[i][i])/  3;  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i])/  2;  i]  =  Math.sqrt(covar[i][i])/  3;	  errors[i]    =    Math.sqrt(covar[i][i])/    c;    i]    =    Math.sqrt(covar[i][i])/    c;    	non-compiled	[CE]  not  a  statement	84	None	replace
99	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  *  jTj,  cols);  [CE]  cannot  find  symbol  jTj  [FE]          AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  *  jTj,  cols);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i]  *  jTj,  cols);	  errors[i]    =    Math.sqrt(covar[i][i]    *    c,    errorCount);    	non-compiled	[CE]  cannot  find  symbol  jTj	78	None	replace
100	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  *  jTj,  errorCount);  [CE]  cannot  find  symbol  jTj  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  *  jTj,  errorCount);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i]  *  jTj,  errorCount);	  errors[i]    =    Math.sqrt(covar[i][i]    *    c,    errorCount);    	non-compiled	[CE]  cannot  find  symbol  jTj	78	None	replace
101	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  *(rows  -  i)+  1);  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	add	errors[i]  =  Math.sqrt(getChiSquare()  *(rows  -  i)+  1);	  errors[i]    =    Math.sqrt(getChiSquare()    /(rows    -    i)+    1);    	compilable	  [FE]  AssertionFailedError  	6	1	replace
102	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  *(rows  -  i)+  1);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  *(rows  -  i)+  1);  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(getChiSquare()  *(rows  -  i)+  1);	  errors[i]    =    Math.sqrt(getChiSquare()    /(rows    -    i)+    1);    	compilable	  [FE]  AssertionFailedError  	6	1	replace
103	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i)+  2);  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	add	errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i)+  2);	  errors[i]    =    Math.sqrt(getChiSquare()    /(rows    -    i)+    1);    	compilable	  [FE]  AssertionFailedError  	6	1	replace
104	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i)+  2);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i)+  2);  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i)+  2);	  errors[i]    =    Math.sqrt(getChiSquare()    /(rows    -    i)+    1);    	compilable	  [FE]  AssertionFailedError  	6	1	replace
105	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  /(cols  -  i)+  1);  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	add	errors[i]  =  Math.sqrt(getChiSquare()  /(cols  -  i)+  1);	  errors[i]    =    Math.sqrt(getChiSquare()    /(rows    -    i)+    1);    	compilable	  [FE]  AssertionFailedError  	6	1	replace
106	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  /(cols  -  i)+  1);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  /(cols  -  i)+  1);  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(getChiSquare()  /(cols  -  i)+  1);	  errors[i]    =    Math.sqrt(getChiSquare()    /(rows    -    i)+    1);    	compilable	  [FE]  AssertionFailedError  	6	1	replace
107	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  *(rows  -  i));  errors[i]  =  Math.sqrt(getChiSquare()  *(rows  -  i));  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	add	errors[i]    =    Math.sqrt(getChiSquare()    *(rows    -    i));    errors[i]  =  Math.sqrt(getChiSquare()  *(rows  -  i));	  	compilable	  [FE]  AssertionFailedError  	1	1	add
108	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  *(rows  -  i));  errors[i]  =  Math.sqrt(getChiSquare()  *(rows  -  i));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  *(rows  -  i));  errors[i]  =  Math.sqrt(getChiSquare()  *(rows  -  i));  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]    =    Math.sqrt(getChiSquare()    *(rows    -    i));    errors[i]  =  Math.sqrt(getChiSquare()  *(rows  -  i));	  	compilable	  [FE]  AssertionFailedError  	1	1	add
109	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  *(rows  -  i));  errors[i]  =  Math.sqrt(getChiSquare()  *(cols  -  i));  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	add	errors[i]    =    Math.sqrt(getChiSquare()    *(rows    -    i));    errors[i]  =  Math.sqrt(getChiSquare()  *(cols  -  i));	  	compilable	  [FE]  AssertionFailedError  	1	1	add
110	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  *(rows  -  i));  errors[i]  =  Math.sqrt(getChiSquare()  *(cols  -  i));  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  *(rows  -  i));  errors[i]  =  Math.sqrt(getChiSquare()  *(cols  -  i));  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]    =    Math.sqrt(getChiSquare()    *(rows    -    i));    errors[i]  =  Math.sqrt(getChiSquare()  *(cols  -  i));	  	compilable	  [FE]  AssertionFailedError  	1	1	add
111	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  *(rows  -  i));  mistakes[i]  =  Math.sqrt(getChiSquare()  *(rows  -  i));  [CE]  cannot  find  symbol  mistakes  [FE]        AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  *(rows  -  i));  mistakes[i]  =  Math.sqrt(getChiSquare()  *(rows  -  i));  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]    =    Math.sqrt(getChiSquare()    *(rows    -    i));    mistakes[i]  =  Math.sqrt(getChiSquare()  *(rows  -  i));	  	non-compiled	[CE]  cannot  find  symbol  mistakes	1	None	add
112	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  *(rows  -  i));  errors[i]  =  Math.sqrt(getChiSquare()  *(fields  -  i));  [CE]  cannot  find  symbol  fields  [FE]          AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  *(rows  -  i));  errors[i]  =  Math.sqrt(getChiSquare()  *(fields  -  i));  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]    =    Math.sqrt(getChiSquare()    *(rows    -    i));    errors[i]  =  Math.sqrt(getChiSquare()  *(fields  -  i));	  	non-compiled	[CE]  cannot  find  symbol  fields	1	None	add
113	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  1]  *  c,  cost);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  1]  *  c,  cost);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i]  /  1]  *  c,  cost);	  errors[i]    =    Math.sqrt(covar[i][i]    -    1]    *    c,    cost);    	non-compiled	[CE]  ')'  expected	117	None	replace
114	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  -  1]  *  jTj,  cost);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  -  1]  *  jTj,  cost);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i]  -  1]  *  jTj,  cost);	  errors[i]    =    Math.sqrt(covar[i][i]    -    1]    *    c,    cost);    	non-compiled	[CE]  ')'  expected	117	None	replace
115	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  -  1]  *  c,  errorCount);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  -  1]  *  c,  errorCount);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i]  -  1]  *  c,  errorCount);	  errors[i]    =    Math.sqrt(covar[i][i]    -    1]    *    c,    cost);    	non-compiled	[CE]  ')'  expected	117	None	replace
116	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  %  2]  *  c,  cost);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  %  2]  *  c,  cost);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i]  %  2]  *  c,  cost);	  errors[i]    =    Math.sqrt(covar[i][i]    -    1]    *    c,    cost);    	non-compiled	[CE]  ')'  expected	117	None	replace
117	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  jTj,  cost);  [CE]  cannot  find  symbol  jTj  [FE]          AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  jTj,  cost);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i]  /  jTj,  cost);	  errors[i]    =    Math.sqrt(covar[i][i]    /    c,    cost);    	non-compiled	[CE]  cannot  find  symbol  jTj	74	None	replace
118	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  c,  errorCount,  cost);  [CE]  cannot  find  symbol  errorCount  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  c,  errorCount,  cost);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i]  /  c,  errorCount,  cost);	  errors[i]    =    Math.sqrt(covar[i][i]    /    c,    cost);    	non-compiled	[CE]  cannot  find  symbol  errorCount	74	None	replace
119	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  cost,  covar[i]);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  cost,  covar[i]);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i],  cost,  covar[i]);	  errors[i]    =    Math.sqrt(covar[i][i]    /    c,    cost);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	74	None	replace
120	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  c,  errorCount);  [CE]  cannot  find  symbol  errorCount  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  c,  errorCount);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i]  /  c,  errorCount);	  errors[i]    =    Math.sqrt(covar[i][i]    /    c,    cost);    	non-compiled	[CE]  cannot  find  symbol  errorCount	74	None	replace
121	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  *  3);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	add	errors[i]  =  Math.sqrt(covar[i][i]  *  3);	  errors[i]    =    Math.sqrt(covar[i][i]    /    3);    	compilable	  [FE]  AssertionFailedError  	76	1	replace
122	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  *  3);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  *  3);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i]  *  3);	  errors[i]    =    Math.sqrt(covar[i][i]    /    3);    	compilable	  [FE]  AssertionFailedError  	76	1	replace
123	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  4);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	add	errors[i]  =  Math.sqrt(covar[i][i]  /  4);	  errors[i]    =    Math.sqrt(covar[i][i]    /    3);    	compilable	  [FE]  AssertionFailedError  	76	1	replace
124	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  4);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  4);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i]  /  4);	  errors[i]    =    Math.sqrt(covar[i][i]    /    3);    	compilable	  [FE]  AssertionFailedError  	76	1	replace
125	[BUG]  [BUGGY]  c  =  Math.sqrt(getChiSquare()  /(rows  -  i)+  1);  errors[i]  =  Math.sqrt(covar[i][i])*  jTj;  [CE]  cannot  assign  a  value  to  final  variable  c  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  c  =  Math.sqrt(getChiSquare()  /(rows  -  i)+  1);  errors[i]  =  Math.sqrt(covar[i][i])*  jTj;  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	c  =  Math.sqrt(getChiSquare()  /(rows  -  i)+  1);  errors[i]  =  Math.sqrt(covar[i][i])*  jTj;	  c    =    Math.sqrt(getChiSquare()    /(rows    -    i)+    1);    errors[i]    =    Math.sqrt(covar[i][i])*    c;    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  c	102	None	replace
126	[BUG]  [BUGGY]  c  =  Math.sqrt(getChiSquare()  *(rows  -  i)+  1);  errors[i]  =  Math.sqrt(covar[i][i])*  c;  [CE]  cannot  assign  a  value  to  final  variable  c  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  c  =  Math.sqrt(getChiSquare()  *(rows  -  i)+  1);  errors[i]  =  Math.sqrt(covar[i][i])*  c;  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	c  =  Math.sqrt(getChiSquare()  *(rows  -  i)+  1);  errors[i]  =  Math.sqrt(covar[i][i])*  c;	  c    =    Math.sqrt(getChiSquare()    /(rows    -    i)+    1);    errors[i]    =    Math.sqrt(covar[i][i])*    c;    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  c	102	None	replace
127	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i])/  c  +  1;  errors[i]  =  Math.sqrt(covar[i][i])/  c  +  1;  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	add	errors[i]    =    Math.sqrt(covar[i][i])/    c    +    1;    errors[i]  =  Math.sqrt(covar[i][i])/  c  +  1;	  	compilable	  [FE]  AssertionFailedError  	59	1	add
128	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i])/  c  +  1;  errors[i]  =  Math.sqrt(covar[i][i])/  c  +  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i])/  c  +  1;  errors[i]  =  Math.sqrt(covar[i][i])/  c  +  1;  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]    =    Math.sqrt(covar[i][i])/    c    +    1;    errors[i]  =  Math.sqrt(covar[i][i])/  c  +  1;	  	compilable	  [FE]  AssertionFailedError  	59	1	add
129	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i])/  c  +  1;  mistakes[i]  =  Math.sqrt(covar[i][i])/  c  +  1;  [CE]  cannot  find  symbol  mistakes  [FE]      AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i])/  c  +  1;  mistakes[i]  =  Math.sqrt(covar[i][i])/  c  +  1;  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]    =    Math.sqrt(covar[i][i])/    c    +    1;    mistakes[i]  =  Math.sqrt(covar[i][i])/  c  +  1;	  	non-compiled	[CE]  cannot  find  symbol  mistakes	59	None	add
130	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i])/  c  +  1;  i]  =  Math.sqrt(covar[i][i])/  c  +  1;  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i])/  c  +  1;  i]  =  Math.sqrt(covar[i][i])/  c  +  1;  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]    =    Math.sqrt(covar[i][i])/    c    +    1;    i]  =  Math.sqrt(covar[i][i])/  c  +  1;	  	non-compiled	[CE]  not  a  statement	59	None	add
131	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]    =    Math.sqrt(covar[i][i]    /    c);    errors[i]  =  Math.sqrt(covar[i][i]  /  c);  errors[i]  =  Math.sqrt(covar[i][i]  /  c);  errors[i]  =  Math.sqrt(covar[i][i]  /  c);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	add	errors[i]        =        Math.sqrt(covar[i][i]        /        c);        errors[i]    =    Math.sqrt(covar[i][i]    /    c);    errors[i]  =  Math.sqrt(covar[i][i]  /  c);  errors[i]  =  Math.sqrt(covar[i][i]  /  c);	  	compilable	  [FE]  AssertionFailedError  	43	1	add
132	[BUG]  [BUGGY]  errors[i]    =    Math.sqrt(covar[i][i]    /    c);    errors[i]  =  Math.sqrt(covar[i][i]  /  c);  errors[i]  =  Math.sqrt(covar[i][i]  /  c);  errors[i]  =  Math.sqrt(covar[i][i]  /  c);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]    =    Math.sqrt(covar[i][i]    /    c);    errors[i]  =  Math.sqrt(covar[i][i]  /  c);  errors[i]  =  Math.sqrt(covar[i][i]  /  c);  errors[i]  =  Math.sqrt(covar[i][i]  /  c);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]        =        Math.sqrt(covar[i][i]        /        c);        errors[i]    =    Math.sqrt(covar[i][i]    /    c);    errors[i]  =  Math.sqrt(covar[i][i]  /  c);  errors[i]  =  Math.sqrt(covar[i][i]  /  c);	  	compilable	  [FE]  AssertionFailedError  	43	1	add
133	[BUG]  [BUGGY]  errors[i]    =    Math.sqrt(covar[i][i]    /    c);    errors[i]  =  Math.sqrt(covar[i][i]  /  c);  errors[i]  =  Math.sqrt(covar[i][i]  /  jTj);  errors[i]  =  Math.sqrt(covar[i][i]  /  c);  [CE]  cannot  find  symbol  jTj  [FE]      AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]    =    Math.sqrt(covar[i][i]    /    c);    errors[i]  =  Math.sqrt(covar[i][i]  /  c);  errors[i]  =  Math.sqrt(covar[i][i]  /  jTj);  errors[i]  =  Math.sqrt(covar[i][i]  /  c);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]        =        Math.sqrt(covar[i][i]        /        c);        errors[i]    =    Math.sqrt(covar[i][i]    /    c);    errors[i]  =  Math.sqrt(covar[i][i]  /  jTj);  errors[i]  =  Math.sqrt(covar[i][i]  /  c);	  	non-compiled	[CE]  cannot  find  symbol  jTj	43	None	add
134	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]    =    Math.sqrt(covar[i][i]    /    c);    errors[i]  =  Math.sqrt(covar[i][i]  /  c);  errors[i]  =  Math.sqrt(covar[i][i]  *  c);  errors[i]  =  Math.sqrt(covar[i][i]  /  c);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	add	errors[i]        =        Math.sqrt(covar[i][i]        /        c);        errors[i]    =    Math.sqrt(covar[i][i]    /    c);    errors[i]  =  Math.sqrt(covar[i][i]  *  c);  errors[i]  =  Math.sqrt(covar[i][i]  /  c);	  	compilable	  [FE]  AssertionFailedError  	43	1	add
135	[BUG]  [BUGGY]  errors[i]    =    Math.sqrt(covar[i][i]    /    c);    errors[i]  =  Math.sqrt(covar[i][i]  /  c);  errors[i]  =  Math.sqrt(covar[i][i]  *  c);  errors[i]  =  Math.sqrt(covar[i][i]  /  c);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]    =    Math.sqrt(covar[i][i]    /    c);    errors[i]  =  Math.sqrt(covar[i][i]  /  c);  errors[i]  =  Math.sqrt(covar[i][i]  *  c);  errors[i]  =  Math.sqrt(covar[i][i]  /  c);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]        =        Math.sqrt(covar[i][i]        /        c);        errors[i]    =    Math.sqrt(covar[i][i]    /    c);    errors[i]  =  Math.sqrt(covar[i][i]  *  c);  errors[i]  =  Math.sqrt(covar[i][i]  /  c);	  	compilable	  [FE]  AssertionFailedError  	43	1	add
136	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]    =    Math.sqrt(covar[i][i]    /    c);    errors[i]  =  Math.sqrt(covar[i][i]  /  c);  errors[i]  =  Math.sqrt(covar[i][i]  /  c);  errors[i]  =  Math.sqrt(covar[i][i]  %  c);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	add	errors[i]        =        Math.sqrt(covar[i][i]        /        c);        errors[i]    =    Math.sqrt(covar[i][i]    /    c);    errors[i]  =  Math.sqrt(covar[i][i]  /  c);  errors[i]  =  Math.sqrt(covar[i][i]  %  c);	  	compilable	  [FE]  AssertionFailedError  	43	1	add
137	[BUG]  [BUGGY]  errors[i]    =    Math.sqrt(covar[i][i]    /    c);    errors[i]  =  Math.sqrt(covar[i][i]  /  c);  errors[i]  =  Math.sqrt(covar[i][i]  /  c);  errors[i]  =  Math.sqrt(covar[i][i]  %  c);  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]    =    Math.sqrt(covar[i][i]    /    c);    errors[i]  =  Math.sqrt(covar[i][i]  /  c);  errors[i]  =  Math.sqrt(covar[i][i]  /  c);  errors[i]  =  Math.sqrt(covar[i][i]  %  c);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]        =        Math.sqrt(covar[i][i]        /        c);        errors[i]    =    Math.sqrt(covar[i][i]    /    c);    errors[i]  =  Math.sqrt(covar[i][i]  /  c);  errors[i]  =  Math.sqrt(covar[i][i]  %  c);	  	compilable	  [FE]  AssertionFailedError  	43	1	add
138	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]    =    Math.sqrt(covar[i][i]    /    c);    errors[i]  =  Math.sqrt(covar[i][i]  /  c);  errors[i]  =  Math.sqrt(covar[i][i]  /  c);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	add	errors[i]        =        Math.sqrt(covar[i][i]        /        c);        errors[i]    =    Math.sqrt(covar[i][i]    /    c);    errors[i]  =  Math.sqrt(covar[i][i]  /  c);	  	compilable	  [FE]  AssertionFailedError  	43	1	add
139	[BUG]  [BUGGY]  errors[i]    =    Math.sqrt(covar[i][i]    /    c);    errors[i]  =  Math.sqrt(covar[i][i]  /  c);  errors[i]  =  Math.sqrt(covar[i][i]  /  c);  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]    =    Math.sqrt(covar[i][i]    /    c);    errors[i]  =  Math.sqrt(covar[i][i]  /  c);  errors[i]  =  Math.sqrt(covar[i][i]  /  c);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]        =        Math.sqrt(covar[i][i]        /        c);        errors[i]    =    Math.sqrt(covar[i][i]    /    c);    errors[i]  =  Math.sqrt(covar[i][i]  /  c);	  	compilable	  [FE]  AssertionFailedError  	43	1	add
140	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  c,  errorCount)*  cost;  [CE]  cannot  find  symbol  errorCount  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  c,  errorCount)*  cost;  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i],  c,  errorCount)*  cost;	  errors[i]    =    Math.sqrt(covar[i][i],    c)*    cost;    	non-compiled	[CE]  cannot  find  symbol  errorCount	106	None	replace
141	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  c,  cost)*  cols;  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  c,  cost)*  cols;  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i],  c,  cost)*  cols;	  errors[i]    =    Math.sqrt(covar[i][i],    c)*    cost;    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	106	None	replace
142	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  c,  cost)*  covar[i];  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  c,  cost)*  covar[i];  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i],  c,  cost)*  covar[i];	  errors[i]    =    Math.sqrt(covar[i][i],    c)*    cost;    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	106	None	replace
143	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  *  chiSquare);  [CE]  cannot  find  symbol  chiSquare  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  *  chiSquare);  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i]  *  chiSquare);	  c    =    Math.sqrt(getChiSquare()    /(rows    -    i));    errors[i]    =    Math.sqrt(covar[i][i]    *    chiSquare);    	non-compiled	[CE]  cannot  find  symbol  chiSquare	110	None	replace
144	[BUG]  [BUGGY]  c  =  Math.sqrt(getChiSquare()  *(rows  -  i));  errors[i]  =  Math.sqrt(covar[i][i]  *  chiSquare);  [CE]  cannot  assign  a  value  to  final  variable  c  [FE]                    AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  c  =  Math.sqrt(getChiSquare()  *(rows  -  i));  errors[i]  =  Math.sqrt(covar[i][i]  *  chiSquare);  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	c  =  Math.sqrt(getChiSquare()  *(rows  -  i));  errors[i]  =  Math.sqrt(covar[i][i]  *  chiSquare);	  c    =    Math.sqrt(getChiSquare()    /(rows    -    i));    errors[i]    =    Math.sqrt(covar[i][i]    *    chiSquare);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  c	110	None	replace
145	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  /(cols  -  i));  errors[i]  =  Math.sqrt(getChiSquare()  /(cols  -  i));  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	add	errors[i]    =    Math.sqrt(getChiSquare()    /(cols    -    i));    errors[i]  =  Math.sqrt(getChiSquare()  /(cols  -  i));	  	compilable	  [FE]  AssertionFailedError  	3	1	add
146	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  /(cols  -  i));  errors[i]  =  Math.sqrt(getChiSquare()  /(cols  -  i));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  /(cols  -  i));  errors[i]  =  Math.sqrt(getChiSquare()  /(cols  -  i));  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]    =    Math.sqrt(getChiSquare()    /(cols    -    i));    errors[i]  =  Math.sqrt(getChiSquare()  /(cols  -  i));	  	compilable	  [FE]  AssertionFailedError  	3	1	add
147	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  /(cols  -  i));  mistakes[i]  =  Math.sqrt(getChiSquare()  /(cols  -  i));  [CE]  cannot  find  symbol  mistakes  [FE]      AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  /(cols  -  i));  mistakes[i]  =  Math.sqrt(getChiSquare()  /(cols  -  i));  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]    =    Math.sqrt(getChiSquare()    /(cols    -    i));    mistakes[i]  =  Math.sqrt(getChiSquare()  /(cols  -  i));	  	non-compiled	[CE]  cannot  find  symbol  mistakes	3	None	add
148	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  /(cols  -  i));  errors[i]  =  Math.sqrt(getChiSquare()  /(cols  *  i));  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	add	errors[i]    =    Math.sqrt(getChiSquare()    /(cols    -    i));    errors[i]  =  Math.sqrt(getChiSquare()  /(cols  *  i));	  	compilable	  [FE]  AssertionFailedError  	3	1	add
149	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  /(cols  -  i));  errors[i]  =  Math.sqrt(getChiSquare()  /(cols  *  i));  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  /(cols  -  i));  errors[i]  =  Math.sqrt(getChiSquare()  /(cols  *  i));  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]    =    Math.sqrt(getChiSquare()    /(cols    -    i));    errors[i]  =  Math.sqrt(getChiSquare()  /(cols  *  i));	  	compilable	  [FE]  AssertionFailedError  	3	1	add
150	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  /(cols  -  i));  errors[i]  =  Math.sqrt(getChiSquare()  *(cols  -  i));  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	add	errors[i]    =    Math.sqrt(getChiSquare()    /(cols    -    i));    errors[i]  =  Math.sqrt(getChiSquare()  *(cols  -  i));	  	compilable	  [FE]  AssertionFailedError  	3	1	add
151	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  /(cols  -  i));  errors[i]  =  Math.sqrt(getChiSquare()  *(cols  -  i));  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  /(cols  -  i));  errors[i]  =  Math.sqrt(getChiSquare()  *(cols  -  i));  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]    =    Math.sqrt(getChiSquare()    /(cols    -    i));    errors[i]  =  Math.sqrt(getChiSquare()  *(cols  -  i));	  	compilable	  [FE]  AssertionFailedError  	3	1	add
152	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  cost,  sum)/  c;  [CE]  cannot  find  symbol  sum  [FE]        AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  cost,  sum)/  c;  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i],  cost,  sum)/  c;	  errors[i]    =    Math.sqrt(covar[i][i],    cost)/    c;    	non-compiled	[CE]  cannot  find  symbol  sum	108	None	replace
153	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  c,  cost)/  covar[i];  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  c,  cost)/  covar[i];  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i],  c,  cost)/  covar[i];	  errors[i]    =    Math.sqrt(covar[i][i],    cost)/    c;    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	108	None	replace
154	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  cost)/  c,  sum;  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  cost)/  c,  sum;  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i],  cost)/  c,  sum;	  errors[i]    =    Math.sqrt(covar[i][i],    cost)/    c;    	non-compiled	[CE]  ';'  expected	108	None	replace
155	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]          errors[i]    =    Math.sqrt(getChiSquare()    /(rows    -    i));    errors[i]  =  Math.sqrt(getChiSquare()  /(cols  -  i));  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i));  errors[i]  =  Math.sqrt(getChiSquare()  /(cols  -  i));  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	add	                errors[i]        =        Math.sqrt(getChiSquare()        /(rows        -        i));        errors[i]    =    Math.sqrt(getChiSquare()    /(cols    -    i));    errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i));  errors[i]  =  Math.sqrt(getChiSquare()  /(cols  -  i));	  	compilable	  [FE]  AssertionFailedError  	14	1	add
156	[BUG]  [BUGGY]          errors[i]    =    Math.sqrt(getChiSquare()    /(rows    -    i));    errors[i]  =  Math.sqrt(getChiSquare()  /(cols  -  i));  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i));  errors[i]  =  Math.sqrt(getChiSquare()  /(cols  -  i));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]          errors[i]    =    Math.sqrt(getChiSquare()    /(rows    -    i));    errors[i]  =  Math.sqrt(getChiSquare()  /(cols  -  i));  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i));  errors[i]  =  Math.sqrt(getChiSquare()  /(cols  -  i));  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	                errors[i]        =        Math.sqrt(getChiSquare()        /(rows        -        i));        errors[i]    =    Math.sqrt(getChiSquare()    /(cols    -    i));    errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i));  errors[i]  =  Math.sqrt(getChiSquare()  /(cols  -  i));	  	compilable	  [FE]  AssertionFailedError  	14	1	add
157	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]          errors[i]    =    Math.sqrt(getChiSquare()    /(rows    -    i));    errors[i]  =  Math.sqrt(getChiSquare()  /(cols  -  i));  errors[i]  =  Math.sqrt(getChiSquare()  /(cols  -  i));  errors[i]  =  Math.sqrt(getChiSquare()  /(cols  -  i));  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	add	                errors[i]        =        Math.sqrt(getChiSquare()        /(rows        -        i));        errors[i]    =    Math.sqrt(getChiSquare()    /(cols    -    i));    errors[i]  =  Math.sqrt(getChiSquare()  /(cols  -  i));  errors[i]  =  Math.sqrt(getChiSquare()  /(cols  -  i));	  	compilable	  [FE]  AssertionFailedError  	14	1	add
158	[BUG]  [BUGGY]          errors[i]    =    Math.sqrt(getChiSquare()    /(rows    -    i));    errors[i]  =  Math.sqrt(getChiSquare()  /(cols  -  i));  errors[i]  =  Math.sqrt(getChiSquare()  /(cols  -  i));  errors[i]  =  Math.sqrt(getChiSquare()  /(cols  -  i));  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]          errors[i]    =    Math.sqrt(getChiSquare()    /(rows    -    i));    errors[i]  =  Math.sqrt(getChiSquare()  /(cols  -  i));  errors[i]  =  Math.sqrt(getChiSquare()  /(cols  -  i));  errors[i]  =  Math.sqrt(getChiSquare()  /(cols  -  i));  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	                errors[i]        =        Math.sqrt(getChiSquare()        /(rows        -        i));        errors[i]    =    Math.sqrt(getChiSquare()    /(cols    -    i));    errors[i]  =  Math.sqrt(getChiSquare()  /(cols  -  i));  errors[i]  =  Math.sqrt(getChiSquare()  /(cols  -  i));	  	compilable	  [FE]  AssertionFailedError  	14	1	add
159	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]          errors[i]    =    Math.sqrt(getChiSquare()    /(rows    -    i));    errors[i]  =  Math.sqrt(getChiSquare()  /(cols  -  i));  errors[i]  =  Math.sqrt(getChiSquare()  /(c  -  i));  errors[i]  =  Math.sqrt(getChiSquare()  /(cols  -  i));  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	add	                errors[i]        =        Math.sqrt(getChiSquare()        /(rows        -        i));        errors[i]    =    Math.sqrt(getChiSquare()    /(cols    -    i));    errors[i]  =  Math.sqrt(getChiSquare()  /(c  -  i));  errors[i]  =  Math.sqrt(getChiSquare()  /(cols  -  i));	  	compilable	  [FE]  AssertionFailedError  	14	1	add
160	[BUG]  [BUGGY]          errors[i]    =    Math.sqrt(getChiSquare()    /(rows    -    i));    errors[i]  =  Math.sqrt(getChiSquare()  /(cols  -  i));  errors[i]  =  Math.sqrt(getChiSquare()  /(c  -  i));  errors[i]  =  Math.sqrt(getChiSquare()  /(cols  -  i));  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]          errors[i]    =    Math.sqrt(getChiSquare()    /(rows    -    i));    errors[i]  =  Math.sqrt(getChiSquare()  /(cols  -  i));  errors[i]  =  Math.sqrt(getChiSquare()  /(c  -  i));  errors[i]  =  Math.sqrt(getChiSquare()  /(cols  -  i));  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	                errors[i]        =        Math.sqrt(getChiSquare()        /(rows        -        i));        errors[i]    =    Math.sqrt(getChiSquare()    /(cols    -    i));    errors[i]  =  Math.sqrt(getChiSquare()  /(c  -  i));  errors[i]  =  Math.sqrt(getChiSquare()  /(cols  -  i));	  	compilable	  [FE]  AssertionFailedError  	14	1	add
161	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]          errors[i]    =    Math.sqrt(getChiSquare()    /(rows    -    i));    errors[i]  =  Math.sqrt(getChiSquare()  /(cols  -  i));  errors[i]  =  Math.sqrt(getChiSquare()  *(rows  -  i));  errors[i]  =  Math.sqrt(getChiSquare()  /(cols  -  i));  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	add	                errors[i]        =        Math.sqrt(getChiSquare()        /(rows        -        i));        errors[i]    =    Math.sqrt(getChiSquare()    /(cols    -    i));    errors[i]  =  Math.sqrt(getChiSquare()  *(rows  -  i));  errors[i]  =  Math.sqrt(getChiSquare()  /(cols  -  i));	  	compilable	  [FE]  AssertionFailedError  	14	1	add
162	[BUG]  [BUGGY]          errors[i]    =    Math.sqrt(getChiSquare()    /(rows    -    i));    errors[i]  =  Math.sqrt(getChiSquare()  /(cols  -  i));  errors[i]  =  Math.sqrt(getChiSquare()  *(rows  -  i));  errors[i]  =  Math.sqrt(getChiSquare()  /(cols  -  i));  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]          errors[i]    =    Math.sqrt(getChiSquare()    /(rows    -    i));    errors[i]  =  Math.sqrt(getChiSquare()  /(cols  -  i));  errors[i]  =  Math.sqrt(getChiSquare()  *(rows  -  i));  errors[i]  =  Math.sqrt(getChiSquare()  /(cols  -  i));  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	                errors[i]        =        Math.sqrt(getChiSquare()        /(rows        -        i));        errors[i]    =    Math.sqrt(getChiSquare()    /(cols    -    i));    errors[i]  =  Math.sqrt(getChiSquare()  *(rows  -  i));  errors[i]  =  Math.sqrt(getChiSquare()  /(cols  -  i));	  	compilable	  [FE]  AssertionFailedError  	14	1	add
163	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]          errors[i]    =    Math.sqrt(getChiSquare()    /(rows    -    i));    errors[i]  =  Math.sqrt(getChiSquare()  /(cols  -  i));  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  *  i));  errors[i]  =  Math.sqrt(getChiSquare()  /(cols  -  i));  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	add	                errors[i]        =        Math.sqrt(getChiSquare()        /(rows        -        i));        errors[i]    =    Math.sqrt(getChiSquare()    /(cols    -    i));    errors[i]  =  Math.sqrt(getChiSquare()  /(rows  *  i));  errors[i]  =  Math.sqrt(getChiSquare()  /(cols  -  i));	  	compilable	  [FE]  AssertionFailedError  	14	1	add
164	[BUG]  [BUGGY]          errors[i]    =    Math.sqrt(getChiSquare()    /(rows    -    i));    errors[i]  =  Math.sqrt(getChiSquare()  /(cols  -  i));  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  *  i));  errors[i]  =  Math.sqrt(getChiSquare()  /(cols  -  i));  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]          errors[i]    =    Math.sqrt(getChiSquare()    /(rows    -    i));    errors[i]  =  Math.sqrt(getChiSquare()  /(cols  -  i));  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  *  i));  errors[i]  =  Math.sqrt(getChiSquare()  /(cols  -  i));  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	                errors[i]        =        Math.sqrt(getChiSquare()        /(rows        -        i));        errors[i]    =    Math.sqrt(getChiSquare()    /(cols    -    i));    errors[i]  =  Math.sqrt(getChiSquare()  /(rows  *  i));  errors[i]  =  Math.sqrt(getChiSquare()  /(cols  -  i));	  	compilable	  [FE]  AssertionFailedError  	14	1	add
165	[BUG]  [BUGGY]  int  i]  =  Math.sqrt(covar[i][i]  *  c);  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  int  i]  =  Math.sqrt(covar[i][i]  *  c);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	int  i]  =  Math.sqrt(covar[i][i]  *  c);	  errors[i]    =    Math.sqrt(covar[i][i]    *    c);    int    i]    =    Math.sqrt(covar[i][i]    *    c);    	non-compiled	[CE]  ';'  expected	105	None	replace
166	[BUG]  [BUGGY]  mistakes[i]  =  Math.sqrt(covar[i][i]  /  c);  [CE]  cannot  find  symbol  mistakes  [FE]          AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  mistakes[i]  =  Math.sqrt(covar[i][i]  /  c);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	mistakes[i]  =  Math.sqrt(covar[i][i]  /  c);	  errors[i]    =    Math.sqrt(covar[i][i]    /    c);    mistakes[i]    =    Math.sqrt(covar[i][i]    /    c);    	non-compiled	[CE]  cannot  find  symbol  mistakes	45	None	replace
167	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  jTj);  [CE]  cannot  find  symbol  jTj  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  jTj);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i]  /  jTj);	  errors[i]    =    Math.sqrt(covar[i][i]    /    c);    mistakes[i]    =    Math.sqrt(covar[i][i]    /    c);    	non-compiled	[CE]  cannot  find  symbol  jTj	45	None	replace
168	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]          errors[i]  =  covar[i][0];  errors[i]  =  covar[i][0];  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	add	                errors[i]    =    covar[i][0];    errors[i]  =  covar[i][0];	  	compilable	  [FE]  AssertionFailedError  	89	1	add
169	[BUG]  [BUGGY]          errors[i]  =  covar[i][0];  errors[i]  =  covar[i][0];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]          errors[i]  =  covar[i][0];  errors[i]  =  covar[i][0];  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	                errors[i]    =    covar[i][0];    errors[i]  =  covar[i][0];	  	compilable	  [FE]  AssertionFailedError  	89	1	add
170	[BUG]  [BUGGY]          errors[i]  =  covar[i][0];  mistakes[i]  =  covar[i][0];  [CE]  cannot  find  symbol  mistakes  [FE]      AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]          errors[i]  =  covar[i][0];  mistakes[i]  =  covar[i][0];  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	                errors[i]    =    covar[i][0];    mistakes[i]  =  covar[i][0];	  	non-compiled	[CE]  cannot  find  symbol  mistakes	89	None	add
171	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]          errors[i]  =  covar[i][0];  errors[i]  =  covar[i][1];  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	add	                errors[i]    =    covar[i][0];    errors[i]  =  covar[i][1];	  	compilable	  [FE]  AssertionFailedError  	89	1	add
172	[BUG]  [BUGGY]          errors[i]  =  covar[i][0];  errors[i]  =  covar[i][1];  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]          errors[i]  =  covar[i][0];  errors[i]  =  covar[i][1];  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	                errors[i]    =    covar[i][0];    errors[i]  =  covar[i][1];	  	compilable	  [FE]  AssertionFailedError  	89	1	add
173	[BUG]  [BUGGY]          errors[i]  =  covar[i][0];  i]  =  covar[i][0];  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]          errors[i]  =  covar[i][0];  i]  =  covar[i][0];  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	                errors[i]    =    covar[i][0];    i]  =  covar[i][0];	  	non-compiled	[CE]  not  a  statement	89	None	add
174	[BUG]  [BUGGY]          errors[i]  =  covar[i][0];  errors[i]  =  covar[i][0].;  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]          errors[i]  =  covar[i][0];  errors[i]  =  covar[i][0].;  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	                errors[i]    =    covar[i][0];    errors[i]  =  covar[i][0].;	  	non-compiled	[CE]  <identifier>  expected	89	None	add
175	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]    =    Math.sqrt(covar[i][i]    *    c);    errors[i]  =  Math.sqrt(covar[i][i]  *  c);  errors[i]  =  Math.sqrt(covar[i][i]  *  c);  errors[i]  =  Math.sqrt(covar[i][i]  *  c);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	add	errors[i]        =        Math.sqrt(covar[i][i]        *        c);        errors[i]    =    Math.sqrt(covar[i][i]    *    c);    errors[i]  =  Math.sqrt(covar[i][i]  *  c);  errors[i]  =  Math.sqrt(covar[i][i]  *  c);	  	compilable	  [FE]  AssertionFailedError  	61	1	add
176	[BUG]  [BUGGY]  errors[i]    =    Math.sqrt(covar[i][i]    *    c);    errors[i]  =  Math.sqrt(covar[i][i]  *  c);  errors[i]  =  Math.sqrt(covar[i][i]  *  c);  errors[i]  =  Math.sqrt(covar[i][i]  *  c);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]    =    Math.sqrt(covar[i][i]    *    c);    errors[i]  =  Math.sqrt(covar[i][i]  *  c);  errors[i]  =  Math.sqrt(covar[i][i]  *  c);  errors[i]  =  Math.sqrt(covar[i][i]  *  c);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]        =        Math.sqrt(covar[i][i]        *        c);        errors[i]    =    Math.sqrt(covar[i][i]    *    c);    errors[i]  =  Math.sqrt(covar[i][i]  *  c);  errors[i]  =  Math.sqrt(covar[i][i]  *  c);	  	compilable	  [FE]  AssertionFailedError  	61	1	add
177	[BUG]  [BUGGY]  errors[i]    =    Math.sqrt(covar[i][i]    *    c);    errors[i]  =  Math.sqrt(covar[i][i]  *  c);  errors[i]  =  Math.sqrt(covar[i][i]  *  jTj);  errors[i]  =  Math.sqrt(covar[i][i]  *  c);  [CE]  cannot  find  symbol  jTj  [FE]      AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]    =    Math.sqrt(covar[i][i]    *    c);    errors[i]  =  Math.sqrt(covar[i][i]  *  c);  errors[i]  =  Math.sqrt(covar[i][i]  *  jTj);  errors[i]  =  Math.sqrt(covar[i][i]  *  c);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]        =        Math.sqrt(covar[i][i]        *        c);        errors[i]    =    Math.sqrt(covar[i][i]    *    c);    errors[i]  =  Math.sqrt(covar[i][i]  *  jTj);  errors[i]  =  Math.sqrt(covar[i][i]  *  c);	  	non-compiled	[CE]  cannot  find  symbol  jTj	61	None	add
178	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]    =    Math.sqrt(covar[i][i]    *    c);    errors[i]  =  Math.sqrt(covar[i][i]  *  c);  errors[i]  =  Math.sqrt(covar[i][i]  /  c);  errors[i]  =  Math.sqrt(covar[i][i]  *  c);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	add	errors[i]        =        Math.sqrt(covar[i][i]        *        c);        errors[i]    =    Math.sqrt(covar[i][i]    *    c);    errors[i]  =  Math.sqrt(covar[i][i]  /  c);  errors[i]  =  Math.sqrt(covar[i][i]  *  c);	  	compilable	  [FE]  AssertionFailedError  	61	1	add
179	[BUG]  [BUGGY]  errors[i]    =    Math.sqrt(covar[i][i]    *    c);    errors[i]  =  Math.sqrt(covar[i][i]  *  c);  errors[i]  =  Math.sqrt(covar[i][i]  /  c);  errors[i]  =  Math.sqrt(covar[i][i]  *  c);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]    =    Math.sqrt(covar[i][i]    *    c);    errors[i]  =  Math.sqrt(covar[i][i]  *  c);  errors[i]  =  Math.sqrt(covar[i][i]  /  c);  errors[i]  =  Math.sqrt(covar[i][i]  *  c);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]        =        Math.sqrt(covar[i][i]        *        c);        errors[i]    =    Math.sqrt(covar[i][i]    *    c);    errors[i]  =  Math.sqrt(covar[i][i]  /  c);  errors[i]  =  Math.sqrt(covar[i][i]  *  c);	  	compilable	  [FE]  AssertionFailedError  	61	1	add
180	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]    =    Math.sqrt(covar[i][i]    *    c);    errors[i]  =  Math.sqrt(covar[i][i]  *  c);  errors[i]  =  Math.sqrt(covar[i][i]  *  c);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	add	errors[i]        =        Math.sqrt(covar[i][i]        *        c);        errors[i]    =    Math.sqrt(covar[i][i]    *    c);    errors[i]  =  Math.sqrt(covar[i][i]  *  c);	  	compilable	  [FE]  AssertionFailedError  	61	1	add
181	[BUG]  [BUGGY]  errors[i]    =    Math.sqrt(covar[i][i]    *    c);    errors[i]  =  Math.sqrt(covar[i][i]  *  c);  errors[i]  =  Math.sqrt(covar[i][i]  *  c);  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]    =    Math.sqrt(covar[i][i]    *    c);    errors[i]  =  Math.sqrt(covar[i][i]  *  c);  errors[i]  =  Math.sqrt(covar[i][i]  *  c);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]        =        Math.sqrt(covar[i][i]        *        c);        errors[i]    =    Math.sqrt(covar[i][i]    *    c);    errors[i]  =  Math.sqrt(covar[i][i]  *  c);	  	compilable	  [FE]  AssertionFailedError  	61	1	add
182	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]    =    Math.sqrt(covar[i][i]    *    c);    errors[i]  =  Math.sqrt(covar[i][i]  *  c);  errors[i]  =  Math.sqrt(covar[0][i]  *  c);  errors[i]  =  Math.sqrt(covar[0][i]  *  c);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	add	errors[i]        =        Math.sqrt(covar[i][i]        *        c);        errors[i]    =    Math.sqrt(covar[i][i]    *    c);    errors[i]  =  Math.sqrt(covar[0][i]  *  c);  errors[i]  =  Math.sqrt(covar[0][i]  *  c);	  	compilable	  [FE]  AssertionFailedError  	61	1	add
183	[BUG]  [BUGGY]  errors[i]    =    Math.sqrt(covar[i][i]    *    c);    errors[i]  =  Math.sqrt(covar[i][i]  *  c);  errors[i]  =  Math.sqrt(covar[0][i]  *  c);  errors[i]  =  Math.sqrt(covar[0][i]  *  c);  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]    =    Math.sqrt(covar[i][i]    *    c);    errors[i]  =  Math.sqrt(covar[i][i]  *  c);  errors[i]  =  Math.sqrt(covar[0][i]  *  c);  errors[i]  =  Math.sqrt(covar[0][i]  *  c);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]        =        Math.sqrt(covar[i][i]        *        c);        errors[i]    =    Math.sqrt(covar[i][i]    *    c);    errors[i]  =  Math.sqrt(covar[0][i]  *  c);  errors[i]  =  Math.sqrt(covar[0][i]  *  c);	  	compilable	  [FE]  AssertionFailedError  	61	1	add
184	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(rows  -  i));  errors[i]  =  Math.sqrt(covar[i][i]  *  c);  [CE]  variable  c  is  already  defined  in  method  guessParametersErrors()  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(rows  -  i));  errors[i]  =  Math.sqrt(covar[i][i]  *  c);  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	final  double  c  =  Math.sqrt(getChiSquare()  *(rows  -  i));  errors[i]  =  Math.sqrt(covar[i][i]  *  c);	  double    c    =    Math.sqrt(getChiSquare()    *(rows    -    i));    errors[i]    =    Math.sqrt(covar[i][i]    *    c);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  guessParametersErrors()	113	None	replace
185	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]    =    Math.sqrt(covar[i][i]    /    c);    errors[i]  =  Math.sqrt(covar[i][i]  *  c);  errors[i]  =  Math.sqrt(covar[i][i]  /  c);  errors[i]  =  Math.sqrt(covar[i][i]  *  c);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	add	errors[i]        =        Math.sqrt(covar[i][i]        /        c);        errors[i]    =    Math.sqrt(covar[i][i]    *    c);    errors[i]  =  Math.sqrt(covar[i][i]  /  c);  errors[i]  =  Math.sqrt(covar[i][i]  *  c);	  	compilable	  [FE]  AssertionFailedError  	97	1	add
186	[BUG]  [BUGGY]  errors[i]    =    Math.sqrt(covar[i][i]    /    c);    errors[i]  =  Math.sqrt(covar[i][i]  *  c);  errors[i]  =  Math.sqrt(covar[i][i]  /  c);  errors[i]  =  Math.sqrt(covar[i][i]  *  c);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]    =    Math.sqrt(covar[i][i]    /    c);    errors[i]  =  Math.sqrt(covar[i][i]  *  c);  errors[i]  =  Math.sqrt(covar[i][i]  /  c);  errors[i]  =  Math.sqrt(covar[i][i]  *  c);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]        =        Math.sqrt(covar[i][i]        /        c);        errors[i]    =    Math.sqrt(covar[i][i]    *    c);    errors[i]  =  Math.sqrt(covar[i][i]  /  c);  errors[i]  =  Math.sqrt(covar[i][i]  *  c);	  	compilable	  [FE]  AssertionFailedError  	97	1	add
187	[BUG]  [BUGGY]  errors[i]    =    Math.sqrt(covar[i][i]    /    c);    errors[i]  =  Math.sqrt(covar[i][i]  *  c);  mistakes[i]  =  Math.sqrt(covar[i][i]  /  c);  errors[i]  =  Math.sqrt(covar[i][i]  *  c);  [CE]  cannot  find  symbol  mistakes  [FE]      AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]    =    Math.sqrt(covar[i][i]    /    c);    errors[i]  =  Math.sqrt(covar[i][i]  *  c);  mistakes[i]  =  Math.sqrt(covar[i][i]  /  c);  errors[i]  =  Math.sqrt(covar[i][i]  *  c);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]        =        Math.sqrt(covar[i][i]        /        c);        errors[i]    =    Math.sqrt(covar[i][i]    *    c);    mistakes[i]  =  Math.sqrt(covar[i][i]  /  c);  errors[i]  =  Math.sqrt(covar[i][i]  *  c);	  	non-compiled	[CE]  cannot  find  symbol  mistakes	97	None	add
188	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]    =    Math.sqrt(covar[i][i]    /    c);    errors[i]  =  Math.sqrt(covar[i][i]  *  c);  errors[i]  =  Math.sqrt(covar[i][i]  /  c);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	add	errors[i]        =        Math.sqrt(covar[i][i]        /        c);        errors[i]    =    Math.sqrt(covar[i][i]    *    c);    errors[i]  =  Math.sqrt(covar[i][i]  /  c);	  	compilable	  [FE]  AssertionFailedError  	97	1	add
189	[BUG]  [BUGGY]  errors[i]    =    Math.sqrt(covar[i][i]    /    c);    errors[i]  =  Math.sqrt(covar[i][i]  *  c);  errors[i]  =  Math.sqrt(covar[i][i]  /  c);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]    =    Math.sqrt(covar[i][i]    /    c);    errors[i]  =  Math.sqrt(covar[i][i]  *  c);  errors[i]  =  Math.sqrt(covar[i][i]  /  c);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]        =        Math.sqrt(covar[i][i]        /        c);        errors[i]    =    Math.sqrt(covar[i][i]    *    c);    errors[i]  =  Math.sqrt(covar[i][i]  /  c);	  	compilable	  [FE]  AssertionFailedError  	97	1	add
190	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  c,  errorCount,  c;  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  c,  errorCount,  c;  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i],  c,  errorCount,  c;	  errors[i]    =    Math.sqrt(covar[i][i],    c),    cost,    c;    	non-compiled	[CE]  ')'  expected	30	None	replace
191	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  c),  cost,  1;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  c),  cost,  1;  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i],  c),  cost,  1;	  errors[i]    =    Math.sqrt(covar[i][i],    c),    cost,    c;    	non-compiled	[CE]  ';'  expected	30	None	replace
192	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  c),  cost,  2;  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  c),  cost,  2;  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i],  c),  cost,  2;	  errors[i]    =    Math.sqrt(covar[i][i],    c),    cost,    c;    	non-compiled	[CE]  ';'  expected	30	None	replace
193	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  c),  error,  c;  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  c),  error,  c;  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i],  c),  error,  c;	  errors[i]    =    Math.sqrt(covar[i][i],    c),    cost,    c;    	non-compiled	[CE]  ';'  expected	30	None	replace
194	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  c,  cost)/  c;  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  c,  cost)/  c;  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i],  c,  cost)/  c;	  errors[i]    =    Math.sqrt(covar[i][i],    c)/    c;    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	107	None	replace
195	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  cost,  c)/  c;  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  cost,  c)/  c;  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i],  cost,  c)/  c;	  errors[i]    =    Math.sqrt(covar[i][i],    c)/    c;    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	107	None	replace
196	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i])/  cost;  c  =  Math.sqrt(covar[i][i])/  c;  [CE]  cannot  assign  a  value  to  final  variable  c  [FE]          AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i])/  cost;  c  =  Math.sqrt(covar[i][i])/  c;  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i])/  cost;  c  =  Math.sqrt(covar[i][i])/  c;	  errors[i]    =    Math.sqrt(covar[i][i])/    c;    c    =    Math.sqrt(covar[i][i])/    c;    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  c	85	None	replace
197	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i])/  2;  c  =  Math.sqrt(covar[i][i])/  2;  [CE]  cannot  assign  a  value  to  final  variable  c  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i])/  2;  c  =  Math.sqrt(covar[i][i])/  2;  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i])/  2;  c  =  Math.sqrt(covar[i][i])/  2;	  errors[i]    =    Math.sqrt(covar[i][i])/    c;    c    =    Math.sqrt(covar[i][i])/    c;    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  c	85	None	replace
198	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i])/  cost;  c  =  Math.sqrt(covar[i][i])/  jTj;  [CE]  cannot  assign  a  value  to  final  variable  c  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i])/  cost;  c  =  Math.sqrt(covar[i][i])/  jTj;  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i])/  cost;  c  =  Math.sqrt(covar[i][i])/  jTj;	  errors[i]    =    Math.sqrt(covar[i][i])/    c;    c    =    Math.sqrt(covar[i][i])/    c;    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  c	85	None	replace
199	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i])/  jTj;  c  =  Math.sqrt(covar[i][i])/  jTj;  [CE]  cannot  find  symbol  jTj  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i])/  jTj;  c  =  Math.sqrt(covar[i][i])/  jTj;  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i])/  jTj;  c  =  Math.sqrt(covar[i][i])/  jTj;	  errors[i]    =    Math.sqrt(covar[i][i])/    c;    c    =    Math.sqrt(covar[i][i])/    c;    	non-compiled	[CE]  cannot  find  symbol  jTj	85	None	replace
200	[BUG]  [BUGGY]  c  =  Math.sqrt(getChiSquare()  *(rows  -  i));  errors[i]  =  Math.sqrt(covar[i][i])*  jTj;  [CE]  cannot  assign  a  value  to  final  variable  c  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  c  =  Math.sqrt(getChiSquare()  *(rows  -  i));  errors[i]  =  Math.sqrt(covar[i][i])*  jTj;  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	c  =  Math.sqrt(getChiSquare()  *(rows  -  i));  errors[i]  =  Math.sqrt(covar[i][i])*  jTj;	  c    =    Math.sqrt(getChiSquare()    /(rows    -    i));    errors[i]    =    Math.sqrt(covar[i][i])*    jTj;    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  c	25	None	replace
201	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  c  +  1);  errors[i]  =  Math.sqrt(covar[i][i]  /  c  +  1);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	add	errors[i]    =    Math.sqrt(covar[i][i]    /    c    +    1);    errors[i]  =  Math.sqrt(covar[i][i]  /  c  +  1);	  	compilable	  [FE]  AssertionFailedError  	92	1	add
202	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  c  +  1);  errors[i]  =  Math.sqrt(covar[i][i]  /  c  +  1);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  c  +  1);  errors[i]  =  Math.sqrt(covar[i][i]  /  c  +  1);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]    =    Math.sqrt(covar[i][i]    /    c    +    1);    errors[i]  =  Math.sqrt(covar[i][i]  /  c  +  1);	  	compilable	  [FE]  AssertionFailedError  	92	1	add
203	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  c  +  1);  mistakes[i]  =  Math.sqrt(covar[i][i]  /  c  +  1);  [CE]  cannot  find  symbol  mistakes  [FE]      AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  c  +  1);  mistakes[i]  =  Math.sqrt(covar[i][i]  /  c  +  1);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]    =    Math.sqrt(covar[i][i]    /    c    +    1);    mistakes[i]  =  Math.sqrt(covar[i][i]  /  c  +  1);	  	non-compiled	[CE]  cannot  find  symbol  mistakes	92	None	add
204	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  c  +  1);  i]  =  Math.sqrt(covar[i][i]  /  c  +  1);  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  c  +  1);  i]  =  Math.sqrt(covar[i][i]  /  c  +  1);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]    =    Math.sqrt(covar[i][i]    /    c    +    1);    i]  =  Math.sqrt(covar[i][i]  /  c  +  1);	  	non-compiled	[CE]  not  a  statement	92	None	add
205	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  *  cost);  errors[i]  =  Math.sqrt(covar[i][i]  *  cost);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	add	errors[i]    =    Math.sqrt(covar[i][i]    *    cost);    errors[i]  =  Math.sqrt(covar[i][i]  *  cost);	  	compilable	  [FE]  AssertionFailedError  	38	1	add
206	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  *  cost);  errors[i]  =  Math.sqrt(covar[i][i]  *  cost);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  *  cost);  errors[i]  =  Math.sqrt(covar[i][i]  *  cost);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]    =    Math.sqrt(covar[i][i]    *    cost);    errors[i]  =  Math.sqrt(covar[i][i]  *  cost);	  	compilable	  [FE]  AssertionFailedError  	38	1	add
207	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  *  cost);  errors[i]  =  Math.sqrt(covar[i][i]  *  Cost);  [CE]  cannot  find  symbol  Cost  [FE]      AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  *  cost);  errors[i]  =  Math.sqrt(covar[i][i]  *  Cost);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]    =    Math.sqrt(covar[i][i]    *    cost);    errors[i]  =  Math.sqrt(covar[i][i]  *  Cost);	  	non-compiled	[CE]  cannot  find  symbol  Cost	38	None	add
208	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  *  cost);  mistakes[i]  =  Math.sqrt(covar[i][i]  *  cost);  [CE]  cannot  find  symbol  mistakes  [FE]        AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  *  cost);  mistakes[i]  =  Math.sqrt(covar[i][i]  *  cost);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]    =    Math.sqrt(covar[i][i]    *    cost);    mistakes[i]  =  Math.sqrt(covar[i][i]  *  cost);	  	non-compiled	[CE]  cannot  find  symbol  mistakes	38	None	add
209	[BUG]  [BUGGY]  errors[i][i]  =  Math.sqrt(covar[i][i]  *  chiSquare);  [CE]  array  required,  but  double  found  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i][i]  =  Math.sqrt(covar[i][i]  *  chiSquare);  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i][i]  =  Math.sqrt(covar[i][i]  *  chiSquare);	  c    =    Math.sqrt(getChiSquare()    /(rows    -    i));    errors[i][i]    =    Math.sqrt(covar[i][i]    *    chiSquare);    	non-compiled	[CE]  array  required,  but  double  found	109	None	replace
210	[BUG]  [BUGGY]  c  =  Math.sqrt(getChiSquare()  *(rows  -  i));  errors[i][i]  =  Math.sqrt(covar[i][i]  *  chiSquare);  [CE]  cannot  assign  a  value  to  final  variable  c  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  c  =  Math.sqrt(getChiSquare()  *(rows  -  i));  errors[i][i]  =  Math.sqrt(covar[i][i]  *  chiSquare);  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	c  =  Math.sqrt(getChiSquare()  *(rows  -  i));  errors[i][i]  =  Math.sqrt(covar[i][i]  *  chiSquare);	  c    =    Math.sqrt(getChiSquare()    /(rows    -    i));    errors[i][i]    =    Math.sqrt(covar[i][i]    *    chiSquare);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  c	109	None	replace
211	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  3]  *  c;  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  3]  *  c;  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i]  /  3]  *  c;	  errors[i]    =    Math.sqrt(covar[i][i]    /    1]    *    c;    	non-compiled	[CE]  ')'  expected	9	None	replace
212	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  2  +  1]  *  c;  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  2  +  1]  *  c;  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i]  /  2  +  1]  *  c;	  errors[i]    =    Math.sqrt(covar[i][i]    /    1]    *    c;    	non-compiled	[CE]  ')'  expected	9	None	replace
213	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  covar[i].length;  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	add	errors[i]  =  covar[i].length;	  errors[i]    =    c;    	compilable	  [FE]  AssertionFailedError  	54	1	replace
214	[BUG]  [BUGGY]  errors[i]  =  covar[i].length;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  covar[i].length;  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  covar[i].length;	  errors[i]    =    c;    	compilable	  [FE]  AssertionFailedError  	54	1	replace
215	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  c  +  1;  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	add	errors[i]  =  c  +  1;	  errors[i]    =    c;    	compilable	  [FE]  AssertionFailedError  	54	1	replace
216	[BUG]  [BUGGY]  errors[i]  =  c  +  1;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  c  +  1;  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  c  +  1;	  errors[i]    =    c;    	compilable	  [FE]  AssertionFailedError  	54	1	replace
217	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  /(rows  -  i));  errors[i]  =  Math.sqrt(covar[i][i]  *  jTj);  [CE]  variable  c  is  already  defined  in  method  guessParametersErrors()  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  /(rows  -  i));  errors[i]  =  Math.sqrt(covar[i][i]  *  jTj);  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	final  double  c  =  Math.sqrt(getChiSquare()  /(rows  -  i));  errors[i]  =  Math.sqrt(covar[i][i]  *  jTj);	  double    c    =    Math.sqrt(getChiSquare()    /(rows    -    i));    errors[i]    =    Math.sqrt(covar[i][i]    *    jTj);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  guessParametersErrors()	87	None	replace
218	[BUG]  [BUGGY]  errors[i]  =  covar[i]  *  c;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  covar[i]  *  c;  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  covar[i]  *  c;	  errors[i]    =    covar[i];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	52	None	replace
219	[BUG]  [BUGGY]  errors[i]  =  covar[i]  &  c;  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  covar[i]  &  c;  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  covar[i]  &  c;	  errors[i]    =    covar[i];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	52	None	replace
220	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  *  c  +  1);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	add	errors[i]  =  Math.sqrt(covar[i][i]  *  c  +  1);	  errors[i]    =    Math.sqrt(covar[i][i]    /    c    +    1);    	compilable	  [FE]  AssertionFailedError  	93	1	replace
221	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  *  c  +  1);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  *  c  +  1);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i]  *  c  +  1);	  errors[i]    =    Math.sqrt(covar[i][i]    /    c    +    1);    	compilable	  [FE]  AssertionFailedError  	93	1	replace
222	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  c,  errorCount  +  1);  [CE]  cannot  find  symbol  errorCount  [FE]      AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  c,  errorCount  +  1);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i]  /  c,  errorCount  +  1);	  errors[i]    =    Math.sqrt(covar[i][i]    /    c    +    1);    	non-compiled	[CE]  cannot  find  symbol  errorCount	93	None	replace
223	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  c  +  1],  cost);  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  c  +  1],  cost);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i]  /  c  +  1],  cost);	  errors[i]    =    Math.sqrt(covar[i][i]    /    c    +    1);    	non-compiled	[CE]  ')'  expected	93	None	replace
224	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  c,  cost  +  1);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  c,  cost  +  1);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i]  /  c,  cost  +  1);	  errors[i]    =    Math.sqrt(covar[i][i]    /    c    +    1);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	93	None	replace
225	[BUG]  [BUGGY]  errors[i][i]  =  Math.sqrt(covar[i][i]  *  c,  errorCount);  [CE]  array  required,  but  double  found  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i][i]  =  Math.sqrt(covar[i][i]  *  c,  errorCount);  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i][i]  =  Math.sqrt(covar[i][i]  *  c,  errorCount);	  errors[i][i]    =    Math.sqrt(covar[i][i]    *    c);    	non-compiled	[CE]  array  required,  but  double  found	19	None	replace
226	[BUG]  [BUGGY]  errors[i][i]  =  Math.sqrt(covar[i][i]  *  c,  cols);  [CE]  array  required,  but  double  found  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i][i]  =  Math.sqrt(covar[i][i]  *  c,  cols);  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i][i]  =  Math.sqrt(covar[i][i]  *  c,  cols);	  errors[i][i]    =    Math.sqrt(covar[i][i]    *    c);    	non-compiled	[CE]  array  required,  but  double  found	19	None	replace
227	[BUG]  [BUGGY]  errors[i][i]  =  Math.sqrt(covar[i][i]  *  c,  errors[i]);  [CE]  array  required,  but  double  found  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i][i]  =  Math.sqrt(covar[i][i]  *  c,  errors[i]);  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i][i]  =  Math.sqrt(covar[i][i]  *  c,  errors[i]);	  errors[i][i]    =    Math.sqrt(covar[i][i]    *    c);    	non-compiled	[CE]  array  required,  but  double  found	19	None	replace
228	[BUG]  [BUGGY]  double  c  =  Math.sqrt(getChiSquare()  /(rows  *  cols));  [CE]  variable  c  is  already  defined  in  method  guessParametersErrors()  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  double  c  =  Math.sqrt(getChiSquare()  /(rows  *  cols));  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	double  c  =  Math.sqrt(getChiSquare()  /(rows  *  cols));	  double    c    =    Math.sqrt(getChiSquare()    /(rows    *    i));    	non-compiled	[CE]  variable  c  is  already  defined  in  method  guessParametersErrors()	49	None	replace
229	[BUG]  [BUGGY]  double  c  =  Math.sqrt(getChiSquare()  *(rows  *  i));  [CE]  variable  c  is  already  defined  in  method  guessParametersErrors()  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  double  c  =  Math.sqrt(getChiSquare()  *(rows  *  i));  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	double  c  =  Math.sqrt(getChiSquare()  *(rows  *  i));	  double    c    =    Math.sqrt(getChiSquare()    /(rows    *    i));    	non-compiled	[CE]  variable  c  is  already  defined  in  method  guessParametersErrors()	49	None	replace
230	[BUG]  [BUGGY]  double  c  =  Math.sqrt(getChiSquare()  /(cols  *  i));  [CE]  variable  c  is  already  defined  in  method  guessParametersErrors()  [FE]                    AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  double  c  =  Math.sqrt(getChiSquare()  /(cols  *  i));  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	double  c  =  Math.sqrt(getChiSquare()  /(cols  *  i));	  double    c    =    Math.sqrt(getChiSquare()    /(rows    *    i));    	non-compiled	[CE]  variable  c  is  already  defined  in  method  guessParametersErrors()	49	None	replace
231	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  cost  /  c]);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  cost  /  c]);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i],  cost  /  c]);	  errors[i]    =    Math.sqrt(covar[i][i],    cost    +    c]);    	non-compiled	[CE]  ')'  expected	80	None	replace
232	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  cost  *  c]);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  cost  *  c]);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i],  cost  *  c]);	  errors[i]    =    Math.sqrt(covar[i][i],    cost    +    c]);    	non-compiled	[CE]  ')'  expected	80	None	replace
233	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  cols  +  c]);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  cols  +  c]);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i],  cols  +  c]);	  errors[i]    =    Math.sqrt(covar[i][i],    cost    +    c]);    	non-compiled	[CE]  ')'  expected	80	None	replace
234	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  *  c));  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  *  c));  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i]  *  c));	  errors[i]    =    Math.sqrt(covar[i][i]    *    c);    errors[i]    =    Math.sqrt(covar[i][i]    *    c));    	non-compiled	[CE]  ';'  expected	64	None	replace
235	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  *  jTj));  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  *  jTj));  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i]  *  jTj));	  errors[i]    =    Math.sqrt(covar[i][i]    *    c);    errors[i]    =    Math.sqrt(covar[i][i]    *    c));    	non-compiled	[CE]  ';'  expected	64	None	replace
236	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  *  c,  cost));  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  *  c,  cost));  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i]  *  c,  cost));	  errors[i]    =    Math.sqrt(covar[i][i]    *    c);    errors[i]    =    Math.sqrt(covar[i][i]    *    c));    	non-compiled	[CE]  ';'  expected	64	None	replace
237	[BUG]  [BUGGY]  errors[i][i]  =  Math.sqrt(covar[i][i]  *  jTj,  cols);  [CE]  array  required,  but  double  found  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i][i]  =  Math.sqrt(covar[i][i]  *  jTj,  cols);  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i][i]  =  Math.sqrt(covar[i][i]  *  jTj,  cols);	  errors[i][i]    =    Math.sqrt(covar[i][i]    *    jTj);    	non-compiled	[CE]  array  required,  but  double  found	20	None	replace
238	[BUG]  [BUGGY]  errors[i][i]  =  Math.sqrt(covar[i][i],  c  *  jTj);  [CE]  array  required,  but  double  found  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i][i]  =  Math.sqrt(covar[i][i],  c  *  jTj);  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i][i]  =  Math.sqrt(covar[i][i],  c  *  jTj);	  errors[i][i]    =    Math.sqrt(covar[i][i]    *    jTj);    	non-compiled	[CE]  array  required,  but  double  found	20	None	replace
239	[BUG]  [BUGGY]  errors[i][i]  =  Math.sqrt(covar[i][i]  *  jTj,  c);  [CE]  array  required,  but  double  found  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i][i]  =  Math.sqrt(covar[i][i]  *  jTj,  c);  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i][i]  =  Math.sqrt(covar[i][i]  *  jTj,  c);	  errors[i][i]    =    Math.sqrt(covar[i][i]    *    jTj);    	non-compiled	[CE]  array  required,  but  double  found	20	None	replace
240	[BUG]  [BUGGY]  double  c  =  Math.sqrt(getChiSquare()  *(rows,  cols  -  i));  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  double  c  =  Math.sqrt(getChiSquare()  *(rows,  cols  -  i));  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	double  c  =  Math.sqrt(getChiSquare()  *(rows,  cols  -  i));	  double    c    =    Math.sqrt(getChiSquare()    *(rows    -    i));    	non-compiled	[CE]  ')'  expected	47	None	replace
241	[BUG]  [BUGGY]  c  =  Math.sqrt(getChiSquare()  *(cols  -  i));  errors[i][i]  =  Math.sqrt(covar[i][i]  *  jTj);  [CE]  cannot  assign  a  value  to  final  variable  c  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  c  =  Math.sqrt(getChiSquare()  *(cols  -  i));  errors[i][i]  =  Math.sqrt(covar[i][i]  *  jTj);  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	c  =  Math.sqrt(getChiSquare()  *(cols  -  i));  errors[i][i]  =  Math.sqrt(covar[i][i]  *  jTj);	  c    =    Math.sqrt(getChiSquare()    *(rows    -    i));    errors[i][i]    =    Math.sqrt(covar[i][i]    *    jTj);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  c	22	None	replace
242	[BUG]  [BUGGY]  c  =  Math.sqrt(getChiSquare()  *(rows  -  i));  errors[i][i]  =  Math.sqrt(covar[i][i]  *  jacobian);  [CE]  cannot  assign  a  value  to  final  variable  c  [FE]                    AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  c  =  Math.sqrt(getChiSquare()  *(rows  -  i));  errors[i][i]  =  Math.sqrt(covar[i][i]  *  jacobian);  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	c  =  Math.sqrt(getChiSquare()  *(rows  -  i));  errors[i][i]  =  Math.sqrt(covar[i][i]  *  jacobian);	  c    =    Math.sqrt(getChiSquare()    *(rows    -    i));    errors[i][i]    =    Math.sqrt(covar[i][i]    *    jTj);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  c	22	None	replace
243	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  cost,  sum)*  c;  [CE]  cannot  find  symbol  sum  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  cost,  sum)*  c;  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i],  cost,  sum)*  c;	  errors[i]    =    Math.sqrt(covar[i][i],    cost)*    c;    	non-compiled	[CE]  cannot  find  symbol  sum	28	None	replace
244	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  cost)*  jTj;  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  cost)*  jTj;  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i],  cost)*  jTj;	  errors[i]    =    Math.sqrt(covar[i][i],    cost)*    c;    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	28	None	replace
245	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  cost)*  c,  errorCount;  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  cost)*  c,  errorCount;  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i],  cost)*  c,  errorCount;	  errors[i]    =    Math.sqrt(covar[i][i],    cost)*    c;    	non-compiled	[CE]  ';'  expected	28	None	replace
246	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  *  i));  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  *  i));  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	add	errors[i]    =    Math.sqrt(getChiSquare()    /(rows    *    i));    errors[i]  =  Math.sqrt(getChiSquare()  /(rows  *  i));	  	compilable	  [FE]  AssertionFailedError  	7	1	add
247	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  *  i));  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  *  i));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  *  i));  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  *  i));  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]    =    Math.sqrt(getChiSquare()    /(rows    *    i));    errors[i]  =  Math.sqrt(getChiSquare()  /(rows  *  i));	  	compilable	  [FE]  AssertionFailedError  	7	1	add
248	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  *  i));  errors[i]  =  Math.sqrt(getChiSquare()  /(cols  *  i));  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	add	errors[i]    =    Math.sqrt(getChiSquare()    /(rows    *    i));    errors[i]  =  Math.sqrt(getChiSquare()  /(cols  *  i));	  	compilable	  [FE]  AssertionFailedError  	7	1	add
249	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  *  i));  errors[i]  =  Math.sqrt(getChiSquare()  /(cols  *  i));  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  *  i));  errors[i]  =  Math.sqrt(getChiSquare()  /(cols  *  i));  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]    =    Math.sqrt(getChiSquare()    /(rows    *    i));    errors[i]  =  Math.sqrt(getChiSquare()  /(cols  *  i));	  	compilable	  [FE]  AssertionFailedError  	7	1	add
250	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  *  i));  mistakes[i]  =  Math.sqrt(getChiSquare()  /(rows  *  i));  [CE]  cannot  find  symbol  mistakes  [FE]        AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  *  i));  mistakes[i]  =  Math.sqrt(getChiSquare()  /(rows  *  i));  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]    =    Math.sqrt(getChiSquare()    /(rows    *    i));    mistakes[i]  =  Math.sqrt(getChiSquare()  /(rows  *  i));	  	non-compiled	[CE]  cannot  find  symbol  mistakes	7	None	add
251	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  *  i));  errors[i]  =  Math.sqrt(getChiSquare()  *(rows  *  i));  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	add	errors[i]    =    Math.sqrt(getChiSquare()    /(rows    *    i));    errors[i]  =  Math.sqrt(getChiSquare()  *(rows  *  i));	  	compilable	  [FE]  AssertionFailedError  	7	1	add
252	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  *  i));  errors[i]  =  Math.sqrt(getChiSquare()  *(rows  *  i));  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  *  i));  errors[i]  =  Math.sqrt(getChiSquare()  *(rows  *  i));  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]    =    Math.sqrt(getChiSquare()    /(rows    *    i));    errors[i]  =  Math.sqrt(getChiSquare()  *(rows  *  i));	  	compilable	  [FE]  AssertionFailedError  	7	1	add
253	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  3);  errors[i]  =  Math.sqrt(covar[i][i]  /  3);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	add	errors[i]    =    Math.sqrt(covar[i][i]    /    3);    errors[i]  =  Math.sqrt(covar[i][i]  /  3);	  	compilable	  [FE]  AssertionFailedError  	75	1	add
254	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  3);  errors[i]  =  Math.sqrt(covar[i][i]  /  3);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  3);  errors[i]  =  Math.sqrt(covar[i][i]  /  3);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]    =    Math.sqrt(covar[i][i]    /    3);    errors[i]  =  Math.sqrt(covar[i][i]  /  3);	  	compilable	  [FE]  AssertionFailedError  	75	1	add
255	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  3);  errors[i]  =  Math.sqrt(covar[i][i]  /  4);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	add	errors[i]    =    Math.sqrt(covar[i][i]    /    3);    errors[i]  =  Math.sqrt(covar[i][i]  /  4);	  	compilable	  [FE]  AssertionFailedError  	75	1	add
256	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  3);  errors[i]  =  Math.sqrt(covar[i][i]  /  4);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  3);  errors[i]  =  Math.sqrt(covar[i][i]  /  4);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]    =    Math.sqrt(covar[i][i]    /    3);    errors[i]  =  Math.sqrt(covar[i][i]  /  4);	  	compilable	  [FE]  AssertionFailedError  	75	1	add
257	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  3);  mistakes[i]  =  Math.sqrt(covar[i][i]  /  3);  [CE]  cannot  find  symbol  mistakes  [FE]        AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  3);  mistakes[i]  =  Math.sqrt(covar[i][i]  /  3);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]    =    Math.sqrt(covar[i][i]    /    3);    mistakes[i]  =  Math.sqrt(covar[i][i]  /  3);	  	non-compiled	[CE]  cannot  find  symbol  mistakes	75	None	add
258	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  3);  errors[i]  =  Math.sqrt(covar[i][i]  /  2);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	add	errors[i]    =    Math.sqrt(covar[i][i]    /    3);    errors[i]  =  Math.sqrt(covar[i][i]  /  2);	  	compilable	  [FE]  AssertionFailedError  	75	1	add
259	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  3);  errors[i]  =  Math.sqrt(covar[i][i]  /  2);  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  3);  errors[i]  =  Math.sqrt(covar[i][i]  /  2);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]    =    Math.sqrt(covar[i][i]    /    3);    errors[i]  =  Math.sqrt(covar[i][i]  /  2);	  	compilable	  [FE]  AssertionFailedError  	75	1	add
260	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]    =    Math.sqrt(covar[i][i])/    c;    errors[i]  =  Math.sqrt(covar[i][i])/  c;  errors[i]  =  Math.sqrt(covar[i][i])/  c;  errors[i]  =  Math.sqrt(covar[i][i])/  c;  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	add	errors[i]        =        Math.sqrt(covar[i][i])/        c;        errors[i]    =    Math.sqrt(covar[i][i])/    c;    errors[i]  =  Math.sqrt(covar[i][i])/  c;  errors[i]  =  Math.sqrt(covar[i][i])/  c;	  	compilable	  [FE]  AssertionFailedError  	68	1	add
261	[BUG]  [BUGGY]  errors[i]    =    Math.sqrt(covar[i][i])/    c;    errors[i]  =  Math.sqrt(covar[i][i])/  c;  errors[i]  =  Math.sqrt(covar[i][i])/  c;  errors[i]  =  Math.sqrt(covar[i][i])/  c;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]    =    Math.sqrt(covar[i][i])/    c;    errors[i]  =  Math.sqrt(covar[i][i])/  c;  errors[i]  =  Math.sqrt(covar[i][i])/  c;  errors[i]  =  Math.sqrt(covar[i][i])/  c;  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]        =        Math.sqrt(covar[i][i])/        c;        errors[i]    =    Math.sqrt(covar[i][i])/    c;    errors[i]  =  Math.sqrt(covar[i][i])/  c;  errors[i]  =  Math.sqrt(covar[i][i])/  c;	  	compilable	  [FE]  AssertionFailedError  	68	1	add
262	[BUG]  [BUGGY]  errors[i]    =    Math.sqrt(covar[i][i])/    c;    errors[i]  =  Math.sqrt(covar[i][i])/  c;  errors[i]  =  Math.sqrt(covar[i][i])/  jTj;  errors[i]  =  Math.sqrt(covar[i][i])/  c;  [CE]  cannot  find  symbol  jTj  [FE]      AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]    =    Math.sqrt(covar[i][i])/    c;    errors[i]  =  Math.sqrt(covar[i][i])/  c;  errors[i]  =  Math.sqrt(covar[i][i])/  jTj;  errors[i]  =  Math.sqrt(covar[i][i])/  c;  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]        =        Math.sqrt(covar[i][i])/        c;        errors[i]    =    Math.sqrt(covar[i][i])/    c;    errors[i]  =  Math.sqrt(covar[i][i])/  jTj;  errors[i]  =  Math.sqrt(covar[i][i])/  c;	  	non-compiled	[CE]  cannot  find  symbol  jTj	68	None	add
263	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]    =    Math.sqrt(covar[i][i])/    c;    errors[i]  =  Math.sqrt(covar[i][i])/  c;  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  errors[i]  =  Math.sqrt(covar[i][i])/  c;  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	add	errors[i]        =        Math.sqrt(covar[i][i])/        c;        errors[i]    =    Math.sqrt(covar[i][i])/    c;    errors[i]  =  Math.sqrt(covar[i][i])  *  c;  errors[i]  =  Math.sqrt(covar[i][i])/  c;	  	compilable	  [FE]  AssertionFailedError  	68	1	add
264	[BUG]  [BUGGY]  errors[i]    =    Math.sqrt(covar[i][i])/    c;    errors[i]  =  Math.sqrt(covar[i][i])/  c;  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  errors[i]  =  Math.sqrt(covar[i][i])/  c;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]    =    Math.sqrt(covar[i][i])/    c;    errors[i]  =  Math.sqrt(covar[i][i])/  c;  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  errors[i]  =  Math.sqrt(covar[i][i])/  c;  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]        =        Math.sqrt(covar[i][i])/        c;        errors[i]    =    Math.sqrt(covar[i][i])/    c;    errors[i]  =  Math.sqrt(covar[i][i])  *  c;  errors[i]  =  Math.sqrt(covar[i][i])/  c;	  	compilable	  [FE]  AssertionFailedError  	68	1	add
265	[BUG]  [BUGGY]  errors[i]    =    Math.sqrt(covar[i][i])/    c;    errors[i]  =  Math.sqrt(covar[i][i])/  c;  errors[i]  =  Math.sqrt(covar[i][i])/  c;  errors[i]  =  Math.sqrt(covar[i][i])/  jTj;  [CE]  cannot  find  symbol  jTj  [FE]          AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]    =    Math.sqrt(covar[i][i])/    c;    errors[i]  =  Math.sqrt(covar[i][i])/  c;  errors[i]  =  Math.sqrt(covar[i][i])/  c;  errors[i]  =  Math.sqrt(covar[i][i])/  jTj;  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]        =        Math.sqrt(covar[i][i])/        c;        errors[i]    =    Math.sqrt(covar[i][i])/    c;    errors[i]  =  Math.sqrt(covar[i][i])/  c;  errors[i]  =  Math.sqrt(covar[i][i])/  jTj;	  	non-compiled	[CE]  cannot  find  symbol  jTj	68	None	add
266	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  c],  cost);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  c],  cost);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i]  /  c],  cost);	  errors[i]    =    Math.sqrt(covar[i][i]    +    c],    cost);    	non-compiled	[CE]  ')'  expected	35	None	replace
267	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  -  c],  cost);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  -  c],  cost);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i]  -  c],  cost);	  errors[i]    =    Math.sqrt(covar[i][i]    +    c],    cost);    	non-compiled	[CE]  ')'  expected	35	None	replace
268	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  +  c],  cost  *  2);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  +  c],  cost  *  2);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i]  +  c],  cost  *  2);	  errors[i]    =    Math.sqrt(covar[i][i]    +    c],    cost);    	non-compiled	[CE]  ')'  expected	35	None	replace
269	[BUG]  [BUGGY]  errorCount  =  Math.sqrt(getChiSquare()  *(rows  -  i));  errors[i]  =  Math.sqrt(covar[i][i])*  c;  [CE]  cannot  find  symbol  errorCount  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errorCount  =  Math.sqrt(getChiSquare()  *(rows  -  i));  errors[i]  =  Math.sqrt(covar[i][i])*  c;  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errorCount  =  Math.sqrt(getChiSquare()  *(rows  -  i));  errors[i]  =  Math.sqrt(covar[i][i])*  c;	  errorCount    =    Math.sqrt(getChiSquare()    /(rows    -    i));    errors[i]    =    Math.sqrt(covar[i][i])*    c;    	non-compiled	[CE]  cannot  find  symbol  errorCount	111	None	replace
270	[BUG]  [BUGGY]  errorCount  =  Math.sqrt(getChiSquare()  /(rows  -  i));  errors[i]  =  Math.sqrt(covar[i][i])*  jTj;  [CE]  cannot  find  symbol  errorCount  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errorCount  =  Math.sqrt(getChiSquare()  /(rows  -  i));  errors[i]  =  Math.sqrt(covar[i][i])*  jTj;  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errorCount  =  Math.sqrt(getChiSquare()  /(rows  -  i));  errors[i]  =  Math.sqrt(covar[i][i])*  jTj;	  errorCount    =    Math.sqrt(getChiSquare()    /(rows    -    i));    errors[i]    =    Math.sqrt(covar[i][i])*    c;    	non-compiled	[CE]  cannot  find  symbol  errorCount	111	None	replace
271	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i]  /  c);  [CE]  bad  operand  types  for  binary  operator  '/'  [FE]        AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i]  /  c);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i]  /  c);	          errors[i]    =    Math.sqrt(covar[i]    *    c);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	112	None	replace
272	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i]  *  c,  cost);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]          AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i]  *  c,  cost);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i]  *  c,  cost);	          errors[i]    =    Math.sqrt(covar[i]    *    c);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	112	None	replace
273	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i]  *  jTj);  [CE]  cannot  find  symbol  jTj  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i]  *  jTj);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i]  *  jTj);	          errors[i]    =    Math.sqrt(covar[i]    *    c);    	non-compiled	[CE]  cannot  find  symbol  jTj	112	None	replace
274	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i]  *  jTj,  cols);  [CE]  cannot  find  symbol  jTj  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i]  *  jTj,  cols);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i]  *  jTj,  cols);	          errors[i]    =    Math.sqrt(covar[i]    *    c);    	non-compiled	[CE]  cannot  find  symbol  jTj	112	None	replace
275	[BUG]  [BUGGY]  int  i]  =  Math.sqrt(covar[i][i]  /  c);  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  int  i]  =  Math.sqrt(covar[i][i]  /  c);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	int  i]  =  Math.sqrt(covar[i][i]  /  c);	  errors[i]    =    Math.sqrt(covar[i][i]    /    c);    int    i]    =    Math.sqrt(covar[i][i]    /    c);    	non-compiled	[CE]  ';'  expected	96	None	replace
276	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  *(c  -  i));  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	add	errors[i]  =  Math.sqrt(getChiSquare()  *(c  -  i));	  errors[i]    =    Math.sqrt(getChiSquare()    *(rows    -    i));    	compilable	  [FE]  AssertionFailedError  	2	1	replace
277	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  *(c  -  i));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  *(c  -  i));  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(getChiSquare()  *(c  -  i));	  errors[i]    =    Math.sqrt(getChiSquare()    *(rows    -    i));    	compilable	  [FE]  AssertionFailedError  	2	1	replace
278	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  *(rows  -  i  +  1));  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	add	errors[i]  =  Math.sqrt(getChiSquare()  *(rows  -  i  +  1));	  errors[i]    =    Math.sqrt(getChiSquare()    *(rows    -    i));    	compilable	  [FE]  AssertionFailedError  	2	1	replace
279	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  *(rows  -  i  +  1));  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  *(rows  -  i  +  1));  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(getChiSquare()  *(rows  -  i  +  1));	  errors[i]    =    Math.sqrt(getChiSquare()    *(rows    -    i));    	compilable	  [FE]  AssertionFailedError  	2	1	replace
280	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  *  2);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	add	errors[i]  =  Math.sqrt(covar[i][i]  *  2);	  errors[i]    =    Math.sqrt(covar[i][i]    /    2);    	compilable	  [FE]  AssertionFailedError  	73	1	replace
281	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  *  2);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  *  2);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i]  *  2);	  errors[i]    =    Math.sqrt(covar[i][i]    /    2);    	compilable	  [FE]  AssertionFailedError  	73	1	replace
282	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  2  +  1);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	add	errors[i]  =  Math.sqrt(covar[i][i]  /  2  +  1);	  errors[i]    =    Math.sqrt(covar[i][i]    /    2);    	compilable	  [FE]  AssertionFailedError  	73	1	replace
283	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  2  +  1);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  2  +  1);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i]  /  2  +  1);	  errors[i]    =    Math.sqrt(covar[i][i]    /    2);    	compilable	  [FE]  AssertionFailedError  	73	1	replace
284	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  -  1]);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  -  1]);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i]  -  1]);	  errors[i]    =    Math.sqrt(covar[i][i]    -    c]);    	non-compiled	[CE]  ')'  expected	34	None	replace
285	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  %  c]);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  %  c]);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i]  %  c]);	  errors[i]    =    Math.sqrt(covar[i][i]    -    c]);    	non-compiled	[CE]  ')'  expected	34	None	replace
286	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  *(rows  *  i));  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	add	errors[i]  =  Math.sqrt(getChiSquare()  *(rows  *  i));	  errors[i]    =    Math.sqrt(getChiSquare()    /(rows    *    i));    	compilable	  [FE]  AssertionFailedError  	8	1	replace
287	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  *(rows  *  i));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  *(rows  *  i));  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(getChiSquare()  *(rows  *  i));	  errors[i]    =    Math.sqrt(getChiSquare()    /(rows    *    i));    	compilable	  [FE]  AssertionFailedError  	8	1	replace
288	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  *  i)+  1);  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	add	errors[i]  =  Math.sqrt(getChiSquare()  /(rows  *  i)+  1);	  errors[i]    =    Math.sqrt(getChiSquare()    /(rows    *    i));    	compilable	  [FE]  AssertionFailedError  	8	1	replace
289	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  *  i)+  1);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  *  i)+  1);  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(getChiSquare()  /(rows  *  i)+  1);	  errors[i]    =    Math.sqrt(getChiSquare()    /(rows    *    i));    	compilable	  [FE]  AssertionFailedError  	8	1	replace
290	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  *  i  +  1));  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	add	errors[i]  =  Math.sqrt(getChiSquare()  /(rows  *  i  +  1));	  errors[i]    =    Math.sqrt(getChiSquare()    /(rows    *    i));    	compilable	  [FE]  AssertionFailedError  	8	1	replace
291	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  *  i  +  1));  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  *  i  +  1));  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(getChiSquare()  /(rows  *  i  +  1));	  errors[i]    =    Math.sqrt(getChiSquare()    /(rows    *    i));    	compilable	  [FE]  AssertionFailedError  	8	1	replace
292	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  *  cols));  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	add	errors[i]  =  Math.sqrt(getChiSquare()  /(rows  *  cols));	  errors[i]    =    Math.sqrt(getChiSquare()    /(rows    *    i));    	compilable	  [FE]  AssertionFailedError  	8	1	replace
293	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  *  cols));  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  *  cols));  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(getChiSquare()  /(rows  *  cols));	  errors[i]    =    Math.sqrt(getChiSquare()    /(rows    *    i));    	compilable	  [FE]  AssertionFailedError  	8	1	replace
294	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  2]  *  cost;  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  2]  *  cost;  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i]  /  2]  *  cost;	  errors[i]    =    Math.sqrt(covar[i][i]    /    2]    *    c;    	non-compiled	[CE]  ')'  expected	11	None	replace
295	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  c));  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  c));  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i]  /  c));	  errors[i]    =    Math.sqrt(covar[i][i]    /    c);    errors[i]    =    Math.sqrt(covar[i][i]    /    c));    	non-compiled	[CE]  ';'  expected	46	None	replace
296	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  2  +  c));  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  2  +  c));  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i]  /  2  +  c));	  errors[i]    =    Math.sqrt(covar[i][i]    /    c);    errors[i]    =    Math.sqrt(covar[i][i]    /    c));    	non-compiled	[CE]  ';'  expected	46	None	replace
297	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  covar[i][1];  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	add	errors[i]  =  covar[i][1];	          errors[i]    =    covar[i][0];    	compilable	  [FE]  AssertionFailedError  	90	1	replace
298	[BUG]  [BUGGY]  errors[i]  =  covar[i][1];  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  covar[i][1];  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  covar[i][1];	          errors[i]    =    covar[i][0];    	compilable	  [FE]  AssertionFailedError  	90	1	replace
299	[BUG]  [BUGGY]  errors[i]  =  c[i][0];  [CE]  array  required,  but  double  found  [FE]      AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  c[i][0];  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  c[i][0];	          errors[i]    =    covar[i][0];    	non-compiled	[CE]  array  required,  but  double  found	90	None	replace
300	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  covar[i][0]  +  c;  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	add	errors[i]  =  covar[i][0]  +  c;	          errors[i]    =    covar[i][0];    	compilable	  [FE]  AssertionFailedError  	90	1	replace
301	[BUG]  [BUGGY]  errors[i]  =  covar[i][0]  +  c;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  covar[i][0]  +  c;  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  covar[i][0]  +  c;	          errors[i]    =    covar[i][0];    	compilable	  [FE]  AssertionFailedError  	90	1	replace
302	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  *  jTj,  cost);  [CE]  cannot  find  symbol  jTj  [FE]        AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  *  jTj,  cost);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i]  *  jTj,  cost);	  errors[i]    =    Math.sqrt(covar[i][i]    *    c,    cost);    	non-compiled	[CE]  cannot  find  symbol  jTj	77	None	replace
303	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  *  jTj,  covar[i]);  [CE]  cannot  find  symbol  jTj  [FE]          AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  *  jTj,  covar[i]);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i]  *  jTj,  covar[i]);	  errors[i]    =    Math.sqrt(covar[i][i]    *    c,    cost);    	non-compiled	[CE]  cannot  find  symbol  jTj	77	None	replace
304	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  *  c,  errorCount,  cost);  [CE]  cannot  find  symbol  errorCount  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  *  c,  errorCount,  cost);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i]  *  c,  errorCount,  cost);	  errors[i]    =    Math.sqrt(covar[i][i]    *    c,    cost);    	non-compiled	[CE]  cannot  find  symbol  errorCount	77	None	replace
305	[BUG]  [BUGGY]  c  =  Math.sqrt(getChiSquare()  /(i  +  1));  [CE]  cannot  assign  a  value  to  final  variable  c  [FE]                    AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  c  =  Math.sqrt(getChiSquare()  /(i  +  1));  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	c  =  Math.sqrt(getChiSquare()  /(i  +  1));	  c    =    Math.sqrt(getChiSquare()    *(i    +    1));    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  c	67	None	replace
306	[BUG]  [BUGGY]  c  =  Math.sqrt(getChiSquare()  *(i  +  1),  cols);  [CE]  cannot  assign  a  value  to  final  variable  c  [FE]                      AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  c  =  Math.sqrt(getChiSquare()  *(i  +  1),  cols);  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	c  =  Math.sqrt(getChiSquare()  *(i  +  1),  cols);	  c    =    Math.sqrt(getChiSquare()    *(i    +    1));    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  c	67	None	replace
307	[BUG]  [BUGGY]  c  =  Math.sqrt(getChiSquare()  *(i  +  1),  errors[i]);  [CE]  cannot  assign  a  value  to  final  variable  c  [FE]                        AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  c  =  Math.sqrt(getChiSquare()  *(i  +  1),  errors[i]);  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	c  =  Math.sqrt(getChiSquare()  *(i  +  1),  errors[i]);	  c    =    Math.sqrt(getChiSquare()    *(i    +    1));    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  c	67	None	replace
308	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]          errors[i]    =    Math.sqrt(getChiSquare()    /(rows    -    i));    errors[i]  =  Math.sqrt(getChiSquare()  /(rows  *  i));  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i));  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  *  i));  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	add	                errors[i]        =        Math.sqrt(getChiSquare()        /(rows        -        i));        errors[i]    =    Math.sqrt(getChiSquare()    /(rows    *    i));    errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i));  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  *  i));	  	compilable	  [FE]  AssertionFailedError  	17	1	add
309	[BUG]  [BUGGY]          errors[i]    =    Math.sqrt(getChiSquare()    /(rows    -    i));    errors[i]  =  Math.sqrt(getChiSquare()  /(rows  *  i));  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i));  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  *  i));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]          errors[i]    =    Math.sqrt(getChiSquare()    /(rows    -    i));    errors[i]  =  Math.sqrt(getChiSquare()  /(rows  *  i));  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i));  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  *  i));  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	                errors[i]        =        Math.sqrt(getChiSquare()        /(rows        -        i));        errors[i]    =    Math.sqrt(getChiSquare()    /(rows    *    i));    errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i));  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  *  i));	  	compilable	  [FE]  AssertionFailedError  	17	1	add
310	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]          errors[i]    =    Math.sqrt(getChiSquare()    /(rows    -    i));    errors[i]  =  Math.sqrt(getChiSquare()  /(rows  *  i));  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  *  i));  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  *  i));  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	add	                errors[i]        =        Math.sqrt(getChiSquare()        /(rows        -        i));        errors[i]    =    Math.sqrt(getChiSquare()    /(rows    *    i));    errors[i]  =  Math.sqrt(getChiSquare()  /(rows  *  i));  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  *  i));	  	compilable	  [FE]  AssertionFailedError  	17	1	add
311	[BUG]  [BUGGY]          errors[i]    =    Math.sqrt(getChiSquare()    /(rows    -    i));    errors[i]  =  Math.sqrt(getChiSquare()  /(rows  *  i));  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  *  i));  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  *  i));  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]          errors[i]    =    Math.sqrt(getChiSquare()    /(rows    -    i));    errors[i]  =  Math.sqrt(getChiSquare()  /(rows  *  i));  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  *  i));  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  *  i));  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	                errors[i]        =        Math.sqrt(getChiSquare()        /(rows        -        i));        errors[i]    =    Math.sqrt(getChiSquare()    /(rows    *    i));    errors[i]  =  Math.sqrt(getChiSquare()  /(rows  *  i));  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  *  i));	  	compilable	  [FE]  AssertionFailedError  	17	1	add
312	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]          errors[i]    =    Math.sqrt(getChiSquare()    /(rows    -    i));    errors[i]  =  Math.sqrt(getChiSquare()  /(rows  *  i));  errors[i]  =  Math.sqrt(getChiSquare()  /(cols  -  i));  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  *  i));  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	add	                errors[i]        =        Math.sqrt(getChiSquare()        /(rows        -        i));        errors[i]    =    Math.sqrt(getChiSquare()    /(rows    *    i));    errors[i]  =  Math.sqrt(getChiSquare()  /(cols  -  i));  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  *  i));	  	compilable	  [FE]  AssertionFailedError  	17	1	add
313	[BUG]  [BUGGY]          errors[i]    =    Math.sqrt(getChiSquare()    /(rows    -    i));    errors[i]  =  Math.sqrt(getChiSquare()  /(rows  *  i));  errors[i]  =  Math.sqrt(getChiSquare()  /(cols  -  i));  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  *  i));  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]          errors[i]    =    Math.sqrt(getChiSquare()    /(rows    -    i));    errors[i]  =  Math.sqrt(getChiSquare()  /(rows  *  i));  errors[i]  =  Math.sqrt(getChiSquare()  /(cols  -  i));  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  *  i));  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	                errors[i]        =        Math.sqrt(getChiSquare()        /(rows        -        i));        errors[i]    =    Math.sqrt(getChiSquare()    /(rows    *    i));    errors[i]  =  Math.sqrt(getChiSquare()  /(cols  -  i));  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  *  i));	  	compilable	  [FE]  AssertionFailedError  	17	1	add
314	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]          errors[i]    =    Math.sqrt(getChiSquare()    /(rows    -    i));    errors[i]  =  Math.sqrt(getChiSquare()  /(rows  *  i));  errors[i]  =  Math.sqrt(getChiSquare()  *(rows  -  i));  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  *  i));  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	add	                errors[i]        =        Math.sqrt(getChiSquare()        /(rows        -        i));        errors[i]    =    Math.sqrt(getChiSquare()    /(rows    *    i));    errors[i]  =  Math.sqrt(getChiSquare()  *(rows  -  i));  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  *  i));	  	compilable	  [FE]  AssertionFailedError  	17	1	add
315	[BUG]  [BUGGY]          errors[i]    =    Math.sqrt(getChiSquare()    /(rows    -    i));    errors[i]  =  Math.sqrt(getChiSquare()  /(rows  *  i));  errors[i]  =  Math.sqrt(getChiSquare()  *(rows  -  i));  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  *  i));  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]          errors[i]    =    Math.sqrt(getChiSquare()    /(rows    -    i));    errors[i]  =  Math.sqrt(getChiSquare()  /(rows  *  i));  errors[i]  =  Math.sqrt(getChiSquare()  *(rows  -  i));  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  *  i));  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	                errors[i]        =        Math.sqrt(getChiSquare()        /(rows        -        i));        errors[i]    =    Math.sqrt(getChiSquare()    /(rows    *    i));    errors[i]  =  Math.sqrt(getChiSquare()  *(rows  -  i));  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  *  i));	  	compilable	  [FE]  AssertionFailedError  	17	1	add
316	[BUG]  [BUGGY]          errors[i]    =    Math.sqrt(getChiSquare()    /(rows    -    i));    errors[i]  =  Math.sqrt(getChiSquare()  /(rows  *  i));  mistakes[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i));  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  *  i));  [CE]  cannot  find  symbol  mistakes  [FE]            AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]          errors[i]    =    Math.sqrt(getChiSquare()    /(rows    -    i));    errors[i]  =  Math.sqrt(getChiSquare()  /(rows  *  i));  mistakes[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i));  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  *  i));  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	                errors[i]        =        Math.sqrt(getChiSquare()        /(rows        -        i));        errors[i]    =    Math.sqrt(getChiSquare()    /(rows    *    i));    mistakes[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i));  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  *  i));	  	non-compiled	[CE]  cannot  find  symbol  mistakes	17	None	add
317	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i)+  1);  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i)+  1);  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	add	errors[i]    =    Math.sqrt(getChiSquare()    /(rows    -    i)+    1);    errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i)+  1);	  	compilable	  [FE]  AssertionFailedError  	5	1	add
318	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i)+  1);  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i)+  1);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i)+  1);  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i)+  1);  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]    =    Math.sqrt(getChiSquare()    /(rows    -    i)+    1);    errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i)+  1);	  	compilable	  [FE]  AssertionFailedError  	5	1	add
319	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i)+  1);  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i)+  1));  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i)+  1);  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i)+  1));  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]    =    Math.sqrt(getChiSquare()    /(rows    -    i)+    1);    errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i)+  1));	  	non-compiled	[CE]  ';'  expected	5	None	add
320	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i)+  1);  mistakes[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i)+  1);  [CE]  cannot  find  symbol  mistakes  [FE]        AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i)+  1);  mistakes[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i)+  1);  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]    =    Math.sqrt(getChiSquare()    /(rows    -    i)+    1);    mistakes[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i)+  1);	  	non-compiled	[CE]  cannot  find  symbol  mistakes	5	None	add
321	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i)+  1);  errors[i]  =  Math.sqrt(getChiSquare()  *(rows  -  i)+  1);  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	add	errors[i]    =    Math.sqrt(getChiSquare()    /(rows    -    i)+    1);    errors[i]  =  Math.sqrt(getChiSquare()  *(rows  -  i)+  1);	  	compilable	  [FE]  AssertionFailedError  	5	1	add
322	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i)+  1);  errors[i]  =  Math.sqrt(getChiSquare()  *(rows  -  i)+  1);  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i)+  1);  errors[i]  =  Math.sqrt(getChiSquare()  *(rows  -  i)+  1);  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]    =    Math.sqrt(getChiSquare()    /(rows    -    i)+    1);    errors[i]  =  Math.sqrt(getChiSquare()  *(rows  -  i)+  1);	  	compilable	  [FE]  AssertionFailedError  	5	1	add
323	[BUG]  [BUGGY]  c  =  Math.sqrt(getChiSquare()  *(rows  -  i)+  1);  [CE]  cannot  assign  a  value  to  final  variable  c  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  c  =  Math.sqrt(getChiSquare()  *(rows  -  i)+  1);  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	c  =  Math.sqrt(getChiSquare()  *(rows  -  i)+  1);	  c    =    Math.sqrt(getChiSquare()    /(rows    -    i)+    1);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  c	99	None	replace
324	[BUG]  [BUGGY]  c  =  Math.sqrt(getChiSquare()  /(rows  -  i)+  2);  [CE]  cannot  assign  a  value  to  final  variable  c  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  c  =  Math.sqrt(getChiSquare()  /(rows  -  i)+  2);  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	c  =  Math.sqrt(getChiSquare()  /(rows  -  i)+  2);	  c    =    Math.sqrt(getChiSquare()    /(rows    -    i)+    1);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  c	99	None	replace
325	[BUG]  [BUGGY]  c  =  Math.sqrt(getChiSquare()  /(cols  -  i)+  1);  [CE]  cannot  assign  a  value  to  final  variable  c  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  c  =  Math.sqrt(getChiSquare()  /(cols  -  i)+  1);  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	c  =  Math.sqrt(getChiSquare()  /(cols  -  i)+  1);	  c    =    Math.sqrt(getChiSquare()    /(rows    -    i)+    1);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  c	99	None	replace
326	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i])*  cost;  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	add	errors[i]  =  Math.sqrt(covar[i][i])*  cost;	  errors[i]    =    Math.sqrt(covar[i][i])*    jTj;    	compilable	  [FE]  AssertionFailedError  	27	1	replace
327	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i])*  cost;  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i])*  cost;  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i])*  cost;	  errors[i]    =    Math.sqrt(covar[i][i])*    jTj;    	compilable	  [FE]  AssertionFailedError  	27	1	replace
328	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i])*  jF;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                      AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i])*  jF;  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i])*  jF;	  errors[i]    =    Math.sqrt(covar[i][i])*    jTj;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	27	None	replace
329	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i])*  error;  [CE]  cannot  find  symbol  error  [FE]                        AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i])*  error;  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i])*  error;	  errors[i]    =    Math.sqrt(covar[i][i])*    jTj;    	non-compiled	[CE]  cannot  find  symbol  error	27	None	replace
330	[BUG]  [BUGGY]  double  c  =  Math.sqrt(getChiSquare()  *(rows  -  i)+  1);  [CE]  variable  c  is  already  defined  in  method  guessParametersErrors()  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  double  c  =  Math.sqrt(getChiSquare()  *(rows  -  i)+  1);  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	double  c  =  Math.sqrt(getChiSquare()  *(rows  -  i)+  1);	  double    c    =    Math.sqrt(getChiSquare()    /(rows    -    i)+    1);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  guessParametersErrors()	88	None	replace
331	[BUG]  [BUGGY]  double  c  =  Math.sqrt(getChiSquare()  /(rows  -  i)+  2);  [CE]  variable  c  is  already  defined  in  method  guessParametersErrors()  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  double  c  =  Math.sqrt(getChiSquare()  /(rows  -  i)+  2);  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	double  c  =  Math.sqrt(getChiSquare()  /(rows  -  i)+  2);	  double    c    =    Math.sqrt(getChiSquare()    /(rows    -    i)+    1);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  guessParametersErrors()	88	None	replace
332	[BUG]  [BUGGY]  double  c  =  Math.sqrt(getChiSquare()  /(cols  -  i)+  1);  [CE]  variable  c  is  already  defined  in  method  guessParametersErrors()  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  double  c  =  Math.sqrt(getChiSquare()  /(cols  -  i)+  1);  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	double  c  =  Math.sqrt(getChiSquare()  /(cols  -  i)+  1);	  double    c    =    Math.sqrt(getChiSquare()    /(rows    -    i)+    1);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  guessParametersErrors()	88	None	replace
333	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i])/  2;  errors[i]  =  Math.sqrt(covar[i][i])/  2;  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	add	errors[i]    =    Math.sqrt(covar[i][i])/    2;    errors[i]  =  Math.sqrt(covar[i][i])/  2;	  	compilable	  [FE]  AssertionFailedError  	55	1	add
334	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i])/  2;  errors[i]  =  Math.sqrt(covar[i][i])/  2;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i])/  2;  errors[i]  =  Math.sqrt(covar[i][i])/  2;  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]    =    Math.sqrt(covar[i][i])/    2;    errors[i]  =  Math.sqrt(covar[i][i])/  2;	  	compilable	  [FE]  AssertionFailedError  	55	1	add
335	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i])/  2;  mistakes[i]  =  Math.sqrt(covar[i][i])/  2;  [CE]  cannot  find  symbol  mistakes  [FE]      AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i])/  2;  mistakes[i]  =  Math.sqrt(covar[i][i])/  2;  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]    =    Math.sqrt(covar[i][i])/    2;    mistakes[i]  =  Math.sqrt(covar[i][i])/  2;	  	non-compiled	[CE]  cannot  find  symbol  mistakes	55	None	add
336	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i])/  2;  errors[i]  =  Math.sqrt(covar[i][i])/  3;  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	add	errors[i]    =    Math.sqrt(covar[i][i])/    2;    errors[i]  =  Math.sqrt(covar[i][i])/  3;	  	compilable	  [FE]  AssertionFailedError  	55	1	add
337	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i])/  2;  errors[i]  =  Math.sqrt(covar[i][i])/  3;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i])/  2;  errors[i]  =  Math.sqrt(covar[i][i])/  3;  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]    =    Math.sqrt(covar[i][i])/    2;    errors[i]  =  Math.sqrt(covar[i][i])/  3;	  	compilable	  [FE]  AssertionFailedError  	55	1	add
338	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  c,  errors[i]);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  c,  errors[i]);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i]  /  c,  errors[i]);	  errors[i]    =    Math.sqrt(covar[i][i]    /    c);    i]    =    Math.sqrt(covar[i][i]    /    c);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	95	None	replace
339	[BUG]  [BUGGY]  c  =  Math.sqrt(getChiSquare()  *(rows  -  i));  errors[i]  =  Math.sqrt(covar[i][i])*  cost;  [CE]  cannot  assign  a  value  to  final  variable  c  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  c  =  Math.sqrt(getChiSquare()  *(rows  -  i));  errors[i]  =  Math.sqrt(covar[i][i])*  cost;  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	c  =  Math.sqrt(getChiSquare()  *(rows  -  i));  errors[i]  =  Math.sqrt(covar[i][i])*  cost;	  c    =    Math.sqrt(getChiSquare()    *(rows    -    i));    errors[i]    =    Math.sqrt(covar[i][i])*    c;    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  c	26	None	replace
340	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  c;  errors[i]  =  c;  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	add	errors[i]    =    c;    errors[i]  =  c;	  	compilable	  [FE]  AssertionFailedError  	53	1	add
341	[BUG]  [BUGGY]  errors[i]  =  c;  errors[i]  =  c;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  c;  errors[i]  =  c;  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]    =    c;    errors[i]  =  c;	  	compilable	  [FE]  AssertionFailedError  	53	1	add
342	[BUG]  [BUGGY]  errors[i]  =  c;  ((  VectorialConvergenceChecker)c).remaining();  errors[i]  =  c;  [CE]  inconvertible  types  [FE]      AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  c;  ((  VectorialConvergenceChecker)c).remaining();  errors[i]  =  c;  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]    =    c;    ((  VectorialConvergenceChecker)c).remaining();  errors[i]  =  c;	  	non-compiled	[CE]  inconvertible  types	53	None	add
343	[BUG]  [BUGGY]  errors[i]  =  c;  ((  VectorialConvergenceChecker)c).checkErrors(covar[i]);  [CE]  inconvertible  types  [FE]        AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  c;  ((  VectorialConvergenceChecker)c).checkErrors(covar[i]);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]    =    c;    ((  VectorialConvergenceChecker)c).checkErrors(covar[i]);	  	non-compiled	[CE]  inconvertible  types	53	None	add
344	[BUG]  [BUGGY]  errors[i]  =  c;  ((  VectorialConvergenceChecker)c).checkError(covar[i]);  [CE]  inconvertible  types  [FE]          AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  c;  ((  VectorialConvergenceChecker)c).checkError(covar[i]);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]    =    c;    ((  VectorialConvergenceChecker)c).checkError(covar[i]);	  	non-compiled	[CE]  inconvertible  types	53	None	add
345	[BUG]  [BUGGY]  errors[i]  =  c;  ((  VectorialConvergenceChecker)c).checkErrors(cols[i]);  [CE]  array  required,  but  int  found  [FE]            AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  c;  ((  VectorialConvergenceChecker)c).checkErrors(cols[i]);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]    =    c;    ((  VectorialConvergenceChecker)c).checkErrors(cols[i]);	  	non-compiled	[CE]  array  required,  but  int  found	53	None	add
346	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  cost);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	add	errors[i]  =  Math.sqrt(covar[i][i]  /  cost);	  errors[i]    =    Math.sqrt(covar[i][i]    *    cost);    	compilable	  [FE]  AssertionFailedError  	39	1	replace
347	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  cost);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  cost);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i]  /  cost);	  errors[i]    =    Math.sqrt(covar[i][i]    *    cost);    	compilable	  [FE]  AssertionFailedError  	39	1	replace
348	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][0]  *  c);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	add	errors[i]  =  Math.sqrt(covar[i][0]  *  c);	  errors[i]    =    Math.sqrt(covar[i][i]    *    cost);    	compilable	  [FE]  AssertionFailedError  	39	1	replace
349	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][0]  *  c);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][0]  *  c);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][0]  *  c);	  errors[i]    =    Math.sqrt(covar[i][i]    *    cost);    	compilable	  [FE]  AssertionFailedError  	39	1	replace
350	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  jF);  [CE]  bad  operand  types  for  binary  operator  '/'  [FE]                    AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  jF);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i]  /  jF);	  errors[i]    =    Math.sqrt(covar[i][i]    *    jF);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	41	None	replace
351	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  *  error);  [CE]  cannot  find  symbol  error  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  *  error);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i]  *  error);	  errors[i]    =    Math.sqrt(covar[i][i]    *    coefficient);    	non-compiled	[CE]  cannot  find  symbol  error	115	None	replace
352	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(rows  -  i));  errors[i]  =  Math.sqrt(covar[i][i]  *  jTj);  [CE]  variable  c  is  already  defined  in  method  guessParametersErrors()  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(rows  -  i));  errors[i]  =  Math.sqrt(covar[i][i]  *  jTj);  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	final  double  c  =  Math.sqrt(getChiSquare()  *(rows  -  i));  errors[i]  =  Math.sqrt(covar[i][i]  *  jTj);	  double    c    =    Math.sqrt(getChiSquare()    *(rows    -    i));    errors[i]    =    Math.sqrt(covar[i][i]    *    jTj);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  guessParametersErrors()	86	None	replace
353	[BUG]  [BUGGY]  c  =  Math.sqrt(getChiSquare()  *(rows  -  i));  errors[i]  =  Math.sqrt(covar[i][i]  *  jTj,  cost);  [CE]  cannot  assign  a  value  to  final  variable  c  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  c  =  Math.sqrt(getChiSquare()  *(rows  -  i));  errors[i]  =  Math.sqrt(covar[i][i]  *  jTj,  cost);  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	c  =  Math.sqrt(getChiSquare()  *(rows  -  i));  errors[i]  =  Math.sqrt(covar[i][i]  *  jTj,  cost);	  double    c    =    Math.sqrt(getChiSquare()    *(rows    -    i));    errors[i]    =    Math.sqrt(covar[i][i]    *    jTj);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  c	86	None	replace
354	[BUG]  [BUGGY]  c  =  Math.sqrt(getChiSquare()  *(rows  -  i));  errors[i]  =  Math.sqrt(covar[i][i]  *  jTj,  cols);  [CE]  cannot  assign  a  value  to  final  variable  c  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  c  =  Math.sqrt(getChiSquare()  *(rows  -  i));  errors[i]  =  Math.sqrt(covar[i][i]  *  jTj,  cols);  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	c  =  Math.sqrt(getChiSquare()  *(rows  -  i));  errors[i]  =  Math.sqrt(covar[i][i]  *  jTj,  cols);	  double    c    =    Math.sqrt(getChiSquare()    *(rows    -    i));    errors[i]    =    Math.sqrt(covar[i][i]    *    jTj);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  c	86	None	replace
355	[BUG]  [BUGGY]  c  =  Math.sqrt(getChiSquare()  *(covar[i]  -  i));  [CE]  cannot  assign  a  value  to  final  variable  c  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  c  =  Math.sqrt(getChiSquare()  *(covar[i]  -  i));  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	c  =  Math.sqrt(getChiSquare()  *(covar[i]  -  i));	  c    =    Math.sqrt(getChiSquare()    *(rows[i]    -    i));    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  c	66	None	replace
356	[BUG]  [BUGGY]  mistakes[i]  =  Math.sqrt(covar[i][i]  *  c);  [CE]  cannot  find  symbol  mistakes  [FE]          AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  mistakes[i]  =  Math.sqrt(covar[i][i]  *  c);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	mistakes[i]  =  Math.sqrt(covar[i][i]  *  c);	  errors[i]    =    Math.sqrt(covar[i][i]    *    c);    mistakes[i]    =    Math.sqrt(covar[i][i]    *    c);    	non-compiled	[CE]  cannot  find  symbol  mistakes	63	None	replace
357	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  /(cols  *  i));  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	add	errors[i]  =  Math.sqrt(getChiSquare()  /(cols  *  i));	          errors[i]    =    Math.sqrt(getChiSquare()    /(rows    -    i));    errors[i]    =    Math.sqrt(getChiSquare()    /(rows    *    i));    	compilable	  [FE]  AssertionFailedError  	18	1	replace
358	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  /(cols  *  i));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  /(cols  *  i));  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(getChiSquare()  /(cols  *  i));	          errors[i]    =    Math.sqrt(getChiSquare()    /(rows    -    i));    errors[i]    =    Math.sqrt(getChiSquare()    /(rows    *    i));    	compilable	  [FE]  AssertionFailedError  	18	1	replace
359	[BUG]  [BUGGY]  c  =  Math.sqrt(getChiSquare()  *(i  -  covars[i]));  [CE]  cannot  assign  a  value  to  final  variable  c  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  c  =  Math.sqrt(getChiSquare()  *(i  -  covars[i]));  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	c  =  Math.sqrt(getChiSquare()  *(i  -  covars[i]));	  c    =    Math.sqrt(getChiSquare()    *(covars    -    i));    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  c	94	None	replace
360	[BUG]  [BUGGY]  c  =  Math.sqrt(getChiSquare()  *(covars[i]  -  i));  [CE]  cannot  assign  a  value  to  final  variable  c  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  c  =  Math.sqrt(getChiSquare()  *(covars[i]  -  i));  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	c  =  Math.sqrt(getChiSquare()  *(covars[i]  -  i));	  c    =    Math.sqrt(getChiSquare()    *(covars    -    i));    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  c	94	None	replace
361	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i)*  c);  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i)*  c);  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	add	errors[i]    =    Math.sqrt(getChiSquare()    /(rows    -    i)*    c);    errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i)*  c);	  	compilable	  [FE]  AssertionFailedError  	82	1	add
362	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i)*  c);  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i)*  c);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i)*  c);  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i)*  c);  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]    =    Math.sqrt(getChiSquare()    /(rows    -    i)*    c);    errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i)*  c);	  	compilable	  [FE]  AssertionFailedError  	82	1	add
363	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i)*  c);  mistakes[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i)*  c);  [CE]  cannot  find  symbol  mistakes  [FE]      AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i)*  c);  mistakes[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i)*  c);  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]    =    Math.sqrt(getChiSquare()    /(rows    -    i)*    c);    mistakes[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i)*  c);	  	non-compiled	[CE]  cannot  find  symbol  mistakes	82	None	add
364	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i)*  c);  errors[i]  =  Math.sqrt(getChiSquare()  /(cols  -  i)*  c);  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	add	errors[i]    =    Math.sqrt(getChiSquare()    /(rows    -    i)*    c);    errors[i]  =  Math.sqrt(getChiSquare()  /(cols  -  i)*  c);	  	compilable	  [FE]  AssertionFailedError  	82	1	add
365	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i)*  c);  errors[i]  =  Math.sqrt(getChiSquare()  /(cols  -  i)*  c);  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i)*  c);  errors[i]  =  Math.sqrt(getChiSquare()  /(cols  -  i)*  c);  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]    =    Math.sqrt(getChiSquare()    /(rows    -    i)*    c);    errors[i]  =  Math.sqrt(getChiSquare()  /(cols  -  i)*  c);	  	compilable	  [FE]  AssertionFailedError  	82	1	add
366	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i])/  jTj;  c  =  Math.sqrt(covar[i][i])/  jF;  [CE]  cannot  find  symbol  jTj  [FE]          AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i])/  jTj;  c  =  Math.sqrt(covar[i][i])/  jF;  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i])/  jTj;  c  =  Math.sqrt(covar[i][i])/  jF;	  errors[i]    =    Math.sqrt(covar[i][i])/    c;    c    =    Math.sqrt(covar[i][i])/    c;    	non-compiled	[CE]  cannot  find  symbol  jTj	85	None	replace
367	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i])/  c;  c  =  Math.sqrt(covar[i][i])/  jTj;  [CE]  cannot  assign  a  value  to  final  variable  c  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i])/  c;  c  =  Math.sqrt(covar[i][i])/  jTj;  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i])/  c;  c  =  Math.sqrt(covar[i][i])/  jTj;	  errors[i]    =    Math.sqrt(covar[i][i])/    c;    c    =    Math.sqrt(covar[i][i])/    c;    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  c	85	None	replace
368	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  cost  /  c);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  cost  /  c);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i],  cost  /  c);	  errors[i]    =    Math.sqrt(covar[i][i]    /    c);    mistakes[i]    =    Math.sqrt(covar[i][i]    /    c);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	45	None	replace
369	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]    =    Math.sqrt(covar[i][i]    /    c);    errors[i]  =  Math.sqrt(covar[i][i]  /  c);  errors[i]  =  Math.sqrt(covar[i][0]  /  c);  errors[i]  =  Math.sqrt(covar[i][0]  /  c);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	add	errors[i]        =        Math.sqrt(covar[i][i]        /        c);        errors[i]    =    Math.sqrt(covar[i][i]    /    c);    errors[i]  =  Math.sqrt(covar[i][0]  /  c);  errors[i]  =  Math.sqrt(covar[i][0]  /  c);	  	compilable	  [FE]  AssertionFailedError  	43	1	add
370	[BUG]  [BUGGY]  errors[i]    =    Math.sqrt(covar[i][i]    /    c);    errors[i]  =  Math.sqrt(covar[i][i]  /  c);  errors[i]  =  Math.sqrt(covar[i][0]  /  c);  errors[i]  =  Math.sqrt(covar[i][0]  /  c);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]    =    Math.sqrt(covar[i][i]    /    c);    errors[i]  =  Math.sqrt(covar[i][i]  /  c);  errors[i]  =  Math.sqrt(covar[i][0]  /  c);  errors[i]  =  Math.sqrt(covar[i][0]  /  c);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]        =        Math.sqrt(covar[i][i]        /        c);        errors[i]    =    Math.sqrt(covar[i][i]    /    c);    errors[i]  =  Math.sqrt(covar[i][0]  /  c);  errors[i]  =  Math.sqrt(covar[i][0]  /  c);	  	compilable	  [FE]  AssertionFailedError  	43	1	add
371	[BUG]  [BUGGY]  errors[i]  =  covar[i],  cost.doubleValue();  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  covar[i],  cost.doubleValue();  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  covar[i],  cost.doubleValue();	  errors[i]    =    covar[i].doubleValue();    	non-compiled	[CE]  ';'  expected	50	None	replace
372	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i)+  1);  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i)+  1)  *  c;  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	add	errors[i]    =    Math.sqrt(getChiSquare()    /(rows    -    i)+    1);    errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i)+  1)  *  c;	  	compilable	  [FE]  AssertionFailedError  	5	1	add
373	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i)+  1);  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i)+  1)  *  c;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i)+  1);  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i)+  1)  *  c;  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]    =    Math.sqrt(getChiSquare()    /(rows    -    i)+    1);    errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i)+  1)  *  c;	  	compilable	  [FE]  AssertionFailedError  	5	1	add
374	[BUG]  [BUGGY]          errors[i]    =    Math.sqrt(getChiSquare()    /(rows    -    i));    errors[i]  =  Math.sqrt(getChiSquare()  /(cols  -  i));  mistakes[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i));  errors[i]  =  Math.sqrt(getChiSquare()  /(cols  -  i));  [CE]  cannot  find  symbol  mistakes  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]          errors[i]    =    Math.sqrt(getChiSquare()    /(rows    -    i));    errors[i]  =  Math.sqrt(getChiSquare()  /(cols  -  i));  mistakes[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i));  errors[i]  =  Math.sqrt(getChiSquare()  /(cols  -  i));  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	                errors[i]        =        Math.sqrt(getChiSquare()        /(rows        -        i));        errors[i]    =    Math.sqrt(getChiSquare()    /(cols    -    i));    mistakes[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i));  errors[i]  =  Math.sqrt(getChiSquare()  /(cols  -  i));	  	non-compiled	[CE]  cannot  find  symbol  mistakes	14	None	add
375	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]          errors[i]    =    Math.sqrt(getChiSquare()    /(rows    -    i));    errors[i]  =  Math.sqrt(getChiSquare()  /(cols  -  i));  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i));  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	add	                errors[i]        =        Math.sqrt(getChiSquare()        /(rows        -        i));        errors[i]    =    Math.sqrt(getChiSquare()    /(cols    -    i));    errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i));	  	compilable	  [FE]  AssertionFailedError  	14	1	add
376	[BUG]  [BUGGY]          errors[i]    =    Math.sqrt(getChiSquare()    /(rows    -    i));    errors[i]  =  Math.sqrt(getChiSquare()  /(cols  -  i));  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i));  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]          errors[i]    =    Math.sqrt(getChiSquare()    /(rows    -    i));    errors[i]  =  Math.sqrt(getChiSquare()  /(cols  -  i));  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i));  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	                errors[i]        =        Math.sqrt(getChiSquare()        /(rows        -        i));        errors[i]    =    Math.sqrt(getChiSquare()    /(cols    -    i));    errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i));	  	compilable	  [FE]  AssertionFailedError  	14	1	add
377	[BUG]  [BUGGY]  double  c  =  Math.sqrt(getChiSquare()  *(cols  -  i));  errors[i]  =  Math.sqrt(covar[i][i]  *  jTj);  [CE]  variable  c  is  already  defined  in  method  guessParametersErrors()  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  double  c  =  Math.sqrt(getChiSquare()  *(cols  -  i));  errors[i]  =  Math.sqrt(covar[i][i]  *  jTj);  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	double  c  =  Math.sqrt(getChiSquare()  *(cols  -  i));  errors[i]  =  Math.sqrt(covar[i][i]  *  jTj);	  double    c    =    Math.sqrt(getChiSquare()    *(rows    -    i));    errors[i]    =    Math.sqrt(covar[i][i]    *    c);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  guessParametersErrors()	113	None	replace
378	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  *  c)+  1);  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  *  c)+  1);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i]  *  c)+  1);	  errors[i]    =    Math.sqrt(covar[i][i]    *    c);    errors[i]    =    Math.sqrt(covar[i][i]    *    c));    	non-compiled	[CE]  ';'  expected	64	None	replace
379	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  2]  *  c,  cost);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  2]  *  c,  cost);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i]  /  2]  *  c,  cost);	  errors[i]    =    Math.sqrt(covar[i][i]    -    1]    *    c,    cost);    	non-compiled	[CE]  ')'  expected	117	None	replace
380	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  %  c,  cost);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  %  c,  cost);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i]  %  c,  cost);	  errors[i]    =    Math.sqrt(covar[i][i]    -    1]    *    c,    cost);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	117	None	replace
381	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]          errors[i]    =    Math.sqrt(getChiSquare()    /(rows    -    i));    errors[i]  =  Math.sqrt(getChiSquare()  /(rows  *  i));  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i));  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	add	                errors[i]        =        Math.sqrt(getChiSquare()        /(rows        -        i));        errors[i]    =    Math.sqrt(getChiSquare()    /(rows    *    i));    errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i));	  	compilable	  [FE]  AssertionFailedError  	17	1	add
382	[BUG]  [BUGGY]          errors[i]    =    Math.sqrt(getChiSquare()    /(rows    -    i));    errors[i]  =  Math.sqrt(getChiSquare()  /(rows  *  i));  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]          errors[i]    =    Math.sqrt(getChiSquare()    /(rows    -    i));    errors[i]  =  Math.sqrt(getChiSquare()  /(rows  *  i));  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i));  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	                errors[i]        =        Math.sqrt(getChiSquare()        /(rows        -        i));        errors[i]    =    Math.sqrt(getChiSquare()    /(rows    *    i));    errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i));	  	compilable	  [FE]  AssertionFailedError  	17	1	add
383	[BUG]  [BUGGY]          errors[i]  =  covar[i][0];  if(covar[i]  ==  0)  {  errors[i]  =  covar[i][0];  }  else  {  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i));  }  [CE]  incomparable  types:  double[]  and  int  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]          errors[i]  =  covar[i][0];  if(covar[i]  ==  0)  {  errors[i]  =  covar[i][0];  }  else  {  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i));  }  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	                errors[i]    =    covar[i][0];    if(covar[i]  ==  0)  {  errors[i]  =  covar[i][0];  }  else  {  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i));  }	  	non-compiled	[CE]  incomparable  types:  double[]  and  int	89	None	add
384	[BUG]  [BUGGY]          errors[i]  =  covar[i][0];  if(covar[i]  ==  0)  {  errors[i]  =  covar[i][0];  }  else  {  throw  new  OptimizationException( " ");  }  [CE]  incomparable  types:  double[]  and  int  [FE]      AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]          errors[i]  =  covar[i][0];  if(covar[i]  ==  0)  {  errors[i]  =  covar[i][0];  }  else  {  throw  new  OptimizationException( " ");  }  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	                errors[i]    =    covar[i][0];    if(covar[i]  ==  0)  {  errors[i]  =  covar[i][0];  }  else  {  throw  new  OptimizationException( " ");  }	  	non-compiled	[CE]  incomparable  types:  double[]  and  int	89	None	add
385	[BUG]  [BUGGY]          errors[i]  =  covar[i][0];  if(covar[i]  ==  0)  {  errors[i]  =  covar[i][0];  }  [CE]  incomparable  types:  double[]  and  int  [FE]        AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]          errors[i]  =  covar[i][0];  if(covar[i]  ==  0)  {  errors[i]  =  covar[i][0];  }  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	                errors[i]    =    covar[i][0];    if(covar[i]  ==  0)  {  errors[i]  =  covar[i][0];  }	  	non-compiled	[CE]  incomparable  types:  double[]  and  int	89	None	add
386	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  c  +  3]);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  c  +  3]);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i],  c  +  3]);	  errors[i]    =    Math.sqrt(covar[i][i],    c    +    1]);    	non-compiled	[CE]  ')'  expected	81	None	replace
387	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  c),  cost,  chiSquare;  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  c),  cost,  chiSquare;  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i],  c),  cost,  chiSquare;	  errors[i]    =    Math.sqrt(covar[i][i],    c),    cost,    c;    	non-compiled	[CE]  ';'  expected	30	None	replace
388	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  c),  cost,  cols;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  c),  cost,  cols;  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i],  c),  cost,  cols;	  errors[i]    =    Math.sqrt(covar[i][i],    c),    cost,    c;    	non-compiled	[CE]  ';'  expected	30	None	replace
389	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  c),  error,  cost;  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  c),  error,  cost;  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i],  c),  error,  cost;	  errors[i]    =    Math.sqrt(covar[i][i],    c),    cost,    c;    	non-compiled	[CE]  ';'  expected	30	None	replace
390	[BUG]  [BUGGY]  errors[i]  =  covar;  [CE]  incompatible  types  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  covar;  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  covar;	  errors[i]    =    c;    	non-compiled	[CE]  incompatible  types	54	None	replace
391	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  covar.length;  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	add	errors[i]  =  covar.length;	  errors[i]    =    c;    	compilable	  [FE]  AssertionFailedError  	54	1	replace
392	[BUG]  [BUGGY]  errors[i]  =  covar.length;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  covar.length;  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  covar.length;	  errors[i]    =    c;    	compilable	  [FE]  AssertionFailedError  	54	1	replace
393	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  coefficient);  [CE]  cannot  find  symbol  coefficient  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  coefficient);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i]  /  coefficient);	  errors[i]    =    Math.sqrt(covar[i][i]    *    coefficient);    	non-compiled	[CE]  cannot  find  symbol  coefficient	115	None	replace
394	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  c),  cost  /  c;  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  c),  cost  /  c;  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i],  c),  cost  /  c;	  errors[i]    =    Math.sqrt(covar[i][i],    c)/    c;    	non-compiled	[CE]  ';'  expected	107	None	replace
395	[BUG]  [BUGGY]  errors[i]  =  c;  c  =  jTj.getValue(covar[i]);  [CE]  cannot  assign  a  value  to  final  variable  c  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  c;  c  =  jTj.getValue(covar[i]);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]    =    c;    c  =  jTj.getValue(covar[i]);	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  c	53	None	add
396	[BUG]  [BUGGY]  errors[i]  =  c;  c  =  jF.getValue(covar[i]);  [CE]  cannot  assign  a  value  to  final  variable  c  [FE]      AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  c;  c  =  jF.getValue(covar[i]);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]    =    c;    c  =  jF.getValue(covar[i]);	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  c	53	None	add
397	[BUG]  [BUGGY]  errors[i]  =  c;  c  =  jTj.getValue(i,  covar[i]);  [CE]  cannot  assign  a  value  to  final  variable  c  [FE]        AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  c;  c  =  jTj.getValue(i,  covar[i]);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]    =    c;    c  =  jTj.getValue(i,  covar[i]);	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  c	53	None	add
398	[BUG]  [BUGGY]  errors[i]  =  c;  c  =  jF.getValue(i);  [CE]  cannot  assign  a  value  to  final  variable  c  [FE]          AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  c;  c  =  jF.getValue(i);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]    =    c;    c  =  jF.getValue(i);	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  c	53	None	add
399	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  2  *  c);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	add	errors[i]  =  Math.sqrt(covar[i][i]  /  2  *  c);	  errors[i]    =    Math.sqrt(covar[i][i]    /    1]    *    c;    	compilable	  [FE]  AssertionFailedError  	9	1	replace
400	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  2  *  c);  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  2  *  c);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i]  /  2  *  c);	  errors[i]    =    Math.sqrt(covar[i][i]    /    1]    *    c;    	compilable	  [FE]  AssertionFailedError  	9	1	replace
401	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  2  *  c;  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  2  *  c;  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i]  /  2  *  c;	  errors[i]    =    Math.sqrt(covar[i][i]    /    1]    *    c;    	non-compiled	[CE]  ')'  expected	9	None	replace
402	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i])/  jTj);  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i])/  jTj);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i])/  jTj);	  errors[i]    =    Math.sqrt(covar[i][i])/    c;    errors[i]    =    Math.sqrt(covar[i][i])/    c);    	non-compiled	[CE]  ';'  expected	70	None	replace
403	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  *  sum);  [CE]  cannot  find  symbol  sum  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  *  sum);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i]  *  sum);	  errors[i]    =    Math.sqrt(covar[i][i]    *    price);    	non-compiled	[CE]  cannot  find  symbol  sum	40	None	replace
404	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i])/  c  +  1;  c  =  Math.sqrt(covar[i][i])/  c  +  1;  [CE]  cannot  assign  a  value  to  final  variable  c  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i])/  c  +  1;  c  =  Math.sqrt(covar[i][i])/  c  +  1;  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]    =    Math.sqrt(covar[i][i])/    c    +    1;    c  =  Math.sqrt(covar[i][i])/  c  +  1;	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  c	59	None	add
405	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  3);  i]  =  Math.sqrt(covar[i][i]  /  3);  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  3);  i]  =  Math.sqrt(covar[i][i]  /  3);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]    =    Math.sqrt(covar[i][i]    /    3);    i]  =  Math.sqrt(covar[i][i]  /  3);	  	non-compiled	[CE]  not  a  statement	75	None	add
406	[BUG]  [BUGGY]  errors[i][i]  =  Math.sqrt(covar[i][i],  cost  *  c);  [CE]  array  required,  but  double  found  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i][i]  =  Math.sqrt(covar[i][i],  cost  *  c);  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i][i]  =  Math.sqrt(covar[i][i],  cost  *  c);	  errors[i][i]    =    Math.sqrt(covar[i][i]    *    c);    	non-compiled	[CE]  array  required,  but  double  found	19	None	replace
407	[BUG]  [BUGGY]  errors[i][i]  =  Math.sqrt(covar[i][i],  cols  *  c);  [CE]  array  required,  but  double  found  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i][i]  =  Math.sqrt(covar[i][i],  cols  *  c);  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i][i]  =  Math.sqrt(covar[i][i],  cols  *  c);	  errors[i][i]    =    Math.sqrt(covar[i][i]    *    c);    	non-compiled	[CE]  array  required,  but  double  found	19	None	replace
408	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  *  i));  i]  =  Math.sqrt(getChiSquare()  /(rows  *  i));  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  *  i));  i]  =  Math.sqrt(getChiSquare()  /(rows  *  i));  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]    =    Math.sqrt(getChiSquare()    /(rows    *    i));    i]  =  Math.sqrt(getChiSquare()  /(rows  *  i));	  	non-compiled	[CE]  not  a  statement	7	None	add
409	[BUG]  [BUGGY]  errors[i]  =  covar[i]  -  1;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  covar[i]  -  1;  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  covar[i]  -  1;	  errors[i]    =    covar[i];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	52	None	replace
410	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i)*  1);  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	add	errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i)*  1);	  errors[i]    =    Math.sqrt(getChiSquare()    /(rows    -    i)+    1);    	compilable	  [FE]  AssertionFailedError  	6	1	replace
411	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i)*  1);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i)*  1);  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i)*  1);	  errors[i]    =    Math.sqrt(getChiSquare()    /(rows    -    i)+    1);    	compilable	  [FE]  AssertionFailedError  	6	1	replace
412	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  c  +  1);  errors[i]  =  Math.sqrt(covar[i][i]  *  c  +  1);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	add	errors[i]    =    Math.sqrt(covar[i][i]    /    c    +    1);    errors[i]  =  Math.sqrt(covar[i][i]  *  c  +  1);	  	compilable	  [FE]  AssertionFailedError  	92	1	add
413	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  c  +  1);  errors[i]  =  Math.sqrt(covar[i][i]  *  c  +  1);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  c  +  1);  errors[i]  =  Math.sqrt(covar[i][i]  *  c  +  1);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]    =    Math.sqrt(covar[i][i]    /    c    +    1);    errors[i]  =  Math.sqrt(covar[i][i]  *  c  +  1);	  	compilable	  [FE]  AssertionFailedError  	92	1	add
414	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i)*  c);  i]  =  Math.sqrt(getChiSquare()  /(rows  -  i)*  c);  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i)*  c);  i]  =  Math.sqrt(getChiSquare()  /(rows  -  i)*  c);  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]    =    Math.sqrt(getChiSquare()    /(rows    -    i)*    c);    i]  =  Math.sqrt(getChiSquare()  /(rows  -  i)*  c);	  	non-compiled	[CE]  not  a  statement	82	None	add
415	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i)*  c);  c  =  Math.sqrt(getChiSquare()  /(rows  -  i)*  c);  [CE]  cannot  assign  a  value  to  final  variable  c  [FE]      AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i)*  c);  c  =  Math.sqrt(getChiSquare()  /(rows  -  i)*  c);  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]    =    Math.sqrt(getChiSquare()    /(rows    -    i)*    c);    c  =  Math.sqrt(getChiSquare()  /(rows  -  i)*  c);	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  c	82	None	add
416	[BUG]  [BUGGY]  errors[i]    =    Math.sqrt(covar[i][i]    /    c);    errors[i]  =  Math.sqrt(covar[i][i]  *  c);  errors[i]  =  Math.sqrt(covar[i][i]  /  c);  errors[i]  =  Math.sqrt(covar[i][i]  *  jTj);  [CE]  cannot  find  symbol  jTj  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]    =    Math.sqrt(covar[i][i]    /    c);    errors[i]  =  Math.sqrt(covar[i][i]  *  c);  errors[i]  =  Math.sqrt(covar[i][i]  /  c);  errors[i]  =  Math.sqrt(covar[i][i]  *  jTj);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]        =        Math.sqrt(covar[i][i]        /        c);        errors[i]    =    Math.sqrt(covar[i][i]    *    c);    errors[i]  =  Math.sqrt(covar[i][i]  /  c);  errors[i]  =  Math.sqrt(covar[i][i]  *  jTj);	  	non-compiled	[CE]  cannot  find  symbol  jTj	97	None	add
417	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]    =    Math.sqrt(covar[i][i]    /    c);    errors[i]  =  Math.sqrt(covar[i][i]  *  c);  errors[i]  =  Math.sqrt(covar[i][i]  *  c);  errors[i]  =  Math.sqrt(covar[i][i]  *  c);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	add	errors[i]        =        Math.sqrt(covar[i][i]        /        c);        errors[i]    =    Math.sqrt(covar[i][i]    *    c);    errors[i]  =  Math.sqrt(covar[i][i]  *  c);  errors[i]  =  Math.sqrt(covar[i][i]  *  c);	  	compilable	  [FE]  AssertionFailedError  	97	1	add
418	[BUG]  [BUGGY]  errors[i]    =    Math.sqrt(covar[i][i]    /    c);    errors[i]  =  Math.sqrt(covar[i][i]  *  c);  errors[i]  =  Math.sqrt(covar[i][i]  *  c);  errors[i]  =  Math.sqrt(covar[i][i]  *  c);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]    =    Math.sqrt(covar[i][i]    /    c);    errors[i]  =  Math.sqrt(covar[i][i]  *  c);  errors[i]  =  Math.sqrt(covar[i][i]  *  c);  errors[i]  =  Math.sqrt(covar[i][i]  *  c);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]        =        Math.sqrt(covar[i][i]        /        c);        errors[i]    =    Math.sqrt(covar[i][i]    *    c);    errors[i]  =  Math.sqrt(covar[i][i]  *  c);  errors[i]  =  Math.sqrt(covar[i][i]  *  c);	  	compilable	  [FE]  AssertionFailedError  	97	1	add
419	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  /(cols  -  i));  i]  =  Math.sqrt(getChiSquare()  /(cols  -  i));  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  /(cols  -  i));  i]  =  Math.sqrt(getChiSquare()  /(cols  -  i));  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]    =    Math.sqrt(getChiSquare()    /(cols    -    i));    i]  =  Math.sqrt(getChiSquare()  /(cols  -  i));	  	non-compiled	[CE]  not  a  statement	3	None	add
420	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  cost  -  c]);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  cost  -  c]);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i],  cost  -  c]);	  errors[i]    =    Math.sqrt(covar[i][i]    -    c]);    	non-compiled	[CE]  ')'  expected	34	None	replace
421	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  *(rows  -  i));  i]  =  Math.sqrt(getChiSquare()  *(rows  -  i));  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  *(rows  -  i));  i]  =  Math.sqrt(getChiSquare()  *(rows  -  i));  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]    =    Math.sqrt(getChiSquare()    *(rows    -    i));    i]  =  Math.sqrt(getChiSquare()  *(rows  -  i));	  	non-compiled	[CE]  not  a  statement	1	None	add
422	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  jTj);  [CE]  cannot  find  symbol  jTj  [FE]        AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  jTj);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i],  jTj);	  errors[i]    =    Math.sqrt(covar[i][i],    c);    	non-compiled	[CE]  cannot  find  symbol  jTj	100	None	replace
423	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  +  c)/  2;  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	add	errors[i]  =  Math.sqrt(covar[i][i]  +  c)/  2;	  errors[i]    =    Math.sqrt(covar[i][i])/    2;    	compilable	  [FE]  AssertionFailedError  	56	1	replace
424	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  +  c)/  2;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  +  c)/  2;  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i]  +  c)/  2;	  errors[i]    =    Math.sqrt(covar[i][i])/    2;    	compilable	  [FE]  AssertionFailedError  	56	1	replace
425	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  *  c)/  2;  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	add	errors[i]  =  Math.sqrt(covar[i][i]  *  c)/  2;	  errors[i]    =    Math.sqrt(covar[i][i])/    2;    	compilable	  [FE]  AssertionFailedError  	56	1	replace
426	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  *  c)/  2;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  *  c)/  2;  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i]  *  c)/  2;	  errors[i]    =    Math.sqrt(covar[i][i])/    2;    	compilable	  [FE]  AssertionFailedError  	56	1	replace
427	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  c,  cost)*  jTj;  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  c,  cost)*  jTj;  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i],  c,  cost)*  jTj;	  errors[i]    =    Math.sqrt(covar[i][i],    c,    cost)*    c;    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	29	None	replace
428	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  cost,  covar)*  c;  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  cost,  covar)*  c;  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i],  cost,  covar)*  c;	  errors[i]    =    Math.sqrt(covar[i][i],    c,    cost)*    c;    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	29	None	replace
429	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  cost,  c)*  jTj;  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  cost,  c)*  jTj;  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i],  cost,  c)*  jTj;	  errors[i]    =    Math.sqrt(covar[i][i],    c,    cost)*    c;    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	29	None	replace
430	[BUG]  [BUGGY]  errors[i][i]  =  c[0];  [CE]  array  required,  but  double  found  [FE]        AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i][i]  =  c[0];  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i][i]  =  c[0];	          errors[i][i]    =    covar[i][0];    	non-compiled	[CE]  array  required,  but  double  found	79	None	replace
431	[BUG]  [BUGGY]  errors[i][i]  =  covar[i][2];  [CE]  array  required,  but  double  found  [FE]          AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i][i]  =  covar[i][2];  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i][i]  =  covar[i][2];	          errors[i][i]    =    covar[i][0];    	non-compiled	[CE]  array  required,  but  double  found	79	None	replace
432	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i])/  jTj  +  1;  [CE]  cannot  find  symbol  jTj  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i])/  jTj  +  1;  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i])/  jTj  +  1;	  errors[i]    =    Math.sqrt(covar[i][i])/    c    +    1;    	non-compiled	[CE]  cannot  find  symbol  jTj	60	None	replace
433	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  c  /  3);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  c  /  3);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i],  c  /  3);	  errors[i]    =    Math.sqrt(covar[i][i]    /    3);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	76	None	replace
434	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  c)*  coefficient;  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  c)*  coefficient;  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i],  c)*  coefficient;	  errors[i]    =    Math.sqrt(covar[i][i],    cost)*    c;    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	28	None	replace
435	[BUG]  [BUGGY]  errors[i]  =  covar[i][jTj];  [CE]  cannot  find  symbol  jTj  [FE]          AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  covar[i][jTj];  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  covar[i][jTj];	          errors[i]    =    covar[i][c];    	non-compiled	[CE]  cannot  find  symbol  jTj	91	None	replace
436	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  c),  cost,  chiSquare);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  c),  cost,  chiSquare);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i],  c),  cost,  chiSquare);	  errors[i]    =    Math.sqrt(covar[i][i],    c),    cost,    c);    	non-compiled	[CE]  ';'  expected	31	None	replace
437	[BUG]  [BUGGY]  i]  =  Math.sqrt(getChiSquare()  /(rows  -  i));  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  i]  =  Math.sqrt(getChiSquare()  /(rows  -  i));  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	i]  =  Math.sqrt(getChiSquare()  /(rows  -  i));	          errors[i]    =    Math.sqrt(getChiSquare()    /(rows    -    i));    i]    =    Math.sqrt(getChiSquare()    /(rows    -    i));    	non-compiled	[CE]  not  a  statement	103	None	replace
438	[BUG]  [BUGGY]  errors[i]    =    Math.sqrt(covar[i][i])/    c;    errors[i]  =  Math.sqrt(covar[i][i])/  c;  errors[i]  =  Math.sqrt(covar[i][i])/  jF;  errors[i]  =  Math.sqrt(covar[i][i])/  c;  [CE]  bad  operand  types  for  binary  operator  '/'  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]    =    Math.sqrt(covar[i][i])/    c;    errors[i]  =  Math.sqrt(covar[i][i])/  c;  errors[i]  =  Math.sqrt(covar[i][i])/  jF;  errors[i]  =  Math.sqrt(covar[i][i])/  c;  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]        =        Math.sqrt(covar[i][i])/        c;        errors[i]    =    Math.sqrt(covar[i][i])/    c;    errors[i]  =  Math.sqrt(covar[i][i])/  jF;  errors[i]  =  Math.sqrt(covar[i][i])/  c;	  	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	68	None	add
439	[BUG]  [BUGGY]          errors[i]    =    Math.sqrt(getChiSquare()    /(rows    -    i));    errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i));  mistakes[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i));  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i));  [CE]  cannot  find  symbol  mistakes  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]          errors[i]    =    Math.sqrt(getChiSquare()    /(rows    -    i));    errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i));  mistakes[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i));  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i));  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	                errors[i]        =        Math.sqrt(getChiSquare()        /(rows        -        i));        errors[i]    =    Math.sqrt(getChiSquare()    /(rows    -    i));    mistakes[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i));  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i));	  	non-compiled	[CE]  cannot  find  symbol  mistakes	12	None	add
440	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]          errors[i]    =    Math.sqrt(getChiSquare()    /(rows    -    i));    errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i));  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i));  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	add	                errors[i]        =        Math.sqrt(getChiSquare()        /(rows        -        i));        errors[i]    =    Math.sqrt(getChiSquare()    /(rows    -    i));    errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i));	  	compilable	  [FE]  AssertionFailedError  	12	1	add
441	[BUG]  [BUGGY]          errors[i]    =    Math.sqrt(getChiSquare()    /(rows    -    i));    errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i));  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i));  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]          errors[i]    =    Math.sqrt(getChiSquare()    /(rows    -    i));    errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i));  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i));  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	                errors[i]        =        Math.sqrt(getChiSquare()        /(rows        -        i));        errors[i]    =    Math.sqrt(getChiSquare()    /(rows    -    i));    errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i));	  	compilable	  [FE]  AssertionFailedError  	12	1	add
442	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  +  c)/  3;  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	add	errors[i]  =  Math.sqrt(covar[i][i]  +  c)/  3;	  errors[i]    =    Math.sqrt(covar[i][i])/    3;    	compilable	  [FE]  AssertionFailedError  	58	1	replace
443	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  +  c)/  3;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  +  c)/  3;  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i]  +  c)/  3;	  errors[i]    =    Math.sqrt(covar[i][i])/    3;    	compilable	  [FE]  AssertionFailedError  	58	1	replace
444	[BUG]  [BUGGY]  mistakes[i]  =  Math.sqrt(covar[i][i]  *  jTj);  [CE]  cannot  find  symbol  mistakes  [FE]          AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  mistakes[i]  =  Math.sqrt(covar[i][i]  *  jTj);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	mistakes[i]  =  Math.sqrt(covar[i][i]  *  jTj);	  errors[i]    =    Math.sqrt(covar[i][i]    *    c);    mistakes[i]    =    Math.sqrt(covar[i][i]    *    c);    	non-compiled	[CE]  cannot  find  symbol  mistakes	63	None	replace
445	[BUG]  [BUGGY]  c  =  Math.sqrt(getChiSquare()  *(covar[i  -  i));  [CE]  ']'  expected  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  c  =  Math.sqrt(getChiSquare()  *(covar[i  -  i));  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	c  =  Math.sqrt(getChiSquare()  *(covar[i  -  i));	  c    =    Math.sqrt(getChiSquare()    *(cols    -    i));    	non-compiled	[CE]  ']'  expected	65	None	replace
446	[BUG]  [BUGGY]  c  =  Math.sqrt(getChiSquare()  /(rows  -  i)+  2);  errors[i]  =  Math.sqrt(covar[i][i])*  c;  [CE]  cannot  assign  a  value  to  final  variable  c  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  c  =  Math.sqrt(getChiSquare()  /(rows  -  i)+  2);  errors[i]  =  Math.sqrt(covar[i][i])*  c;  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	c  =  Math.sqrt(getChiSquare()  /(rows  -  i)+  2);  errors[i]  =  Math.sqrt(covar[i][i])*  c;	  c    =    Math.sqrt(getChiSquare()    /(rows    -    i)+    1);    errors[i]    =    Math.sqrt(covar[i][i])*    c;    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  c	102	None	replace
447	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  *  cost);  i]  =  Math.sqrt(covar[i][i]  *  cost);  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  *  cost);  i]  =  Math.sqrt(covar[i][i]  *  cost);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]    =    Math.sqrt(covar[i][i]    *    cost);    i]  =  Math.sqrt(covar[i][i]  *  cost);	  	non-compiled	[CE]  not  a  statement	38	None	add
448	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  *  cost);  int  i]  =  Math.sqrt(covar[i][i]  *  cost);  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  *  cost);  int  i]  =  Math.sqrt(covar[i][i]  *  cost);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]    =    Math.sqrt(covar[i][i]    *    cost);    int  i]  =  Math.sqrt(covar[i][i]  *  cost);	  	non-compiled	[CE]  ';'  expected	38	None	add
449	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  2);  i]  =  Math.sqrt(covar[i][i]  /  2);  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  2);  i]  =  Math.sqrt(covar[i][i]  /  2);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]    =    Math.sqrt(covar[i][i]    /    2);    i]  =  Math.sqrt(covar[i][i]  /  2);	  	non-compiled	[CE]  not  a  statement	72	None	add
450	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  2);  errors[i]  =  Math.sqrt(covar[i][i]  /  3);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	add	errors[i]    =    Math.sqrt(covar[i][i]    /    2);    errors[i]  =  Math.sqrt(covar[i][i]  /  3);	  	compilable	  [FE]  AssertionFailedError  	72	1	add
451	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  2);  errors[i]  =  Math.sqrt(covar[i][i]  /  3);  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  2);  errors[i]  =  Math.sqrt(covar[i][i]  /  3);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]    =    Math.sqrt(covar[i][i]    /    2);    errors[i]  =  Math.sqrt(covar[i][i]  /  3);	  	compilable	  [FE]  AssertionFailedError  	72	1	add
452	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  2  +  c);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	add	errors[i]  =  Math.sqrt(covar[i][i]  /  2  +  c);	  errors[i]    =    Math.sqrt(covar[i][i]    /    2]    *    c;    	compilable	  [FE]  AssertionFailedError  	11	1	replace
453	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  2  +  c);  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  2  +  c);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i]  /  2  +  c);	  errors[i]    =    Math.sqrt(covar[i][i]    /    2]    *    c;    	compilable	  [FE]  AssertionFailedError  	11	1	replace
454	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i],  c);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i],  c);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i],  c);	          errors[i]    =    Math.sqrt(covar[i]    *    c);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	112	None	replace
455	[BUG]  [BUGGY]  errors[i]    =    Math.sqrt(covar[i][i]    *    c);    errors[i]  =  Math.sqrt(covar[i][i]  *  c);  errors[i]  =  Math.sqrt(covar[i][i]  *  c);  errors[i]  =  Math.sqrt(covar[i][i]  *  jTj);  [CE]  cannot  find  symbol  jTj  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]    =    Math.sqrt(covar[i][i]    *    c);    errors[i]  =  Math.sqrt(covar[i][i]  *  c);  errors[i]  =  Math.sqrt(covar[i][i]  *  c);  errors[i]  =  Math.sqrt(covar[i][i]  *  jTj);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]        =        Math.sqrt(covar[i][i]        *        c);        errors[i]    =    Math.sqrt(covar[i][i]    *    c);    errors[i]  =  Math.sqrt(covar[i][i]  *  c);  errors[i]  =  Math.sqrt(covar[i][i]  *  jTj);	  	non-compiled	[CE]  cannot  find  symbol  jTj	61	None	add
456	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  *  jTj,  c);  [CE]  cannot  find  symbol  jTj  [FE]          AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  *  jTj,  c);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i]  *  jTj,  c);	  errors[i]    =    Math.sqrt(covar[i][i]    *    c,    errorCount);    	non-compiled	[CE]  cannot  find  symbol  jTj	78	None	replace
457	[BUG]  [BUGGY]  double  c  =  Math.sqrt(getChiSquare()  *(covars  -  i));  [CE]  variable  c  is  already  defined  in  method  guessParametersErrors()  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  double  c  =  Math.sqrt(getChiSquare()  *(covars  -  i));  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	double  c  =  Math.sqrt(getChiSquare()  *(covars  -  i));	  double    c    =    Math.sqrt(getChiSquare()    *(rows    -    i));    	non-compiled	[CE]  variable  c  is  already  defined  in  method  guessParametersErrors()	47	None	replace
458	[BUG]  [BUGGY]  double  c  =  Math.sqrt(getChiSquare()  /(rows  -  i)+  1);  errors[i]  =  Math.sqrt(covar[i][i]  *  jTj);  [CE]  variable  c  is  already  defined  in  method  guessParametersErrors()  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  double  c  =  Math.sqrt(getChiSquare()  /(rows  -  i)+  1);  errors[i]  =  Math.sqrt(covar[i][i]  *  jTj);  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	double  c  =  Math.sqrt(getChiSquare()  /(rows  -  i)+  1);  errors[i]  =  Math.sqrt(covar[i][i]  *  jTj);	  double    c    =    Math.sqrt(getChiSquare()    /(rows    -    i));    errors[i]    =    Math.sqrt(covar[i][i]    *    jTj);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  guessParametersErrors()	87	None	replace
459	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  c)+  1);  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  c)+  1);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i]  /  c)+  1);	  errors[i]    =    Math.sqrt(covar[i][i]    /    c);    errors[i]    =    Math.sqrt(covar[i][i]    /    c));    	non-compiled	[CE]  ';'  expected	46	None	replace
460	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  *  c  +  1]);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  *  c  +  1]);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i]  *  c  +  1]);	  errors[i]    =    Math.sqrt(covar[i][i]    *    c]);    	non-compiled	[CE]  ')'  expected	33	None	replace
461	[BUG]  [BUGGY]  double  c  =  Math.sqrt(getChiSquare()  *(i  +  1));  errors[i]  =  Math.sqrt(covar[i][i]  *  jTj);  [CE]  variable  c  is  already  defined  in  method  guessParametersErrors()  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  double  c  =  Math.sqrt(getChiSquare()  *(i  +  1));  errors[i]  =  Math.sqrt(covar[i][i]  *  jTj);  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	double  c  =  Math.sqrt(getChiSquare()  *(i  +  1));  errors[i]  =  Math.sqrt(covar[i][i]  *  jTj);	  double    c    =    Math.sqrt(getChiSquare()    *(rows    -    i));    errors[i]    =    Math.sqrt(covar[i][i]    *    jTj);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  guessParametersErrors()	86	None	replace
462	[BUG]  [BUGGY]  c  =  Math.sqrt(getChiSquare()  *(i  +  1));  errors[i]  =  Math.sqrt(covar[i][i]  *  jTj);  [CE]  cannot  assign  a  value  to  final  variable  c  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  c  =  Math.sqrt(getChiSquare()  *(i  +  1));  errors[i]  =  Math.sqrt(covar[i][i]  *  jTj);  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	c  =  Math.sqrt(getChiSquare()  *(i  +  1));  errors[i]  =  Math.sqrt(covar[i][i]  *  jTj);	  double    c    =    Math.sqrt(getChiSquare()    *(rows    -    i));    errors[i]    =    Math.sqrt(covar[i][i]    *    jTj);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  c	86	None	replace
463	[BUG]  [BUGGY]  c  =  Math.sqrt(getChiSquare()  *(covars[i  -  1]));  [CE]  cannot  assign  a  value  to  final  variable  c  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  c  =  Math.sqrt(getChiSquare()  *(covars[i  -  1]));  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	c  =  Math.sqrt(getChiSquare()  *(covars[i  -  1]));	  c    =    Math.sqrt(getChiSquare()    *(covars    -    i));    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  c	94	None	replace
464	[BUG]  [BUGGY]  c  =  Math.sqrt(getChiSquare()  *(i  -  errors[i]));  [CE]  cannot  assign  a  value  to  final  variable  c  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  c  =  Math.sqrt(getChiSquare()  *(i  -  errors[i]));  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	c  =  Math.sqrt(getChiSquare()  *(i  -  errors[i]));	  c    =    Math.sqrt(getChiSquare()    *(covars    -    i));    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  c	94	None	replace
465	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  *  c);  cols[i]  =  Math.sqrt(covar[i][i]  *  jTj);  [CE]  array  required,  but  int  found  [FE]        AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  *  c);  cols[i]  =  Math.sqrt(covar[i][i]  *  jTj);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i]  *  c);  cols[i]  =  Math.sqrt(covar[i][i]  *  jTj);	  errors[i]    =    Math.sqrt(covar[i][i]    *    c);    cols[i]    =    Math.sqrt(covar[i][i]    *    c);    	non-compiled	[CE]  array  required,  but  int  found	118	None	replace
466	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  *  jTj);  cols[i]  =  Math.sqrt(covar[i][i]  *  c);  [CE]  cannot  find  symbol  jTj  [FE]          AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  *  jTj);  cols[i]  =  Math.sqrt(covar[i][i]  *  c);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i]  *  jTj);  cols[i]  =  Math.sqrt(covar[i][i]  *  c);	  errors[i]    =    Math.sqrt(covar[i][i]    *    c);    cols[i]    =    Math.sqrt(covar[i][i]    *    c);    	non-compiled	[CE]  cannot  find  symbol  jTj	118	None	replace
467	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  %  jTj;  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  %  jTj;  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i]  %  jTj;	  errors[i]    =    Math.sqrt(covar[i][i]    -    1]    *    jTj;    	non-compiled	[CE]  ')'  expected	10	None	replace
468	[BUG]  [BUGGY]  errorCount  =  Math.sqrt(getChiSquare()  /(rows  -  i)+  1);  errors[i]  =  Math.sqrt(covar[i][i])*  c;  [CE]  cannot  find  symbol  errorCount  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errorCount  =  Math.sqrt(getChiSquare()  /(rows  -  i)+  1);  errors[i]  =  Math.sqrt(covar[i][i])*  c;  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errorCount  =  Math.sqrt(getChiSquare()  /(rows  -  i)+  1);  errors[i]  =  Math.sqrt(covar[i][i])*  c;	  errorCount    =    Math.sqrt(getChiSquare()    /(rows    -    i));    errors[i]    =    Math.sqrt(covar[i][i])*    c;    	non-compiled	[CE]  cannot  find  symbol  errorCount	111	None	replace
469	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][0]  *  cost);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	add	errors[i]  =  Math.sqrt(covar[i][0]  *  cost);	  errors[i]    =    Math.sqrt(covar[i][i]    *    cost);    	compilable	  [FE]  AssertionFailedError  	39	1	replace
470	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][0]  *  cost);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][0]  *  cost);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][0]  *  cost);	  errors[i]    =    Math.sqrt(covar[i][i]    *    cost);    	compilable	  [FE]  AssertionFailedError  	39	1	replace
471	[BUG]  [BUGGY]  double  c  =  Math.sqrt(getChiSquare()  /(rows  *  i)+  1);  [CE]  variable  c  is  already  defined  in  method  guessParametersErrors()  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  double  c  =  Math.sqrt(getChiSquare()  /(rows  *  i)+  1);  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	double  c  =  Math.sqrt(getChiSquare()  /(rows  *  i)+  1);	  double    c    =    Math.sqrt(getChiSquare()    /(rows    *    i));    	non-compiled	[CE]  variable  c  is  already  defined  in  method  guessParametersErrors()	49	None	replace
472	[BUG]  [BUGGY]  c  =  Math.sqrt(getChiSquare()  *(i  +  1));  errors[i][i]  =  Math.sqrt(covar[i][i]  *  jTj);  [CE]  cannot  assign  a  value  to  final  variable  c  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  c  =  Math.sqrt(getChiSquare()  *(i  +  1));  errors[i][i]  =  Math.sqrt(covar[i][i]  *  jTj);  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	c  =  Math.sqrt(getChiSquare()  *(i  +  1));  errors[i][i]  =  Math.sqrt(covar[i][i]  *  jTj);	  c    =    Math.sqrt(getChiSquare()    *(rows    -    i));    errors[i][i]    =    Math.sqrt(covar[i][i]    *    jTj);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  c	22	None	replace
473	[BUG]  [BUGGY]  errors[i][i]  =  covar[i],  cost.doubleValue();  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i][i]  =  covar[i],  cost.doubleValue();  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i][i]  =  covar[i],  cost.doubleValue();	  errors[i][i]    =    covar[i].doubleValue();    	non-compiled	[CE]  ';'  expected	51	None	replace
474	[BUG]  [BUGGY]  c  =  Math.sqrt(getChiSquare()  /(cols  -  i));  errors[i]  =  Math.sqrt(covar[i][i])*  jTj;  [CE]  cannot  assign  a  value  to  final  variable  c  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  c  =  Math.sqrt(getChiSquare()  /(cols  -  i));  errors[i]  =  Math.sqrt(covar[i][i])*  jTj;  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	c  =  Math.sqrt(getChiSquare()  /(cols  -  i));  errors[i]  =  Math.sqrt(covar[i][i])*  jTj;	  c    =    Math.sqrt(getChiSquare()    /(rows    -    i));    errors[i]    =    Math.sqrt(covar[i][i])*    jTj;    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  c	25	None	replace
475	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  c  *  i);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  c  *  i);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i],  c  *  i);	  errors[i]    =    Math.sqrt(covar[i][i],    c    *    jTj);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	101	None	replace
476	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  cost)/  jTj;  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  cost)/  jTj;  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i],  cost)/  jTj;	  errors[i]    =    Math.sqrt(covar[i][i],    cost)/    c;    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	108	None	replace
477	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  cost)/  c  +  1;  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  cost)/  c  +  1;  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i],  cost)/  c  +  1;	  errors[i]    =    Math.sqrt(covar[i][i],    cost)/    c;    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	108	None	replace
478	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  C);  [CE]  cannot  find  symbol  C  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  C);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i]  /  C);	  errors[i]    =    Math.sqrt(covar[i][i]    *    C);    	non-compiled	[CE]  cannot  find  symbol  C	114	None	replace
479	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i])/  2;  errors[i]  =  Math.sqrt(covar[i][i])/  1;  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	add	errors[i]    =    Math.sqrt(covar[i][i])/    2;    errors[i]  =  Math.sqrt(covar[i][i])/  1;	  	compilable	  [FE]  AssertionFailedError  	55	1	add
480	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i])/  2;  errors[i]  =  Math.sqrt(covar[i][i])/  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i])/  2;  errors[i]  =  Math.sqrt(covar[i][i])/  1;  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]    =    Math.sqrt(covar[i][i])/    2;    errors[i]  =  Math.sqrt(covar[i][i])/  1;	  	compilable	  [FE]  AssertionFailedError  	55	1	add
481	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i])/  3;  i]  =  Math.sqrt(covar[i][i])/  3;  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i])/  3;  i]  =  Math.sqrt(covar[i][i])/  3;  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]    =    Math.sqrt(covar[i][i])/    3;    i]  =  Math.sqrt(covar[i][i])/  3;	  	non-compiled	[CE]  not  a  statement	57	None	add
482	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i])/  3;  accidents[i]  =  Math.sqrt(covar[i][i])/  3;  [CE]  cannot  find  symbol  accidents  [FE]      AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i])/  3;  accidents[i]  =  Math.sqrt(covar[i][i])/  3;  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]    =    Math.sqrt(covar[i][i])/    3;    accidents[i]  =  Math.sqrt(covar[i][i])/  3;	  	non-compiled	[CE]  cannot  find  symbol  accidents	57	None	add
483	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i])/  3;  errors[i]  =  Math.sqrt(covar[i][i])/  4;  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	add	errors[i]    =    Math.sqrt(covar[i][i])/    3;    errors[i]  =  Math.sqrt(covar[i][i])/  4;	  	compilable	  [FE]  AssertionFailedError  	57	1	add
484	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i])/  3;  errors[i]  =  Math.sqrt(covar[i][i])/  4;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i])/  3;  errors[i]  =  Math.sqrt(covar[i][i])/  4;  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]    =    Math.sqrt(covar[i][i])/    3;    errors[i]  =  Math.sqrt(covar[i][i])/  4;	  	compilable	  [FE]  AssertionFailedError  	57	1	add
485	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  c)/  cost;  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  c)/  cost;  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i],  c)/  cost;	  errors[i]    =    Math.sqrt(covar[i][i],    c)*    cost;    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	106	None	replace
486	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  c  +  1]);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  c  +  1]);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i]  /  c  +  1]);	  errors[i]    =    Math.sqrt(covar[i][i]    /    c]);    	non-compiled	[CE]  ')'  expected	32	None	replace
487	[BUG]  [BUGGY]  c  =  Math.sqrt(getChiSquare()  /(rows  -  i)+  1);  errors[i][i]  =  Math.sqrt(covar[i][i]  *  jTj);  [CE]  cannot  assign  a  value  to  final  variable  c  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  c  =  Math.sqrt(getChiSquare()  /(rows  -  i)+  1);  errors[i][i]  =  Math.sqrt(covar[i][i]  *  jTj);  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	c  =  Math.sqrt(getChiSquare()  /(rows  -  i)+  1);  errors[i][i]  =  Math.sqrt(covar[i][i]  *  jTj);	  c    =    Math.sqrt(getChiSquare()    /(rows    -    i));    errors[i][i]    =    Math.sqrt(covar[i][i]    *    jTj);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  c	21	None	replace
488	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  3);  errors[i]  =  Math.sqrt(covar[i][i]  *  3);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	add	errors[i]    =    Math.sqrt(covar[i][i]    /    3);    errors[i]  =  Math.sqrt(covar[i][i]  *  3);	  	compilable	  [FE]  AssertionFailedError  	75	1	add
489	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  3);  errors[i]  =  Math.sqrt(covar[i][i]  *  3);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  3);  errors[i]  =  Math.sqrt(covar[i][i]  *  3);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]    =    Math.sqrt(covar[i][i]    /    3);    errors[i]  =  Math.sqrt(covar[i][i]  *  3);	  	compilable	  [FE]  AssertionFailedError  	75	1	add
490	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  c  *  C);  [CE]  cannot  find  symbol  C  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  c  *  C);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i],  c  *  C);	  errors[i]    =    Math.sqrt(covar[i][i]    *    C);    	non-compiled	[CE]  cannot  find  symbol  C	114	None	replace
491	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]    =    Math.sqrt(covar[i][i])/    c;    errors[i]  =  Math.sqrt(covar[i][i])/  c;  errors[i]  =  Math.sqrt(covar[i][i])/  c;  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	add	errors[i]        =        Math.sqrt(covar[i][i])/        c;        errors[i]    =    Math.sqrt(covar[i][i])/    c;    errors[i]  =  Math.sqrt(covar[i][i])/  c;	  	compilable	  [FE]  AssertionFailedError  	68	1	add
492	[BUG]  [BUGGY]  errors[i]    =    Math.sqrt(covar[i][i])/    c;    errors[i]  =  Math.sqrt(covar[i][i])/  c;  errors[i]  =  Math.sqrt(covar[i][i])/  c;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]    =    Math.sqrt(covar[i][i])/    c;    errors[i]  =  Math.sqrt(covar[i][i])/  c;  errors[i]  =  Math.sqrt(covar[i][i])/  c;  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]        =        Math.sqrt(covar[i][i])/        c;        errors[i]    =    Math.sqrt(covar[i][i])/    c;    errors[i]  =  Math.sqrt(covar[i][i])/  c;	  	compilable	  [FE]  AssertionFailedError  	68	1	add
493	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]    =    Math.sqrt(covar[i][i])/    c;    errors[i]  =  Math.sqrt(covar[i][i])/  c;  errors[i]  =  Math.sqrt(covar[i][i])/  2;  errors[i]  =  Math.sqrt(covar[i][i])/  2;  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	add	errors[i]        =        Math.sqrt(covar[i][i])/        c;        errors[i]    =    Math.sqrt(covar[i][i])/    c;    errors[i]  =  Math.sqrt(covar[i][i])/  2;  errors[i]  =  Math.sqrt(covar[i][i])/  2;	  	compilable	  [FE]  AssertionFailedError  	68	1	add
494	[BUG]  [BUGGY]  errors[i]    =    Math.sqrt(covar[i][i])/    c;    errors[i]  =  Math.sqrt(covar[i][i])/  c;  errors[i]  =  Math.sqrt(covar[i][i])/  2;  errors[i]  =  Math.sqrt(covar[i][i])/  2;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]    =    Math.sqrt(covar[i][i])/    c;    errors[i]  =  Math.sqrt(covar[i][i])/  c;  errors[i]  =  Math.sqrt(covar[i][i])/  2;  errors[i]  =  Math.sqrt(covar[i][i])/  2;  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]        =        Math.sqrt(covar[i][i])/        c;        errors[i]    =    Math.sqrt(covar[i][i])/    c;    errors[i]  =  Math.sqrt(covar[i][i])/  2;  errors[i]  =  Math.sqrt(covar[i][i])/  2;	  	compilable	  [FE]  AssertionFailedError  	68	1	add
495	[BUG]  [BUGGY]  errors[i]  =  covar[i]  *  jTj.doubleValue();  [CE]  cannot  find  symbol  jTj  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  covar[i]  *  jTj.doubleValue();  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  covar[i]  *  jTj.doubleValue();	  errors[i]    =    c;    	non-compiled	[CE]  cannot  find  symbol  jTj	54	None	replace
496	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i])*  ji;  [CE]  cannot  find  symbol  ji  [FE]                    AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i])*  ji;  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i])*  ji;	  errors[i]    =    Math.sqrt(covar[i][i])*    jTj;    	non-compiled	[CE]  cannot  find  symbol  ji	27	None	replace
497	[BUG]  [BUGGY]  mistakes[i]  =  Math.sqrt(covar[i][i])*  c;  [CE]  cannot  find  symbol  mistakes  [FE]                      AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  mistakes[i]  =  Math.sqrt(covar[i][i])*  c;  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	mistakes[i]  =  Math.sqrt(covar[i][i])*  c;	  errors[i]    =    Math.sqrt(covar[i][i])*    jTj;    	non-compiled	[CE]  cannot  find  symbol  mistakes	27	None	replace
498	[BUG]  [BUGGY]  errors[i]  =  covar[i].remainder;  [CE]  cannot  find  symbol  remainder  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  covar[i].remainder;  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  covar[i].remainder;	  errors[i]    =    covar[i];    	non-compiled	[CE]  cannot  find  symbol  remainder	52	None	replace
499	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i])/  c  +  1;  errors[i]  =  Math.sqrt(covar[i][i])/  c  +  1);  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i])/  c  +  1;  errors[i]  =  Math.sqrt(covar[i][i])/  c  +  1);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]    =    Math.sqrt(covar[i][i])/    c    +    1;    errors[i]  =  Math.sqrt(covar[i][i])/  c  +  1);	  	non-compiled	[CE]  ';'  expected	59	None	add
500	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i])/  c  +  2;  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	add	errors[i]  =  Math.sqrt(covar[i][i])/  c  +  2;	  errors[i]    =    Math.sqrt(covar[i][i])/    c    +    1;    	compilable	  [FE]  AssertionFailedError  	60	1	replace
501	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i])/  c  +  2;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i])/  c  +  2;  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i])/  c  +  2;	  errors[i]    =    Math.sqrt(covar[i][i])/    c    +    1;    	compilable	  [FE]  AssertionFailedError  	60	1	replace
502	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i])/  c,  cost  +  1;  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i])/  c,  cost  +  1;  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i])/  c,  cost  +  1;	  errors[i]    =    Math.sqrt(covar[i][i])/    c    +    1;    	non-compiled	[CE]  ';'  expected	60	None	replace
503	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  /(cols  -  i)*  c);  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	add	errors[i]  =  Math.sqrt(getChiSquare()  /(cols  -  i)*  c);	  errors[i]    =    Math.sqrt(getChiSquare()    /(rows    -    i)*    c);    	compilable	  [FE]  AssertionFailedError  	83	1	replace
504	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  /(cols  -  i)*  c);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  /(cols  -  i)*  c);  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(getChiSquare()  /(cols  -  i)*  c);	  errors[i]    =    Math.sqrt(getChiSquare()    /(rows    -    i)*    c);    	compilable	  [FE]  AssertionFailedError  	83	1	replace
505	[BUG]  [BUGGY]  double  c  =  Math.sqrt(getChiSquare()  /(rows  -  cols));  [CE]  variable  c  is  already  defined  in  method  guessParametersErrors()  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  double  c  =  Math.sqrt(getChiSquare()  /(rows  -  cols));  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	double  c  =  Math.sqrt(getChiSquare()  /(rows  -  cols));	  double    c    =    Math.sqrt(getChiSquare()    /(cols    -    i));    	non-compiled	[CE]  variable  c  is  already  defined  in  method  guessParametersErrors()	48	None	replace
506	[BUG]  [BUGGY]  errors[i]  =  c;  c  =  Math.sqrt(getChiSquare()  /(rows  -  i));  errors[i]  =  c;  [CE]  cannot  assign  a  value  to  final  variable  c  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  c;  c  =  Math.sqrt(getChiSquare()  /(rows  -  i));  errors[i]  =  c;  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]    =    c;    c  =  Math.sqrt(getChiSquare()  /(rows  -  i));  errors[i]  =  c;	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  c	53	None	add
507	[BUG]  [BUGGY]  errors[i]  =  c;  c  =  Math.sqrt(getChiSquare()  /(rows  -  i));  [CE]  cannot  assign  a  value  to  final  variable  c  [FE]      AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  c;  c  =  Math.sqrt(getChiSquare()  /(rows  -  i));  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]    =    c;    c  =  Math.sqrt(getChiSquare()  /(rows  -  i));	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  c	53	None	add
508	[BUG]  [BUGGY]  errors[i]  =  c;  c  =  Math.sqrt(getChiSquare()  /(rows  +  i));  errors[i]  =  c;  [CE]  cannot  assign  a  value  to  final  variable  c  [FE]        AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  c;  c  =  Math.sqrt(getChiSquare()  /(rows  +  i));  errors[i]  =  c;  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]    =    c;    c  =  Math.sqrt(getChiSquare()  /(rows  +  i));  errors[i]  =  c;	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  c	53	None	add
509	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  c,  sum);  [CE]  cannot  find  symbol  sum  [FE]          AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  c,  sum);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i]  /  c,  sum);	  errors[i]    =    Math.sqrt(covar[i][i]    /    c,    cost);    	non-compiled	[CE]  cannot  find  symbol  sum	74	None	replace
510	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i],  c  *  jF);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                    AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i],  c  *  jF);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i],  c  *  jF);	  errors[i]    =    Math.sqrt(covar[i][i]    *    jF);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	41	None	replace
511	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  /(c  *  i));  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	add	errors[i]  =  Math.sqrt(getChiSquare()  /(c  *  i));	          errors[i]    =    Math.sqrt(getChiSquare()    /(rows    -    i));    errors[i]    =    Math.sqrt(getChiSquare()    /(rows    *    i));    	compilable	  [FE]  AssertionFailedError  	18	1	replace
512	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  /(c  *  i));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  /(c  *  i));  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(getChiSquare()  /(c  *  i));	          errors[i]    =    Math.sqrt(getChiSquare()    /(rows    -    i));    errors[i]    =    Math.sqrt(getChiSquare()    /(rows    *    i));    	compilable	  [FE]  AssertionFailedError  	18	1	replace
513	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  cost)*  c,  sum;  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  cost)*  c,  sum;  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i],  cost)*  c,  sum;	  errors[i]    =    Math.sqrt(covar[i][i],    cost)*    c;    	non-compiled	[CE]  ';'  expected	28	None	replace
514	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  cost)*  c,  residuals;  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  cost)*  c,  residuals;  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i],  cost)*  c,  residuals;	  errors[i]    =    Math.sqrt(covar[i][i],    cost)*    c;    	non-compiled	[CE]  ';'  expected	28	None	replace
515	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  -  1]  *  c,  2);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  -  1]  *  c,  2);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i]  -  1]  *  c,  2);	  errors[i]    =    Math.sqrt(covar[i][i]    -    1]    *    c,    cost);    	non-compiled	[CE]  ')'  expected	117	None	replace
516	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  c  *  jTj));  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  c  *  jTj));  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i],  c  *  jTj));	  errors[i]    =    Math.sqrt(covar[i][i]    *    c);    errors[i]    =    Math.sqrt(covar[i][i]    *    c));    	non-compiled	[CE]  ';'  expected	64	None	replace
517	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  *  cost);  cols[i]  =  Math.sqrt(covar[i][i]  *  cost);  [CE]  array  required,  but  int  found  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  *  cost);  cols[i]  =  Math.sqrt(covar[i][i]  *  cost);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]    =    Math.sqrt(covar[i][i]    *    cost);    cols[i]  =  Math.sqrt(covar[i][i]  *  cost);	  	non-compiled	[CE]  array  required,  but  int  found	38	None	add
518	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  c,  0,  cost)*  c;  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  c,  0,  cost)*  c;  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i],  c,  0,  cost)*  c;	  errors[i]    =    Math.sqrt(covar[i][i],    c,    cost)*    c;    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	29	None	replace
519	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  c,  cost)*  covar[i][i];  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  c,  cost)*  covar[i][i];  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i],  c,  cost)*  covar[i][i];	  errors[i]    =    Math.sqrt(covar[i][i],    c,    cost)*    c;    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	29	None	replace
520	[BUG]  [BUGGY]  c  =  Math.sqrt(getChiSquare()  *(rows[i]  -  1));  [CE]  cannot  assign  a  value  to  final  variable  c  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  c  =  Math.sqrt(getChiSquare()  *(rows[i]  -  1));  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	c  =  Math.sqrt(getChiSquare()  *(rows[i]  -  1));	  c    =    Math.sqrt(getChiSquare()    *(rows[i]    -    i));    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  c	66	None	replace
521	[BUG]  [BUGGY]  errorCount  =  Math.sqrt(getChiSquare()  /(rows  -  i));  errors[i]  =  Math.sqrt(covar[i][i]  *  jTj);  [CE]  cannot  find  symbol  errorCount  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errorCount  =  Math.sqrt(getChiSquare()  /(rows  -  i));  errors[i]  =  Math.sqrt(covar[i][i]  *  jTj);  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errorCount  =  Math.sqrt(getChiSquare()  /(rows  -  i));  errors[i]  =  Math.sqrt(covar[i][i]  *  jTj);	  c    =    Math.sqrt(getChiSquare()    /(rows    -    i));    errors[i]    =    Math.sqrt(covar[i][i]    *    jTj);    	non-compiled	[CE]  cannot  find  symbol  errorCount	36	None	replace
522	[BUG]  [BUGGY]  c  =  Math.sqrt(getChiSquare()  /(rows  -  i));  errors[i][i]  =  Math.sqrt(covar[i][i]  *  jTj  +  1);  [CE]  cannot  assign  a  value  to  final  variable  c  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  c  =  Math.sqrt(getChiSquare()  /(rows  -  i));  errors[i][i]  =  Math.sqrt(covar[i][i]  *  jTj  +  1);  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	c  =  Math.sqrt(getChiSquare()  /(rows  -  i));  errors[i][i]  =  Math.sqrt(covar[i][i]  *  jTj  +  1);	  c    =    Math.sqrt(getChiSquare()    /(rows    -    i));    errors[i][i]    =    Math.sqrt(covar[i][i]    *    jTj);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  c	21	None	replace
523	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  covar[i]  /  c));  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  covar[i]  /  c));  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i],  covar[i]  /  c));	  errors[i]    =    Math.sqrt(covar[i][i]    /    c);    errors[i]    =    Math.sqrt(covar[i][i]    /    c));    	non-compiled	[CE]  ';'  expected	46	None	replace
524	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  2]  *  c);  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  2]  *  c);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i]  /  2]  *  c);	  errors[i]    =    Math.sqrt(covar[i][i]    -    1]    *    c);    	non-compiled	[CE]  ')'  expected	116	None	replace
525	[BUG]  [BUGGY]  errors[i][i]  =  covar[i].doubleValue()  /  2;  [CE]  array  required,  but  double  found  [FE]          AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i][i]  =  covar[i].doubleValue()  /  2;  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i][i]  =  covar[i].doubleValue()  /  2;	  errors[i][i]    =    covar[i].doubleValue();    	non-compiled	[CE]  array  required,  but  double  found	51	None	replace
526	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  c  +  1);  cols[i]  =  Math.sqrt(covar[i][i]  /  c  +  1);  [CE]  array  required,  but  int  found  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  c  +  1);  cols[i]  =  Math.sqrt(covar[i][i]  /  c  +  1);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]    =    Math.sqrt(covar[i][i]    /    c    +    1);    cols[i]  =  Math.sqrt(covar[i][i]  /  c  +  1);	  	non-compiled	[CE]  array  required,  but  int  found	92	None	add
527	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  c  +  1);  errors[i]  =  Math.sqrt(covar[i][i]  /  c  +  1));  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  c  +  1);  errors[i]  =  Math.sqrt(covar[i][i]  /  c  +  1));  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]    =    Math.sqrt(covar[i][i]    /    c    +    1);    errors[i]  =  Math.sqrt(covar[i][i]  /  c  +  1));	  	non-compiled	[CE]  ';'  expected	92	None	add
528	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  c)/  2;  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  c)/  2;  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i],  c)/  2;	  errors[i]    =    Math.sqrt(covar[i][i])/    2;    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	56	None	replace
529	[BUG]  [BUGGY]  double  c  =  Math.sqrt(getChiSquare()  /(rows  -  i)/  1);  [CE]  variable  c  is  already  defined  in  method  guessParametersErrors()  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  double  c  =  Math.sqrt(getChiSquare()  /(rows  -  i)/  1);  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	double  c  =  Math.sqrt(getChiSquare()  /(rows  -  i)/  1);	  double    c    =    Math.sqrt(getChiSquare()    /(rows    -    i)+    1);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  guessParametersErrors()	88	None	replace
530	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][0])/  c;  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	add	errors[i]  =  Math.sqrt(covar[i][0])/  c;	  errors[i]    =    Math.sqrt(covar[i][i])/    c;    errors[i]    =    Math.sqrt(covar[i][i])/    c;    	compilable	  [FE]  AssertionFailedError  	69	1	replace
531	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][0])/  c;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][0])/  c;  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][0])/  c;	  errors[i]    =    Math.sqrt(covar[i][i])/    c;    errors[i]    =    Math.sqrt(covar[i][i])/    c;    	compilable	  [FE]  AssertionFailedError  	69	1	replace
532	[BUG]  [BUGGY]  errors[i][i]  =  Math.sqrt(covar[i][i],  c);  [CE]  array  required,  but  double  found  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i][i]  =  Math.sqrt(covar[i][i],  c);  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i][i]  =  Math.sqrt(covar[i][i],  c);	  errors[i][i]    =    Math.sqrt(covar[i][i]    *    c);    	non-compiled	[CE]  array  required,  but  double  found	19	None	replace
533	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  c  +  2]);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  c  +  2]);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i],  c  +  2]);	  errors[i]    =    Math.sqrt(covar[i][i],    c    +    1]);    	non-compiled	[CE]  ')'  expected	81	None	replace
534	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  -  cost);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	add	errors[i]  =  Math.sqrt(covar[i][i]  -  cost);	  errors[i]    =    Math.sqrt(covar[i][i]    *    cost);    	compilable	  [FE]  AssertionFailedError  	39	1	replace
535	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  -  cost);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  -  cost);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i]  -  cost);	  errors[i]    =    Math.sqrt(covar[i][i]    *    cost);    	compilable	  [FE]  AssertionFailedError  	39	1	replace
536	[BUG]  [BUGGY]  double  c  =  Math.sqrt(getChiSquare()  /(cols  -  i));  errors[i]  =  Math.sqrt(covar[i][i]  *  jTj);  [CE]  variable  c  is  already  defined  in  method  guessParametersErrors()  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  double  c  =  Math.sqrt(getChiSquare()  /(cols  -  i));  errors[i]  =  Math.sqrt(covar[i][i]  *  jTj);  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	double  c  =  Math.sqrt(getChiSquare()  /(cols  -  i));  errors[i]  =  Math.sqrt(covar[i][i]  *  jTj);	  double    c    =    Math.sqrt(getChiSquare()    /(rows    -    i));    errors[i]    =    Math.sqrt(covar[i][i]    *    jTj);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  guessParametersErrors()	87	None	replace
537	[BUG]  [BUGGY]  errors[i]  =  covar[i][c]  /  2.0;  [CE]  possible  loss  of  precision  [FE]          AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  covar[i][c]  /  2.0;  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  covar[i][c]  /  2.0;	          errors[i]    =    covar[i][c];    	non-compiled	[CE]  possible  loss  of  precision	91	None	replace
538	[BUG]  [BUGGY]  c  =  Math.sqrt(getChiSquare()  *(rows  -  i));  errors[i][i]  =  Math.sqrt(covar[i][i]  *  JTj);  [CE]  cannot  assign  a  value  to  final  variable  c  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  c  =  Math.sqrt(getChiSquare()  *(rows  -  i));  errors[i][i]  =  Math.sqrt(covar[i][i]  *  JTj);  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	c  =  Math.sqrt(getChiSquare()  *(rows  -  i));  errors[i][i]  =  Math.sqrt(covar[i][i]  *  JTj);	  c    =    Math.sqrt(getChiSquare()    *(rows    -    i));    errors[i][i]    =    Math.sqrt(covar[i][i]    *    jTj);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  c	22	None	replace
539	[BUG]  [BUGGY]  if(i  >  0)  {  errors[i]  =  Math.sqrt(covar[i][i]  /  c);  int  i]  =  Math.sqrt(covar[i][i]  /  c);  }  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  if(i  >  0)  {  errors[i]  =  Math.sqrt(covar[i][i]  /  c);  int  i]  =  Math.sqrt(covar[i][i]  /  c);  }  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	if(i  >  0)  {  errors[i]  =  Math.sqrt(covar[i][i]  /  c);  int  i]  =  Math.sqrt(covar[i][i]  /  c);  }	  errors[i]    =    Math.sqrt(covar[i][i]    /    c);    int    i]    =    Math.sqrt(covar[i][i]    /    c);    	non-compiled	[CE]  ';'  expected	96	None	replace
540	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  if(i  >  0)  {  errors[i]  =  Math.sqrt(covar[i][i]  /  c);  }  else  {  errors[i]  =  Math.sqrt(covar[i][i]  /  c);  }  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	add	if(i  >  0)  {  errors[i]  =  Math.sqrt(covar[i][i]  /  c);  }  else  {  errors[i]  =  Math.sqrt(covar[i][i]  /  c);  }	  errors[i]    =    Math.sqrt(covar[i][i]    /    c);    int    i]    =    Math.sqrt(covar[i][i]    /    c);    	compilable	  [FE]  AssertionFailedError  	96	1	replace
541	[BUG]  [BUGGY]  if(i  >  0)  {  errors[i]  =  Math.sqrt(covar[i][i]  /  c);  }  else  {  errors[i]  =  Math.sqrt(covar[i][i]  /  c);  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  if(i  >  0)  {  errors[i]  =  Math.sqrt(covar[i][i]  /  c);  }  else  {  errors[i]  =  Math.sqrt(covar[i][i]  /  c);  }  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	if(i  >  0)  {  errors[i]  =  Math.sqrt(covar[i][i]  /  c);  }  else  {  errors[i]  =  Math.sqrt(covar[i][i]  /  c);  }	  errors[i]    =    Math.sqrt(covar[i][i]    /    c);    int    i]    =    Math.sqrt(covar[i][i]    /    c);    	compilable	  [FE]  AssertionFailedError  	96	1	replace
542	[BUG]  [BUGGY]  c  =  Math.sqrt(getChiSquare()  /(rows  -  cols));  [CE]  cannot  assign  a  value  to  final  variable  c  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  c  =  Math.sqrt(getChiSquare()  /(rows  -  cols));  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	c  =  Math.sqrt(getChiSquare()  /(rows  -  cols));	  c    =    Math.sqrt(getChiSquare()    /(cols    -    i));    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  c	23	None	replace
543	[BUG]  [BUGGY]  jTj  =  Math.sqrt(getChiSquare()  /(rows  -  i));  errors[i]  =  Math.sqrt(covar[i][i])*  c;  [CE]  cannot  find  symbol  jTj  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  jTj  =  Math.sqrt(getChiSquare()  /(rows  -  i));  errors[i]  =  Math.sqrt(covar[i][i])*  c;  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	jTj  =  Math.sqrt(getChiSquare()  /(rows  -  i));  errors[i]  =  Math.sqrt(covar[i][i])*  c;	  c    =    Math.sqrt(getChiSquare()    /(rows    -    i));    errors[i]    =    Math.sqrt(covar[i][i])*    jTj;    	non-compiled	[CE]  cannot  find  symbol  jTj	25	None	replace
544	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i)/  1);  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	add	errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i)/  1);	  errors[i]    =    Math.sqrt(getChiSquare()    /(rows    -    i)+    1);    	compilable	  [FE]  AssertionFailedError  	6	1	replace
545	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i)/  1);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i)/  1);  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(getChiSquare()  /(rows  -  i)/  1);	  errors[i]    =    Math.sqrt(getChiSquare()    /(rows    -    i)+    1);    	compilable	  [FE]  AssertionFailedError  	6	1	replace
546	[BUG]  [BUGGY]  errors[i][i]  =  covar[i][c];  [CE]  array  required,  but  double  found  [FE]        AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i][i]  =  covar[i][c];  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i][i]  =  covar[i][c];	          errors[i][i]    =    covar[i][0];    	non-compiled	[CE]  array  required,  but  double  found	79	None	replace
547	[BUG]  [BUGGY]  errors[i][i]  =  covar[i]  *  c;  [CE]  array  required,  but  double  found  [FE]          AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i][i]  =  covar[i]  *  c;  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i][i]  =  covar[i]  *  c;	          errors[i][i]    =    covar[i][0];    	non-compiled	[CE]  array  required,  but  double  found	79	None	replace
548	[BUG]  [BUGGY]  errorCount  =  Math.sqrt(getChiSquare()  /(rows  -  i)+  1);  errors[i]  =  Math.sqrt(covar[i][i]  *  jTj);  [CE]  cannot  find  symbol  errorCount  [FE]                    AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errorCount  =  Math.sqrt(getChiSquare()  /(rows  -  i)+  1);  errors[i]  =  Math.sqrt(covar[i][i]  *  jTj);  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errorCount  =  Math.sqrt(getChiSquare()  /(rows  -  i)+  1);  errors[i]  =  Math.sqrt(covar[i][i]  *  jTj);	  c    =    Math.sqrt(getChiSquare()    /(rows    -    i)+    1);    errors[i]    =    Math.sqrt(covar[i][i]    *    jTj);    	non-compiled	[CE]  cannot  find  symbol  errorCount	37	None	replace
549	[BUG]  [BUGGY]  c  =  Math.sqrt(getChiSquare()  /(rows  -  i)+  1)*  1;  errors[i]  =  Math.sqrt(covar[i][i]  *  jTj);  [CE]  cannot  assign  a  value  to  final  variable  c  [FE]                      AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  c  =  Math.sqrt(getChiSquare()  /(rows  -  i)+  1)*  1;  errors[i]  =  Math.sqrt(covar[i][i]  *  jTj);  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	c  =  Math.sqrt(getChiSquare()  /(rows  -  i)+  1)*  1;  errors[i]  =  Math.sqrt(covar[i][i]  *  jTj);	  c    =    Math.sqrt(getChiSquare()    /(rows    -    i)+    1);    errors[i]    =    Math.sqrt(covar[i][i]    *    jTj);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  c	37	None	replace
550	[BUG]  [BUGGY]          errors[i]  =  covar[i][0];  cols[i]  =  covar[i][0];  [CE]  array  required,  but  int  found  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]          errors[i]  =  covar[i][0];  cols[i]  =  covar[i][0];  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	                errors[i]    =    covar[i][0];    cols[i]  =  covar[i][0];	  	non-compiled	[CE]  array  required,  but  int  found	89	None	add
551	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  c  /  2);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  c  /  2);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i],  c  /  2);	  errors[i]    =    Math.sqrt(covar[i][i]    /    2);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	73	None	replace
552	[BUG]  [BUGGY]  i]  =  Math.sqrt(covar[i][i]  /  c);  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  i]  =  Math.sqrt(covar[i][i]  /  c);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	i]  =  Math.sqrt(covar[i][i]  /  c);	  errors[i]    =    Math.sqrt(covar[i][i]    /    c);    i]    =    Math.sqrt(covar[i][i]    /    c);    	non-compiled	[CE]  not  a  statement	95	None	replace
553	[BUG]  [BUGGY]  i]  =  Math.sqrt(covar[i][i]  *  c);  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  i]  =  Math.sqrt(covar[i][i]  *  c);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	i]  =  Math.sqrt(covar[i][i]  *  c);	  errors[i]    =    Math.sqrt(covar[i][i]    *    c);    i]    =    Math.sqrt(covar[i][i]    *    c);    	non-compiled	[CE]  not  a  statement	104	None	replace
554	[BUG]  [BUGGY]  errors[i]  =  c.doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]        AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  c.doubleValue();  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  c.doubleValue();	  errors[i]    =    covar[i].doubleValue();    	non-compiled	[CE]  double  cannot  be  dereferenced	50	None	replace
555	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  c,  reimbursement);  [CE]  cannot  find  symbol  reimbursement  [FE]        AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  c,  reimbursement);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i],  c,  reimbursement);	  errors[i]    =    Math.sqrt(covar[i][i],    c);    	non-compiled	[CE]  cannot  find  symbol  reimbursement	100	None	replace
556	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  2]  *  c  +  1;  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  2]  *  c  +  1;  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i]  /  2]  *  c  +  1;	  errors[i]    =    Math.sqrt(covar[i][i]    /    2]    *    c;    	non-compiled	[CE]  ')'  expected	11	None	replace
557	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  2]  *  jTj);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  2]  *  jTj);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i]  /  2]  *  jTj);	  errors[i]    =    Math.sqrt(covar[i][i]    /    2]    *    c;    	non-compiled	[CE]  ')'  expected	11	None	replace
558	[BUG]  [BUGGY]  c  =  Math.sqrt(getChiSquare()  /(rows  -  i)/  1);  [CE]  cannot  assign  a  value  to  final  variable  c  [FE]              AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  c  =  Math.sqrt(getChiSquare()  /(rows  -  i)/  1);  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	c  =  Math.sqrt(getChiSquare()  /(rows  -  i)/  1);	  c    =    Math.sqrt(getChiSquare()    /(rows    -    i)+    1);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  c	99	None	replace
559	[BUG]  [BUGGY]  c  =  Math.sqrt(getChiSquare()  *(i  +  1),  cost);  [CE]  cannot  assign  a  value  to  final  variable  c  [FE]                    AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  c  =  Math.sqrt(getChiSquare()  *(i  +  1),  cost);  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	c  =  Math.sqrt(getChiSquare()  *(i  +  1),  cost);	  c    =    Math.sqrt(getChiSquare()    *(i    +    1));    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  c	67	None	replace
560	[BUG]  [BUGGY]  c  =  Math.sqrt(getChiSquare()  *(rows  -  i));  errors[i]  =  Math.sqrt(covar[i][i])*  chiSquare;  [CE]  cannot  assign  a  value  to  final  variable  c  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  c  =  Math.sqrt(getChiSquare()  *(rows  -  i));  errors[i]  =  Math.sqrt(covar[i][i])*  chiSquare;  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	c  =  Math.sqrt(getChiSquare()  *(rows  -  i));  errors[i]  =  Math.sqrt(covar[i][i])*  chiSquare;	  c    =    Math.sqrt(getChiSquare()    *(rows    -    i));    errors[i]    =    Math.sqrt(covar[i][i])*    c;    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  c	26	None	replace
561	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]    =    Math.sqrt(covar[i][i]    /    c);    errors[i]  =  Math.sqrt(covar[i][i]  /  c);  errors[i]  =  Math.sqrt(covar[i][i]  /  2);  errors[i]  =  Math.sqrt(covar[i][i]  /  2);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	add	errors[i]        =        Math.sqrt(covar[i][i]        /        c);        errors[i]    =    Math.sqrt(covar[i][i]    /    c);    errors[i]  =  Math.sqrt(covar[i][i]  /  2);  errors[i]  =  Math.sqrt(covar[i][i]  /  2);	  	compilable	  [FE]  AssertionFailedError  	43	1	add
562	[BUG]  [BUGGY]  errors[i]    =    Math.sqrt(covar[i][i]    /    c);    errors[i]  =  Math.sqrt(covar[i][i]  /  c);  errors[i]  =  Math.sqrt(covar[i][i]  /  2);  errors[i]  =  Math.sqrt(covar[i][i]  /  2);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]    =    Math.sqrt(covar[i][i]    /    c);    errors[i]  =  Math.sqrt(covar[i][i]  /  c);  errors[i]  =  Math.sqrt(covar[i][i]  /  2);  errors[i]  =  Math.sqrt(covar[i][i]  /  2);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]        =        Math.sqrt(covar[i][i]        /        c);        errors[i]    =    Math.sqrt(covar[i][i]    /    c);    errors[i]  =  Math.sqrt(covar[i][i]  /  2);  errors[i]  =  Math.sqrt(covar[i][i]  /  2);	  	compilable	  [FE]  AssertionFailedError  	43	1	add
563	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]          errors[i]    =    Math.sqrt(getChiSquare()    /(rows    -    i));    errors[i]  =  Math.sqrt(getChiSquare()  /(cols  -  i));  errors[i]  =  Math.sqrt(getChiSquare()  /(cols  -  i));  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	add	                errors[i]        =        Math.sqrt(getChiSquare()        /(rows        -        i));        errors[i]    =    Math.sqrt(getChiSquare()    /(cols    -    i));    errors[i]  =  Math.sqrt(getChiSquare()  /(cols  -  i));	  	compilable	  [FE]  AssertionFailedError  	14	1	add
564	[BUG]  [BUGGY]          errors[i]    =    Math.sqrt(getChiSquare()    /(rows    -    i));    errors[i]  =  Math.sqrt(getChiSquare()  /(cols  -  i));  errors[i]  =  Math.sqrt(getChiSquare()  /(cols  -  i));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]          errors[i]    =    Math.sqrt(getChiSquare()    /(rows    -    i));    errors[i]  =  Math.sqrt(getChiSquare()  /(cols  -  i));  errors[i]  =  Math.sqrt(getChiSquare()  /(cols  -  i));  [BUGGY]      errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	                errors[i]        =        Math.sqrt(getChiSquare()        /(rows        -        i));        errors[i]    =    Math.sqrt(getChiSquare()    /(cols    -    i));    errors[i]  =  Math.sqrt(getChiSquare()  /(cols  -  i));	  	compilable	  [FE]  AssertionFailedError  	14	1	add
565	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  -  2]);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  -  2]);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i]  -  2]);	  errors[i]    =    Math.sqrt(covar[i][i]    -    c]);    	non-compiled	[CE]  ')'  expected	34	None	replace
566	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  c)*  cost,  residuals);  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  c)*  cost,  residuals);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i],  c)*  cost,  residuals);	  errors[i]    =    Math.sqrt(covar[i][i],    c)*    cost;    	non-compiled	[CE]  ';'  expected	106	None	replace
567	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  c  *  chiSquare);  [CE]  cannot  find  symbol  chiSquare  [FE]          AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  c  *  chiSquare);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i],  c  *  chiSquare);	  errors[i]    =    Math.sqrt(covar[i][i],    c    *    jTj);    	non-compiled	[CE]  cannot  find  symbol  chiSquare	101	None	replace
568	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  c  *  ji);  [CE]  cannot  find  symbol  ji  [FE]            AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  c  *  ji);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i],  c  *  ji);	  errors[i]    =    Math.sqrt(covar[i][i],    c    *    jTj);    	non-compiled	[CE]  cannot  find  symbol  ji	101	None	replace
569	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  2);  cols[i]  =  Math.sqrt(covar[i][i]  /  2);  [CE]  array  required,  but  int  found  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  /  2);  cols[i]  =  Math.sqrt(covar[i][i]  /  2);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]    =    Math.sqrt(covar[i][i]    /    2);    cols[i]  =  Math.sqrt(covar[i][i]  /  2);	  	non-compiled	[CE]  array  required,  but  int  found	72	None	add
570	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  *  c,  sum,  cost);  [CE]  cannot  find  symbol  sum  [FE]        AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  *  c,  sum,  cost);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i]  *  c,  sum,  cost);	  errors[i]    =    Math.sqrt(covar[i][i]    *    c,    cost);    	non-compiled	[CE]  cannot  find  symbol  sum	77	None	replace
571	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  *  c,  coefficient);  [CE]  cannot  find  symbol  coefficient  [FE]          AssertionFailedError      [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  *  c,  coefficient);  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i]  *  c,  coefficient);	  errors[i]    =    Math.sqrt(covar[i][i]    *    c,    errorCount);    	non-compiled	[CE]  cannot  find  symbol  coefficient	78	None	replace
572	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  *  c)/  3;  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	add	errors[i]  =  Math.sqrt(covar[i][i]  *  c)/  3;	  errors[i]    =    Math.sqrt(covar[i][i])/    3;    	compilable	  [FE]  AssertionFailedError  	58	1	replace
573	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  *  c)/  3;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i]  *  c)/  3;  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i]  *  c)/  3;	  errors[i]    =    Math.sqrt(covar[i][i])/    3;    	compilable	  [FE]  AssertionFailedError  	58	1	replace
574	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  c)/  3;  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]      AssertionFailedError    [CONTEXT]      throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));  double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {      [BUGGY]  errors[i]  =  Math.sqrt(covar[i][i],  c)/  3;  [BUGGY]      }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	321	321	1	replace	errors[i]  =  Math.sqrt(covar[i][i],  c)/  3;	  errors[i]    =    Math.sqrt(covar[i][i])/    3;    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	58	None	replace
