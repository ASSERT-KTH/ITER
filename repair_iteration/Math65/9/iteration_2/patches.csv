bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  final  double[][]  c  =  Math.sqrt(getChiSquare()  /(cols  -  cols));  [CE]  variable  c  is  already  defined  in  method  guessParametersErrors()  [FE]              AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  final  double[][]  c  =  Math.sqrt(getChiSquare()  /(cols  -  cols));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	final  double[][]  c  =  Math.sqrt(getChiSquare()  /(cols  -  cols));	  final    double[][]    c    =    Math.sqrt(getChiSquare()    *(cols    -    cols));    	non-compiled	[CE]  variable  c  is  already  defined  in  method  guessParametersErrors()	26	None	replace
2	[BUG]  [BUGGY]  final  double[][]  cols  =  Math.sqrt(getChiSquare()  *(rows  -  cols));  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  final  double[][]  cols  =  Math.sqrt(getChiSquare()  *(rows  -  cols));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	final  double[][]  cols  =  Math.sqrt(getChiSquare()  *(rows  -  cols));	  final    double[][]    c    =    Math.sqrt(getChiSquare()    *(cols    -    cols));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	26	None	replace
3	[BUG]  [BUGGY]  final  double[][]  cols  =  Math.sqrt(getChiSquare()  *(cols  -  1));  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                  AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  final  double[][]  cols  =  Math.sqrt(getChiSquare()  *(cols  -  1));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	final  double[][]  cols  =  Math.sqrt(getChiSquare()  *(cols  -  1));	  final    double[][]    c    =    Math.sqrt(getChiSquare()    *(cols    -    cols));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	26	None	replace
4	[BUG]  [BUGGY]  double[][]  c  =  Math.sqrt(getChiSquare()  *(rows  *  cols));  [CE]  variable  c  is  already  defined  in  method  guessParametersErrors()  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  c  =  Math.sqrt(getChiSquare()  *(rows  *  cols));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  c  =  Math.sqrt(getChiSquare()  *(rows  *  cols));	  double[][]    c    =    Math.sqrt(getChiSquare()    /(rows    *    cols));    	non-compiled	[CE]  variable  c  is  already  defined  in  method  guessParametersErrors()	50	None	replace
5	[BUG]  [BUGGY]  double[][]  c  =  Math.sqrt(getChiSquare()  /(rows  *  cols)+  1);  [CE]  variable  c  is  already  defined  in  method  guessParametersErrors()  [FE]                  AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  c  =  Math.sqrt(getChiSquare()  /(rows  *  cols)+  1);  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  c  =  Math.sqrt(getChiSquare()  /(rows  *  cols)+  1);	  double[][]    c    =    Math.sqrt(getChiSquare()    /(rows    *    cols));    	non-compiled	[CE]  variable  c  is  already  defined  in  method  guessParametersErrors()	50	None	replace
6	[BUG]  [BUGGY]  double[][]  c  =  Math.sqrt(getChiSquare()  /(rows  *  cols)-  1);  [CE]  variable  c  is  already  defined  in  method  guessParametersErrors()  [FE]                    AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  c  =  Math.sqrt(getChiSquare()  /(rows  *  cols)-  1);  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  c  =  Math.sqrt(getChiSquare()  /(rows  *  cols)-  1);	  double[][]    c    =    Math.sqrt(getChiSquare()    /(rows    *    cols));    	non-compiled	[CE]  variable  c  is  already  defined  in  method  guessParametersErrors()	50	None	replace
7	[BUG]  [BUGGY]  double[][]  covar  =  getCovariance().toArray(c);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  covar  =  getCovariance().toArray(c);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  covar  =  getCovariance().toArray(c);	  double[][]    covar    =    getCovariance().toArray(errors);    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
8	[BUG]  [BUGGY]  double[][]  covar  =  getCovariance().toArray(errors,  c);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  covar  =  getCovariance().toArray(errors,  c);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  covar  =  getCovariance().toArray(errors,  c);	  double[][]    covar    =    getCovariance().toArray(errors);    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
9	[BUG]  [BUGGY]  double[][]  covar  =  getCovariance().toArray(covars);  [CE]  cannot  find  symbol  covars  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  covar  =  getCovariance().toArray(covars);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  covar  =  getCovariance().toArray(covars);	  double[][]    covar    =    getCovariance().toArray(errors);    	non-compiled	[CE]  cannot  find  symbol  covars	63	None	replace
10	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  c.length;  ++i)  {  errors[i]  =  Math.  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  c.length;  ++i)  {  errors[i]  =  Math.  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  c.length;  ++i)  {  errors[i]  =  Math.	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    double[][]    covar    =    getCovariances();    for(int    i    =    0;    i    <    c.length;    ++i)    {    errors[i]    =    Math.    	non-compiled	[CE]  <identifier>  expected	65	None	replace
11	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  c.length;  ++i)  {  errors[i]  =  Math.  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  c.length;  ++i)  {  errors[i]  =  Math.  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	for(int  i  =  0;  i  <  rows.length;  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  c.length;  ++i)  {  errors[i]  =  Math.	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    double[][]    covar    =    getCovariances();    for(int    i    =    0;    i    <    c.length;    ++i)    {    errors[i]    =    Math.    	non-compiled	[CE]  <identifier>  expected	65	None	replace
12	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  c.length;  ++i)  {  errors[i]  =  Math  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  c.length;  ++i)  {  errors[i]  =  Math  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	for(int  i  =  0;  i  <  cols.length;  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  c.length;  ++i)  {  errors[i]  =  Math	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    double[][]    covar    =    getCovariances();    for(int    i    =    0;    i    <    c.length;    ++i)    {    errors[i]    =    Math.    	non-compiled	[CE]  ';'  expected	65	None	replace
13	[BUG]  [BUGGY]  final  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  c.length;  ++i)  {  errors[i]  =  Math.sqrt  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  final  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  c.length;  ++i)  {  errors[i]  =  Math.sqrt  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	final  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  c.length;  ++i)  {  errors[i]  =  Math.sqrt	  for(int    i    =    0;    i    <    errors.length;    ++i)    {    double[][]    covar    =    getCovariances();    for(int    i    =    0;    i    <    c.length;    ++i)    {    errors[i]    =    Math.sqrt    	non-compiled	[CE]  ';'  expected	18	None	replace
14	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  errors.length;  ++i)  {  final  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  c.length;  ++i)  {  errors[i]  =  Math.sqrt  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  for(int  i  =  0;  i  <  errors.length;  ++i)  {  final  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  c.length;  ++i)  {  errors[i]  =  Math.sqrt  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	for(int  i  =  0;  i  <  errors.length;  ++i)  {  final  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  c.length;  ++i)  {  errors[i]  =  Math.sqrt	  for(int    i    =    0;    i    <    errors.length;    ++i)    {    double[][]    covar    =    getCovariances();    for(int    i    =    0;    i    <    c.length;    ++i)    {    errors[i]    =    Math.sqrt    	non-compiled	[CE]  ';'  expected	18	None	replace
15	[BUG]  [BUGGY]  double[][]  covar  =  getCovariances().toArray(c,  c);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  covar  =  getCovariances().toArray(c,  c);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  covar  =  getCovariances().toArray(c,  c);	  double[][]    covar    =    getCovariances().toArray(c,    covar);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
16	[BUG]  [BUGGY]  double[][]  covar  =  getCovariances().toArray(c,  errorCount);  [CE]  cannot  find  symbol  errorCount  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  covar  =  getCovariances().toArray(c,  errorCount);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  covar  =  getCovariances().toArray(c,  errorCount);	  double[][]    covar    =    getCovariances().toArray(c,    covar);    	non-compiled	[CE]  cannot  find  symbol  errorCount	6	None	replace
17	[BUG]  [BUGGY]  double[][]  covar  =  getCovariances(c,  jF,  errors);  [CE]  method  getCovariances  in  class  AbstractLeastSquaresOptimizer  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  covar  =  getCovariances(c,  jF,  errors);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  covar  =  getCovariances(c,  jF,  errors);	  double[][]    covar    =    getCovariances(c,    jF);    	non-compiled	[CE]  method  getCovariances  in  class  AbstractLeastSquaresOptimizer  cannot  be  applied  to  given  types;	4	None	replace
18	[BUG]  [BUGGY]  double[][]  covar  =  getCovariances(jF,  c);  [CE]  method  getCovariances  in  class  AbstractLeastSquaresOptimizer  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  covar  =  getCovariances(jF,  c);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  covar  =  getCovariances(jF,  c);	  double[][]    covar    =    getCovariances(c,    jF);    	non-compiled	[CE]  method  getCovariances  in  class  AbstractLeastSquaresOptimizer  cannot  be  applied  to  given  types;	4	None	replace
19	[BUG]  [BUGGY]  double[][]  covar  =  getCovariances(c,  jTj,  jF);  [CE]  cannot  find  symbol  jTj  [FE]                          AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  covar  =  getCovariances(c,  jTj,  jF);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  covar  =  getCovariances(c,  jTj,  jF);	  double[][]    covar    =    getCovariances(c,    jF);    	non-compiled	[CE]  cannot  find  symbol  jTj	4	None	replace
20	[BUG]  [BUGGY]  double[][]  covar  =  getCovariances(c,  jTj,  c);  [CE]  cannot  find  symbol  jTj  [FE]                            AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  covar  =  getCovariances(c,  jTj,  c);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  covar  =  getCovariances(c,  jTj,  c);	  double[][]    covar    =    getCovariances(c,    jF);    	non-compiled	[CE]  cannot  find  symbol  jTj	4	None	replace
21	[BUG]  [BUGGY]  final  double[][]  errors  =  Math.sqrt(getChiSquare()  /(rows  *  cols));  [CE]  variable  errors  is  already  defined  in  method  guessParametersErrors()  [FE]                  AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  final  double[][]  errors  =  Math.sqrt(getChiSquare()  /(rows  *  cols));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	final  double[][]  errors  =  Math.sqrt(getChiSquare()  /(rows  *  cols));	  final    double[][]    errors    =    Math.sqrt(getChiSquare()    /(rows    -    cols));    	non-compiled	[CE]  variable  errors  is  already  defined  in  method  guessParametersErrors()	81	None	replace
22	[BUG]  [BUGGY]  final  double[][]  errors  =  Math.sqrt(getChiSquare()  /(cols  -  rows));  [CE]  variable  errors  is  already  defined  in  method  guessParametersErrors()  [FE]                    AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  final  double[][]  errors  =  Math.sqrt(getChiSquare()  /(cols  -  rows));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	final  double[][]  errors  =  Math.sqrt(getChiSquare()  /(cols  -  rows));	  final    double[][]    errors    =    Math.sqrt(getChiSquare()    /(rows    -    cols));    	non-compiled	[CE]  variable  errors  is  already  defined  in  method  guessParametersErrors()	81	None	replace
23	[BUG]  [BUGGY]  final  double[][]  errors  =  Math.sqrt(getChiSquare()  /(cols  -  getChiSquare()));  [CE]  variable  errors  is  already  defined  in  method  guessParametersErrors()  [FE]                      AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  final  double[][]  errors  =  Math.sqrt(getChiSquare()  /(cols  -  getChiSquare()));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	final  double[][]  errors  =  Math.sqrt(getChiSquare()  /(cols  -  getChiSquare()));	  final    double[][]    errors    =    Math.sqrt(getChiSquare()    /(rows    -    cols));    	non-compiled	[CE]  variable  errors  is  already  defined  in  method  guessParametersErrors()	81	None	replace
24	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	for(int  i  =  0;  i  <  cols.length;  ++i)  {	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    double[][]    covar    =    getCovariances();    for(int    i    =    0;    i    <    cols.length;    ++i)    {    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
25	[BUG]  [BUGGY]  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    double[][]    covar    =    getCovariances();    for(int    i    =    0;    i    <    cols.length;    ++i)    {    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
26	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	for(int  i  =  0;  i  <  rows.length;  ++i)  {	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    double[][]    covar    =    getCovariances();    for(int    i    =    0;    i    <    cols.length;    ++i)    {    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
27	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  errors.length;  ++i)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  for(int  i  =  0;  i  <  errors.length;  ++i)  {  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	for(int  i  =  0;  i  <  errors.length;  ++i)  {	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    double[][]    covar    =    getCovariances();    for(int    i    =    0;    i    <    cols.length;    ++i)    {    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
28	[BUG]  [BUGGY]  double[][]  covar  =  getCovariances(c,  cols);  [CE]  method  getCovariances  in  class  AbstractLeastSquaresOptimizer  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  covar  =  getCovariances(c,  cols);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  covar  =  getCovariances(c,  cols);	  double[][]    covar    =    getCovariances(c,    errorCount);    	non-compiled	[CE]  method  getCovariances  in  class  AbstractLeastSquaresOptimizer  cannot  be  applied  to  given  types;	3	None	replace
29	[BUG]  [BUGGY]  double[][]  cols  =  getCovariances().toArray(new  double[cols.size()  +  1]);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  cols  =  getCovariances().toArray(new  double[cols.size()  +  1]);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  cols  =  getCovariances().toArray(new  double[cols.size()  +  1]);	  double[][]    cols    =    getCovariances().toArray(new    double[cols.size()    ]);    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
30	[BUG]  [BUGGY]  double[][]  cols  =  getCovariances().toArray(new  double[cols.length  ]);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  cols  =  getCovariances().toArray(new  double[cols.length  ]);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  cols  =  getCovariances().toArray(new  double[cols.length  ]);	  double[][]    cols    =    getCovariances().toArray(new    double[cols.size()    ]);    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
31	[BUG]  [BUGGY]  double[][]  cols  =  getCovariances().toArray(new  double[cols.size()  *  2]);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  cols  =  getCovariances().toArray(new  double[cols.size()  *  2]);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  cols  =  getCovariances().toArray(new  double[cols.size()  *  2]);	  double[][]    cols    =    getCovariances().toArray(new    double[cols.size()    ]);    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
32	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.size();  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  for(int  i  =  0;  i  <  rows.size();  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	for(int  i  =  0;  i  <  rows.size();  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.	  for(int    i    =    0;    i    <    cols.size();    ++i)    {    double[][]    covar    =    getCovariances();    for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[i]    =    Math.    	non-compiled	[CE]  <identifier>  expected	13	None	replace
33	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols.size();  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  for(int  i  =  0;  i  <  cols.size();  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	for(int  i  =  0;  i  <  cols.size();  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math	  for(int    i    =    0;    i    <    cols.size();    ++i)    {    double[][]    covar    =    getCovariances();    for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[i]    =    Math.    	non-compiled	[CE]  ';'  expected	13	None	replace
34	[BUG]  [BUGGY]  double[][]  covar  =  getCovariances(c,  jTj,  cost);  [CE]  cannot  find  symbol  jTj  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  covar  =  getCovariances(c,  jTj,  cost);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  covar  =  getCovariances(c,  jTj,  cost);	  double[][]    covar    =    getCovariances(c,    cost);    	non-compiled	[CE]  cannot  find  symbol  jTj	75	None	replace
35	[BUG]  [BUGGY]  double[][]  covar  =  getCovariances(c,  errorCount,  cost);  [CE]  cannot  find  symbol  errorCount  [FE]                  AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  covar  =  getCovariances(c,  errorCount,  cost);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  covar  =  getCovariances(c,  errorCount,  cost);	  double[][]    covar    =    getCovariances(c,    cost);    	non-compiled	[CE]  cannot  find  symbol  errorCount	75	None	replace
36	[BUG]  [BUGGY]  double[][]  covar  =  getCovariances(c,  errors,  cost);  [CE]  method  getCovariances  in  class  AbstractLeastSquaresOptimizer  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  covar  =  getCovariances(c,  errors,  cost);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  covar  =  getCovariances(c,  errors,  cost);	  double[][]    covar    =    getCovariances(c,    cost);    	non-compiled	[CE]  method  getCovariances  in  class  AbstractLeastSquaresOptimizer  cannot  be  applied  to  given  types;	75	None	replace
37	[BUG]  [BUGGY]  final  double[][]  errors  =  new  double[cols.length  -  3];  [CE]  variable  errors  is  already  defined  in  method  guessParametersErrors()  [FE]              AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  final  double[][]  errors  =  new  double[cols.length  -  3];  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	final  double[][]  errors  =  new  double[cols.length  -  3];	  double[][]    errors    =    new    double[cols.length    -    3];    	non-compiled	[CE]  variable  errors  is  already  defined  in  method  guessParametersErrors()	61	None	replace
38	[BUG]  [BUGGY]  double[][]  covar  =  getRemainings(),  c.doubleValue();  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  covar  =  getRemainings(),  c.doubleValue();  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  covar  =  getRemainings(),  c.doubleValue();	  double[][]    covar    =    getRemainings().doubleValue();    	non-compiled	[CE]  ';'  expected	67	None	replace
39	[BUG]  [BUGGY]  double[][]  covar  =  getRemainings().doubleValue()  +  c;  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  covar  =  getRemainings().doubleValue()  +  c;  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  covar  =  getRemainings().doubleValue()  +  c;	  double[][]    covar    =    getRemainings().doubleValue();    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
40	[BUG]  [BUGGY]  double[][]  covar  =  getRemainings().doubleValue()  /  2;  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  covar  =  getRemainings().doubleValue()  /  2;  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  covar  =  getRemainings().doubleValue()  /  2;	  double[][]    covar    =    getRemainings().doubleValue();    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
41	[BUG]  [BUGGY]  final  double[][]  covar  =  getCovariances().toArray(new  double[cols]);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  final  double[][]  covar  =  getCovariances().toArray(new  double[cols]);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	final  double[][]  covar  =  getCovariances().toArray(new  double[cols]);	  final    double[][]    covar    =    getCovariances().toArray(new    double[c]);    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
42	[BUG]  [BUGGY]  final  int[][]  covar  =  getCovariances().toArray(new  int[c]);  [CE]  possible  loss  of  precision  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  final  int[][]  covar  =  getCovariances().toArray(new  int[c]);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	final  int[][]  covar  =  getCovariances().toArray(new  int[c]);	  final    double[][]    covar    =    getCovariances().toArray(new    double[c]);    	non-compiled	[CE]  possible  loss  of  precision	37	None	replace
43	[BUG]  [BUGGY]  final  double[][]  covar  =  getCovariances().toArray(new  double[c  +  1]);  [CE]  possible  loss  of  precision  [FE]                  AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  final  double[][]  covar  =  getCovariances().toArray(new  double[c  +  1]);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	final  double[][]  covar  =  getCovariances().toArray(new  double[c  +  1]);	  final    double[][]    covar    =    getCovariances().toArray(new    double[c]);    	non-compiled	[CE]  possible  loss  of  precision	37	None	replace
44	[BUG]  [BUGGY]  final  double[][]  covar  =  getCovariances().toArray(new  double[c],  c);  [CE]  possible  loss  of  precision  [FE]              AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  final  double[][]  covar  =  getCovariances().toArray(new  double[c],  c);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	final  double[][]  covar  =  getCovariances().toArray(new  double[c],  c);	  double[][]    covar    =    getCovariances().toArray(new    double[c],    c);    	non-compiled	[CE]  possible  loss  of  precision	79	None	replace
45	[BUG]  [BUGGY]  double[][]  covar  =  getCovariances().toArray(new  double[cols],  c);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  covar  =  getCovariances().toArray(new  double[cols],  c);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  covar  =  getCovariances().toArray(new  double[cols],  c);	  double[][]    covar    =    getCovariances().toArray(new    double[c],    c);    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
46	[BUG]  [BUGGY]  double[][]  covar  =  getCovariances().toArray(new  double[c],  errors);  [CE]  possible  loss  of  precision  [FE]                  AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  covar  =  getCovariances().toArray(new  double[c],  errors);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  covar  =  getCovariances().toArray(new  double[c],  errors);	  double[][]    covar    =    getCovariances().toArray(new    double[c],    c);    	non-compiled	[CE]  possible  loss  of  precision	79	None	replace
47	[BUG]  [BUGGY]  double[][]  covar  =  getCovariances().toArray(new  double[c],  errorCount);  [CE]  possible  loss  of  precision  [FE]                    AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  covar  =  getCovariances().toArray(new  double[c],  errorCount);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  covar  =  getCovariances().toArray(new  double[c],  errorCount);	  double[][]    covar    =    getCovariances().toArray(new    double[c],    c);    	non-compiled	[CE]  possible  loss  of  precision	79	None	replace
48	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(rows  *  cols));  [CE]  variable  c  is  already  defined  in  method  guessParametersErrors()  [FE]              AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(rows  *  cols));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	final  double  c  =  Math.sqrt(getChiSquare()  *(rows  *  cols));	  final    double    c    =    Math.sqrt(getChiSquare()    /(cols    *    cols));    	non-compiled	[CE]  variable  c  is  already  defined  in  method  guessParametersErrors()	60	None	replace
49	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(cols  *  cols));  [CE]  variable  c  is  already  defined  in  method  guessParametersErrors()  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(cols  *  cols));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	final  double  c  =  Math.sqrt(getChiSquare()  *(cols  *  cols));	  final    double    c    =    Math.sqrt(getChiSquare()    /(cols    *    cols));    	non-compiled	[CE]  variable  c  is  already  defined  in  method  guessParametersErrors()	60	None	replace
50	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  +(rows  *  cols));  [CE]  variable  c  is  already  defined  in  method  guessParametersErrors()  [FE]                  AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  +(rows  *  cols));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	final  double  c  =  Math.sqrt(getChiSquare()  +(rows  *  cols));	  final    double    c    =    Math.sqrt(getChiSquare()    /(cols    *    cols));    	non-compiled	[CE]  variable  c  is  already  defined  in  method  guessParametersErrors()	60	None	replace
51	[BUG]  [BUGGY]  final  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i  >>  '  [CE]  illegal  line  end  in  character  literal  [FE]                  AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  final  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i  >>  '  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	final  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i  >>  '	  double[][]    covar    =    getCovariances();    for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[i]    =    Math.sqrt(covar[i    	non-compiled	[CE]  illegal  line  end  in  character  literal	55	None	replace
52	[BUG]  [BUGGY]  cols[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i  [CE]  ']'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  cols[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	cols[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i	  double[][]    covar    =    getCovariances();    for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[i]    =    Math.sqrt(covar[i    	non-compiled	[CE]  ']'  expected	55	None	replace
53	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	for(int  i  =  0;  i  <  rows.length;  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    double[][]    covar    =    getCovariances();    for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[i]    =    Math.    	non-compiled	[CE]  <identifier>  expected	24	None	replace
54	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    double[][]    covar    =    getCovariances();    for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[i]    =    Math.    	non-compiled	[CE]  <identifier>  expected	24	None	replace
55	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	for(int  i  =  0;  i  <  cols.length;  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    double[][]    covar    =    getCovariances();    for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[i]    =    Math.    	non-compiled	[CE]  ';'  expected	24	None	replace
56	[BUG]  [BUGGY]  double[][]  covar  =  getCovariances().toArray(cols);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  covar  =  getCovariances().toArray(cols);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  covar  =  getCovariances().toArray(cols);	  double[][]    covar    =    getCovariances().toArray(covariances);    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
57	[BUG]  [BUGGY]  final  double[][]  covar  =  getRemainings().toArray(new  double[c]);  [CE]  possible  loss  of  precision  [FE]              AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  final  double[][]  covar  =  getRemainings().toArray(new  double[c]);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	final  double[][]  covar  =  getRemainings().toArray(new  double[c]);	  double[][]    covar    =    getRemainings().toArray(new    double[c]);    	non-compiled	[CE]  possible  loss  of  precision	78	None	replace
58	[BUG]  [BUGGY]  double[][]  covar  =  getRemainings().toArray(new  double[cols]);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  covar  =  getRemainings().toArray(new  double[cols]);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  covar  =  getRemainings().toArray(new  double[cols]);	  double[][]    covar    =    getRemainings().toArray(new    double[c]);    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
59	[BUG]  [BUGGY]  double[][]  covar  =  getRemainings().toArray(new  double[remainings.length]);  [CE]  cannot  find  symbol  remainings  [FE]                  AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  covar  =  getRemainings().toArray(new  double[remainings.length]);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  covar  =  getRemainings().toArray(new  double[remainings.length]);	  double[][]    covar    =    getRemainings().toArray(new    double[c]);    	non-compiled	[CE]  cannot  find  symbol  remainings	78	None	replace
60	[BUG]  [BUGGY]  double[][]  covar  =  getCovariances().toArray(new  double[c.length]);  [CE]  double  cannot  be  dereferenced  [FE]              AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  covar  =  getCovariances().toArray(new  double[c.length]);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  covar  =  getCovariances().toArray(new  double[c.length]);	  double[][]    covar    =    getCovariances().toArray(new    double[covars.length]);    	non-compiled	[CE]  double  cannot  be  dereferenced	66	None	replace
61	[BUG]  [BUGGY]  double[][]  c  =  getCovariances().toArray(new  double[c.length]);  [CE]  variable  c  is  already  defined  in  method  guessParametersErrors()  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  c  =  getCovariances().toArray(new  double[c.length]);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  c  =  getCovariances().toArray(new  double[c.length]);	  double[][]    covar    =    getCovariances().toArray(new    double[covars.length]);    	non-compiled	[CE]  variable  c  is  already  defined  in  method  guessParametersErrors()	66	None	replace
62	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  /(cols  -  cols));  [CE]  variable  c  is  already  defined  in  method  guessParametersErrors()  [FE]                      AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  /(cols  -  cols));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	final  double  c  =  Math.sqrt(getChiSquare()  /(cols  -  cols));	  final    double    c    =    Math.sqrt(getChiSquare()    *(cols    -    rows));    	non-compiled	[CE]  variable  c  is  already  defined  in  method  guessParametersErrors()	41	None	replace
63	[BUG]  [BUGGY]  double[][]  covar  =  getRemainings().toArray(c,  errors);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  covar  =  getRemainings().toArray(c,  errors);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  covar  =  getRemainings().toArray(c,  errors);	  double[][]    covar    =    getRemainings().toArray(c);    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
64	[BUG]  [BUGGY]  double[][]  covar  =  getRemainings().toArray(remainings);  [CE]  cannot  find  symbol  remainings  [FE]              AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  covar  =  getRemainings().toArray(remainings);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  covar  =  getRemainings().toArray(remainings);	  double[][]    covar    =    getRemainings().toArray(c);    	non-compiled	[CE]  cannot  find  symbol  remainings	10	None	replace
65	[BUG]  [BUGGY]  double[][]  covar  =  getRemainings().toArray(c,  residuals);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  covar  =  getRemainings().toArray(c,  residuals);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  covar  =  getRemainings().toArray(c,  residuals);	  double[][]    covar    =    getRemainings().toArray(c);    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
66	[BUG]  [BUGGY]  final  double[][]  errors  =  new  double[c  -  1];  [CE]  variable  errors  is  already  defined  in  method  guessParametersErrors()  [FE]              AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  final  double[][]  errors  =  new  double[c  -  1];  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	final  double[][]  errors  =  new  double[c  -  1];	  double[][]    errors    =    new    double[c    -    1];    	non-compiled	[CE]  variable  errors  is  already  defined  in  method  guessParametersErrors()	85	None	replace
67	[BUG]  [BUGGY]  double[][]  errors  =  new  double[cols  -  1];  [CE]  variable  errors  is  already  defined  in  method  guessParametersErrors()  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  errors  =  new  double[cols  -  1];  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  errors  =  new  double[cols  -  1];	  double[][]    errors    =    new    double[c    -    1];    	non-compiled	[CE]  variable  errors  is  already  defined  in  method  guessParametersErrors()	85	None	replace
68	[BUG]  [BUGGY]  double[][]  errors  =  new  double[c  -  2];  [CE]  variable  errors  is  already  defined  in  method  guessParametersErrors()  [FE]                  AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  errors  =  new  double[c  -  2];  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  errors  =  new  double[c  -  2];	  double[][]    errors    =    new    double[c    -    1];    	non-compiled	[CE]  variable  errors  is  already  defined  in  method  guessParametersErrors()	85	None	replace
69	[BUG]  [BUGGY]  final  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  c.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  final  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  c.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	final  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  c.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[	  for(int    i    =    0;    i    <    errors.length;    ++i)    {    double[][]    covar    =    getCovariances();    for(int    i    =    0;    i    <    c.length;    ++i)    {    errors[i]    =    Math.sqrt(covar[    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
70	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  for(int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	for(int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[	  for(int    i    =    0;    i    <    errors.length;    ++i)    {    double[][]    covar    =    getCovariances();    for(int    i    =    0;    i    <    c.length;    ++i)    {    errors[i]    =    Math.sqrt(covar[    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
71	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    double[][]    covar    =    getCovariances();    for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[i]    =    Math.sqrt    	non-compiled	[CE]  ';'  expected	16	None	replace
72	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	for(int  i  =  0;  i  <  rows.length;  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    double[][]    covar    =    getCovariances();    for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[i]    =    Math.sqrt    	non-compiled	[CE]  ';'  expected	16	None	replace
73	[BUG]  [BUGGY]  final  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i]  *  c);  }  [CE]  int  cannot  be  dereferenced  [FE]                              AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  final  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i]  *  c);  }  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	final  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i]  *  c);  }	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    double[][]    covar    =    getCovariances();    for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[i]    =    Math.sqrt    	non-compiled	[CE]  int  cannot  be  dereferenced	16	None	replace
74	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    final    double[][]    covar    =    getCovariances();    for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[i]    =    Math    	non-compiled	[CE]  ';'  expected	23	None	replace
75	[BUG]  [BUGGY]  final  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  final  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	final  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    final    double[][]    covar    =    getCovariances();    for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[i]    =    Math    	non-compiled	[CE]  ';'  expected	23	None	replace
76	[BUG]  [BUGGY]  double[][]  covar  =  getCovariances().toArray(covar,  errors);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  covar  =  getCovariances().toArray(covar,  errors);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  covar  =  getCovariances().toArray(covar,  errors);	  double[][]    covar    =    getCovariances().toArray(c,    errors);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
77	[BUG]  [BUGGY]  double[][]  covar  =  getCovariances().toArray(cols,  errors);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  covar  =  getCovariances().toArray(cols,  errors);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  covar  =  getCovariances().toArray(cols,  errors);	  double[][]    covar    =    getCovariances().toArray(c,    errors);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
78	[BUG]  [BUGGY]  final  double[][]  errors  =  new  double[cols.length  -  2];  [CE]  variable  errors  is  already  defined  in  method  guessParametersErrors()  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  final  double[][]  errors  =  new  double[cols.length  -  2];  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	final  double[][]  errors  =  new  double[cols.length  -  2];	  double[][]    errors    =    new    double[cols.length    -    2];    	non-compiled	[CE]  variable  errors  is  already  defined  in  method  guessParametersErrors()	31	None	replace
79	[BUG]  [BUGGY]  double[][]  errors  =  new  double[cols.length  /  2];  [CE]  variable  errors  is  already  defined  in  method  guessParametersErrors()  [FE]                  AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  errors  =  new  double[cols.length  /  2];  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  errors  =  new  double[cols.length  /  2];	  double[][]    errors    =    new    double[cols.length    -    2];    	non-compiled	[CE]  variable  errors  is  already  defined  in  method  guessParametersErrors()	31	None	replace
80	[BUG]  [BUGGY]  double[][]  covar  =  getCovariances(c,  criterion);  [CE]  cannot  find  symbol  criterion  [FE]                  AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  covar  =  getCovariances(c,  criterion);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  covar  =  getCovariances(c,  criterion);	  double[][]    covar    =    getCovariances(c,    jTj);    	non-compiled	[CE]  cannot  find  symbol  criterion	2	None	replace
81	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    final    double[][]    covar    =    getCovariances();    for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[i]    	non-compiled	[CE]  not  a  statement	34	None	replace
82	[BUG]  [BUGGY]  final  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  final  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	final  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    final    double[][]    covar    =    getCovariances();    for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[i]    	non-compiled	[CE]  not  a  statement	34	None	replace
83	[BUG]  [BUGGY]  final  double[][]  errors  =  new  double[rows.length  -  1];  [CE]  variable  errors  is  already  defined  in  method  guessParametersErrors()  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  final  double[][]  errors  =  new  double[rows.length  -  1];  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	final  double[][]  errors  =  new  double[rows.length  -  1];	  double[][]    errors    =    new    double[rows.length    -    1];    	non-compiled	[CE]  variable  errors  is  already  defined  in  method  guessParametersErrors()	62	None	replace
84	[BUG]  [BUGGY]  double[][]  cols  =  Math.sqrt(getChiSquare()  *(rows  -  cols));  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                  AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  cols  =  Math.sqrt(getChiSquare()  *(rows  -  cols));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  cols  =  Math.sqrt(getChiSquare()  *(rows  -  cols));	  double[][]    c    =    Math.sqrt(getChiSquare()    *(cols    -    cols));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	51	None	replace
85	[BUG]  [BUGGY]  double[][]  c  =  Math.sqrt(getChiSquare()  /(cols  -  cols));  [CE]  variable  c  is  already  defined  in  method  guessParametersErrors()  [FE]                    AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  c  =  Math.sqrt(getChiSquare()  /(cols  -  cols));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  c  =  Math.sqrt(getChiSquare()  /(cols  -  cols));	  double[][]    c    =    Math.sqrt(getChiSquare()    *(cols    -    cols));    	non-compiled	[CE]  variable  c  is  already  defined  in  method  guessParametersErrors()	51	None	replace
86	[BUG]  [BUGGY]  double[][]  covar  =  getCovariances().toArray(new  double[cols.size()  *  1]);  [CE]  int  cannot  be  dereferenced  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  covar  =  getCovariances().toArray(new  double[cols.size()  *  1]);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  covar  =  getCovariances().toArray(new  double[cols.size()  *  1]);	  double[][]    covar    =    getCovariances().toArray(new    double[cols.size()    -    1]);    	non-compiled	[CE]  int  cannot  be  dereferenced	8	None	replace
87	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(rows  -  cols)+  1);  [CE]  variable  c  is  already  defined  in  method  guessParametersErrors()  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(rows  -  cols)+  1);  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	final  double  c  =  Math.sqrt(getChiSquare()  *(rows  -  cols)+  1);	  final    double    c    =    Math.sqrt(getChiSquare()    *(cols    -    cols));    	non-compiled	[CE]  variable  c  is  already  defined  in  method  guessParametersErrors()	48	None	replace
88	[BUG]  [BUGGY]  final  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  final  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	final  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    double[][]    covar    =    getCovariances();    for(int    i    =    0;    i    <    c.length;    ++i)    {    errors[i]    =    Math.sqrt(covar[    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
89	[BUG]  [BUGGY]  double[][]  covar  =  getCovariances().toArray(new  double[cols  -  1]);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  covar  =  getCovariances().toArray(new  double[cols  -  1]);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  covar  =  getCovariances().toArray(new  double[cols  -  1]);	  double[][]    covar    =    getCovariances().toArray(new    double[cols]);    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
90	[BUG]  [BUGGY]  final  double[][]  errors  =  Math.sqrt(getChiSquare()  *(c  -  cols));  [CE]  variable  errors  is  already  defined  in  method  guessParametersErrors()  [FE]                      AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  final  double[][]  errors  =  Math.sqrt(getChiSquare()  *(c  -  cols));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	final  double[][]  errors  =  Math.sqrt(getChiSquare()  *(c  -  cols));	  final    double[][]    errors    =    Math.sqrt(getChiSquare()    *(rows    -    cols));    	non-compiled	[CE]  variable  errors  is  already  defined  in  method  guessParametersErrors()	44	None	replace
91	[BUG]  [BUGGY]  final  double[][]  errors  =  Math.sqrt(getChiSquare()  *(cols  -  rows));  [CE]  variable  errors  is  already  defined  in  method  guessParametersErrors()  [FE]                        AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  final  double[][]  errors  =  Math.sqrt(getChiSquare()  *(cols  -  rows));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	final  double[][]  errors  =  Math.sqrt(getChiSquare()  *(cols  -  rows));	  final    double[][]    errors    =    Math.sqrt(getChiSquare()    *(rows    -    cols));    	non-compiled	[CE]  variable  errors  is  already  defined  in  method  guessParametersErrors()	44	None	replace
92	[BUG]  [BUGGY]  final  double[][]  errors  =  Math.sqrt(getChiSquare()  *(cols  -  getChiSquare()));  [CE]  variable  errors  is  already  defined  in  method  guessParametersErrors()  [FE]                          AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  final  double[][]  errors  =  Math.sqrt(getChiSquare()  *(cols  -  getChiSquare()));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	final  double[][]  errors  =  Math.sqrt(getChiSquare()  *(cols  -  getChiSquare()));	  final    double[][]    errors    =    Math.sqrt(getChiSquare()    *(rows    -    cols));    	non-compiled	[CE]  variable  errors  is  already  defined  in  method  guessParametersErrors()	44	None	replace
93	[BUG]  [BUGGY]  final  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i  *  c  [CE]  ']'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  final  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i  *  c  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	final  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i  *  c	  final    double[][]    covar    =    getCovariances();    for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[i]    =    Math.sqrt(covar[i    	non-compiled	[CE]  ']'  expected	22	None	replace
94	[BUG]  [BUGGY]  final  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i  }  [CE]  ']'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  final  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i  }  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	final  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i  }	  final    double[][]    covar    =    getCovariances();    for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[i]    =    Math.sqrt(covar[i    	non-compiled	[CE]  ']'  expected	22	None	replace
95	[BUG]  [BUGGY]  final  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i  +  ']'  expected  [CE]  ']'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  final  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i  +  ']'  expected  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	final  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i  +  ']'  expected	  final    double[][]    covar    =    getCovariances();    for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[i]    =    Math.sqrt(covar[i    	non-compiled	[CE]  ']'  expected	22	None	replace
96	[BUG]  [BUGGY]  double[][]  covar  =  getCovariances().toArray(new  double[cols.length  -  1]);  [CE]  int  cannot  be  dereferenced  [FE]                  AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  covar  =  getCovariances().toArray(new  double[cols.length  -  1]);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  covar  =  getCovariances().toArray(new  double[cols.length  -  1]);	  double[][]    covar    =    getCovariances().toArray(new    double[cols.length    ]);    	non-compiled	[CE]  int  cannot  be  dereferenced	9	None	replace
97	[BUG]  [BUGGY]  double[][]  covar  =  getCovariances().toArray(new  double[cols.length  -  2]);  [CE]  int  cannot  be  dereferenced  [FE]                    AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  covar  =  getCovariances().toArray(new  double[cols.length  -  2]);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  covar  =  getCovariances().toArray(new  double[cols.length  -  2]);	  double[][]    covar    =    getCovariances().toArray(new    double[cols.length    ]);    	non-compiled	[CE]  int  cannot  be  dereferenced	9	None	replace
98	[BUG]  [BUGGY]  double[][]  covar  =  getCovariances().toArray(new  double[cols.length  +  1]);  [CE]  int  cannot  be  dereferenced  [FE]                      AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  covar  =  getCovariances().toArray(new  double[cols.length  +  1]);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  covar  =  getCovariances().toArray(new  double[cols.length  +  1]);	  double[][]    covar    =    getCovariances().toArray(new    double[cols.length    ]);    	non-compiled	[CE]  int  cannot  be  dereferenced	9	None	replace
99	[BUG]  [BUGGY]  double[][]  covar  =  getCovariances().toArray(new  double[cols.length  -  3]);  [CE]  int  cannot  be  dereferenced  [FE]                        AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  covar  =  getCovariances().toArray(new  double[cols.length  -  3]);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  covar  =  getCovariances().toArray(new  double[cols.length  -  3]);	  double[][]    covar    =    getCovariances().toArray(new    double[cols.length    ]);    	non-compiled	[CE]  int  cannot  be  dereferenced	9	None	replace
100	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  c.length;  ++i)  {  errors[i]  =  Math.sqrt  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  c.length;  ++i)  {  errors[i]  =  Math.sqrt  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  c.length;  ++i)  {  errors[i]  =  Math.sqrt	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    double[][]    covar    =    getCovariances();    for(int    i    =    0;    i    <    c.length;    ++i)    {    errors[i]    =    Math.sqrt    	non-compiled	[CE]  ';'  expected	19	None	replace
101	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  c.length;  ++i)  {  errors[i]  =  Math.s  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  c.length;  ++i)  {  errors[i]  =  Math.s  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	for(int  i  =  0;  i  <  cols.length;  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  c.length;  ++i)  {  errors[i]  =  Math.s	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    double[][]    covar    =    getCovariances();    for(int    i    =    0;    i    <    c.length;    ++i)    {    errors[i]    =    Math.sqrt    	non-compiled	[CE]  ';'  expected	19	None	replace
102	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	for(int  i  =  0;  i  <  cols.length;  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    double[][]    covar    =    getCovariances();    for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[i]    =    Math.sqrt(co    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
103	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[	  for(int    i    =    0;    i    <    rows.size();    ++i)    {    double[][]    covar    =    getCovariances();    for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[i]    =    Math.sqrt(covar[    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
104	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  /(rows  *  cols)-  1);  [CE]  variable  c  is  already  defined  in  method  guessParametersErrors()  [FE]              AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  /(rows  *  cols)-  1);  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	final  double  c  =  Math.sqrt(getChiSquare()  /(rows  *  cols)-  1);	  final    double    c    =    Math.sqrt(getChiSquare()    /(rows    *    cols));    	non-compiled	[CE]  variable  c  is  already  defined  in  method  guessParametersErrors()	47	None	replace
105	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  /(rows  *  cols)+  1);  [CE]  variable  c  is  already  defined  in  method  guessParametersErrors()  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  /(rows  *  cols)+  1);  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	final  double  c  =  Math.sqrt(getChiSquare()  /(rows  *  cols)+  1);	  final    double    c    =    Math.sqrt(getChiSquare()    /(rows    *    cols));    	non-compiled	[CE]  variable  c  is  already  defined  in  method  guessParametersErrors()	47	None	replace
106	[BUG]  [BUGGY]  double[][]  covar  =  getCovariances().toArray(errors,  cols);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  covar  =  getCovariances().toArray(errors,  cols);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  covar  =  getCovariances().toArray(errors,  cols);	  double[][]    covar    =    getCovariances().toArray(errors,    c);    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
107	[BUG]  [BUGGY]  double[][]  covar  =  getCovariances().toArray(errors,  errors);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  covar  =  getCovariances().toArray(errors,  errors);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  covar  =  getCovariances().toArray(errors,  errors);	  double[][]    covar    =    getCovariances().toArray(errors,    c);    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
108	[BUG]  [BUGGY]  double[][]  covar  =  getCovariances().toArray(c,  0,  c);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  covar  =  getCovariances().toArray(c,  0,  c);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  covar  =  getCovariances().toArray(c,  0,  c);	  double[][]    covar    =    getCovariances().toArray(c,    0);    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
109	[BUG]  [BUGGY]  double[][]  covar  =  getCovariances().toArray(c,  0,  cols);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  covar  =  getCovariances().toArray(c,  0,  cols);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  covar  =  getCovariances().toArray(c,  0,  cols);	  double[][]    covar    =    getCovariances().toArray(c,    0);    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
110	[BUG]  [BUGGY]  final  double[][]  errors  =  new  double[cols.length  /  1];  [CE]  variable  errors  is  already  defined  in  method  guessParametersErrors()  [FE]              AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  final  double[][]  errors  =  new  double[cols.length  /  1];  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	final  double[][]  errors  =  new  double[cols.length  /  1];	  final    double[][]    errors    =    new    double[cols.length    -    1];    	non-compiled	[CE]  variable  errors  is  already  defined  in  method  guessParametersErrors()	30	None	replace
111	[BUG]  [BUGGY]  double[][]  covar  =  getCovariances().toArray(new  double[cols,  cols.size()  -  1]);  [CE]  ']'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  covar  =  getCovariances().toArray(new  double[cols,  cols.size()  -  1]);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  covar  =  getCovariances().toArray(new  double[cols,  cols.size()  -  1]);	  double[][]    covar    =    getCovariances().toArray(new    double[cols,    cols.size()    ]);    	non-compiled	[CE]  ']'  expected	83	None	replace
112	[BUG]  [BUGGY]  double[][]  covar  =  getCovariances().toArray(new  double[cols,  cols.length  -  1]);  [CE]  ']'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  covar  =  getCovariances().toArray(new  double[cols,  cols.length  -  1]);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  covar  =  getCovariances().toArray(new  double[cols,  cols.length  -  1]);	  double[][]    covar    =    getCovariances().toArray(new    double[cols,    cols.size()    ]);    	non-compiled	[CE]  ']'  expected	83	None	replace
113	[BUG]  [BUGGY]  double[][]  covar  =  getCovariances().toArray(new  double[cols,  cols.size()  -  2]);  [CE]  ']'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  covar  =  getCovariances().toArray(new  double[cols,  cols.size()  -  2]);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  covar  =  getCovariances().toArray(new  double[cols,  cols.size()  -  2]);	  double[][]    covar    =    getCovariances().toArray(new    double[cols,    cols.size()    ]);    	non-compiled	[CE]  ']'  expected	83	None	replace
114	[BUG]  [BUGGY]  double[][]  covar  =  getCovariances().toArray(new  double[cols,  cols.length  -  2]);  [CE]  ']'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  covar  =  getCovariances().toArray(new  double[cols,  cols.length  -  2]);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  covar  =  getCovariances().toArray(new  double[cols,  cols.length  -  2]);	  double[][]    covar    =    getCovariances().toArray(new    double[cols,    cols.size()    ]);    	non-compiled	[CE]  ']'  expected	83	None	replace
115	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    double[][]    covar    =    getCovariances();    for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
116	[BUG]  [BUGGY]  final  double[][]  errors  =  new  double[c.length  -  1];  [CE]  variable  errors  is  already  defined  in  method  guessParametersErrors()  [FE]                  AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  final  double[][]  errors  =  new  double[c.length  -  1];  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	final  double[][]  errors  =  new  double[c.length  -  1];	  double[][]    errors    =    new    double[c.length    -    1];    	non-compiled	[CE]  variable  errors  is  already  defined  in  method  guessParametersErrors()	32	None	replace
117	[BUG]  [BUGGY]  double[][]  errors  =  new  double[c.length  -  2];  [CE]  variable  errors  is  already  defined  in  method  guessParametersErrors()  [FE]                    AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  errors  =  new  double[c.length  -  2];  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  errors  =  new  double[c.length  -  2];	  double[][]    errors    =    new    double[c.length    -    1];    	non-compiled	[CE]  variable  errors  is  already  defined  in  method  guessParametersErrors()	32	None	replace
118	[BUG]  [BUGGY]  double[][]  errors  =  new  double[c.length  /  1];  [CE]  variable  errors  is  already  defined  in  method  guessParametersErrors()  [FE]                      AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  errors  =  new  double[c.length  /  1];  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  errors  =  new  double[c.length  /  1];	  double[][]    errors    =    new    double[c.length    -    1];    	non-compiled	[CE]  variable  errors  is  already  defined  in  method  guessParametersErrors()	32	None	replace
119	[BUG]  [BUGGY]  double[][]  covar  =  getRemainings().toArray(errors,  c);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  covar  =  getRemainings().toArray(errors,  c);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  covar  =  getRemainings().toArray(errors,  c);	  double[][]    covar    =    getRemainings().toArray(errors);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
120	[BUG]  [BUGGY]  final  double[][]  c  =  Math.sqrt(getChiSquare()  /(rows  -  1));  [CE]  variable  c  is  already  defined  in  method  guessParametersErrors()  [FE]              AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  final  double[][]  c  =  Math.sqrt(getChiSquare()  /(rows  -  1));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	final  double[][]  c  =  Math.sqrt(getChiSquare()  /(rows  -  1));	  final    double[][]    c    =    Math.sqrt(getChiSquare()    /(cols    -    1));    	non-compiled	[CE]  variable  c  is  already  defined  in  method  guessParametersErrors()	58	None	replace
121	[BUG]  [BUGGY]  final  double[][]  cols  =  Math.sqrt(getChiSquare()  /(cols  -  1));  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  final  double[][]  cols  =  Math.sqrt(getChiSquare()  /(cols  -  1));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	final  double[][]  cols  =  Math.sqrt(getChiSquare()  /(cols  -  1));	  final    double[][]    c    =    Math.sqrt(getChiSquare()    /(cols    -    1));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	58	None	replace
122	[BUG]  [BUGGY]  double[][]  covar  =  getCovariances().toArray(new  double[c  +  2]);  [CE]  possible  loss  of  precision  [FE]                  AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  covar  =  getCovariances().toArray(new  double[c  +  2]);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  covar  =  getCovariances().toArray(new  double[c  +  2]);	  double[][]    covar    =    getCovariances().toArray(new    double[c    +    1]);    	non-compiled	[CE]  possible  loss  of  precision	39	None	replace
123	[BUG]  [BUGGY]  double[][]  covar  =  getCovariances().toArray(new  double[cols  +  1]);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  covar  =  getCovariances().toArray(new  double[cols  +  1]);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  covar  =  getCovariances().toArray(new  double[cols  +  1]);	  double[][]    covar    =    getCovariances().toArray(new    double[c    +    1]);    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
124	[BUG]  [BUGGY]  double[][]  errors  =  Math.sqrt(getChiSquare()  /(c  -  cols));  [CE]  variable  errors  is  already  defined  in  method  guessParametersErrors()  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  errors  =  Math.sqrt(getChiSquare()  /(c  -  cols));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  errors  =  Math.sqrt(getChiSquare()  /(c  -  cols));	  double[][]    errors    =    Math.sqrt(getChiSquare()    /(rows    -    cols));    	non-compiled	[CE]  variable  errors  is  already  defined  in  method  guessParametersErrors()	52	None	replace
125	[BUG]  [BUGGY]  double[][]  errors  =  Math.sqrt(getChiSquare()  /(rows  *  cols));  [CE]  variable  errors  is  already  defined  in  method  guessParametersErrors()  [FE]                  AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  errors  =  Math.sqrt(getChiSquare()  /(rows  *  cols));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  errors  =  Math.sqrt(getChiSquare()  /(rows  *  cols));	  double[][]    errors    =    Math.sqrt(getChiSquare()    /(rows    -    cols));    	non-compiled	[CE]  variable  errors  is  already  defined  in  method  guessParametersErrors()	52	None	replace
126	[BUG]  [BUGGY]  double[][]  errors  =  Math.sqrt(getChiSquare()  /(cols  -  rows));  [CE]  variable  errors  is  already  defined  in  method  guessParametersErrors()  [FE]                    AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  errors  =  Math.sqrt(getChiSquare()  /(cols  -  rows));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  errors  =  Math.sqrt(getChiSquare()  /(cols  -  rows));	  double[][]    errors    =    Math.sqrt(getChiSquare()    /(rows    -    cols));    	non-compiled	[CE]  variable  errors  is  already  defined  in  method  guessParametersErrors()	52	None	replace
127	[BUG]  [BUGGY]  double[][]  c  =  Math.sqrt(getChiSquare()  *(rows  -  1));  [CE]  variable  c  is  already  defined  in  method  guessParametersErrors()  [FE]            AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  c  =  Math.sqrt(getChiSquare()  *(rows  -  1));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  c  =  Math.sqrt(getChiSquare()  *(rows  -  1));	  double[][]    c    =    Math.sqrt(getChiSquare()    *(cols    -    1));    	non-compiled	[CE]  variable  c  is  already  defined  in  method  guessParametersErrors()	28	None	replace
128	[BUG]  [BUGGY]  double[][]  c  =  Math.sqrt(getChiSquare()  /(cols  -  1));  [CE]  variable  c  is  already  defined  in  method  guessParametersErrors()  [FE]              AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  c  =  Math.sqrt(getChiSquare()  /(cols  -  1));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  c  =  Math.sqrt(getChiSquare()  /(cols  -  1));	  double[][]    c    =    Math.sqrt(getChiSquare()    *(cols    -    1));    	non-compiled	[CE]  variable  c  is  already  defined  in  method  guessParametersErrors()	28	None	replace
129	[BUG]  [BUGGY]  double[][]  cols  =  Math.sqrt(getChiSquare()  *(cols  -  1));  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  cols  =  Math.sqrt(getChiSquare()  *(cols  -  1));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  cols  =  Math.sqrt(getChiSquare()  *(cols  -  1));	  double[][]    c    =    Math.sqrt(getChiSquare()    *(cols    -    1));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	28	None	replace
130	[BUG]  [BUGGY]  double[][]  covar  =  getCovariances().toArray(cols,  c);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  covar  =  getCovariances().toArray(cols,  c);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  covar  =  getCovariances().toArray(cols,  c);	  double[][]    covar    =    getCovariances().toArray(c,    cols);    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
131	[BUG]  [BUGGY]  double[][]  covar  =  getCovariances().toArray(cols,  cols);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  covar  =  getCovariances().toArray(cols,  cols);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  covar  =  getCovariances().toArray(cols,  cols);	  double[][]    covar    =    getCovariances().toArray(c,    cols);    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
132	[BUG]  [BUGGY]  double[][]  covar  =  getCovariances(c,  errorCount,  errors);  [CE]  cannot  find  symbol  errorCount  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  covar  =  getCovariances(c,  errorCount,  errors);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  covar  =  getCovariances(c,  errorCount,  errors);	  double[][]    covar    =    getCovariances(c,    errors);    	non-compiled	[CE]  cannot  find  symbol  errorCount	1	None	replace
133	[BUG]  [BUGGY]  double[][]  covar  =  getCovariances(c,  errorSquares);  [CE]  cannot  find  symbol  errorSquares  [FE]                  AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  covar  =  getCovariances(c,  errorSquares);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  covar  =  getCovariances(c,  errorSquares);	  double[][]    covar    =    getCovariances(c,    errors);    	non-compiled	[CE]  cannot  find  symbol  errorSquares	1	None	replace
134	[BUG]  [BUGGY]  double[][]  covar  =  getCovariances(c,  errors,  c);  [CE]  method  getCovariances  in  class  AbstractLeastSquaresOptimizer  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  covar  =  getCovariances(c,  errors,  c);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  covar  =  getCovariances(c,  errors,  c);	  double[][]    covar    =    getCovariances(c,    errors);    	non-compiled	[CE]  method  getCovariances  in  class  AbstractLeastSquaresOptimizer  cannot  be  applied  to  given  types;	1	None	replace
135	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  c.length;  ++i)  {  errors[i]  =  Math.sqrt  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  c.length;  ++i)  {  errors[i]  =  Math.sqrt  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  c.length;  ++i)  {  errors[i]  =  Math.sqrt	  for(int    i    =    0;    i    <    cols;    ++i)    {    double[][]    covar    =    getCovariances();    for(int    i    =    0;    i    <    c.length;    ++i)    {    errors[i]    =    Math.sqrt(covar[    	non-compiled	[CE]  ';'  expected	84	None	replace
136	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  c.length;  ++i)  {  errors[i]  =  Math.sqrt(  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  c.length;  ++i)  {  errors[i]  =  Math.sqrt(  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  c.length;  ++i)  {  errors[i]  =  Math.sqrt(	  for(int    i    =    0;    i    <    cols;    ++i)    {    double[][]    covar    =    getCovariances();    for(int    i    =    0;    i    <    c.length;    ++i)    {    errors[i]    =    Math.sqrt(covar[    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
137	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  final  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  c.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  final  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  c.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  final  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  c.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[	  for(int    i    =    0;    i    <    cols;    ++i)    {    double[][]    covar    =    getCovariances();    for(int    i    =    0;    i    <    c.length;    ++i)    {    errors[i]    =    Math.sqrt(covar[    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
138	[BUG]  [BUGGY]  final  double[][]  c  =  Math.sqrt(getChiSquare()  *(rows  *  cols));  [CE]  variable  c  is  already  defined  in  method  guessParametersErrors()  [FE]            AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  final  double[][]  c  =  Math.sqrt(getChiSquare()  *(rows  *  cols));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	final  double[][]  c  =  Math.sqrt(getChiSquare()  *(rows  *  cols));	  final    double[][]    c    =    Math.sqrt(getChiSquare()    /(cols    *    cols));    	non-compiled	[CE]  variable  c  is  already  defined  in  method  guessParametersErrors()	57	None	replace
139	[BUG]  [BUGGY]  final  double[][]  c  =  Math.sqrt(getChiSquare()  *(cols  *  cols));  [CE]  variable  c  is  already  defined  in  method  guessParametersErrors()  [FE]              AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  final  double[][]  c  =  Math.sqrt(getChiSquare()  *(cols  *  cols));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	final  double[][]  c  =  Math.sqrt(getChiSquare()  *(cols  *  cols));	  final    double[][]    c    =    Math.sqrt(getChiSquare()    /(cols    *    cols));    	non-compiled	[CE]  variable  c  is  already  defined  in  method  guessParametersErrors()	57	None	replace
140	[BUG]  [BUGGY]  final  double[][]  cols  =  Math.sqrt(getChiSquare()  /(rows  *  cols));  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  final  double[][]  cols  =  Math.sqrt(getChiSquare()  /(rows  *  cols));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	final  double[][]  cols  =  Math.sqrt(getChiSquare()  /(rows  *  cols));	  final    double[][]    c    =    Math.sqrt(getChiSquare()    /(cols    *    cols));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	57	None	replace
141	[BUG]  [BUGGY]  double[][]  covar  =  getRemainings().toArray(new  double[cols.size()  +  1]);  [CE]  int  cannot  be  dereferenced  [FE]              AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  covar  =  getRemainings().toArray(new  double[cols.size()  +  1]);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  covar  =  getRemainings().toArray(new  double[cols.size()  +  1]);	  double[][]    covar    =    getRemainings().toArray(new    double[cols.size()    ]);    	non-compiled	[CE]  int  cannot  be  dereferenced	68	None	replace
142	[BUG]  [BUGGY]  double[][]  covar  =  getRemainings().toArray(new  double[cols.size()  -  1]);  [CE]  int  cannot  be  dereferenced  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  covar  =  getRemainings().toArray(new  double[cols.size()  -  1]);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  covar  =  getRemainings().toArray(new  double[cols.size()  -  1]);	  double[][]    covar    =    getRemainings().toArray(new    double[cols.size()    ]);    	non-compiled	[CE]  int  cannot  be  dereferenced	68	None	replace
143	[BUG]  [BUGGY]  double[][]  cols  =  getRemainings().toArray(new  double[cols.size()  ]);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  cols  =  getRemainings().toArray(new  double[cols.size()  ]);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  cols  =  getRemainings().toArray(new  double[cols.size()  ]);	  double[][]    covar    =    getRemainings().toArray(new    double[cols.size()    ]);    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
144	[BUG]  [BUGGY]  double[][]  errors  =  Math.sqrt(getChiSquare()  *(c  -  cols));  [CE]  variable  errors  is  already  defined  in  method  guessParametersErrors()  [FE]              AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  errors  =  Math.sqrt(getChiSquare()  *(c  -  cols));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  errors  =  Math.sqrt(getChiSquare()  *(c  -  cols));	  double[][]    errors    =    Math.sqrt(getChiSquare()    *(rows    -    cols));    	non-compiled	[CE]  variable  errors  is  already  defined  in  method  guessParametersErrors()	29	None	replace
145	[BUG]  [BUGGY]  double[][]  errors  =  Math.sqrt(getChiSquare()  *(cols  -  rows));  [CE]  variable  errors  is  already  defined  in  method  guessParametersErrors()  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  errors  =  Math.sqrt(getChiSquare()  *(cols  -  rows));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  errors  =  Math.sqrt(getChiSquare()  *(cols  -  rows));	  double[][]    errors    =    Math.sqrt(getChiSquare()    *(rows    -    cols));    	non-compiled	[CE]  variable  errors  is  already  defined  in  method  guessParametersErrors()	29	None	replace
146	[BUG]  [BUGGY]  cols[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  cols[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	cols[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]	  double[][]    covar    =    getCovariances();    for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[i]    	non-compiled	[CE]  not  a  statement	86	None	replace
147	[BUG]  [BUGGY]  [][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  [][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]	  double[][]    covar    =    getCovariances();    for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[i]    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
148	[BUG]  [BUGGY]  final  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  final  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	final  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    final    double[][]    covar    =    getCovariances();    for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
149	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    final    double[][]    covar    =    getCovariances();    for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
150	[BUG]  [BUGGY]  double[][]  covar  =  getRemainings(),  c.clone();  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  covar  =  getRemainings(),  c.clone();  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  covar  =  getRemainings(),  c.clone();	  double[][]    covar    =    getRemainings().clone();    	non-compiled	[CE]  ';'  expected	11	None	replace
151	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(rows  -  1));  [CE]  variable  c  is  already  defined  in  method  guessParametersErrors()  [FE]                    AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(rows  -  1));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	final  double  c  =  Math.sqrt(getChiSquare()  *(rows  -  1));	  final    double    c    =    Math.sqrt(getChiSquare()    *(cols    -    1));    	non-compiled	[CE]  variable  c  is  already  defined  in  method  guessParametersErrors()	40	None	replace
152	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  /(cols  -  1));  [CE]  variable  c  is  already  defined  in  method  guessParametersErrors()  [FE]                      AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  /(cols  -  1));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	final  double  c  =  Math.sqrt(getChiSquare()  /(cols  -  1));	  final    double    c    =    Math.sqrt(getChiSquare()    *(cols    -    1));    	non-compiled	[CE]  variable  c  is  already  defined  in  method  guessParametersErrors()	40	None	replace
153	[BUG]  [BUGGY]  final  double[][]  c  =  Math.sqrt(getChiSquare()  *(rows  -  1));  [CE]  variable  c  is  already  defined  in  method  guessParametersErrors()  [FE]                  AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  final  double[][]  c  =  Math.sqrt(getChiSquare()  *(rows  -  1));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	final  double[][]  c  =  Math.sqrt(getChiSquare()  *(rows  -  1));	  final    double[][]    c    =    Math.sqrt(getChiSquare()    *(cols    -    1));    	non-compiled	[CE]  variable  c  is  already  defined  in  method  guessParametersErrors()	42	None	replace
154	[BUG]  [BUGGY]  final  double[][]  c  =  Math.sqrt(getChiSquare()  /(rows  *  cols)-  1);  [CE]  variable  c  is  already  defined  in  method  guessParametersErrors()  [FE]            AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  final  double[][]  c  =  Math.sqrt(getChiSquare()  /(rows  *  cols)-  1);  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	final  double[][]  c  =  Math.sqrt(getChiSquare()  /(rows  *  cols)-  1);	  final    double[][]    c    =    Math.sqrt(getChiSquare()    /(rows    *    cols));    	non-compiled	[CE]  variable  c  is  already  defined  in  method  guessParametersErrors()	25	None	replace
155	[BUG]  [BUGGY]  final  double[][]  c  =  Math.sqrt(getChiSquare()  /(rows  *  cols)+  1);  [CE]  variable  c  is  already  defined  in  method  guessParametersErrors()  [FE]              AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  final  double[][]  c  =  Math.sqrt(getChiSquare()  /(rows  *  cols)+  1);  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	final  double[][]  c  =  Math.sqrt(getChiSquare()  /(rows  *  cols)+  1);	  final    double[][]    c    =    Math.sqrt(getChiSquare()    /(rows    *    cols));    	non-compiled	[CE]  variable  c  is  already  defined  in  method  guessParametersErrors()	25	None	replace
156	[BUG]  [BUGGY]  final  double[][]  c  =  Math.sqrt(getChiSquare()  /(rows  *  cols  +  1));  [CE]  variable  c  is  already  defined  in  method  guessParametersErrors()  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  final  double[][]  c  =  Math.sqrt(getChiSquare()  /(rows  *  cols  +  1));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	final  double[][]  c  =  Math.sqrt(getChiSquare()  /(rows  *  cols  +  1));	  final    double[][]    c    =    Math.sqrt(getChiSquare()    /(rows    *    cols));    	non-compiled	[CE]  variable  c  is  already  defined  in  method  guessParametersErrors()	25	None	replace
157	[BUG]  [BUGGY]  double[][]  errors  =  new  double[c  *  1];  [CE]  variable  errors  is  already  defined  in  method  guessParametersErrors()  [FE]              AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  errors  =  new  double[c  *  1];  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  errors  =  new  double[c  *  1];	  double[][]    errors    =    new    double[c    -    1];    	non-compiled	[CE]  variable  errors  is  already  defined  in  method  guessParametersErrors()	85	None	replace
158	[BUG]  [BUGGY]  double[][]  covar  =  getCovariances(c,  0);  [CE]  method  getCovariances  in  class  AbstractLeastSquaresOptimizer  cannot  be  applied  to  given  types;  [FE]                    AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  covar  =  getCovariances(c,  0);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  covar  =  getCovariances(c,  0);	  double[][]    covar    =    getCovariances(c,    errorCount);    	non-compiled	[CE]  method  getCovariances  in  class  AbstractLeastSquaresOptimizer  cannot  be  applied  to  given  types;	3	None	replace
159	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  c.length;  ++i)  {  errors[i]  =  Math.sqrt(  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  c.length;  ++i)  {  errors[i]  =  Math.sqrt(  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	for(int  i  =  0;  i  <  cols.length;  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  c.length;  ++i)  {  errors[i]  =  Math.sqrt(	  for(int    i    =    0;    i    <    errors.length;    ++i)    {    double[][]    covar    =    getCovariances();    for(int    i    =    0;    i    <    c.length;    ++i)    {    errors[i]    =    Math.sqrt(covar[    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
160	[BUG]  [BUGGY]  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  c.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  c.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  c.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[	  for(int    i    =    0;    i    <    errors.length;    ++i)    {    double[][]    covar    =    getCovariances();    for(int    i    =    0;    i    <    c.length;    ++i)    {    errors[i]    =    Math.sqrt(covar[    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
161	[BUG]  [BUGGY]  double[][]  cols  =  getCovariances().toArray(new  double[cols.size()  -  1]);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  cols  =  getCovariances().toArray(new  double[cols.size()  -  1]);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  cols  =  getCovariances().toArray(new  double[cols.size()  -  1]);	  double[][]    cols    =    getCovariances().toArray(new    double[cols.size()    ]);    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
162	[BUG]  [BUGGY]  final  double[][]  covar  =  getCovariances().toArray(errors,  new  double[c]);  [CE]  possible  loss  of  precision  [FE]              AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  final  double[][]  covar  =  getCovariances().toArray(errors,  new  double[c]);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	final  double[][]  covar  =  getCovariances().toArray(errors,  new  double[c]);	  final    double[][]    covar    =    getCovariances().toArray(new    double[c]);    	non-compiled	[CE]  possible  loss  of  precision	37	None	replace
163	[BUG]  [BUGGY]  final  double[][]  covar  =  getCovariances().toArray(new  double[covars.length]);  [CE]  cannot  find  symbol  covars  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  final  double[][]  covar  =  getCovariances().toArray(new  double[covars.length]);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	final  double[][]  covar  =  getCovariances().toArray(new  double[covars.length]);	  final    double[][]    covar    =    getCovariances().toArray(new    double[c]);    	non-compiled	[CE]  cannot  find  symbol  covars	37	None	replace
164	[BUG]  [BUGGY]  double[][]  covar  =  getCovariances(c,  errors,  coefficient);  [CE]  cannot  find  symbol  coefficient  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  covar  =  getCovariances(c,  errors,  coefficient);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  covar  =  getCovariances(c,  errors,  coefficient);	  double[][]    covar    =    getCovariances(c,    errors);    	non-compiled	[CE]  cannot  find  symbol  coefficient	1	None	replace
165	[BUG]  [BUGGY]  final  double[][]  c  =  Math.sqrt(getChiSquare()  /(rows  *  cols)+  errors.length);  [CE]  variable  c  is  already  defined  in  method  guessParametersErrors()  [FE]            AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  final  double[][]  c  =  Math.sqrt(getChiSquare()  /(rows  *  cols)+  errors.length);  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	final  double[][]  c  =  Math.sqrt(getChiSquare()  /(rows  *  cols)+  errors.length);	  final    double[][]    c    =    Math.sqrt(getChiSquare()    /(cols    *    cols));    	non-compiled	[CE]  variable  c  is  already  defined  in  method  guessParametersErrors()	57	None	replace
166	[BUG]  [BUGGY]  double[][]  covar  =  getRemainings().toArray(new  double[cols.length  ]);  [CE]  int  cannot  be  dereferenced  [FE]              AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  covar  =  getRemainings().toArray(new  double[cols.length  ]);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  covar  =  getRemainings().toArray(new  double[cols.length  ]);	  double[][]    covar    =    getRemainings().toArray(new    double[cols.size()    ]);    	non-compiled	[CE]  int  cannot  be  dereferenced	68	None	replace
167	[BUG]  [BUGGY]  double[][]  covar  =  getCovariances(c,  coefficient);  [CE]  cannot  find  symbol  coefficient  [FE]                  AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  covar  =  getCovariances(c,  coefficient);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  covar  =  getCovariances(c,  coefficient);	  double[][]    covar    =    getCovariances(c,    jTj);    	non-compiled	[CE]  cannot  find  symbol  coefficient	2	None	replace
168	[BUG]  [BUGGY]  double[][]  c  =  Math.sqrt(getChiSquare()  /(rows  *  cols)+  errors.length);  [CE]  variable  c  is  already  defined  in  method  guessParametersErrors()  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  c  =  Math.sqrt(getChiSquare()  /(rows  *  cols)+  errors.length);  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  c  =  Math.sqrt(getChiSquare()  /(rows  *  cols)+  errors.length);	  double[][]    c    =    Math.sqrt(getChiSquare()    /(rows    *    cols));    	non-compiled	[CE]  variable  c  is  already  defined  in  method  guessParametersErrors()	50	None	replace
169	[BUG]  [BUGGY]  double[][]  c  =  Math.sqrt(getChiSquare()  /(rows  *  cols)-  errors.length);  [CE]  variable  c  is  already  defined  in  method  guessParametersErrors()  [FE]                  AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  c  =  Math.sqrt(getChiSquare()  /(rows  *  cols)-  errors.length);  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  c  =  Math.sqrt(getChiSquare()  /(rows  *  cols)-  errors.length);	  double[][]    c    =    Math.sqrt(getChiSquare()    /(rows    *    cols));    	non-compiled	[CE]  variable  c  is  already  defined  in  method  guessParametersErrors()	50	None	replace
170	[BUG]  [BUGGY]  double[][]  covar  =  getCovariances().toArray(new  double[covars,  c);  [CE]  ']'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  covar  =  getCovariances().toArray(new  double[covars,  c);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  covar  =  getCovariances().toArray(new  double[covars,  c);	  double[][]    covar    =    getCovariances().toArray(new    double[c],    c);    	non-compiled	[CE]  ']'  expected	79	None	replace
171	[BUG]  [BUGGY]  final  double[][]  errors  =  Math.sqrt(getChiSquare()  *(cols  -  1));  [CE]  variable  errors  is  already  defined  in  method  guessParametersErrors()  [FE]                      AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  final  double[][]  errors  =  Math.sqrt(getChiSquare()  *(cols  -  1));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	final  double[][]  errors  =  Math.sqrt(getChiSquare()  *(cols  -  1));	  final    double[][]    errors    =    Math.sqrt(getChiSquare()    *(rows    -    cols));    	non-compiled	[CE]  variable  errors  is  already  defined  in  method  guessParametersErrors()	44	None	replace
172	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  c.length;  ++i)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  c.length;  ++i)  {  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	for(int  i  =  0;  i  <  cols.length;  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  c.length;  ++i)  {	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    double[][]    covar    =    getCovariances();    for(int    i    =    0;    i    <    c.length;    ++i)    {    errors[i]    =    Math.    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
173	[BUG]  [BUGGY]  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  c.length;  ++i)  {  errors[i]  =  Math.  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  c.length;  ++i)  {  errors[i]  =  Math.  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  c.length;  ++i)  {  errors[i]  =  Math.	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    double[][]    covar    =    getCovariances();    for(int    i    =    0;    i    <    c.length;    ++i)    {    errors[i]    =    Math.    	non-compiled	[CE]  <identifier>  expected	65	None	replace
174	[BUG]  [BUGGY]  final  double[][]  errors  =  Math.sqrt(getChiSquare()  /(rows  -  1));  [CE]  variable  errors  is  already  defined  in  method  guessParametersErrors()  [FE]              AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  final  double[][]  errors  =  Math.sqrt(getChiSquare()  /(rows  -  1));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	final  double[][]  errors  =  Math.sqrt(getChiSquare()  /(rows  -  1));	  final    double[][]    c    =    Math.sqrt(getChiSquare()    /(cols    -    1));    	non-compiled	[CE]  variable  errors  is  already  defined  in  method  guessParametersErrors()	58	None	replace
175	[BUG]  [BUGGY]  double[][]  covar  =  getCovariances().toArray(covars,  cols);  [CE]  cannot  find  symbol  covars  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  covar  =  getCovariances().toArray(covars,  cols);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  covar  =  getCovariances().toArray(covars,  cols);	  double[][]    covar    =    getCovariances().toArray(c,    cols);    	non-compiled	[CE]  cannot  find  symbol  covars	21	None	replace
176	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	for(int  i  =  0;  i  <  cols.length;  ++i)  {  final  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    final    double[][]    covar    =    getCovariances();    for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[i]    =    Math    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
177	[BUG]  [BUGGY]  double[][]  covar  =  getCovariances().toArray(new  double[cols].length);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  covar  =  getCovariances().toArray(new  double[cols].length);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  covar  =  getCovariances().toArray(new  double[cols].length);	  double[][]    covar    =    getCovariances().toArray(new    double[cols]);    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
178	[BUG]  [BUGGY]  double[][]  cols  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  cols  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  cols  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    double[][]    covar    =    getCovariances();    for(int    i    =    0;    i    <    cols.length;    ++i)    {    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
179	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  c.length;  ++i)  {  errors[i]  =  Math.sqrt(co  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  c.length;  ++i)  {  errors[i]  =  Math.sqrt(co  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  c.length;  ++i)  {  errors[i]  =  Math.sqrt(co	  for(int    i    =    0;    i    <    cols;    ++i)    {    double[][]    covar    =    getCovariances();    for(int    i    =    0;    i    <    c.length;    ++i)    {    errors[i]    =    Math.sqrt(covar[    	non-compiled	[CE]  ')'  expected	84	None	replace
180	[BUG]  [BUGGY]  double[][]  errors  =  Math.sqrt(getChiSquare()  *(cols  -  1));  [CE]  variable  errors  is  already  defined  in  method  guessParametersErrors()  [FE]            AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  errors  =  Math.sqrt(getChiSquare()  *(cols  -  1));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  errors  =  Math.sqrt(getChiSquare()  *(cols  -  1));	  double[][]    c    =    Math.sqrt(getChiSquare()    *(cols    -    1));    	non-compiled	[CE]  variable  errors  is  already  defined  in  method  guessParametersErrors()	28	None	replace
181	[BUG]  [BUGGY]  double[][]  errors  =  Math.sqrt(getChiSquare()  /(cols  -  1));  [CE]  variable  errors  is  already  defined  in  method  guessParametersErrors()  [FE]              AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  errors  =  Math.sqrt(getChiSquare()  /(cols  -  1));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  errors  =  Math.sqrt(getChiSquare()  /(cols  -  1));	  double[][]    c    =    Math.sqrt(getChiSquare()    *(cols    -    1));    	non-compiled	[CE]  variable  errors  is  already  defined  in  method  guessParametersErrors()	28	None	replace
182	[BUG]  [BUGGY]  double[][]  cols  =  getCovariances().toArray(new  double[cols.length  -  1]);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  cols  =  getCovariances().toArray(new  double[cols.length  -  1]);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  cols  =  getCovariances().toArray(new  double[cols.length  -  1]);	  double[][]    covar    =    getCovariances().toArray(new    double[cols.length    ]);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
183	[BUG]  [BUGGY]  double[][]  cols  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  cols  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  cols  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]	  double[][]    covar    =    getCovariances();    for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[i]    	non-compiled	[CE]  not  a  statement	86	None	replace
184	[BUG]  [BUGGY]  double[][]  c  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  c  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  c  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]	  double[][]    covar    =    getCovariances();    for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[i]    	non-compiled	[CE]  not  a  statement	86	None	replace
185	[BUG]  [BUGGY]  double[][]  covar  =  getCovariances(c,  criterion,  cost);  [CE]  cannot  find  symbol  criterion  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  covar  =  getCovariances(c,  criterion,  cost);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  covar  =  getCovariances(c,  criterion,  cost);	  double[][]    covar    =    getCovariances(c,    cost);    	non-compiled	[CE]  cannot  find  symbol  criterion	75	None	replace
186	[BUG]  [BUGGY]  double[][]  covar  =  getCovariances().toArray(errors,  jTj);  [CE]  cannot  find  symbol  jTj  [FE]            AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  covar  =  getCovariances().toArray(errors,  jTj);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  covar  =  getCovariances().toArray(errors,  jTj);	  double[][]    covar    =    getCovariances().toArray(errors,    c);    	non-compiled	[CE]  cannot  find  symbol  jTj	45	None	replace
187	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols.size();  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  for(int  i  =  0;  i  <  cols.size();  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	for(int  i  =  0;  i  <  cols.size();  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =	  for(int    i    =    0;    i    <    cols.size();    ++i)    {    double[][]    covar    =    getCovariances();    for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[i]    =    Math.    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
188	[BUG]  [BUGGY]  double[][]  covar  =  getRemainings().toArray(new  double[remainings.size()  ]);  [CE]  cannot  find  symbol  remainings  [FE]              AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  covar  =  getRemainings().toArray(new  double[remainings.size()  ]);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  covar  =  getRemainings().toArray(new  double[remainings.size()  ]);	  double[][]    covar    =    getRemainings().clone();    	non-compiled	[CE]  cannot  find  symbol  remainings	11	None	replace
189	[BUG]  [BUGGY]  double[][]  errors  =  new  double[cols.length  -  4];  [CE]  variable  errors  is  already  defined  in  method  guessParametersErrors()  [FE]              AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  errors  =  new  double[cols.length  -  4];  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  errors  =  new  double[cols.length  -  4];	  double[][]    errors    =    new    double[cols.length    -    3];    	non-compiled	[CE]  variable  errors  is  already  defined  in  method  guessParametersErrors()	61	None	replace
190	[BUG]  [BUGGY]  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i  *  c  [CE]  ']'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i  *  c  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i  *  c	  double[][]    covar    =    getCovariances();    for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[i]    =    Math.sqrt(covar[i    	non-compiled	[CE]  ']'  expected	55	None	replace
191	[BUG]  [BUGGY]  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i  -  ']'  expected  [CE]  ']'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i  -  ']'  expected  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i  -  ']'  expected	  double[][]    covar    =    getCovariances();    for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[i]    =    Math.sqrt(covar[i    	non-compiled	[CE]  ']'  expected	55	None	replace
192	[BUG]  [BUGGY]  double[][]  covar  =  getCovariances().toArray(covars,  errors);  [CE]  cannot  find  symbol  covars  [FE]              AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  covar  =  getCovariances().toArray(covars,  errors);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  covar  =  getCovariances().toArray(covars,  errors);	  double[][]    covar    =    getCovariances().toArray(c,    errors);    	non-compiled	[CE]  cannot  find  symbol  covars	20	None	replace
193	[BUG]  [BUGGY]  double[][]  covar  =  getCovariances().toArray(correctes,  c);  [CE]  cannot  find  symbol  correctes  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  covar  =  getCovariances().toArray(correctes,  c);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  covar  =  getCovariances().toArray(correctes,  c);	  double[][]    covar    =    getCovariances().toArray(c,    errors);    	non-compiled	[CE]  cannot  find  symbol  correctes	20	None	replace
194	[BUG]  [BUGGY]  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    double[][]    covar    =    getCovariances();    for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[i]    =    Math.    	non-compiled	[CE]  <identifier>  expected	24	None	replace
195	[BUG]  [BUGGY]  double[][]  covar  =  getRemainings().toArray(covar,  c);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  covar  =  getRemainings().toArray(covar,  c);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  covar  =  getRemainings().toArray(covar,  c);	  double[][]    covar    =    getRemainings().toArray(covar);    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
196	[BUG]  [BUGGY]  double[][]  covar  =  getCovariances().toArray(variances);  [CE]  cannot  find  symbol  variances  [FE]            AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  covar  =  getCovariances().toArray(variances);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  covar  =  getCovariances().toArray(variances);	  double[][]    covar    =    getCovariances().toArray(covariances);    	non-compiled	[CE]  cannot  find  symbol  variances	72	None	replace
197	[BUG]  [BUGGY]  double[][]  covar  =  getCovariances().toArray(correctedColumns);  [CE]  cannot  find  symbol  correctedColumns  [FE]              AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  covar  =  getCovariances().toArray(correctedColumns);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  covar  =  getCovariances().toArray(correctedColumns);	  double[][]    covar    =    getCovariances().toArray(covariances);    	non-compiled	[CE]  cannot  find  symbol  correctedColumns	72	None	replace
198	[BUG]  [BUGGY]  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  c.length;  ++i)  {  errors[i]  =  Math.sqrt  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  c.length;  ++i)  {  errors[i]  =  Math.sqrt  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  c.length;  ++i)  {  errors[i]  =  Math.sqrt	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    double[][]    covar    =    getCovariances();    for(int    i    =    0;    i    <    c.length;    ++i)    {    errors[i]    =    Math.sqrt    	non-compiled	[CE]  ';'  expected	19	None	replace
199	[BUG]  [BUGGY]  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    double[][]    covar    =    getCovariances();    for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[i]    =    Math.sqrt    	non-compiled	[CE]  ';'  expected	16	None	replace
200	[BUG]  [BUGGY]  final  double[][]  c  =  Math.sqrt(getChiSquare()  *(rows  -  rows));  [CE]  variable  c  is  already  defined  in  method  guessParametersErrors()  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  final  double[][]  c  =  Math.sqrt(getChiSquare()  *(rows  -  rows));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	final  double[][]  c  =  Math.sqrt(getChiSquare()  *(rows  -  rows));	  final    double[][]    c    =    Math.sqrt(getChiSquare()    /(cols    -    rows));    	non-compiled	[CE]  variable  c  is  already  defined  in  method  guessParametersErrors()	27	None	replace
201	[BUG]  [BUGGY]  double[][]  errors  =  new  double[c.length  -  3];  [CE]  variable  errors  is  already  defined  in  method  guessParametersErrors()  [FE]                  AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  errors  =  new  double[c.length  -  3];  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  errors  =  new  double[c.length  -  3];	  double[][]    errors    =    new    double[c.length    -    1];    	non-compiled	[CE]  variable  errors  is  already  defined  in  method  guessParametersErrors()	32	None	replace
202	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  /(rows  -  cols)+  1);  [CE]  variable  c  is  already  defined  in  method  guessParametersErrors()  [FE]                  AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  /(rows  -  cols)+  1);  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	final  double  c  =  Math.sqrt(getChiSquare()  /(rows  -  cols)+  1);	  final    double    c    =    Math.sqrt(getChiSquare()    /(cols    -    rows));    	non-compiled	[CE]  variable  c  is  already  defined  in  method  guessParametersErrors()	49	None	replace
203	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  /(rows  *  cols)-  errors.length);  [CE]  variable  c  is  already  defined  in  method  guessParametersErrors()  [FE]              AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  /(rows  *  cols)-  errors.length);  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	final  double  c  =  Math.sqrt(getChiSquare()  /(rows  *  cols)-  errors.length);	  final    double    c    =    Math.sqrt(getChiSquare()    /(rows    *    cols));    	non-compiled	[CE]  variable  c  is  already  defined  in  method  guessParametersErrors()	47	None	replace
204	[BUG]  [BUGGY]  final  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  final  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	final  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    final    double[][]    covar    =    getCovariances();    for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
205	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	for(int  i  =  0;  i  <  rows.length;  ++i)  {  final  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    final    double[][]    covar    =    getCovariances();    for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
206	[BUG]  [BUGGY]  double[][]  errors  =  Math.sqrt(getChiSquare()  /(cols  *  cols));  [CE]  variable  errors  is  already  defined  in  method  guessParametersErrors()  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  errors  =  Math.sqrt(getChiSquare()  /(cols  *  cols));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  errors  =  Math.sqrt(getChiSquare()  /(cols  *  cols));	  double[][]    errors    =    Math.sqrt(getChiSquare()    /(rows    -    cols));    	non-compiled	[CE]  variable  errors  is  already  defined  in  method  guessParametersErrors()	52	None	replace
207	[BUG]  [BUGGY]  double[][]  covar  =  getCovariances().toArray(new  double[covars.length  +  1]);  [CE]  cannot  find  symbol  covars  [FE]                  AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  covar  =  getCovariances().toArray(new  double[covars.length  +  1]);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  covar  =  getCovariances().toArray(new  double[covars.length  +  1]);	  double[][]    covar    =    getCovariances().toArray(new    double[c    +    1]);    	non-compiled	[CE]  cannot  find  symbol  covars	39	None	replace
208	[BUG]  [BUGGY]  final  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i  -  1][0]  *  c);  }  [CE]  int  cannot  be  dereferenced  [FE]                  AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  final  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i  -  1][0]  *  c);  }  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	final  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i  -  1][0]  *  c);  }	  final    double[][]    covar    =    getCovariances();    for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[i]    =    Math.sqrt(covar[i    	non-compiled	[CE]  int  cannot  be  dereferenced	22	None	replace
209	[BUG]  [BUGGY]  double[][]  covar  =  getRemainings().toArray(errors,  new  double[c]);  [CE]  possible  loss  of  precision  [FE]              AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  covar  =  getRemainings().toArray(errors,  new  double[c]);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  covar  =  getRemainings().toArray(errors,  new  double[c]);	  double[][]    covar    =    getRemainings().toArray(new    double[c]);    	non-compiled	[CE]  possible  loss  of  precision	78	None	replace
210	[BUG]  [BUGGY]  final  double[][]  c  =  Math.sqrt(getChiSquare()  *(rows  -  cols)+  1);  [CE]  variable  c  is  already  defined  in  method  guessParametersErrors()  [FE]              AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  final  double[][]  c  =  Math.sqrt(getChiSquare()  *(rows  -  cols)+  1);  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	final  double[][]  c  =  Math.sqrt(getChiSquare()  *(rows  -  cols)+  1);	  final    double[][]    c    =    Math.sqrt(getChiSquare()    *(cols    -    cols));    	non-compiled	[CE]  variable  c  is  already  defined  in  method  guessParametersErrors()	26	None	replace
211	[BUG]  [BUGGY]  double[][]  covar  =  getCovariances().toArray(correctedCols);  [CE]  cannot  find  symbol  correctedCols  [FE]              AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  covar  =  getCovariances().toArray(correctedCols);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  covar  =  getCovariances().toArray(correctedCols);	  double[][]    covar    =    getCovariances().toArray(covars);    	non-compiled	[CE]  cannot  find  symbol  correctedCols	46	None	replace
212	[BUG]  [BUGGY]  double[][]  covar  =  getCovariances().toArray(c,  errorSquares);  [CE]  cannot  find  symbol  errorSquares  [FE]              AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  covar  =  getCovariances().toArray(c,  errorSquares);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  covar  =  getCovariances().toArray(c,  errorSquares);	  double[][]    covar    =    getCovariances().toArray(c,    covar);    	non-compiled	[CE]  cannot  find  symbol  errorSquares	6	None	replace
213	[BUG]  [BUGGY]  double[][]  errors  =  new  double[rows.length  -  2];  [CE]  variable  errors  is  already  defined  in  method  guessParametersErrors()  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  errors  =  new  double[rows.length  -  2];  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  errors  =  new  double[rows.length  -  2];	  double[][]    errors    =    new    double[rows.length    -    1];    	non-compiled	[CE]  variable  errors  is  already  defined  in  method  guessParametersErrors()	62	None	replace
214	[BUG]  [BUGGY]  final  double[][]  errors  =  Math.sqrt(getChiSquare()  /(cols  *  cols));  [CE]  variable  errors  is  already  defined  in  method  guessParametersErrors()  [FE]                  AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  final  double[][]  errors  =  Math.sqrt(getChiSquare()  /(cols  *  cols));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	final  double[][]  errors  =  Math.sqrt(getChiSquare()  /(cols  *  cols));	  final    double[][]    errors    =    Math.sqrt(getChiSquare()    /(rows    -    cols));    	non-compiled	[CE]  variable  errors  is  already  defined  in  method  guessParametersErrors()	81	None	replace
215	[BUG]  [BUGGY]  double[][]  covar  =  getCovariances(c,  cost,  jF);  [CE]  method  getCovariances  in  class  AbstractLeastSquaresOptimizer  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  covar  =  getCovariances(c,  cost,  jF);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  covar  =  getCovariances(c,  cost,  jF);	  double[][]    covar    =    getCovariances(c,    jF);    	non-compiled	[CE]  method  getCovariances  in  class  AbstractLeastSquaresOptimizer  cannot  be  applied  to  given  types;	4	None	replace
216	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(rows  -  errors.length));  [CE]  variable  c  is  already  defined  in  method  guessParametersErrors()  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  *(rows  -  errors.length));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	final  double  c  =  Math.sqrt(getChiSquare()  *(rows  -  errors.length));	  final    double    c    =    Math.sqrt(getChiSquare()    *(cols    -    cols));    	non-compiled	[CE]  variable  c  is  already  defined  in  method  guessParametersErrors()	48	None	replace
217	[BUG]  [BUGGY]  double[][]  covar  =  getCovariances().toArray(new  double[const.length]);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  covar  =  getCovariances().toArray(new  double[const.length]);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  covar  =  getCovariances().toArray(new  double[const.length]);	  double[][]    covar    =    getCovariances().toArray(new    double[covars.length]);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
218	[BUG]  [BUGGY]  double[][]  covar  =  getCovariances().toArray(c,  k);  [CE]  cannot  find  symbol  k  [FE]            AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  covar  =  getCovariances().toArray(c,  k);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  covar  =  getCovariances().toArray(c,  k);	  double[][]    covar    =    getCovariances().toArray(covar,    c);    	non-compiled	[CE]  cannot  find  symbol  k	5	None	replace
219	[BUG]  [BUGGY]  double[][]  covar  =  getCovariances().toArray(c,  coefficients);  [CE]  cannot  find  symbol  coefficients  [FE]              AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  covar  =  getCovariances().toArray(c,  coefficients);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  covar  =  getCovariances().toArray(c,  coefficients);	  double[][]    covar    =    getCovariances().toArray(covar,    c);    	non-compiled	[CE]  cannot  find  symbol  coefficients	5	None	replace
220	[BUG]  [BUGGY]  final  double[][]  c  =  Math.sqrt(getChiSquare()  /(rows  *  cols)-  errors.length);  [CE]  variable  c  is  already  defined  in  method  guessParametersErrors()  [FE]            AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  final  double[][]  c  =  Math.sqrt(getChiSquare()  /(rows  *  cols)-  errors.length);  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	final  double[][]  c  =  Math.sqrt(getChiSquare()  /(rows  *  cols)-  errors.length);	  final    double[][]    c    =    Math.sqrt(getChiSquare()    /(rows    *    cols));    	non-compiled	[CE]  variable  c  is  already  defined  in  method  guessParametersErrors()	25	None	replace
221	[BUG]  [BUGGY]  final  double[][]  errors  =  Math.sqrt(getChiSquare()  /(cols  -  1));  [CE]  variable  errors  is  already  defined  in  method  guessParametersErrors()  [FE]                  AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  final  double[][]  errors  =  Math.sqrt(getChiSquare()  /(cols  -  1));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	final  double[][]  errors  =  Math.sqrt(getChiSquare()  /(cols  -  1));	  final    double[][]    c    =    Math.sqrt(getChiSquare()    *(cols    -    1));    	non-compiled	[CE]  variable  errors  is  already  defined  in  method  guessParametersErrors()	42	None	replace
222	[BUG]  [BUGGY]  double[][]  errors  =  Math.sqrt(getChiSquare()  /(cols  -  cols));  [CE]  variable  errors  is  already  defined  in  method  guessParametersErrors()  [FE]                  AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  errors  =  Math.sqrt(getChiSquare()  /(cols  -  cols));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  errors  =  Math.sqrt(getChiSquare()  /(cols  -  cols));	  double[][]    c    =    Math.sqrt(getChiSquare()    *(cols    -    cols));    	non-compiled	[CE]  variable  errors  is  already  defined  in  method  guessParametersErrors()	51	None	replace
223	[BUG]  [BUGGY]  double[][]  covar  =  getRemainings().toArray(new  double[cols,  cols.size()  ]);  [CE]  ']'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  covar  =  getRemainings().toArray(new  double[cols,  cols.size()  ]);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  covar  =  getRemainings().toArray(new  double[cols,  cols.size()  ]);	  double[][]    covar    =    getRemainings().toArray(new    double[cols.size()    ]);    	non-compiled	[CE]  ']'  expected	68	None	replace
224	[BUG]  [BUGGY]  double[][]  covar  =  getRemainings().toArray(new  double[cols.size()  ],  c);  [CE]  int  cannot  be  dereferenced  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  covar  =  getRemainings().toArray(new  double[cols.size()  ],  c);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  covar  =  getRemainings().toArray(new  double[cols.size()  ],  c);	  double[][]    covar    =    getRemainings().toArray(new    double[cols.size()    ]);    	non-compiled	[CE]  int  cannot  be  dereferenced	68	None	replace
225	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  c.length;  ++i)  {  errors[i]  =  Math.sqrt(co  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  c.length;  ++i)  {  errors[i]  =  Math.sqrt(co  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	for(int  i  =  0;  i  <  cols.length;  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  c.length;  ++i)  {  errors[i]  =  Math.sqrt(co	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    double[][]    covar    =    getCovariances();    for(int    i    =    0;    i    <    c.length;    ++i)    {    errors[i]    =    Math.sqrt(covar[    	non-compiled	[CE]  ')'  expected	64	None	replace
226	[BUG]  [BUGGY]  final  double[][]  errors  =  Math.sqrt(getChiSquare()  /(cols  -  cols));  [CE]  variable  errors  is  already  defined  in  method  guessParametersErrors()  [FE]              AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  final  double[][]  errors  =  Math.sqrt(getChiSquare()  /(cols  -  cols));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	final  double[][]  errors  =  Math.sqrt(getChiSquare()  /(cols  -  cols));	  final    double[][]    c    =    Math.sqrt(getChiSquare()    *(cols    -    cols));    	non-compiled	[CE]  variable  errors  is  already  defined  in  method  guessParametersErrors()	26	None	replace
227	[BUG]  [BUGGY]  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  errors.length;  ++i)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  errors.length;  ++i)  {  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  errors.length;  ++i)  {	  double[][]    covar    =    getCovariances();    for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[i]    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
228	[BUG]  [BUGGY]  double[][]  covar  =  getCovariances(c,  jF,  c);  [CE]  method  getCovariances  in  class  AbstractLeastSquaresOptimizer  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  covar  =  getCovariances(c,  jF,  c);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  covar  =  getCovariances(c,  jF,  c);	  double[][]    covar    =    getCovariances(c,    c);    	non-compiled	[CE]  method  getCovariances  in  class  AbstractLeastSquaresOptimizer  cannot  be  applied  to  given  types;	76	None	replace
229	[BUG]  [BUGGY]  double[][]  covar  =  getCovariances(c,  c,  compensator);  [CE]  cannot  find  symbol  compensator  [FE]                    AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  covar  =  getCovariances(c,  c,  compensator);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  covar  =  getCovariances(c,  c,  compensator);	  double[][]    covar    =    getCovariances(c,    c);    	non-compiled	[CE]  cannot  find  symbol  compensator	76	None	replace
230	[BUG]  [BUGGY]  double[][]  covar  =  getCovariances(c,  c,  errors);  [CE]  method  getCovariances  in  class  AbstractLeastSquaresOptimizer  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  covar  =  getCovariances(c,  c,  errors);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  covar  =  getCovariances(c,  c,  errors);	  double[][]    covar    =    getCovariances(c,    c);    	non-compiled	[CE]  method  getCovariances  in  class  AbstractLeastSquaresOptimizer  cannot  be  applied  to  given  types;	76	None	replace
231	[BUG]  [BUGGY]  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    double[][]    covar    =    getCovariances();    for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
232	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	for(int  i  =  0;  i  <  rows.length;  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    double[][]    covar    =    getCovariances();    for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
233	[BUG]  [BUGGY]  double[][]  covar  =  getCovariances().toArray(covars,  c);  [CE]  cannot  find  symbol  covars  [FE]            AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  covar  =  getCovariances().toArray(covars,  c);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  covar  =  getCovariances().toArray(covars,  c);	  double[][]    covar    =    getCovariances().toArray(errors,    c);    	non-compiled	[CE]  cannot  find  symbol  covars	45	None	replace
234	[BUG]  [BUGGY]  double[][]  errors  =  Math.sqrt(getChiSquare()  *(rows  -  1));  [CE]  variable  errors  is  already  defined  in  method  guessParametersErrors()  [FE]            AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  errors  =  Math.sqrt(getChiSquare()  *(rows  -  1));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  errors  =  Math.sqrt(getChiSquare()  *(rows  -  1));	  double[][]    c    =    Math.sqrt(getChiSquare()    *(cols    -    1));    	non-compiled	[CE]  variable  errors  is  already  defined  in  method  guessParametersErrors()	28	None	replace
235	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	for(int  i  =  0;  i  <  rows.length;  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    double[][]    covar    =    getCovariances();    for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[i]    =    Math.sqrt(covar[    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
236	[BUG]  [BUGGY]  double[][]  errors  =  new  double[cols.length  /  3];  [CE]  variable  errors  is  already  defined  in  method  guessParametersErrors()  [FE]              AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  errors  =  new  double[cols.length  /  3];  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  errors  =  new  double[cols.length  /  3];	  double[][]    errors    =    new    double[cols.length    -    3];    	non-compiled	[CE]  variable  errors  is  already  defined  in  method  guessParametersErrors()	61	None	replace
237	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.s  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.s  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	for(int  i  =  0;  i  <  cols.length;  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.s	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    double[][]    covar    =    getCovariances();    for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[i]    =    Math.sqrt    	non-compiled	[CE]  ';'  expected	16	None	replace
238	[BUG]  [BUGGY]  double[][]  errors  =  new  double[c  /  1];  [CE]  variable  errors  is  already  defined  in  method  guessParametersErrors()  [FE]              AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  errors  =  new  double[c  /  1];  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  errors  =  new  double[c  /  1];	  double[][]    errors    =    new    double[c    -    1];    	non-compiled	[CE]  variable  errors  is  already  defined  in  method  guessParametersErrors()	85	None	replace
239	[BUG]  [BUGGY]  double[][]  covar  =  getCovariances().toArray(colon);  [CE]  cannot  find  symbol  colon  [FE]              AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  covar  =  getCovariances().toArray(colon);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  covar  =  getCovariances().toArray(colon);	  double[][]    covar    =    getCovariances().toArray(covars);    	non-compiled	[CE]  cannot  find  symbol  colon	46	None	replace
240	[BUG]  [BUGGY]  double[][]  covar  =  getCovariances(c,  chiSquare,  cost);  [CE]  cannot  find  symbol  chiSquare  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  covar  =  getCovariances(c,  chiSquare,  cost);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  covar  =  getCovariances(c,  chiSquare,  cost);	  double[][]    covar    =    getCovariances(c,    cost);    	non-compiled	[CE]  cannot  find  symbol  chiSquare	75	None	replace
241	[BUG]  [BUGGY]  double[][]  covar  =  getCovariances(c,  jF,  cost);  [CE]  method  getCovariances  in  class  AbstractLeastSquaresOptimizer  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  covar  =  getCovariances(c,  jF,  cost);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  covar  =  getCovariances(c,  jF,  cost);	  double[][]    covar    =    getCovariances(c,    cost);    	non-compiled	[CE]  method  getCovariances  in  class  AbstractLeastSquaresOptimizer  cannot  be  applied  to  given  types;	75	None	replace
242	[BUG]  [BUGGY]  double[][]  covar  =  getCovariances(c,  reciterion,  cost);  [CE]  cannot  find  symbol  reciterion  [FE]                    AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  covar  =  getCovariances(c,  reciterion,  cost);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  covar  =  getCovariances(c,  reciterion,  cost);	  double[][]    covar    =    getCovariances(c,    cost);    	non-compiled	[CE]  cannot  find  symbol  reciterion	75	None	replace
243	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  c.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  c.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  c.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[	  for(int    i    =    0;    i    <    cols;    ++i)    {    double[][]    covar    =    getCovariances();    for(int    i    =    0;    i    <    c.length;    ++i)    {    errors[i]    =    Math.sqrt(covar[    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
244	[BUG]  [BUGGY]  double[][]  covar  =  getCovariances(c,  jF,  errorCount);  [CE]  cannot  find  symbol  errorCount  [FE]                      AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  covar  =  getCovariances(c,  jF,  errorCount);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  covar  =  getCovariances(c,  jF,  errorCount);	  double[][]    covar    =    getCovariances(c,    jF);    	non-compiled	[CE]  cannot  find  symbol  errorCount	4	None	replace
245	[BUG]  [BUGGY]  double[][]  covar  =  getCovariances(c,  jF,  cols);  [CE]  method  getCovariances  in  class  AbstractLeastSquaresOptimizer  cannot  be  applied  to  given  types;  [FE]                        AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  covar  =  getCovariances(c,  jF,  cols);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  covar  =  getCovariances(c,  jF,  cols);	  double[][]    covar    =    getCovariances(c,    jF);    	non-compiled	[CE]  method  getCovariances  in  class  AbstractLeastSquaresOptimizer  cannot  be  applied  to  given  types;	4	None	replace
246	[BUG]  [BUGGY]  double[][]  covar  =  getCovariances().toArray(c,  2);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  covar  =  getCovariances().toArray(c,  2);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  covar  =  getCovariances().toArray(c,  2);	  double[][]    covar    =    getCovariances().toArray(c,    0);    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
247	[BUG]  [BUGGY]  double[][]  covar  =  getCovariances().toArray(c,  1);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  covar  =  getCovariances().toArray(c,  1);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  covar  =  getCovariances().toArray(c,  1);	  double[][]    covar    =    getCovariances().toArray(c,    0);    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
248	[BUG]  [BUGGY]  double[][]  covar  =  getRemainings().computeValues();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  covar  =  getRemainings().computeValues();  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  covar  =  getRemainings().computeValues();	  double[][]    covar    =    getRemainings().clone();    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
249	[BUG]  [BUGGY]  double[][]  covar  =  getCovariances().toArray(new  double[c].length]);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  covar  =  getCovariances().toArray(new  double[c].length]);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  covar  =  getCovariances().toArray(new  double[c].length]);	  double[][]    covar    =    getCovariances().toArray(new    double[covars.length]);    	non-compiled	[CE]  ')'  expected	66	None	replace
250	[BUG]  [BUGGY]  double[][]  colvar  =  getCovariances().toArray(new  double[cols.size()  ]);  [CE]  int  cannot  be  dereferenced  [FE]              AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  colvar  =  getCovariances().toArray(new  double[cols.size()  ]);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  colvar  =  getCovariances().toArray(new  double[cols.size()  ]);	  double[][]    covar    =    getCovariances().toArray(new    double[cols.size()    +    1]);    	non-compiled	[CE]  int  cannot  be  dereferenced	7	None	replace
251	[BUG]  [BUGGY]  double[][]  covar  =  getCovariances().toArray(new  double[cols,  rows.size()  ]);  [CE]  ']'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  covar  =  getCovariances().toArray(new  double[cols,  rows.size()  ]);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  covar  =  getCovariances().toArray(new  double[cols,  rows.size()  ]);	  double[][]    covar    =    getCovariances().toArray(new    double[cols,    cols.size()    ]);    	non-compiled	[CE]  ']'  expected	83	None	replace
252	[BUG]  [BUGGY]  double[][]  covar  =  getCovariances().toArray(new  double[cols,  c.size()  ]);  [CE]  ']'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  covar  =  getCovariances().toArray(new  double[cols,  c.size()  ]);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  covar  =  getCovariances().toArray(new  double[cols,  c.size()  ]);	  double[][]    covar    =    getCovariances().toArray(new    double[cols,    cols.size()    ]);    	non-compiled	[CE]  ']'  expected	83	None	replace
253	[BUG]  [BUGGY]  double[][]  c  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i  [CE]  ']'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  c  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  c  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i	  double[][]    covar    =    getCovariances();    for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[i]    =    Math.sqrt(covar[i    	non-compiled	[CE]  ']'  expected	55	None	replace
254	[BUG]  [BUGGY]  double[][]  covar  =  getCovariances().toArray(new  double[cols,  c);  [CE]  ']'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  covar  =  getCovariances().toArray(new  double[cols,  c);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  covar  =  getCovariances().toArray(new  double[cols,  c);	  double[][]    covar    =    getCovariances().toArray(new    double[c],    c);    	non-compiled	[CE]  ']'  expected	79	None	replace
255	[BUG]  [BUGGY]  double[][]  covar  =  getCovariances().toArray(new  double[c],  c,  jTj);  [CE]  possible  loss  of  precision  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  covar  =  getCovariances().toArray(new  double[c],  c,  jTj);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  covar  =  getCovariances().toArray(new  double[c],  c,  jTj);	  double[][]    covar    =    getCovariances().toArray(new    double[c],    c);    	non-compiled	[CE]  possible  loss  of  precision	79	None	replace
256	[BUG]  [BUGGY]  double[][]  covar  =  getCovariances().toArray(new  double[rows.size()  -  1]);  [CE]  int  cannot  be  dereferenced  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  covar  =  getCovariances().toArray(new  double[rows.size()  -  1]);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  covar  =  getCovariances().toArray(new  double[rows.size()  -  1]);	  double[][]    covar    =    getCovariances().toArray(new    double[cols.size()    -    1]);    	non-compiled	[CE]  int  cannot  be  dereferenced	8	None	replace
257	[BUG]  [BUGGY]  final  double[][]  c  =  Math.sqrt(getChiSquare()  /(rows  *  rows));  [CE]  variable  c  is  already  defined  in  method  guessParametersErrors()  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  final  double[][]  c  =  Math.sqrt(getChiSquare()  /(rows  *  rows));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	final  double[][]  c  =  Math.sqrt(getChiSquare()  /(rows  *  rows));	  final    double[][]    c    =    Math.sqrt(getChiSquare()    /(cols    -    rows));    	non-compiled	[CE]  variable  c  is  already  defined  in  method  guessParametersErrors()	27	None	replace
258	[BUG]  [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  /(rows  *  rows));  [CE]  variable  c  is  already  defined  in  method  guessParametersErrors()  [FE]                  AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  final  double  c  =  Math.sqrt(getChiSquare()  /(rows  *  rows));  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	final  double  c  =  Math.sqrt(getChiSquare()  /(rows  *  rows));	  final    double    c    =    Math.sqrt(getChiSquare()    /(cols    -    rows));    	non-compiled	[CE]  variable  c  is  already  defined  in  method  guessParametersErrors()	49	None	replace
259	[BUG]  [BUGGY]  double[][]  covar  =  getCovariances(c,  chiSquare);  [CE]  cannot  find  symbol  chiSquare  [FE]                  AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  covar  =  getCovariances(c,  chiSquare);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  covar  =  getCovariances(c,  chiSquare);	  double[][]    covar    =    getCovariances(c,    jTj);    	non-compiled	[CE]  cannot  find  symbol  chiSquare	2	None	replace
260	[BUG]  [BUGGY]  double[][]  covar  =  getRemainings().toArray(new  double[c  +  1]);  [CE]  possible  loss  of  precision  [FE]              AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  covar  =  getRemainings().toArray(new  double[c  +  1]);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  covar  =  getRemainings().toArray(new  double[c  +  1]);	  double[][]    covar    =    getRemainings().toArray(new    double[c]);    	non-compiled	[CE]  possible  loss  of  precision	78	None	replace
261	[BUG]  [BUGGY]  double[][]  covar  =  getRemainings().toArray(new  double[c],  jTj);  [CE]  possible  loss  of  precision  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  covar  =  getRemainings().toArray(new  double[c],  jTj);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  covar  =  getRemainings().toArray(new  double[c],  jTj);	  double[][]    covar    =    getRemainings().toArray(new    double[c]);    	non-compiled	[CE]  possible  loss  of  precision	78	None	replace
262	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns.length;  ++i)  {  final  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  for(int  i  =  0;  i  <  columns.length;  ++i)  {  final  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	for(int  i  =  0;  i  <  columns.length;  ++i)  {  final  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    final    double[][]    covar    =    getCovariances();    for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[i]    	non-compiled	[CE]  not  a  statement	34	None	replace
263	[BUG]  [BUGGY]  double[][]  covar  =  getCovariances().toArray(new  double[c  +  3]);  [CE]  possible  loss  of  precision  [FE]                  AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  covar  =  getCovariances().toArray(new  double[c  +  3]);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  covar  =  getCovariances().toArray(new  double[c  +  3]);	  double[][]    covar    =    getCovariances().toArray(new    double[c    +    1]);    	non-compiled	[CE]  possible  loss  of  precision	39	None	replace
264	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  c.length;  ++i)  {  errors[i]  =  Math.sqrt  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  for(int  i  =  0;  i  <  rows.length;  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  c.length;  ++i)  {  errors[i]  =  Math.sqrt  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	for(int  i  =  0;  i  <  rows.length;  ++i)  {  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  c.length;  ++i)  {  errors[i]  =  Math.sqrt	  for(int    i    =    0;    i    <    cols.length;    ++i)    {    double[][]    covar    =    getCovariances();    for(int    i    =    0;    i    <    c.length;    ++i)    {    errors[i]    =    Math.sqrt    	non-compiled	[CE]  ';'  expected	19	None	replace
265	[BUG]  [BUGGY]  double[][]  covar  =  getRemainings().toArray(covars);  [CE]  cannot  find  symbol  covars  [FE]                AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  double[][]  covar  =  getRemainings().toArray(covars);  [BUGGY]      for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	double[][]  covar  =  getRemainings().toArray(covars);	  double[][]    covar    =    getRemainings().toArray(errors);    	non-compiled	[CE]  cannot  find  symbol  covars	12	None	replace
266	[BUG]  [BUGGY]  errors[i]  =  Math.sqrt(covar[i  [CE]  ']'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  errors[i]  =  Math.sqrt(covar[i  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	errors[i]  =  Math.sqrt(covar[i	  final    double[][]    covar    =    getCovariances();    for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[i]    =    Math.sqrt(covar[i    	non-compiled	[CE]  ']'  expected	22	None	replace
267	[BUG]  [BUGGY]  final  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i  }  '  [CE]  ']'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  double[]  guessParametersErrors()  throws  FunctionEvaluationException,  OptimizationException  {  if  (rows  <=  cols)  {  throw  new  OptimizationException(  LocalizedFormats.NO_DEGREES_OF_FREEDOM,  rows,  cols);  }  double[]  errors  =  new  double[cols];  final  double  c  =  Math.sqrt(getChiSquare()  /  (rows  -  cols));      [BUGGY]  final  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i  }  '  [BUGGY]      double[][]  covar  =  getCovariances();  for  (int  i  =  0;  i  <  errors.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i][i])  *  c;  }  return  errors;  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  guessParametersErrors  [RETURN_TYPE]  double[]  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  errors  ji  objective  point  residuals  residualsWeights  targetValues  double  c  chiSquare  cost  criterion  factor  residual  sum  double[][]  covar  jTj  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  index  iterations  j  jacobianEvaluations  k  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	1.0	319	319	1	replace	final  double[][]  covar  =  getCovariances();  for(int  i  =  0;  i  <  cols.length;  ++i)  {  errors[i]  =  Math.sqrt(covar[i  }  '	  final    double[][]    covar    =    getCovariances();    for(int    i    =    0;    i    <    cols.length;    ++i)    {    errors[i]    =    Math.sqrt(covar[i    	non-compiled	[CE]  ']'  expected	22	None	replace
