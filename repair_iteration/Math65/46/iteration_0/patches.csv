bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    int  cols  =  Math.min(cols.length,  cols.length);  [CE]  int  cannot  be  dereferenced  [FE]    AssertionFailedError  [CONTEXT]  protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  [BUGGY]    int  cols  =  Math.min(cols.length,  cols.length);  [BUGGY]  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	    int  cols  =  Math.min(cols.length,  cols.length);		non-compiled	[CE]  int  cannot  be  dereferenced	92	None	add
2	[BUG]  [BUGGY]    cols  =  jF.value(cols);  [CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;  [FE]      AssertionFailedError  [CONTEXT]  protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  [BUGGY]    cols  =  jF.value(cols);  [BUGGY]  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	    cols  =  jF.value(cols);		non-compiled	[CE]  method  value  in  interface  MultivariateMatrixFunction  cannot  be  applied  to  given  types;	92	None	add
3	[BUG]  [BUGGY]    cols  =  Math.min(cols.length,  cols.length);  [CE]  int  cannot  be  dereferenced  [FE]        AssertionFailedError  [CONTEXT]  protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  [BUGGY]    cols  =  Math.min(cols.length,  cols.length);  [BUGGY]  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	    cols  =  Math.min(cols.length,  cols.length);		non-compiled	[CE]  int  cannot  be  dereferenced	92	None	add
4	[BUG]  [BUGGY]    cols  =  jF.getColumns();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError  [CONTEXT]  protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  [BUGGY]    cols  =  jF.getColumns();  [BUGGY]  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	    cols  =  jF.getColumns();		non-compiled	[CE]  cannot  find  symbol	92	None	add
5	[BUG]  [BUGGY]    int  cols  =  jF.getColumnCount();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError  [CONTEXT]  protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  [BUGGY]    int  cols  =  jF.getColumnCount();  [BUGGY]  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	    int  cols  =  jF.getColumnCount();		non-compiled	[CE]  cannot  find  symbol	92	None	add
6	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  [BUGGY]  if(rows!=  jacobian.length)  {  [BUGGY]  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	add	if(rows!=  jacobian.length)  {	if  (jacobian.length  !=  rows)  {  	compilable	  [FE]  AssertionFailedError  	91	1	replace
7	[BUG]  [BUGGY]  if(rows!=  jacobian.length)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  [BUGGY]  if(rows!=  jacobian.length)  {  [BUGGY]  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(rows!=  jacobian.length)  {	if  (jacobian.length  !=  rows)  {  	compilable	  [FE]  AssertionFailedError  	91	1	replace
8	[BUG]  [BUGGY]  if(cols!=  null  ||  jacobian.length!=  rows)  {  [CE]  incomparable  types:  int  and  <null>  [FE]      AssertionFailedError  [CONTEXT]  protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  [BUGGY]  if(cols!=  null  ||  jacobian.length!=  rows)  {  [BUGGY]  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(cols!=  null  ||  jacobian.length!=  rows)  {	if  (jacobian.length  !=  rows)  {  	non-compiled	[CE]  incomparable  types:  int  and  <null>	91	None	replace
9	[BUG]  [BUGGY]  [FE]  FunctionEvaluationException  [FE]        AssertionFailedError  [CONTEXT]  protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  [BUGGY]  if(cols!=  jacobian.length)  {  [BUGGY]  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	add	if(cols!=  jacobian.length)  {	if  (jacobian.length  !=  rows)  {  	compilable	  [FE]  FunctionEvaluationException  	91	9	replace
10	[BUG]  [BUGGY]  if(cols!=  jacobian.length)  {  [FE]  FunctionEvaluationException  [FE]        AssertionFailedError  [CONTEXT]  protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  [BUGGY]  if(cols!=  jacobian.length)  {  [BUGGY]  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(cols!=  jacobian.length)  {	if  (jacobian.length  !=  rows)  {  	compilable	  [FE]  FunctionEvaluationException  	91	9	replace
11	[BUG]  [BUGGY]  if(cols!=  null)  {  [CE]  incomparable  types:  int  and  <null>  [FE]    AssertionFailedError  [CONTEXT]  protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  [BUGGY]  if(cols!=  null)  {  [BUGGY]  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(cols!=  null)  {	if  (jacobian.length  !=  rows)  {  	non-compiled	[CE]  incomparable  types:  int  and  <null>	91	None	replace
12	[BUG]  [BUGGY]  if(rows!=  null)  {  [CE]  incomparable  types:  int  and  <null>  [FE]      AssertionFailedError  [CONTEXT]  protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  [BUGGY]  if(rows!=  null)  {  [BUGGY]  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(rows!=  null)  {	if  (jacobian.length  !=  rows)  {  	non-compiled	[CE]  incomparable  types:  int  and  <null>	91	None	replace
13	[BUG]  [BUGGY]    for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  function  =  getMultivariateVectorialFunction(i);  if(function!=  null)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH  [CE]  ')'  expected  [FE]    AssertionFailedError  [CONTEXT]  protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  [BUGGY]    for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  function  =  getMultivariateVectorialFunction(i);  if(function!=  null)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH  [BUGGY]  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	    for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  function  =  getMultivariateVectorialFunction(i);  if(function!=  null)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH		non-compiled	[CE]  ')'  expected	92	None	add
14	[BUG]  [BUGGY]    for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  function  =  getMultivariateVectorialFunction(i);  if(function!=  null)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE  [CE]  ')'  expected  [FE]      AssertionFailedError  [CONTEXT]  protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  [BUGGY]    for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  function  =  getMultivariateVectorialFunction(i);  if(function!=  null)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE  [BUGGY]  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	    for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  function  =  getMultivariateVectorialFunction(i);  if(function!=  null)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE		non-compiled	[CE]  ')'  expected	92	None	add
15	[BUG]  [BUGGY]    for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  function  =(MultivariateVectorialFunction)cols.get(i);  if(function!=  null)  {  throw  new  FunctionEvaluationException(  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError  [CONTEXT]  protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  [BUGGY]    for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  function  =(MultivariateVectorialFunction)cols.get(i);  if(function!=  null)  {  throw  new  FunctionEvaluationException(  [BUGGY]  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	    for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  function  =(MultivariateVectorialFunction)cols.get(i);  if(function!=  null)  {  throw  new  FunctionEvaluationException(		non-compiled	[CE]  illegal  start  of  expression	92	None	add
16	[BUG]  [BUGGY]    for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  function  =  getMultivariateVectorialFunction(i);  if(function!=  null)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMP  [CE]  ')'  expected  [FE]          AssertionFailedError  [CONTEXT]  protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  [BUGGY]    for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  function  =  getMultivariateVectorialFunction(i);  if(function!=  null)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMP  [BUGGY]  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	    for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  function  =  getMultivariateVectorialFunction(i);  if(function!=  null)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMP		non-compiled	[CE]  ')'  expected	92	None	add
17	[BUG]  [BUGGY]    for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  function  =(MultivariateVectorialFunction)jF.getValue(i);  if(function!=  null)  {  throw  new  FunctionEvaluationException(  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError  [CONTEXT]  protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  [BUGGY]    for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  function  =(MultivariateVectorialFunction)jF.getValue(i);  if(function!=  null)  {  throw  new  FunctionEvaluationException(  [BUGGY]  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	    for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  function  =(MultivariateVectorialFunction)jF.getValue(i);  if(function!=  null)  {  throw  new  FunctionEvaluationException(		non-compiled	[CE]  illegal  start  of  expression	92	None	add
18	[BUG]  [BUGGY]  [FE]  FunctionEvaluationException  [FE]    AssertionFailedError  [CONTEXT]  protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  [BUGGY]  if(jacobian.length!=  cols)  {  [BUGGY]  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	add	if(jacobian.length!=  cols)  {	if  (jacobian.length  !=  rows)  {  	compilable	  [FE]  FunctionEvaluationException  	91	9	replace
19	[BUG]  [BUGGY]  if(jacobian.length!=  cols)  {  [FE]  FunctionEvaluationException  [FE]    AssertionFailedError  [CONTEXT]  protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  [BUGGY]  if(jacobian.length!=  cols)  {  [BUGGY]  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(jacobian.length!=  cols)  {	if  (jacobian.length  !=  rows)  {  	compilable	  [FE]  FunctionEvaluationException  	91	9	replace
20	[BUG]  [BUGGY]  if(cols!=  null  &&  jacobian.length!=  rows)  {  [CE]  incomparable  types:  int  and  <null>  [FE]      AssertionFailedError  [CONTEXT]  protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  [BUGGY]  if(cols!=  null  &&  jacobian.length!=  rows)  {  [BUGGY]  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(cols!=  null  &&  jacobian.length!=  rows)  {	if  (jacobian.length  !=  rows)  {  	non-compiled	[CE]  incomparable  types:  int  and  <null>	91	None	replace
21	[BUG]  [BUGGY]    for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  jacobian  =  jF.value(cols);  for(int  i  =  0;  i  <  cols;  ++i)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE  [CE]  ')'  expected  [FE]    AssertionFailedError  [CONTEXT]  protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  [BUGGY]    for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  jacobian  =  jF.value(cols);  for(int  i  =  0;  i  <  cols;  ++i)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE  [BUGGY]  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	    for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  jacobian  =  jF.value(cols);  for(int  i  =  0;  i  <  cols;  ++i)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE		non-compiled	[CE]  ')'  expected	92	None	add
22	[BUG]  [BUGGY]    for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  jacobian  =  jF.value(cols);  for(int  i  =  0;  i  <  cols;  ++i)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH  [CE]  ')'  expected  [FE]      AssertionFailedError  [CONTEXT]  protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  [BUGGY]    for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  jacobian  =  jF.value(cols);  for(int  i  =  0;  i  <  cols;  ++i)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH  [BUGGY]  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	    for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  jacobian  =  jF.value(cols);  for(int  i  =  0;  i  <  cols;  ++i)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH		non-compiled	[CE]  ')'  expected	92	None	add
23	[BUG]  [BUGGY]    for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  jacobian  =  jF.value(cols);  for(int  i  =  0;  i  <  cols;  ++i)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats  [CE]  ')'  expected  [FE]        AssertionFailedError  [CONTEXT]  protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  [BUGGY]    for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  jacobian  =  jF.value(cols);  for(int  i  =  0;  i  <  cols;  ++i)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats  [BUGGY]  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	    for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  jacobian  =  jF.value(cols);  for(int  i  =  0;  i  <  cols;  ++i)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats		non-compiled	[CE]  ')'  expected	92	None	add
24	[BUG]  [BUGGY]    for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  jacobian  =  jF.value(cols);  for(int  i  =  0;  i  <  cols;  ++i)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS  [CE]  ')'  expected  [FE]          AssertionFailedError  [CONTEXT]  protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  [BUGGY]    for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  jacobian  =  jF.value(cols);  for(int  i  =  0;  i  <  cols;  ++i)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS  [BUGGY]  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	    for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  jacobian  =  jF.value(cols);  for(int  i  =  0;  i  <  cols;  ++i)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS		non-compiled	[CE]  ')'  expected	92	None	add
25	[BUG]  [BUGGY]    for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  jacobian  =  jF.value(cols);  for(int  i  =  0;  i  <  cols;  ++i)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_S  [CE]  ')'  expected  [FE]            AssertionFailedError  [CONTEXT]  protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);  [BUGGY]    for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  jacobian  =  jF.value(cols);  for(int  i  =  0;  i  <  cols;  ++i)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_S  [BUGGY]  if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	    for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  jacobian  =  jF.value(cols);  for(int  i  =  0;  i  <  cols;  ++i)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_S		non-compiled	[CE]  ')'  expected	92	None	add
