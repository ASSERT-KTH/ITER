bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  cols  =  jF.getRowCount();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  int  cols  =  jF.getRowCount();  [BUGGY]      if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	int  cols  =  jF.getRowCount();	  int    cols    =    jF.getColumnCount()    +    1;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
2	[BUG]  [BUGGY]  int  rows  =  Math.min(residualsWeights,  cols);  for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  function  =(MultivariateVectorialFunction)cols.get(i);  [CE]  no  suitable  method  found  for  min(double[],int)  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  int  rows  =  Math.min(residualsWeights,  cols);  for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  function  =(MultivariateVectorialFunction)cols.get(i);  [BUGGY]      if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	int  rows  =  Math.min(residualsWeights,  cols);  for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  function  =(MultivariateVectorialFunction)cols.get(i);	  int    rows    =    Math.min(residualsWeights,    jacobian.length);    for(int    i    =    0;    i    <    cols;    ++i)    {    MultivariateVectorialFunction    function    =(MultivariateVectorialFunction)cols.get(i);    	non-compiled	[CE]  no  suitable  method  found  for  min(double[],int)	91	None	replace
3	[BUG]  [BUGGY]  int  rows  =  Math.min(residualsWeights,  cols);  for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  function  =(MultivariateVectorialFunction)cols.get(i);  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  int  rows  =  Math.min(residualsWeights,  cols);  for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  function  =(MultivariateVectorialFunction)cols.get(i);  }  [BUGGY]      if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	int  rows  =  Math.min(residualsWeights,  cols);  for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  function  =(MultivariateVectorialFunction)cols.get(i);  }	  int    rows    =    Math.min(residualsWeights,    jacobian.length);    for(int    i    =    0;    i    <    cols;    ++i)    {    MultivariateVectorialFunction    function    =(MultivariateVectorialFunction)cols.get(i);    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
4	[BUG]  [BUGGY]  int  rows  =  Math.min(cols,  residualsWeights.length);  for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  function  =(MultivariateVectorialFunction)cols.get(i);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  int  rows  =  Math.min(cols,  residualsWeights.length);  for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  function  =(MultivariateVectorialFunction)cols.get(i);  [BUGGY]      if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	int  rows  =  Math.min(cols,  residualsWeights.length);  for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  function  =(MultivariateVectorialFunction)cols.get(i);	  int    rows    =    Math.min(residualsWeights,    jacobian.length);    for(int    i    =    0;    i    <    cols;    ++i)    {    MultivariateVectorialFunction    function    =(MultivariateVectorialFunction)cols.get(i);    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
5	[BUG]  [BUGGY]  int  rows  =  Math.min(cols,  residualsWeights.length);  for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  function  =(MultivariateVectorialFunction)cols.get(i);  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  int  rows  =  Math.min(cols,  residualsWeights.length);  for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  function  =(MultivariateVectorialFunction)cols.get(i);  }  [BUGGY]      if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	int  rows  =  Math.min(cols,  residualsWeights.length);  for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  function  =(MultivariateVectorialFunction)cols.get(i);  }	  int    rows    =    Math.min(residualsWeights,    jacobian.length);    for(int    i    =    0;    i    <    cols;    ++i)    {    MultivariateVectorialFunction    function    =(MultivariateVectorialFunction)cols.get(i);    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
6	[BUG]  [BUGGY]  cols  =  jF.value(cols,  1);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  cols  =  jF.value(cols,  1);  [BUGGY]      if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	cols  =  jF.value(cols,  1);	  cols    =    jF.value(cols,    2);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
7	[BUG]  [BUGGY]  cols  =  jF.value(cols,  3);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  cols  =  jF.value(cols,  3);  [BUGGY]      if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	cols  =  jF.value(cols,  3);	  cols    =    jF.value(cols,    2);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
8	[BUG]  [BUGGY]  cols  =  jF.value(cols,  4);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  cols  =  jF.value(cols,  4);  [BUGGY]      if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	cols  =  jF.value(cols,  4);	  cols    =    jF.value(cols,    2);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
9	[BUG]  [BUGGY]  cols  =  Math.min(cols.length,  cols.length  -  2);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  cols  =  Math.min(cols.length,  cols.length  -  2);  [BUGGY]      if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	cols  =  Math.min(cols.length,  cols.length  -  2);	  cols    =    Math.min(cols.length,    cols.length    -    1);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
10	[BUG]  [BUGGY]  cols  =  Math.min(cols.length,  jacobian.length  -  1);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  cols  =  Math.min(cols.length,  jacobian.length  -  1);  [BUGGY]      if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	cols  =  Math.min(cols.length,  jacobian.length  -  1);	  cols    =    Math.min(cols.length,    cols.length    -    1);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
11	[BUG]  [BUGGY]  cols  =  Math.min(cols.length,  cols.length  -  1,  rows);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  cols  =  Math.min(cols.length,  cols.length  -  1,  rows);  [BUGGY]      if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	cols  =  Math.min(cols.length,  cols.length  -  1,  rows);	  cols    =    Math.min(cols.length,    cols.length    -    1);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
12	[BUG]  [BUGGY]  if(jacobian.length  ==  cols)  {  if(jacobian.length  ==  cols)  {  [CE]  illegal  start  of  expression  [FE]    FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(jacobian.length  ==  cols)  {  if(jacobian.length  ==  cols)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(jacobian.length    ==    cols)    {    if(jacobian.length  ==  cols)  {	  	non-compiled	[CE]  illegal  start  of  expression	67	None	add
13	[BUG]  [BUGGY]  if(jacobian.length  ==  cols)  {  If(jacobian.length  ==  cols)  {  [CE]  ';'  expected  [FE]      FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(jacobian.length  ==  cols)  {  If(jacobian.length  ==  cols)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(jacobian.length    ==    cols)    {    If(jacobian.length  ==  cols)  {	  	non-compiled	[CE]  ';'  expected	67	None	add
14	[BUG]  [BUGGY]  if(jacobian.length  ==  cols)  {  if(jacobian.length!=  cols)  {  [CE]  illegal  start  of  expression  [FE]        FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(jacobian.length  ==  cols)  {  if(jacobian.length!=  cols)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(jacobian.length    ==    cols)    {    if(jacobian.length!=  cols)  {	  	non-compiled	[CE]  illegal  start  of  expression	67	None	add
15	[BUG]  [BUGGY]  if(cols!=  null  ||  cols.length  >  0)  {  [CE]  incomparable  types:  int  and  <null>  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(cols!=  null  ||  cols.length  >  0)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(cols!=  null  ||  cols.length  >  0)  {	  if(cols!=    null    &&    cols.length    >    0)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	86	None	replace
16	[BUG]  [BUGGY]  if(cols  ==  null  &&  cols.length  >  0)  {  [CE]  incomparable  types:  int  and  <null>  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(cols  ==  null  &&  cols.length  >  0)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(cols  ==  null  &&  cols.length  >  0)  {	  if(cols!=    null    &&    cols.length    >    0)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	86	None	replace
17	[BUG]  [BUGGY]  if(cols  ==  null  ||  cols.length  >  0)  {  [CE]  incomparable  types:  int  and  <null>  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(cols  ==  null  ||  cols.length  >  0)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(cols  ==  null  ||  cols.length  >  0)  {	  if(cols!=    null    &&    cols.length    >    0)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	86	None	replace
18	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  MultivariateVectorialFunction  function  =(MultivariateVectorialFunction)cols.get(i);  if(function!=  null)  {  throw  new  FunctionEvaluationException(  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  MultivariateVectorialFunction  function  =(MultivariateVectorialFunction)cols.get(i);  if(function!=  null)  {  throw  new  FunctionEvaluationException(  [BUGGY]      if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	for(int  i  =  0;  i  <  cols.length;  ++i)  {  MultivariateVectorialFunction  function  =(MultivariateVectorialFunction)cols.get(i);  if(function!=  null)  {  throw  new  FunctionEvaluationException(	  for(int    i    =    0;    i    <    rows;    ++i)    {    MultivariateVectorialFunction    function    =(MultivariateVectorialFunction)cols.get(i);    if(function!=    null)    {    throw    new    FunctionEvaluationException(    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
19	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  function  =(MultivariateVectorialFunction)cols.get(i);  if(function  ==  null)  {  throw  new  FunctionEvaluationException(  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  function  =(MultivariateVectorialFunction)cols.get(i);  if(function  ==  null)  {  throw  new  FunctionEvaluationException(  [BUGGY]      if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  function  =(MultivariateVectorialFunction)cols.get(i);  if(function  ==  null)  {  throw  new  FunctionEvaluationException(	  for(int    i    =    0;    i    <    rows;    ++i)    {    MultivariateVectorialFunction    function    =(MultivariateVectorialFunction)cols.get(i);    if(function!=    null)    {    throw    new    FunctionEvaluationException(    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
20	[BUG]  [BUGGY]  if(cols!=  null  &&  cols!=  null  &&  jacobian.length!=  rows)  {  [CE]  incomparable  types:  int  and  <null>  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(cols!=  null  &&  cols!=  null  &&  jacobian.length!=  rows)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(cols!=  null  &&  cols!=  null  &&  jacobian.length!=  rows)  {	  if(jF!=    null    &&    cols!=    null    &&    jacobian.length!=    rows)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	61	None	replace
21	[BUG]  [BUGGY]  if(cols!=  null  &&  cols.length!=  cols.length)  {  [CE]  incomparable  types:  int  and  <null>  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(cols!=  null  &&  cols.length!=  cols.length)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(cols!=  null  &&  cols.length!=  cols.length)  {	  if(rows!=    null    &&    cols.length!=    rows)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	59	None	replace
22	[BUG]  [BUGGY]  if(rows!=  null  &&  cols.length!=  cols.length)  {  [CE]  incomparable  types:  int  and  <null>  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(rows!=  null  &&  cols.length!=  cols.length)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(rows!=  null  &&  cols.length!=  cols.length)  {	  if(rows!=    null    &&    cols.length!=    rows)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	59	None	replace
23	[BUG]  [BUGGY]  if(cols!=  null  &&  cols.length!=  2)  {  [CE]  incomparable  types:  int  and  <null>  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(cols!=  null  &&  cols.length!=  2)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(cols!=  null  &&  cols.length!=  2)  {	  if(rows!=    null    &&    cols.length!=    rows)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	59	None	replace
24	[BUG]  [BUGGY]  if(cols!=  null  &&  cols.length!=  cols)  {  [CE]  incomparable  types:  int  and  <null>  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(cols!=  null  &&  cols.length!=  cols)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(cols!=  null  &&  cols.length!=  cols)  {	  if(cols!=    null    &&    jacobian.length!=    cols)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	70	None	replace
25	[BUG]  [BUGGY]  if(cols!=  null  &&  cols.length!=  jacobian.length)  {  [CE]  incomparable  types:  int  and  <null>  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(cols!=  null  &&  cols.length!=  jacobian.length)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(cols!=  null  &&  cols.length!=  jacobian.length)  {	  if(cols!=    null    &&    jacobian.length!=    cols)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	70	None	replace
26	[BUG]  [BUGGY]  if(cols!=  null  ||  cols.length!=  cols.length)  {  [CE]  incomparable  types:  int  and  <null>  [FE]            FunctionEvaluationException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(cols!=  null  ||  cols.length!=  cols.length)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(cols!=  null  ||  cols.length!=  cols.length)  {	  if(cols!=    cols.length)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	56	None	replace
27	[BUG]  [BUGGY]  if(cols!=  null  ||  cols.length  >=  cols.length)  {  [CE]  incomparable  types:  int  and  <null>  [FE]              FunctionEvaluationException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(cols!=  null  ||  cols.length  >=  cols.length)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(cols!=  null  ||  cols.length  >=  cols.length)  {	  if(cols!=    cols.length)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	56	None	replace
28	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  MultivariateVectorialFunction  function  =(MultivariateVectorialFunction)cols.get(i);  if(function  ==  null)  {  throw  new  FunctionEvaluationException(  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  for(int  i  =  0;  i  <  cols.length;  ++i)  {  MultivariateVectorialFunction  function  =(MultivariateVectorialFunction)cols.get(i);  if(function  ==  null)  {  throw  new  FunctionEvaluationException(  [BUGGY]      if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	for(int  i  =  0;  i  <  cols.length;  ++i)  {  MultivariateVectorialFunction  function  =(MultivariateVectorialFunction)cols.get(i);  if(function  ==  null)  {  throw  new  FunctionEvaluationException(	  for(int    i    =    0;    i    <    rows;    ++i)    {    MultivariateVectorialFunction    function    =(MultivariateVectorialFunction)cols.get(i);    if(function    ==    null)    {    throw    new    FunctionEvaluationException(    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
29	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  function  =(MultivariateVectorialFunction)cols.get(i);  if(function  ==  null)  {  throw  new  FunctionEvaluationException  [CE]  '('  or  '['  expected  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  function  =(MultivariateVectorialFunction)cols.get(i);  if(function  ==  null)  {  throw  new  FunctionEvaluationException  [BUGGY]      if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  function  =(MultivariateVectorialFunction)cols.get(i);  if(function  ==  null)  {  throw  new  FunctionEvaluationException	  for(int    i    =    0;    i    <    rows;    ++i)    {    MultivariateVectorialFunction    function    =(MultivariateVectorialFunction)cols.get(i);    if(function    ==    null)    {    throw    new    FunctionEvaluationException(    	non-compiled	[CE]  '('  or  '['  expected	6	None	replace
30	[BUG]  [BUGGY]  if(cols!=  null  ||  jacobian.length!=  cols)  {  [CE]  incomparable  types:  int  and  <null>  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(cols!=  null  ||  jacobian.length!=  cols)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(cols!=  null  ||  jacobian.length!=  cols)  {	  if(rows!=    null    ||    jacobian.length!=    cols)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	78	None	replace
31	[BUG]  [BUGGY]  if(cols  ==  null  ||  jacobian.length!=  cols)  {  [CE]  incomparable  types:  int  and  <null>  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(cols  ==  null  ||  jacobian.length!=  cols)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(cols  ==  null  ||  jacobian.length!=  cols)  {	  if(rows!=    null    ||    jacobian.length!=    cols)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	78	None	replace
32	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  function  =  getMultivariateVectorialFunction(i);  if(function!=  null)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENS  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  function  =  getMultivariateVectorialFunction(i);  if(function!=  null)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENS  [BUGGY]      if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  function  =  getMultivariateVectorialFunction(i);  if(function!=  null)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENS	  for(int    i    =    0;    i    <    rows;    ++i)    {    MultivariateVectorialFunction    function    =    getMultivariateVectorialFunction(i);    if(function!=    null)    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIM    	non-compiled	[CE]  ')'  expected	62	None	replace
33	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  function  =  getMultivariateVectorialFunction(i);  if(function!=  null)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIM  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  function  =  getMultivariateVectorialFunction(i);  if(function!=  null)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIM  [BUGGY]      if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  function  =  getMultivariateVectorialFunction(i);  if(function!=  null)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIM	  for(int    i    =    0;    i    <    rows;    ++i)    {    MultivariateVectorialFunction    function    =    getMultivariateVectorialFunction(i);    if(function!=    null)    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIM    	non-compiled	[CE]  ')'  expected	62	None	replace
34	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  function  =  getMultivariateVectorialFunction(i);  if(function!=  null)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.D  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  function  =  getMultivariateVectorialFunction(i);  if(function!=  null)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.D  [BUGGY]      if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  function  =  getMultivariateVectorialFunction(i);  if(function!=  null)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.D	  for(int    i    =    0;    i    <    rows;    ++i)    {    MultivariateVectorialFunction    function    =    getMultivariateVectorialFunction(i);    if(function!=    null)    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIM    	non-compiled	[CE]  ')'  expected	62	None	replace
35	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  jacobian  =  jF.value(cols);  for(int  i  =  0;  i  <  cols;  ++i)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.D  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  jacobian  =  jF.value(cols);  for(int  i  =  0;  i  <  cols;  ++i)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.D  [BUGGY]      if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  jacobian  =  jF.value(cols);  for(int  i  =  0;  i  <  cols;  ++i)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.D	  for(int    i    =    0;    i    <    rows;    ++i)    {    double[][]    jacobian    =    jF.value(cols);    for(int    i    =    0;    i    <    cols;    ++i)    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.D    	non-compiled	[CE]  ')'  expected	40	None	replace
36	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  jacobian  =  jF.value(cols);  for(int  i  =  0;  i  <  cols;  ++i)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormat  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  jacobian  =  jF.value(cols);  for(int  i  =  0;  i  <  cols;  ++i)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormat  [BUGGY]      if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  jacobian  =  jF.value(cols);  for(int  i  =  0;  i  <  cols;  ++i)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormat	  for(int    i    =    0;    i    <    rows;    ++i)    {    double[][]    jacobian    =    jF.value(cols);    for(int    i    =    0;    i    <    cols;    ++i)    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.D    	non-compiled	[CE]  ')'  expected	40	None	replace
37	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  jacobian  =  jF.value(cols);  for(int  i  =  0;  i  <  cols;  ++i)  {  throw  new  FunctionEvaluationException(point,  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  jacobian  =  jF.value(cols);  for(int  i  =  0;  i  <  cols;  ++i)  {  throw  new  FunctionEvaluationException(point,  [BUGGY]      if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  jacobian  =  jF.value(cols);  for(int  i  =  0;  i  <  cols;  ++i)  {  throw  new  FunctionEvaluationException(point,	  for(int    i    =    0;    i    <    rows;    ++i)    {    double[][]    jacobian    =    jF.value(cols);    for(int    i    =    0;    i    <    cols;    ++i)    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.D    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
38	[BUG]  [BUGGY]  cols  -=  jF.getColumns();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  cols  -=  jF.getColumns();  [BUGGY]      if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	cols  -=  jF.getColumns();	  cols    =    jF.getRows();    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
39	[BUG]  [BUGGY]  cols  -=  jF.getRows();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  cols  -=  jF.getRows();  [BUGGY]      if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	cols  -=  jF.getRows();	  cols    =    jF.getRows();    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
40	[BUG]  [BUGGY]  int  cols  =  Math.min(cols.length,  row  +  1);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  int  cols  =  Math.min(cols.length,  row  +  1);  [BUGGY]      if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	int  cols  =  Math.min(cols.length,  row  +  1);	  int    cols    =    Math.min(cols.length,    row);    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
41	[BUG]  [BUGGY]  int  cols  =  Math.min(cols.length,  row  -  1);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  int  cols  =  Math.min(cols.length,  row  -  1);  [BUGGY]      if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	int  cols  =  Math.min(cols.length,  row  -  1);	  int    cols    =    Math.min(cols.length,    row);    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
42	[BUG]  [BUGGY]  if(cols!=  null  &&  cols.length  ==  cols.length)  {  [CE]  incomparable  types:  int  and  <null>  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(cols!=  null  &&  cols.length  ==  cols.length)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(cols!=  null  &&  cols.length  ==  cols.length)  {	  if(cols!=    null    &&    cols.length!=    rows)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	58	None	replace
43	[BUG]  [BUGGY]  if(cols!=  null  &&  cols  >  0)  {  [CE]  incomparable  types:  int  and  <null>  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(cols!=  null  &&  cols  >  0)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(cols!=  null  &&  cols  >  0)  {	  if(rows!=    null    &&    cols    >    0)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	85	None	replace
44	[BUG]  [BUGGY]  if(cols!=  null  ||  cols  >  0)  {  [CE]  incomparable  types:  int  and  <null>  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(cols!=  null  ||  cols  >  0)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(cols!=  null  ||  cols  >  0)  {	  if(rows!=    null    &&    cols    >    0)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	85	None	replace
45	[BUG]  [BUGGY]  if(rows!=  null  ||  cols  >  0)  {  [CE]  incomparable  types:  int  and  <null>  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(rows!=  null  ||  cols  >  0)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(rows!=  null  ||  cols  >  0)  {	  if(rows!=    null    &&    cols    >    0)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	85	None	replace
46	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  function  =  getMultivariateVectorialFunction(i);  if(function!=  null)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormat  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  function  =  getMultivariateVectorialFunction(i);  if(function!=  null)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormat  [BUGGY]      if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  function  =  getMultivariateVectorialFunction(i);  if(function!=  null)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormat	  for(int    i    =    0;    i    <    rows;    ++i)    {    MultivariateVectorialFunction    function    =    getMultivariateVectorialFunction(i);    if(function!=    null)    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH    	non-compiled	[CE]  ')'  expected	20	None	replace
47	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  function  =  getMultivariateVectorialFunction(i);  if(function!=  null)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  function  =  getMultivariateVectorialFunction(i);  if(function!=  null)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.  [BUGGY]      if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  function  =  getMultivariateVectorialFunction(i);  if(function!=  null)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.	  for(int    i    =    0;    i    <    rows;    ++i)    {    MultivariateVectorialFunction    function    =    getMultivariateVectorialFunction(i);    if(function!=    null)    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH    	non-compiled	[CE]  <identifier>  expected	20	None	replace
48	[BUG]  [BUGGY]  [FE]  FunctionEvaluationException  [FE]    FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(cols!=  0)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	add	if(cols!=  0)  {	  if(rows!=    0)    {    	compilable	  [FE]  FunctionEvaluationException  	80	16	replace
49	[BUG]  [BUGGY]  if(cols!=  0)  {  [FE]  FunctionEvaluationException  [FE]    FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(cols!=  0)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(cols!=  0)  {	  if(rows!=    0)    {    	compilable	  [FE]  FunctionEvaluationException  	80	16	replace
50	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(rows  ==  0)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	add	if(rows  ==  0)  {	  if(rows!=    0)    {    	compilable	  [FE]  AssertionFailedError  	80	1	replace
51	[BUG]  [BUGGY]  if(rows  ==  0)  {  [FE]  AssertionFailedError  [FE]      FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(rows  ==  0)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(rows  ==  0)  {	  if(rows!=    0)    {    	compilable	  [FE]  AssertionFailedError  	80	1	replace
52	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(cols  ==  0)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	add	if(cols  ==  0)  {	  if(rows!=    0)    {    	compilable	  [FE]  AssertionFailedError  	80	1	replace
53	[BUG]  [BUGGY]  if(cols  ==  0)  {  [FE]  AssertionFailedError  [FE]        FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(cols  ==  0)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(cols  ==  0)  {	  if(rows!=    0)    {    	compilable	  [FE]  AssertionFailedError  	80	1	replace
54	[BUG]  [BUGGY]  cols  =  jF.value(cols,  maxIterations);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  cols  =  jF.value(cols,  maxIterations);  [BUGGY]      if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	cols  =  jF.value(cols,  maxIterations);	  cols    =    jF.value(cols,    value);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
55	[BUG]  [BUGGY]  cols  =  jF.value(cols,  cols);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  cols  =  jF.value(cols,  cols);  [BUGGY]      if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	cols  =  jF.value(cols,  cols);	  cols    =    jF.value(cols,    value);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
56	[BUG]  [BUGGY]  if(rows  <  =  cols)  {  [CE]  illegal  start  of  expression  [FE]    FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(rows  <  =  cols)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(rows  <  =  cols)  {	  if(rows    ==    cols)    {    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
57	[BUG]  [BUGGY]  if(rows  ==  null)  {  [CE]  incomparable  types:  int  and  <null>  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(rows  ==  null)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(rows  ==  null)  {	  if(rows!=    jacobian.length)    {    if(rows    ==    jacobian.length)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	16	None	replace
58	[BUG]  [BUGGY]  if(rows!=  null  ||  cols.length!=  cols.length)  {  [CE]  incomparable  types:  int  and  <null>  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(rows!=  null  ||  cols.length!=  cols.length)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(rows!=  null  ||  cols.length!=  cols.length)  {	  if(rows!=    null    ||    cols.length!=    rows)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	36	None	replace
59	[BUG]  [BUGGY]  if(cols  ==  null  ||  cols.length!=  cols.length)  {  [CE]  incomparable  types:  int  and  <null>  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(cols  ==  null  ||  cols.length!=  cols.length)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(cols  ==  null  ||  cols.length!=  cols.length)  {	  if(rows!=    null    ||    cols.length!=    rows)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	36	None	replace
60	[BUG]  [BUGGY]  cols  =  Math.max(cols.length,  cols.length);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  cols  =  Math.max(cols.length,  cols.length);  [BUGGY]      if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	cols  =  Math.max(cols.length,  cols.length);	  cols    =    Math.min(cols.length,    jacobian.length);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
61	[BUG]  [BUGGY]  if(rows!=  null  &&  cols!=  jacobian.length)  {  [CE]  incomparable  types:  int  and  <null>  [FE]        AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(rows!=  null  &&  cols!=  jacobian.length)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(rows!=  null  &&  cols!=  jacobian.length)  {	  if(rows!=    null    &&    rows!=    jacobian.length)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	81	None	replace
62	[BUG]  [BUGGY]  if(rows!=  null  &&  jacobian.length!=  rows)  {  [CE]  incomparable  types:  int  and  <null>  [FE]          AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(rows!=  null  &&  jacobian.length!=  rows)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(rows!=  null  &&  jacobian.length!=  rows)  {	  if(rows!=    null    &&    rows!=    jacobian.length)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	81	None	replace
63	[BUG]  [BUGGY]  if(cols!=  null  &&  rows!=  jacobian.length)  {  [CE]  incomparable  types:  int  and  <null>  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(cols!=  null  &&  rows!=  jacobian.length)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(cols!=  null  &&  rows!=  jacobian.length)  {	  if(rows!=    null    &&    rows!=    jacobian.length)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	81	None	replace
64	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(jacobian  ==  null)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	add	if(jacobian  ==  null)  {	  if(jacobian!=    null)    {    	compilable	  [FE]  AssertionFailedError  	47	1	replace
65	[BUG]  [BUGGY]  if(jacobian  ==  null)  {  [FE]  AssertionFailedError  [FE]    FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(jacobian  ==  null)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(jacobian  ==  null)  {	  if(jacobian!=    null)    {    	compilable	  [FE]  AssertionFailedError  	47	1	replace
66	[BUG]  [BUGGY]  if(jcobian!=  null)  {  [CE]  cannot  find  symbol  jcobian  [FE]      FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(jcobian!=  null)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(jcobian!=  null)  {	  if(jacobian!=    null)    {    	non-compiled	[CE]  cannot  find  symbol  jcobian	47	None	replace
67	[BUG]  [BUGGY]  [FE]  FunctionEvaluationException  [FE]    FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(rows  >=  cols)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	add	if(rows  >=  cols)  {	  if(rows!=    cols)    {    	compilable	  [FE]  FunctionEvaluationException  	54	14	replace
68	[BUG]  [BUGGY]  if(rows  >=  cols)  {  [FE]  FunctionEvaluationException  [FE]    FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(rows  >=  cols)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(rows  >=  cols)  {	  if(rows!=    cols)    {    	compilable	  [FE]  FunctionEvaluationException  	54	14	replace
69	[BUG]  [BUGGY]  if(cols!=  null  &&  cols!=  jacobian.length)  {  [CE]  incomparable  types:  int  and  <null>  [FE]    FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(cols!=  null  &&  cols!=  jacobian.length)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(cols!=  null  &&  cols!=  jacobian.length)  {	  if(jacobian!=    null    &&    cols!=    rows)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	95	None	replace
70	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(jacobian!=  null  &&  cols!=  cols)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	add	if(jacobian!=  null  &&  cols!=  cols)  {	  if(jacobian!=    null    &&    cols!=    rows)    {    	compilable	  [FE]  AssertionFailedError  	95	1	replace
71	[BUG]  [BUGGY]  if(jacobian!=  null  &&  cols!=  cols)  {  [FE]  AssertionFailedError  [FE]      FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(jacobian!=  null  &&  cols!=  cols)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(jacobian!=  null  &&  cols!=  cols)  {	  if(jacobian!=    null    &&    cols!=    rows)    {    	compilable	  [FE]  AssertionFailedError  	95	1	replace
72	[BUG]  [BUGGY]  if(cols!=  null  &&  cols!=  jacobian)  {  [CE]  incomparable  types:  int  and  <null>  [FE]        FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(cols!=  null  &&  cols!=  jacobian)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(cols!=  null  &&  cols!=  jacobian)  {	  if(jacobian!=    null    &&    cols!=    rows)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	95	None	replace
73	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  function  =  getMultivariateVectorialFunction(i);  if(function!=  null)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  function  =  getMultivariateVectorialFunction(i);  if(function!=  null)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  [BUGGY]      if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  function  =  getMultivariateVectorialFunction(i);  if(function!=  null)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,	  for(int    i    =    0;    i    <    rows;    ++i)    {    MultivariateVectorialFunction    function    =    getMultivariateVectorialFunction(i);    if(function!=    null)    {    throw    new    FunctionEvaluationException(point,    LocalizedFormat    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
74	[BUG]  [BUGGY]  if(rows!=  null  ||  cols!=  jacobian.length)  {  [CE]  incomparable  types:  int  and  <null>  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(rows!=  null  ||  cols!=  jacobian.length)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(rows!=  null  ||  cols!=  jacobian.length)  {	  if(cols!=    null    ||    rows!=    jacobian.length)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	93	None	replace
75	[BUG]  [BUGGY]  if(cols!=  null  ||  rows!=  cols.length)  {  [CE]  incomparable  types:  int  and  <null>  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(cols!=  null  ||  rows!=  cols.length)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(cols!=  null  ||  rows!=  cols.length)  {	  if(cols!=    null    ||    rows!=    jacobian.length)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	93	None	replace
76	[BUG]  [BUGGY]  if(cols!=  null  ||  cols.length!=  jacobian.length)  {  [CE]  incomparable  types:  int  and  <null>  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(cols!=  null  ||  cols.length!=  jacobian.length)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(cols!=  null  ||  cols.length!=  jacobian.length)  {	  if(rows!=    null    ||    cols.length!=    jacobian.length)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	38	None	replace
77	[BUG]  [BUGGY]  if(cols  ==  null  ||  cols.length!=  jacobian.length)  {  [CE]  incomparable  types:  int  and  <null>  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(cols  ==  null  ||  cols.length!=  jacobian.length)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(cols  ==  null  ||  cols.length!=  jacobian.length)  {	  if(rows!=    null    ||    cols.length!=    jacobian.length)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	38	None	replace
78	[BUG]  [BUGGY]  if(cols!=  null  ||  cols.length  ==  jacobian.length)  {  [CE]  incomparable  types:  int  and  <null>  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(cols!=  null  ||  cols.length  ==  jacobian.length)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(cols!=  null  ||  cols.length  ==  jacobian.length)  {	  if(rows!=    null    ||    cols.length!=    jacobian.length)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	38	None	replace
79	[BUG]  [BUGGY]  if(cols  ==  null  ||  cols.length  ==  cols.length)  {  [CE]  incomparable  types:  int  and  <null>  [FE]              FunctionEvaluationException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(cols  ==  null  ||  cols.length  ==  cols.length)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(cols  ==  null  ||  cols.length  ==  cols.length)  {	  if(cols    ==    cols.length)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	57	None	replace
80	[BUG]  [BUGGY]  if(rows  ==  cols.length)  {  [CE]  int  cannot  be  dereferenced  [FE]                FunctionEvaluationException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(rows  ==  cols.length)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(rows  ==  cols.length)  {	  if(cols    ==    cols.length)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	57	None	replace
81	[BUG]  [BUGGY]  if(rows  ==  null  ||  cols!=  jacobian.length)  {  [CE]  incomparable  types:  int  and  <null>  [FE]          AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(rows  ==  null  ||  cols!=  jacobian.length)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(rows  ==  null  ||  cols!=  jacobian.length)  {	  if(rows!=    null    ||    rows!=    jacobian.length)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	82	None	replace
82	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  MultivariateVectorialFunction  function  =  getMultivariateVectorialFunction(i);  if(function!=  null)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  MultivariateVectorialFunction  function  =  getMultivariateVectorialFunction(i);  if(function!=  null)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE  [BUGGY]      if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  MultivariateVectorialFunction  function  =  getMultivariateVectorialFunction(i);  if(function!=  null)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE	  for(int    i    =    0;    i    <    cols;    ++i)    {    MultivariateVectorialFunction    function    =    getMultivariateVectorialFunction(i);    if(function!=    null)    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats    	non-compiled	[CE]  ')'  expected	69	None	replace
83	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  MultivariateVectorialFunction  function  =  getMultivariateVectorialFunction(i);  if(function!=  null)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  MultivariateVectorialFunction  function  =  getMultivariateVectorialFunction(i);  if(function!=  null)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  [BUGGY]      if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  MultivariateVectorialFunction  function  =  getMultivariateVectorialFunction(i);  if(function!=  null)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,	  for(int    i    =    0;    i    <    cols;    ++i)    {    MultivariateVectorialFunction    function    =    getMultivariateVectorialFunction(i);    if(function!=    null)    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
84	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  jacobian  =  jF.value(cols);  for(int  i  =  0;  i  <  cols;  ++i)  {  throw  new  FunctionEvaluationException(point,  Localized  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  jacobian  =  jF.value(cols);  for(int  i  =  0;  i  <  cols;  ++i)  {  throw  new  FunctionEvaluationException(point,  Localized  [BUGGY]      if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  jacobian  =  jF.value(cols);  for(int  i  =  0;  i  <  cols;  ++i)  {  throw  new  FunctionEvaluationException(point,  Localized	  for(int    i    =    0;    i    <    rows;    ++i)    {    double[][]    jacobian    =    jF.value(cols);    for(int    i    =    0;    i    <    cols;    ++i)    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    	non-compiled	[CE]  ')'  expected	12	None	replace
85	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  jacobian  =  jF.value(cols);  for(int  i  =  0;  i  <  cols;  ++i)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIM  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  jacobian  =  jF.value(cols);  for(int  i  =  0;  i  <  cols;  ++i)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIM  [BUGGY]      if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  jacobian  =  jF.value(cols);  for(int  i  =  0;  i  <  cols;  ++i)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIM	  for(int    i    =    0;    i    <    rows;    ++i)    {    double[][]    jacobian    =    jF.value(cols);    for(int    i    =    0;    i    <    cols;    ++i)    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    	non-compiled	[CE]  ')'  expected	12	None	replace
86	[BUG]  [BUGGY]  int  cols  =  jF.columnCount()  -  1;  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  int  cols  =  jF.columnCount()  -  1;  [BUGGY]      if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	int  cols  =  jF.columnCount()  -  1;	  int    cols    =    jF.columnCount();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
87	[BUG]  [BUGGY]  int  cols  =  jF.columnSize();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  int  cols  =  jF.columnSize();  [BUGGY]      if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	int  cols  =  jF.columnSize();	  int    cols    =    jF.columnCount();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
88	[BUG]  [BUGGY]  int  cols  =  jF.columnLength();  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  int  cols  =  jF.columnLength();  [BUGGY]      if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	int  cols  =  jF.columnLength();	  int    cols    =    jF.columnCount();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
89	[BUG]  [BUGGY]  int  cols  =  jF.columnCount()  +  1;  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  int  cols  =  jF.columnCount()  +  1;  [BUGGY]      if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	int  cols  =  jF.columnCount()  +  1;	  int    cols    =    jF.columnCount();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
90	[BUG]  [BUGGY]  cols  =  dataArea.value(cols);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  cols  =  dataArea.value(cols);  [BUGGY]      if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	cols  =  dataArea.value(cols);	  cols    =    jF.value(cols,    dataArea);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
91	[BUG]  [BUGGY]  cols  =  jF.value(cols,  dataArea,  cost);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  cols  =  jF.value(cols,  dataArea,  cost);  [BUGGY]      if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	cols  =  jF.value(cols,  dataArea,  cost);	  cols    =    jF.value(cols,    dataArea);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
92	[BUG]  [BUGGY]  cols  =  jF.value(cols,  jacobian);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  cols  =  jF.value(cols,  jacobian);  [BUGGY]      if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	cols  =  jF.value(cols,  jacobian);	  cols    =    jF.value(cols,    dataArea);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
93	[BUG]  [BUGGY]  cols  =  jF.value(cols,  jacobianEvaluations);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  cols  =  jF.value(cols,  jacobianEvaluations);  [BUGGY]      if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	cols  =  jF.value(cols,  jacobianEvaluations);	  cols    =    jF.value(cols,    dataArea);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
94	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(jF  ==  null)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	add	if(jF  ==  null)  {	  if(jF!=    null)    {    	compilable	  [FE]  AssertionFailedError  	49	1	replace
95	[BUG]  [BUGGY]  if(jF  ==  null)  {  [FE]  AssertionFailedError  [FE]    FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(jF  ==  null)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(jF  ==  null)  {	  if(jF!=    null)    {    	compilable	  [FE]  AssertionFailedError  	49	1	replace
96	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  MultivariateVectorialFunction  function  =(MultivariateVectorialFunction)jF.getValue(i);  if(function!=  null)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  MultivariateVectorialFunction  function  =(MultivariateVectorialFunction)jF.getValue(i);  if(function!=  null)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH  [BUGGY]      if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  MultivariateVectorialFunction  function  =(MultivariateVectorialFunction)jF.getValue(i);  if(function!=  null)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH	  for(int    i    =    0;    i    <    cols;    ++i)    {    MultivariateVectorialFunction    function    =(MultivariateVectorialFunction)jF.getValue(i);    if(function!=    null)    {    throw    new    FunctionEvalu    	non-compiled	[CE]  ')'  expected	52	None	replace
97	[BUG]  [BUGGY]  cols  -=  jacobian.getColumns();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  cols  -=  jacobian.getColumns();  [BUGGY]      if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	cols  -=  jacobian.getColumns();	  cols    =    jacobian.getColumns();    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
98	[BUG]  [BUGGY]  [FE]  FunctionEvaluationException  [FE]    FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(cols  ==  jacobian.length)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	add	if(cols  ==  jacobian.length)  {	  if(jacobian.length    ==    cols)    {    	compilable	  [FE]  FunctionEvaluationException  	68	8	replace
99	[BUG]  [BUGGY]  if(cols  ==  jacobian.length)  {  [FE]  FunctionEvaluationException  [FE]    FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(cols  ==  jacobian.length)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(cols  ==  jacobian.length)  {	  if(jacobian.length    ==    cols)    {    	compilable	  [FE]  FunctionEvaluationException  	68	8	replace
100	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  function  =  getMultivariateVectorialFunction(i);  if(function!=  null)  {  throw  new  FunctionEvaluationException(point,  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  function  =  getMultivariateVectorialFunction(i);  if(function!=  null)  {  throw  new  FunctionEvaluationException(point,  [BUGGY]      if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  function  =  getMultivariateVectorialFunction(i);  if(function!=  null)  {  throw  new  FunctionEvaluationException(point,	  for(int    i    =    0;    i    <    rows;    ++i)    {    MultivariateVectorialFunction    function    =    getMultivariateVectorialFunction(i);    if(function!=    null)    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.D    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
101	[BUG]  [BUGGY]  if(cols!=  null  &&  cols  <  =  jacobian.length)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(cols!=  null  &&  cols  <  =  jacobian.length)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(cols!=  null  &&  cols  <  =  jacobian.length)  {	  if(rows!=    null    &&    cols    <    =    cols)    {    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
102	[BUG]  [BUGGY]  if(cols!=  null  &&  cols  <  =  maxIterations)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(cols!=  null  &&  cols  <  =  maxIterations)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(cols!=  null  &&  cols  <  =  maxIterations)  {	  if(rows!=    null    &&    cols    <    =    cols)    {    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
103	[BUG]  [BUGGY]  if(cols!=  null  &&  cols  <  =  MAX_ITERATIONS)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(cols!=  null  &&  cols  <  =  MAX_ITERATIONS)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(cols!=  null  &&  cols  <  =  MAX_ITERATIONS)  {	  if(rows!=    null    &&    cols    <    =    cols)    {    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
104	[BUG]  [BUGGY]  if(cols!=  null  &&  cols  <  =  cost)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(cols!=  null  &&  cols  <  =  cost)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(cols!=  null  &&  cols  <  =  cost)  {	  if(rows!=    null    &&    cols    <    =    cols)    {    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
105	[BUG]  [BUGGY]  if(cols  ==  cols)  {  if(cols  ==  cols)  {  [CE]  illegal  start  of  expression  [FE]    FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(cols  ==  cols)  {  if(cols  ==  cols)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(cols    ==    cols)    {    if(cols  ==  cols)  {	  	non-compiled	[CE]  illegal  start  of  expression	97	None	add
106	[BUG]  [BUGGY]  if(cols  ==  cols)  {  If(cols  ==  cols)  {  [CE]  ';'  expected  [FE]      FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(cols  ==  cols)  {  If(cols  ==  cols)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(cols    ==    cols)    {    If(cols  ==  cols)  {	  	non-compiled	[CE]  ';'  expected	97	None	add
107	[BUG]  [BUGGY]  if(cols  ==  cols)  {  if(cols!=  cols)  {  [CE]  illegal  start  of  expression  [FE]        FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(cols  ==  cols)  {  if(cols!=  cols)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(cols    ==    cols)    {    if(cols!=  cols)  {	  	non-compiled	[CE]  illegal  start  of  expression	97	None	add
108	[BUG]  [BUGGY]  cols  =  jF.columns()  +  1;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  cols  =  jF.columns()  +  1;  [BUGGY]      if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	cols  =  jF.columns()  +  1;	  cols    =    jF.columns();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
109	[BUG]  [BUGGY]  cols  -=  jF.columns();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  cols  -=  jF.columns();  [BUGGY]      if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	cols  -=  jF.columns();	  cols    =    jF.columns();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
110	[BUG]  [BUGGY]  cols  =  jF.columns(rows);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  cols  =  jF.columns(rows);  [BUGGY]      if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	cols  =  jF.columns(rows);	  cols    =    jF.columns();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
111	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  function  =(MultivariateVectorialFunction)jF.getValue(i);  if(function!=  null)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  function  =(MultivariateVectorialFunction)jF.getValue(i);  if(function!=  null)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats  [BUGGY]      if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  function  =(MultivariateVectorialFunction)jF.getValue(i);  if(function!=  null)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats	  for(int    i    =    0;    i    <    rows;    ++i)    {    MultivariateVectorialFunction    function    =(MultivariateVectorialFunction)jF.getValue(i);    if(function!=    null)    {    throw    new    FunctionEvalu    	non-compiled	[CE]  ')'  expected	88	None	replace
112	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  function  =(MultivariateVectorialFunction)jF.getValue(i);  if(function!=  null)  {  throw  new  FunctionEvaluation  [CE]  '('  or  '['  expected  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  function  =(MultivariateVectorialFunction)jF.getValue(i);  if(function!=  null)  {  throw  new  FunctionEvaluation  [BUGGY]      if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  function  =(MultivariateVectorialFunction)jF.getValue(i);  if(function!=  null)  {  throw  new  FunctionEvaluation	  for(int    i    =    0;    i    <    rows;    ++i)    {    MultivariateVectorialFunction    function    =(MultivariateVectorialFunction)jF.getValue(i);    if(function!=    null)    {    throw    new    FunctionEvalu    	non-compiled	[CE]  '('  or  '['  expected	88	None	replace
113	[BUG]  [BUGGY]  if(rows!=  cols)  {  if(rows!=  cols)  {  [CE]  illegal  start  of  expression  [FE]    FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(rows!=  cols)  {  if(rows!=  cols)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(rows!=    cols)    {    if(rows!=  cols)  {	  	non-compiled	[CE]  illegal  start  of  expression	53	None	add
114	[BUG]  [BUGGY]  if(rows!=  cols)  {  if(rows  >=  cols)  {  [CE]  illegal  start  of  expression  [FE]      FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(rows!=  cols)  {  if(rows  >=  cols)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(rows!=    cols)    {    if(rows  >=  cols)  {	  	non-compiled	[CE]  illegal  start  of  expression	53	None	add
115	[BUG]  [BUGGY]  if(rows!=  cols)  {  If(rows!=  cols)  {  [CE]  ';'  expected  [FE]        FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(rows!=  cols)  {  If(rows!=  cols)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(rows!=    cols)    {    If(rows!=  cols)  {	  	non-compiled	[CE]  ';'  expected	53	None	add
116	[BUG]  [BUGGY]  if(rows!=  cols)  {  if(rows  ==  cols)  {  [CE]  illegal  start  of  expression  [FE]          FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(rows!=  cols)  {  if(rows  ==  cols)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(rows!=    cols)    {    if(rows  ==  cols)  {	  	non-compiled	[CE]  illegal  start  of  expression	53	None	add
117	[BUG]  [BUGGY]  int  cols  =  jacobian.getColumnCount()  -  1;  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  int  cols  =  jacobian.getColumnCount()  -  1;  [BUGGY]      if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	int  cols  =  jacobian.getColumnCount()  -  1;	  int    cols    =    jacobian.getColumnCount();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
118	[BUG]  [BUGGY]  int  cols  =  jf.getColumnCount();  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  int  cols  =  jf.getColumnCount();  [BUGGY]      if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	int  cols  =  jf.getColumnCount();	  int    cols    =    jacobian.getColumnCount();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
119	[BUG]  [BUGGY]  int  cols  =  jacobian.getColumnCount()  +  1;  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  int  cols  =  jacobian.getColumnCount()  +  1;  [BUGGY]      if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	int  cols  =  jacobian.getColumnCount()  +  1;	  int    cols    =    jacobian.getColumnCount();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
120	[BUG]  [BUGGY]  int  cols  =  Math.min(cols.length,  jacobian.length  -  1);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  int  cols  =  Math.min(cols.length,  jacobian.length  -  1);  [BUGGY]      if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	int  cols  =  Math.min(cols.length,  jacobian.length  -  1);	  int    cols    =    Math.min(cols.length,    jacobian.length);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
121	[BUG]  [BUGGY]  int  cols  =  Math.max(cols.length,  jacobian.length);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  int  cols  =  Math.max(cols.length,  jacobian.length);  [BUGGY]      if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	int  cols  =  Math.max(cols.length,  jacobian.length);	  int    cols    =    Math.min(cols.length,    jacobian.length);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
122	[BUG]  [BUGGY]  int  cols  =  Math.max(cols.length,  jacobian.length  -  1);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  int  cols  =  Math.max(cols.length,  jacobian.length  -  1);  [BUGGY]      if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	int  cols  =  Math.max(cols.length,  jacobian.length  -  1);	  int    cols    =    Math.min(cols.length,    jacobian.length);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
123	[BUG]  [BUGGY]  if(rows!=  cols)  {  If(cols!=  jacobian.length)  {  [CE]  ';'  expected  [FE]            FunctionEvaluationException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(rows!=  cols)  {  If(cols!=  jacobian.length)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(rows!=  cols)  {  If(cols!=  jacobian.length)  {	  if(cols!=    jacobian.length)    {    If(cols!=    jacobian.length)    {    	non-compiled	[CE]  ';'  expected	23	None	replace
124	[BUG]  [BUGGY]  if(rows!=  cols.length)  {  If(cols!=  jacobian.length)  {  [CE]  ';'  expected  [FE]              FunctionEvaluationException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(rows!=  cols.length)  {  If(cols!=  jacobian.length)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(rows!=  cols.length)  {  If(cols!=  jacobian.length)  {	  if(cols!=    jacobian.length)    {    If(cols!=    jacobian.length)    {    	non-compiled	[CE]  ';'  expected	23	None	replace
125	[BUG]  [BUGGY]  If(rows!=  jacobian.length)  {  [CE]  ';'  expected  [FE]                FunctionEvaluationException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  If(rows!=  jacobian.length)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	If(rows!=  jacobian.length)  {	  if(cols!=    jacobian.length)    {    If(cols!=    jacobian.length)    {    	non-compiled	[CE]  ';'  expected	23	None	replace
126	[BUG]  [BUGGY]  cols  =  jf.getRows();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  cols  =  jf.getRows();  [BUGGY]      if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	cols  =  jf.getRows();	  cols    =    jf.getColumns();    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
127	[BUG]  [BUGGY]  int  cols  =  Math.min(cols,  cols.length  -  1);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  int  cols  =  Math.min(cols,  cols.length  -  1);  [BUGGY]      if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	int  cols  =  Math.min(cols,  cols.length  -  1);	  int    cols    =    Math.min(cols,    cols.length);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
128	[BUG]  [BUGGY]  int  cols  =  Math.max(cols.length,  cols.length);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  int  cols  =  Math.max(cols.length,  cols.length);  [BUGGY]      if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	int  cols  =  Math.max(cols.length,  cols.length);	  int    cols    =    Math.min(cols,    cols.length);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
129	[BUG]  [BUGGY]  cols  =  f.getRows();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  cols  =  f.getRows();  [BUGGY]      if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	cols  =  f.getRows();	  cols    =    f.getColumns();    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
130	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  jacobian  =  jF.value(cols);  for(int  i  =  0;  i  <  cols;  ++i)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENS  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  jacobian  =  jF.value(cols);  for(int  i  =  0;  i  <  cols;  ++i)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENS  [BUGGY]      if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  jacobian  =  jF.value(cols);  for(int  i  =  0;  i  <  cols;  ++i)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENS	  for(int    i    =    0;    i    <    rows;    ++i)    {    double[][]    jacobian    =    jF.value(cols);    for(int    i    =    0;    i    <    cols;    ++i)    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIM    	non-compiled	[CE]  ')'  expected	90	None	replace
131	[BUG]  [BUGGY]  cols  =  Math.min(cols.length,  cols.length  +  2);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  cols  =  Math.min(cols.length,  cols.length  +  2);  [BUGGY]      if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	cols  =  Math.min(cols.length,  cols.length  +  2);	  cols    =    Math.min(cols.length,    cols.length    +    1);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
132	[BUG]  [BUGGY]  cols  =  Math.min(cols.length,  cols.length)+  1;  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  cols  =  Math.min(cols.length,  cols.length)+  1;  [BUGGY]      if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	cols  =  Math.min(cols.length,  cols.length)+  1;	  cols    =    Math.min(cols.length,    cols.length    +    1);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
133	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  function  =(MultivariateVectorialFunction)jF.getValue(i);  if(function!=  null)  {  throw  new  FunctionEvaluationException  [CE]  '('  or  '['  expected  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  function  =(MultivariateVectorialFunction)jF.getValue(i);  if(function!=  null)  {  throw  new  FunctionEvaluationException  [BUGGY]      if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  function  =(MultivariateVectorialFunction)jF.getValue(i);  if(function!=  null)  {  throw  new  FunctionEvaluationException	  for(int    i    =    0;    i    <    rows;    ++i)    {    MultivariateVectorialFunction    function    =(MultivariateVectorialFunction)jF.getValue(i);    if(function!=    null)    {    throw    new    FunctionEvaluationException(    	non-compiled	[CE]  '('  or  '['  expected	50	None	replace
134	[BUG]  [BUGGY]  if(rows!=  null  ||  cols!=  null)  {  [CE]  incomparable  types:  int  and  <null>  [FE]        AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(rows!=  null  ||  cols!=  null)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(rows!=  null  ||  cols!=  null)  {	  if(rows!=    null    ||    rows!=    null)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	66	None	replace
135	[BUG]  [BUGGY]  if(rows  ==  null  ||  cols!=  null)  {  [CE]  incomparable  types:  int  and  <null>  [FE]          AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(rows  ==  null  ||  cols!=  null)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(rows  ==  null  ||  cols!=  null)  {	  if(rows!=    null    ||    rows!=    null)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	66	None	replace
136	[BUG]  [BUGGY]  if(cols!=  null  ||  rows!=  null)  {  [CE]  incomparable  types:  int  and  <null>  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(cols!=  null  ||  rows!=  null)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(cols!=  null  ||  rows!=  null)  {	  if(rows!=    null    ||    rows!=    null)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	66	None	replace
137	[BUG]  [BUGGY]  if(rows!=  null  ||  cols  ==  null)  {  [CE]  incomparable  types:  int  and  <null>  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(rows!=  null  ||  cols  ==  null)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(rows!=  null  ||  cols  ==  null)  {	  if(rows!=    null    ||    rows!=    null)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	66	None	replace
138	[BUG]  [BUGGY]  if(cols  <  =  cols)  {  [CE]  illegal  start  of  expression  [FE]    FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(cols  <  =  cols)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(cols  <  =  cols)  {	  if(cols    ==    cols)    {    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
139	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          FunctionEvaluationException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(cols!=  cols)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	add	if(cols!=  cols)  {	  if(jacobian.length!=    cols)    {    if(jacobian.length    >=    cols)    {    	compilable	  [FE]  AssertionFailedError  	2	1	replace
140	[BUG]  [BUGGY]  if(cols!=  cols)  {  [FE]  AssertionFailedError  [FE]          FunctionEvaluationException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(cols!=  cols)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(cols!=  cols)  {	  if(jacobian.length!=    cols)    {    if(jacobian.length    >=    cols)    {    	compilable	  [FE]  AssertionFailedError  	2	1	replace
141	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  MultivariateVectorialFunction  function  =(MultivariateVectorialFunction)cols.get(i);  if(function!=  null)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_S  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  MultivariateVectorialFunction  function  =(MultivariateVectorialFunction)cols.get(i);  if(function!=  null)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_S  [BUGGY]      if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  MultivariateVectorialFunction  function  =(MultivariateVectorialFunction)cols.get(i);  if(function!=  null)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_S	  for(int    i    =    0;    i    <    cols;    ++i)    {    MultivariateVectorialFunction    function    =(MultivariateVectorialFunction)cols.get(i);    if(function!=    null)    {    throw    new    FunctionEvaluationException    	non-compiled	[CE]  ')'  expected	72	None	replace
142	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  MultivariateVectorialFunction  function  =(MultivariateVectorialFunction)cols.get(i);  if(function!=  null)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  MultivariateVectorialFunction  function  =(MultivariateVectorialFunction)cols.get(i);  if(function!=  null)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats  [BUGGY]      if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  MultivariateVectorialFunction  function  =(MultivariateVectorialFunction)cols.get(i);  if(function!=  null)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats	  for(int    i    =    0;    i    <    cols;    ++i)    {    MultivariateVectorialFunction    function    =(MultivariateVectorialFunction)cols.get(i);    if(function!=    null)    {    throw    new    FunctionEvaluationException    	non-compiled	[CE]  ')'  expected	72	None	replace
143	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  MultivariateVectorialFunction  function  =(MultivariateVectorialFunction)cols.get(i);  if(function!=  null)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  MultivariateVectorialFunction  function  =(MultivariateVectorialFunction)cols.get(i);  if(function!=  null)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH  [BUGGY]      if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  MultivariateVectorialFunction  function  =(MultivariateVectorialFunction)cols.get(i);  if(function!=  null)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH	  for(int    i    =    0;    i    <    cols;    ++i)    {    MultivariateVectorialFunction    function    =(MultivariateVectorialFunction)cols.get(i);    if(function!=    null)    {    throw    new    FunctionEvaluationException    	non-compiled	[CE]  ')'  expected	72	None	replace
144	[BUG]  [BUGGY]  int  cols  =  Math.min(cols.length,  cols.length  -  2);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  int  cols  =  Math.min(cols.length,  cols.length  -  2);  [BUGGY]      if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	int  cols  =  Math.min(cols.length,  cols.length  -  2);	  int    cols    =    Math.min(cols.length,    cols.length    -    1);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
145	[BUG]  [BUGGY]  if(jF!=  null)  {  if(jF!=  null)  {  [CE]  illegal  start  of  expression  [FE]    FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(jF!=  null)  {  if(jF!=  null)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(jF!=    null)    {    if(jF!=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	48	None	add
146	[BUG]  [BUGGY]  if(jF!=  null)  {  if(jF  ==  null)  {  [CE]  illegal  start  of  expression  [FE]      FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(jF!=  null)  {  if(jF  ==  null)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(jF!=    null)    {    if(jF  ==  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	48	None	add
147	[BUG]  [BUGGY]  if(jF!=  null)  {  If(jF!=  null)  {  [CE]  ';'  expected  [FE]        FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(jF!=  null)  {  If(jF!=  null)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(jF!=    null)    {    If(jF!=  null)  {	  	non-compiled	[CE]  ';'  expected	48	None	add
148	[BUG]  [BUGGY]  if(jacobian!=  null  &&  cols!=  rows)  {  if(jacobian!=  null  &&  cols!=  rows)  {  [CE]  illegal  start  of  expression  [FE]    FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(jacobian!=  null  &&  cols!=  rows)  {  if(jacobian!=  null  &&  cols!=  rows)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(jacobian!=    null    &&    cols!=    rows)    {    if(jacobian!=  null  &&  cols!=  rows)  {	  	non-compiled	[CE]  illegal  start  of  expression	94	None	add
149	[BUG]  [BUGGY]  if(jacobian!=  null  &&  cols!=  rows)  {  if(jacobian!=  null  &&  cols  >=  rows)  {  [CE]  illegal  start  of  expression  [FE]      FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(jacobian!=  null  &&  cols!=  rows)  {  if(jacobian!=  null  &&  cols  >=  rows)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(jacobian!=    null    &&    cols!=    rows)    {    if(jacobian!=  null  &&  cols  >=  rows)  {	  	non-compiled	[CE]  illegal  start  of  expression	94	None	add
150	[BUG]  [BUGGY]  if(jacobian!=  null  &&  cols!=  rows)  {  If(jacobian!=  null  &&  cols!=  rows)  {  [CE]  ';'  expected  [FE]        FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(jacobian!=  null  &&  cols!=  rows)  {  If(jacobian!=  null  &&  cols!=  rows)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(jacobian!=    null    &&    cols!=    rows)    {    If(jacobian!=  null  &&  cols!=  rows)  {	  	non-compiled	[CE]  ';'  expected	94	None	add
151	[BUG]  [BUGGY]  if(jacobian!=  null  &&  cols!=  rows)  {  if(jacobian  ==  null  &&  cols!=  rows)  {  [CE]  illegal  start  of  expression  [FE]          FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(jacobian!=  null  &&  cols!=  rows)  {  if(jacobian  ==  null  &&  cols!=  rows)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(jacobian!=    null    &&    cols!=    rows)    {    if(jacobian  ==  null  &&  cols!=  rows)  {	  	non-compiled	[CE]  illegal  start  of  expression	94	None	add
152	[BUG]  [BUGGY]  cols  =  jF.value(cols,  0,  DEFAULT_MAX_ITERATIONS);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  cols  =  jF.value(cols,  0,  DEFAULT_MAX_ITERATIONS);  [BUGGY]      if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	cols  =  jF.value(cols,  0,  DEFAULT_MAX_ITERATIONS);	  cols    =    jF.value(cols,    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
153	[BUG]  [BUGGY]  cols  =  jF.value(cols,  DEFAULT_MAX_ITERATIONS,  cols);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  cols  =  jF.value(cols,  DEFAULT_MAX_ITERATIONS,  cols);  [BUGGY]      if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	cols  =  jF.value(cols,  DEFAULT_MAX_ITERATIONS,  cols);	  cols    =    jF.value(cols,    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
154	[BUG]  [BUGGY]  cols  =  jF.value(cols,  DEFAULT_MAX_ITERATIONS,  rows);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  cols  =  jF.value(cols,  DEFAULT_MAX_ITERATIONS,  rows);  [BUGGY]      if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	cols  =  jF.value(cols,  DEFAULT_MAX_ITERATIONS,  rows);	  cols    =    jF.value(cols,    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
155	[BUG]  [BUGGY]  cols  =  jF.value(cols,  DEFAULT_MAX_ITERATIONS,  row);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  cols  =  jF.value(cols,  DEFAULT_MAX_ITERATIONS,  row);  [BUGGY]      if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	cols  =  jF.value(cols,  DEFAULT_MAX_ITERATIONS,  row);	  cols    =    jF.value(cols,    DEFAULT_MAX_ITERATIONS);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
156	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  MultivariateVectorialFunction  function  =(MultivariateVectorialFunction)jF.getValue(i);  if(function!=  null)  {  throw  new  Function  [CE]  '('  or  '['  expected  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  MultivariateVectorialFunction  function  =(MultivariateVectorialFunction)jF.getValue(i);  if(function!=  null)  {  throw  new  Function  [BUGGY]      if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  MultivariateVectorialFunction  function  =(MultivariateVectorialFunction)jF.getValue(i);  if(function!=  null)  {  throw  new  Function	  for(int    i    =    0;    i    <    cols;    ++i)    {    MultivariateVectorialFunction    function    =(MultivariateVectorialFunction)jF.getValue(i);    if(function!=    null)    {    throw    new    Function    	non-compiled	[CE]  '('  or  '['  expected	51	None	replace
157	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  MultivariateVectorialFunction  function  =(MultivariateVectorialFunction)jF.getValue(i);  if(function  ==  null)  {  throw  new  Function  [CE]  '('  or  '['  expected  [FE]                        AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  MultivariateVectorialFunction  function  =(MultivariateVectorialFunction)jF.getValue(i);  if(function  ==  null)  {  throw  new  Function  [BUGGY]      if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  MultivariateVectorialFunction  function  =(MultivariateVectorialFunction)jF.getValue(i);  if(function  ==  null)  {  throw  new  Function	  for(int    i    =    0;    i    <    cols;    ++i)    {    MultivariateVectorialFunction    function    =(MultivariateVectorialFunction)jF.getValue(i);    if(function!=    null)    {    throw    new    Function    	non-compiled	[CE]  '('  or  '['  expected	51	None	replace
158	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  function  =(MultivariateVectorialFunction)jF.getValue(i);  if(function  ==  null)  {  throw  new  Function  [CE]  '('  or  '['  expected  [FE]                          AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  function  =(MultivariateVectorialFunction)jF.getValue(i);  if(function  ==  null)  {  throw  new  Function  [BUGGY]      if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  function  =(MultivariateVectorialFunction)jF.getValue(i);  if(function  ==  null)  {  throw  new  Function	  for(int    i    =    0;    i    <    cols;    ++i)    {    MultivariateVectorialFunction    function    =(MultivariateVectorialFunction)jF.getValue(i);    if(function!=    null)    {    throw    new    Function    	non-compiled	[CE]  '('  or  '['  expected	51	None	replace
159	[BUG]  [BUGGY]  if(rows  ==  cols)  {  if(rows  ==  cols)  {  [CE]  illegal  start  of  expression  [FE]    FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(rows  ==  cols)  {  if(rows  ==  cols)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(rows    ==    cols)    {    if(rows  ==  cols)  {	  	non-compiled	[CE]  illegal  start  of  expression	64	None	add
160	[BUG]  [BUGGY]  if(rows  ==  cols)  {  If(rows  ==  cols)  {  [CE]  ';'  expected  [FE]      FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(rows  ==  cols)  {  If(rows  ==  cols)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(rows    ==    cols)    {    If(rows  ==  cols)  {	  	non-compiled	[CE]  ';'  expected	64	None	add
161	[BUG]  [BUGGY]  if(rows  ==  cols)  {  if(rows!=  cols)  {  [CE]  illegal  start  of  expression  [FE]        FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(rows  ==  cols)  {  if(rows!=  cols)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(rows    ==    cols)    {    if(rows!=  cols)  {	  	non-compiled	[CE]  illegal  start  of  expression	64	None	add
162	[BUG]  [BUGGY]  cols  =  Math.min(cols,  cols.length  -  1);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  cols  =  Math.min(cols,  cols.length  -  1);  [BUGGY]      if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	cols  =  Math.min(cols,  cols.length  -  1);	  cols    =    Math.min(cols,    cols.length);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
163	[BUG]  [BUGGY]  cols  =  Math.min(cols,  cols.length  +  1);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  cols  =  Math.min(cols,  cols.length  +  1);  [BUGGY]      if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	cols  =  Math.min(cols,  cols.length  +  1);	  cols    =    Math.min(cols,    cols.length);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
164	[BUG]  [BUGGY]  if(rows!=  0)  {  if(rows!=  0)  {  [CE]  illegal  start  of  expression  [FE]    FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(rows!=  0)  {  if(rows!=  0)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(rows!=    0)    {    if(rows!=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	79	None	add
165	[BUG]  [BUGGY]  if(rows!=  0)  {  if(rows  >=  0)  {  [CE]  illegal  start  of  expression  [FE]      FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(rows!=  0)  {  if(rows  >=  0)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(rows!=    0)    {    if(rows  >=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	79	None	add
166	[BUG]  [BUGGY]  if(rows!=  0)  {  If(rows!=  0)  {  [CE]  ';'  expected  [FE]        FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(rows!=  0)  {  If(rows!=  0)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(rows!=    0)    {    If(rows!=  0)  {	  	non-compiled	[CE]  ';'  expected	79	None	add
167	[BUG]  [BUGGY]  if(cols!=  null  ||  cols.length  ==  cols.length)  {  [CE]  incomparable  types:  int  and  <null>  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(cols!=  null  ||  cols.length  ==  cols.length)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(cols!=  null  ||  cols.length  ==  cols.length)  {	  if(cols!=    null    ||    cols.length!=    rows)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	37	None	replace
168	[BUG]  [BUGGY]  if(rows!=  cols)  {  If(jacobian.length!=  cols)  {  [CE]  ';'  expected  [FE]            FunctionEvaluationException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(rows!=  cols)  {  If(jacobian.length!=  cols)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(rows!=  cols)  {  If(jacobian.length!=  cols)  {	  if(jacobian.length!=    cols)    {    If(jacobian.length!=    cols)    {    	non-compiled	[CE]  ';'  expected	3	None	replace
169	[BUG]  [BUGGY]  if(cols!=  jacobian.length)  {  If(jacobian.length!=  cols)  {  [CE]  ';'  expected  [FE]              FunctionEvaluationException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(cols!=  jacobian.length)  {  If(jacobian.length!=  cols)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(cols!=  jacobian.length)  {  If(jacobian.length!=  cols)  {	  if(jacobian.length!=    cols)    {    If(jacobian.length!=    cols)    {    	non-compiled	[CE]  ';'  expected	3	None	replace
170	[BUG]  [BUGGY]  if(cols!=  cols)  {  If(jacobian.length!=  cols)  {  [CE]  ';'  expected  [FE]                FunctionEvaluationException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(cols!=  cols)  {  If(jacobian.length!=  cols)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(cols!=  cols)  {  If(jacobian.length!=  cols)  {	  if(jacobian.length!=    cols)    {    If(jacobian.length!=    cols)    {    	non-compiled	[CE]  ';'  expected	3	None	replace
171	[BUG]  [BUGGY]  if(ji  ==  null)  {  [CE]  cannot  find  symbol  ji  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(ji  ==  null)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(ji  ==  null)  {	  if(ji!=    null)    {    	non-compiled	[CE]  cannot  find  symbol  ji	84	None	replace
172	[BUG]  [BUGGY]  if(rows!=  null)  {  If(rows!=  jacobian.length)  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(rows!=  null)  {  If(rows!=  jacobian.length)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(rows!=  null)  {  If(rows!=  jacobian.length)  {	  if(rows!=    jacobian.length)    {    If(rows!=    jacobian.length)    {    	non-compiled	[CE]  ';'  expected	15	None	replace
173	[BUG]  [BUGGY]  if(rows!=  null)  {  If(rows!=  null  ||  rows!=  null)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(rows!=  null)  {  If(rows!=  null  ||  rows!=  null)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(rows!=  null)  {  If(rows!=  null  ||  rows!=  null)  {	  if(rows!=    jacobian.length)    {    If(rows!=    jacobian.length)    {    	non-compiled	[CE]  ';'  expected	15	None	replace
174	[BUG]  [BUGGY]  If(rows!=  null  ||  rows!=  null)  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  If(rows!=  null  ||  rows!=  null)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	If(rows!=  null  ||  rows!=  null)  {	  if(rows!=    jacobian.length)    {    If(rows!=    jacobian.length)    {    	non-compiled	[CE]  ';'  expected	15	None	replace
175	[BUG]  [BUGGY]  if(cols!=  null)  {  If(rows!=  jacobian.length)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(cols!=  null)  {  If(rows!=  jacobian.length)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(cols!=  null)  {  If(rows!=  jacobian.length)  {	  if(rows!=    jacobian.length)    {    If(rows!=    jacobian.length)    {    	non-compiled	[CE]  ';'  expected	15	None	replace
176	[BUG]  [BUGGY]  [FE]  FunctionEvaluationException  [FE]          FunctionEvaluationException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(rows  <  cols)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	add	if(rows  <  cols)  {	  if(cols!=    jacobian.length)    {    if(cols    >=    jacobian.length)    {    	compilable	  [FE]  FunctionEvaluationException  	22	3	replace
177	[BUG]  [BUGGY]  if(rows  <  cols)  {  [FE]  FunctionEvaluationException  [FE]          FunctionEvaluationException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(rows  <  cols)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(rows  <  cols)  {	  if(cols!=    jacobian.length)    {    if(cols    >=    jacobian.length)    {    	compilable	  [FE]  FunctionEvaluationException  	22	3	replace
178	[BUG]  [BUGGY]  if(jacobian!=  null)  {  if(jacobian!=  null)  {  [CE]  illegal  start  of  expression  [FE]    FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(jacobian!=  null)  {  if(jacobian!=  null)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(jacobian!=    null)    {    if(jacobian!=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	46	None	add
179	[BUG]  [BUGGY]  if(jacobian!=  null)  {  if(jacobian  ==  null)  {  [CE]  illegal  start  of  expression  [FE]      FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(jacobian!=  null)  {  if(jacobian  ==  null)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(jacobian!=    null)    {    if(jacobian  ==  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	46	None	add
180	[BUG]  [BUGGY]  if(jacobian!=  null)  {  If(jacobian!=  null)  {  [CE]  ';'  expected  [FE]        FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(jacobian!=  null)  {  If(jacobian!=  null)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(jacobian!=    null)    {    If(jacobian!=  null)  {	  	non-compiled	[CE]  ';'  expected	46	None	add
181	[BUG]  [BUGGY]  if(cols  ==  null  ||  cols.length  <  2)  {  [CE]  incomparable  types:  int  and  <null>  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(cols  ==  null  ||  cols.length  <  2)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(cols  ==  null  ||  cols.length  <  2)  {	  if(cols    ==    null)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	63	None	replace
182	[BUG]  [BUGGY]  If(jacobian.length!=  cols)  {  [CE]  ';'  expected  [FE]            FunctionEvaluationException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  If(jacobian.length!=  cols)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	If(jacobian.length!=  cols)  {	  if(jacobian.length!=    cols)    {    If(jacobian.length!=    cols)    {    	non-compiled	[CE]  ';'  expected	3	None	replace
183	[BUG]  [BUGGY]  If(jacobian.length!=  rows)  {  [CE]  ';'  expected  [FE]              FunctionEvaluationException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  If(jacobian.length!=  rows)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	If(jacobian.length!=  rows)  {	  if(jacobian.length!=    cols)    {    If(jacobian.length!=    cols)    {    	non-compiled	[CE]  ';'  expected	3	None	replace
184	[BUG]  [BUGGY]  if(cols!=  null  &&  cols.length  >=  cols.length)  {  [CE]  incomparable  types:  int  and  <null>  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(cols!=  null  &&  cols.length  >=  cols.length)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(cols!=  null  &&  cols.length  >=  cols.length)  {	  if(cols!=    null    &&    jacobian.length!=    cols.length)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	71	None	replace
185	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  function  =(MultivariateVectorialFunction)jF.getValue(i);  if(function!=  null)  {  throw  new  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  function  =(MultivariateVectorialFunction)jF.getValue(i);  if(function!=  null)  {  throw  new  [BUGGY]      if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  function  =(MultivariateVectorialFunction)jF.getValue(i);  if(function!=  null)  {  throw  new	  for(int    i    =    0;    i    <    rows;    ++i)    {    MultivariateVectorialFunction    function    =(MultivariateVectorialFunction)jF.getValue(i);    if(function!=    null)    {    throw    new    FunctionEvalu    	non-compiled	[CE]  <identifier>  expected	88	None	replace
186	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  function  =(MultivariateVectorialFunction)jF.getValue(i);  if(function!=  null)  {  throw  new  FunctionE  [CE]  '('  or  '['  expected  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  function  =(MultivariateVectorialFunction)jF.getValue(i);  if(function!=  null)  {  throw  new  FunctionE  [BUGGY]      if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  function  =(MultivariateVectorialFunction)jF.getValue(i);  if(function!=  null)  {  throw  new  FunctionE	  for(int    i    =    0;    i    <    rows;    ++i)    {    MultivariateVectorialFunction    function    =(MultivariateVectorialFunction)jF.getValue(i);    if(function!=    null)    {    throw    new    FunctionEvalu    	non-compiled	[CE]  '('  or  '['  expected	88	None	replace
187	[BUG]  [BUGGY]  if(jacobian!=  null  ||  cols.length!=  jacobian.length)  {  [CE]  int  cannot  be  dereferenced  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(jacobian!=  null  ||  cols.length!=  jacobian.length)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(jacobian!=  null  ||  cols.length!=  jacobian.length)  {	  if(rows!=    null    ||    cols.length!=    jacobian.length)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	38	None	replace
188	[BUG]  [BUGGY]  cols  =  jF.value(dataArea,  cols);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  cols  =  jF.value(dataArea,  cols);  [BUGGY]      if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	cols  =  jF.value(dataArea,  cols);	  cols    =    jF.value(cols,    dataArea);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
189	[BUG]  [BUGGY]  if(rows!=  null  &&  rows!=  null)  {  [CE]  incomparable  types:  int  and  <null>  [FE]        AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(rows!=  null  &&  rows!=  null)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(rows!=  null  &&  rows!=  null)  {	  if(rows!=    null    ||    rows!=    null)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	66	None	replace
190	[BUG]  [BUGGY]  if(jacobian!=  null  ||  rows!=  null)  {  [CE]  incomparable  types:  int  and  <null>  [FE]          AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(jacobian!=  null  ||  rows!=  null)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(jacobian!=  null  ||  rows!=  null)  {	  if(rows!=    null    ||    rows!=    null)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	66	None	replace
191	[BUG]  [BUGGY]  cols  =  jF.value(cols,  col);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  cols  =  jF.value(cols,  col);  [BUGGY]      if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	cols  =  jF.value(cols,  col);	  cols    =    jF.value(cols,    value);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
192	[BUG]  [BUGGY]  if(jcobian  ==  null)  {  [CE]  cannot  find  symbol  jcobian  [FE]    FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(jcobian  ==  null)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(jcobian  ==  null)  {	  if(jacobian!=    null)    {    	non-compiled	[CE]  cannot  find  symbol  jcobian	47	None	replace
193	[BUG]  [BUGGY]  cols  =  jF.getColumns(columns);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  cols  =  jF.getColumns(columns);  [BUGGY]      if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	cols  =  jF.getColumns(columns);	  cols    =    jF.getRows();    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
194	[BUG]  [BUGGY]  if(cols!=  null  &&  jacobian.length!=  columns)  {  [CE]  incomparable  types:  int  and  <null>  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(cols!=  null  &&  jacobian.length!=  columns)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(cols!=  null  &&  jacobian.length!=  columns)  {	  if(rows!=    null    &&    jacobian.length!=    cols)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	60	None	replace
195	[BUG]  [BUGGY]  cols  =  jf.getColumns(columns);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  cols  =  jf.getColumns(columns);  [BUGGY]      if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	cols  =  jf.getColumns(columns);	  cols    =    jf.getColumns();    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
196	[BUG]  [BUGGY]  if(rows  ==  cols)  {  int  rows  =  Math.min(cols.length,  cols);  [CE]  illegal  start  of  expression  [FE]    FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(rows  ==  cols)  {  int  rows  =  Math.min(cols.length,  cols);  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(rows    ==    cols)    {    int  rows  =  Math.min(cols.length,  cols);	  	non-compiled	[CE]  illegal  start  of  expression	64	None	add
197	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  jacobian  =  jF.value(cols);  for(int  i  =  0;  i  <  cols;  ++i)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMP  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  jacobian  =  jF.value(cols);  for(int  i  =  0;  i  <  cols;  ++i)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMP  [BUGGY]      if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  jacobian  =  jF.value(cols);  for(int  i  =  0;  i  <  cols;  ++i)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMP	  for(int    i    =    0;    i    <    rows;    ++i)    {    double[][]    jacobian    =    jF.value(cols);    for(int    i    =    0;    i    <    cols;    ++i)    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats    	non-compiled	[CE]  ')'  expected	10	None	replace
198	[BUG]  [BUGGY]  if(cols!=  null  ||  cols.length!=  0)  {  [CE]  incomparable  types:  int  and  <null>  [FE]          FunctionEvaluationException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(cols!=  null  ||  cols.length!=  0)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(cols!=  null  ||  cols.length!=  0)  {	  if(rows!=    cols.length)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	55	None	replace
199	[BUG]  [BUGGY]  if(jacobian!=  null  ||  cols.length!=  cols.length)  {  [CE]  int  cannot  be  dereferenced  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(jacobian!=  null  ||  cols.length!=  cols.length)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(jacobian!=  null  ||  cols.length!=  cols.length)  {	  if(jacobian!=    null    ||    cols.length!=    rows)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	92	None	replace
200	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  function  =(MultivariateVectorialFunction)cols.get(i);  if(function  ==  null)  {  throw  new  FunctionEvalu  [CE]  '('  or  '['  expected  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  function  =(MultivariateVectorialFunction)cols.get(i);  if(function  ==  null)  {  throw  new  FunctionEvalu  [BUGGY]      if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  function  =(MultivariateVectorialFunction)cols.get(i);  if(function  ==  null)  {  throw  new  FunctionEvalu	  for(int    i    =    0;    i    <    rows;    ++i)    {    MultivariateVectorialFunction    function    =(MultivariateVectorialFunction)cols.get(i);    if(function    ==    null)    {    throw    new    FunctionEvaluationException(    	non-compiled	[CE]  '('  or  '['  expected	6	None	replace
201	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  function  =(MultivariateVectorialFunction)cols.get(i);  if(function  ==  null)  {  throw  new  FunctionEvaluationException(  [CE]  '.class'  expected  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  For(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  function  =(MultivariateVectorialFunction)cols.get(i);  if(function  ==  null)  {  throw  new  FunctionEvaluationException(  [BUGGY]      if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	For(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  function  =(MultivariateVectorialFunction)cols.get(i);  if(function  ==  null)  {  throw  new  FunctionEvaluationException(	  for(int    i    =    0;    i    <    rows;    ++i)    {    MultivariateVectorialFunction    function    =(MultivariateVectorialFunction)cols.get(i);    if(function    ==    null)    {    throw    new    FunctionEvaluationException(    	non-compiled	[CE]  '.class'  expected	6	None	replace
202	[BUG]  [BUGGY]  [FE]  FunctionEvaluationException  [FE]    FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(jacobian!=  null  &&  cols!=  0)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	add	if(jacobian!=  null  &&  cols!=  0)  {	  if(jacobian!=    null    &&    cols!=    rows)    {    	compilable	  [FE]  FunctionEvaluationException  	95	16	replace
203	[BUG]  [BUGGY]  if(jacobian!=  null  &&  cols!=  0)  {  [FE]  FunctionEvaluationException  [FE]    FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(jacobian!=  null  &&  cols!=  0)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(jacobian!=  null  &&  cols!=  0)  {	  if(jacobian!=    null    &&    cols!=    rows)    {    	compilable	  [FE]  FunctionEvaluationException  	95	16	replace
204	[BUG]  [BUGGY]  if(cols!=  null  &&  cols!=  0)  {  [CE]  incomparable  types:  int  and  <null>  [FE]      FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(cols!=  null  &&  cols!=  0)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(cols!=  null  &&  cols!=  0)  {	  if(jacobian!=    null    &&    cols!=    rows)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	95	None	replace
205	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  jacobian  =  jF.value(cols);  for(int  i  =  0;  i  <  cols;  ++i)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  jacobian  =  jF.value(cols);  for(int  i  =  0;  i  <  cols;  ++i)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.  [BUGGY]      if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  double[][]  jacobian  =  jF.value(cols);  for(int  i  =  0;  i  <  cols;  ++i)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.	  for(int    i    =    0;    i    <    rows;    ++i)    {    double[][]    jacobian    =    jF.value(cols);    for(int    i    =    0;    i    <    cols;    ++i)    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.D    	non-compiled	[CE]  <identifier>  expected	40	None	replace
206	[BUG]  [BUGGY]  int  rows  =  Math.min(residualsWeights,  cols);  for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  function  =(MultivariateVectorialFunction)cols.get(i  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  int  rows  =  Math.min(residualsWeights,  cols);  for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  function  =(MultivariateVectorialFunction)cols.get(i  [BUGGY]      if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	int  rows  =  Math.min(residualsWeights,  cols);  for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  function  =(MultivariateVectorialFunction)cols.get(i	  int    rows    =    Math.min(residualsWeights,    jacobian.length);    for(int    i    =    0;    i    <    cols;    ++i)    {    MultivariateVectorialFunction    function    =(MultivariateVectorialFunction)cols.get(i);    	non-compiled	[CE]  ')'  expected	91	None	replace
207	[BUG]  [BUGGY]  if(rows!=  cols)  {  If(rows!=  jacobian.length)  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(rows!=  cols)  {  If(rows!=  jacobian.length)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(rows!=  cols)  {  If(rows!=  jacobian.length)  {	  if(rows!=    jacobian.length)    {    If(rows!=    jacobian.length)    {    	non-compiled	[CE]  ';'  expected	15	None	replace
208	[BUG]  [BUGGY]  If(rows!=  null)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  If(rows!=  null)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	If(rows!=  null)  {	  if(rows!=    jacobian.length)    {    If(rows!=    jacobian.length)    {    	non-compiled	[CE]  ';'  expected	15	None	replace
209	[BUG]  [BUGGY]  if(rows!=  null)  {  If(rows!=  null)  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(rows!=  null)  {  If(rows!=  null)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(rows!=  null)  {  If(rows!=  null)  {	  if(rows!=    jacobian.length)    {    If(rows!=    jacobian.length)    {    	non-compiled	[CE]  ';'  expected	15	None	replace
210	[BUG]  [BUGGY]  int  cols  =  Math.min(cols.length,  cols);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  int  cols  =  Math.min(cols.length,  cols);  [BUGGY]      if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	int  cols  =  Math.min(cols.length,  cols);	  int    cols    =    Math.min(cols.length,    row);    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
211	[BUG]  [BUGGY]  int  cols  =  Math.min(cols.length,  jF.length);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  int  cols  =  Math.min(cols.length,  jF.length);  [BUGGY]      if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	int  cols  =  Math.min(cols.length,  jF.length);	  int    cols    =    Math.min(cols.length,    row);    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
212	[BUG]  [BUGGY]  cols  =  jF.columns()  *  cols;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  cols  =  jF.columns()  *  cols;  [BUGGY]      if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	cols  =  jF.columns()  *  cols;	  cols    =    jF.columns();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
213	[BUG]  [BUGGY]  if(cols!=  null  &&  cols  <  =  1)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(cols!=  null  &&  cols  <  =  1)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(cols!=  null  &&  cols  <  =  1)  {	  if(rows!=    null    &&    cols    <    =    cols)    {    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
214	[BUG]  [BUGGY]  [FE]  FunctionEvaluationException  [FE]    FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(rows  >=  0)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	add	if(rows  >=  0)  {	  if(rows!=    0)    {    	compilable	  [FE]  FunctionEvaluationException  	80	16	replace
215	[BUG]  [BUGGY]  if(rows  >=  0)  {  [FE]  FunctionEvaluationException  [FE]    FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(rows  >=  0)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(rows  >=  0)  {	  if(rows!=    0)    {    	compilable	  [FE]  FunctionEvaluationException  	80	16	replace
216	[BUG]  [BUGGY]  if(rows!=  null  &&  cols  >  1)  {  [CE]  incomparable  types:  int  and  <null>  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(rows!=  null  &&  cols  >  1)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(rows!=  null  &&  cols  >  1)  {	  if(rows!=    null    &&    cols    >    0)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	85	None	replace
217	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(cols  >  cols)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	add	if(cols  >  cols)  {	  if(cols    ==    cols)    {    	compilable	  [FE]  AssertionFailedError  	98	1	replace
218	[BUG]  [BUGGY]  if(cols  >  cols)  {  [FE]  AssertionFailedError  [FE]    FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(cols  >  cols)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(cols  >  cols)  {	  if(cols    ==    cols)    {    	compilable	  [FE]  AssertionFailedError  	98	1	replace
219	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(cols  <  cols)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	add	if(cols  <  cols)  {	  if(cols    ==    cols)    {    	compilable	  [FE]  AssertionFailedError  	98	1	replace
220	[BUG]  [BUGGY]  if(cols  <  cols)  {  [FE]  AssertionFailedError  [FE]      FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(cols  <  cols)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(cols  <  cols)  {	  if(cols    ==    cols)    {    	compilable	  [FE]  AssertionFailedError  	98	1	replace
221	[BUG]  [BUGGY]  if(rows!=  0)  {  for(int  i  =  0;  i  <  cols;  ++i)  {  final  MultivariateVectorialFunction  function  =(MultivariateVectorialFunction)jF.getValue(i);  if(function!=  null)  {  [CE]  illegal  start  of  expression  [FE]    FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(rows!=  0)  {  for(int  i  =  0;  i  <  cols;  ++i)  {  final  MultivariateVectorialFunction  function  =(MultivariateVectorialFunction)jF.getValue(i);  if(function!=  null)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(rows!=    0)    {    for(int  i  =  0;  i  <  cols;  ++i)  {  final  MultivariateVectorialFunction  function  =(MultivariateVectorialFunction)jF.getValue(i);  if(function!=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	79	None	add
222	[BUG]  [BUGGY]  if(rows!=  0)  {  for(int  i  =  0;  i  <  cols;  ++i)  {  final  MultivariateVectorialFunction  function  =(MultivariateVectorialFunction)jF.value(i);  if(rows!=  0)  {  [CE]  illegal  start  of  expression  [FE]      FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(rows!=  0)  {  for(int  i  =  0;  i  <  cols;  ++i)  {  final  MultivariateVectorialFunction  function  =(MultivariateVectorialFunction)jF.value(i);  if(rows!=  0)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(rows!=    0)    {    for(int  i  =  0;  i  <  cols;  ++i)  {  final  MultivariateVectorialFunction  function  =(MultivariateVectorialFunction)jF.value(i);  if(rows!=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	79	None	add
223	[BUG]  [BUGGY]  if(rows!=  0)  {  for(int  i  =  0;  i  <  cols;  ++i)  {  final  MultivariateVectorialFunction  function  =(MultivariateVectorialFunction)cols.get(i);  if(function!=  null)  {  [CE]  illegal  start  of  expression  [FE]        FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(rows!=  0)  {  for(int  i  =  0;  i  <  cols;  ++i)  {  final  MultivariateVectorialFunction  function  =(MultivariateVectorialFunction)cols.get(i);  if(function!=  null)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(rows!=    0)    {    for(int  i  =  0;  i  <  cols;  ++i)  {  final  MultivariateVectorialFunction  function  =(MultivariateVectorialFunction)cols.get(i);  if(function!=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	79	None	add
224	[BUG]  [BUGGY]  if(cols  ==  cols)  {  int  cols  =  Math.min(cols.length,  cols);  [CE]  illegal  start  of  expression  [FE]    FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(cols  ==  cols)  {  int  cols  =  Math.min(cols.length,  cols);  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(cols    ==    cols)    {    int  cols  =  Math.min(cols.length,  cols);	  	non-compiled	[CE]  illegal  start  of  expression	97	None	add
225	[BUG]  [BUGGY]  if(jacobian.length  ==  cols)  {  for(int  i  =  0;  i  <  cols;  ++i)  {  if(jacobian.length  ==  cols)  {  [CE]  illegal  start  of  expression  [FE]    FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(jacobian.length  ==  cols)  {  for(int  i  =  0;  i  <  cols;  ++i)  {  if(jacobian.length  ==  cols)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(jacobian.length    ==    cols)    {    for(int  i  =  0;  i  <  cols;  ++i)  {  if(jacobian.length  ==  cols)  {	  	non-compiled	[CE]  illegal  start  of  expression	67	None	add
226	[BUG]  [BUGGY]  if(jacobian.length  ==  cols)  {  for(int  i  =  0;  i  <  cols;  ++i)  {  if(jacobian[i]  ==  cols)  {  [CE]  illegal  start  of  expression  [FE]      FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(jacobian.length  ==  cols)  {  for(int  i  =  0;  i  <  cols;  ++i)  {  if(jacobian[i]  ==  cols)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(jacobian.length    ==    cols)    {    for(int  i  =  0;  i  <  cols;  ++i)  {  if(jacobian[i]  ==  cols)  {	  	non-compiled	[CE]  illegal  start  of  expression	67	None	add
227	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  function  =  getMultivariateVectorialFunction(i);  if(function!=  null)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  function  =  getMultivariateVectorialFunction(i);  if(function!=  null)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS  [BUGGY]      if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  function  =  getMultivariateVectorialFunction(i);  if(function!=  null)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS	  for(int    i    =    0;    i    <    rows;    ++i)    {    MultivariateVectorialFunction    function    =    getMultivariateVectorialFunction(i);    if(function!=    null)    {    throw    new    FunctionEvaluationException(point,    LocalizedFormat    	non-compiled	[CE]  ')'  expected	45	None	replace
228	[BUG]  [BUGGY]  if(cols!=  null  &&  cols!=  cols)  {  [CE]  incomparable  types:  int  and  <null>  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(cols!=  null  &&  cols!=  cols)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(cols!=  null  &&  cols!=  cols)  {	  if(cols!=    null    &&    jacobian.length!=    cols)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	70	None	replace
229	[BUG]  [BUGGY]  if(cols!=  null  &&  cols.length  >  1)  {  [CE]  incomparable  types:  int  and  <null>  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(cols!=  null  &&  cols.length  >  1)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(cols!=  null  &&  cols.length  >  1)  {	  if(cols!=    null    &&    cols.length    >    0)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	86	None	replace
230	[BUG]  [BUGGY]  cols  =  this.jF.getRows();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  cols  =  this.jF.getRows();  [BUGGY]      if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	cols  =  this.jF.getRows();	  cols    =    this.jF.getColumns();    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
231	[BUG]  [BUGGY]  cols  =  this.jF.getColumns(columns);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  cols  =  this.jF.getColumns(columns);  [BUGGY]      if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	cols  =  this.jF.getColumns(columns);	  cols    =    this.jF.getColumns();    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
232	[BUG]  [BUGGY]  cols  =  f.getColumns()  +  1;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  cols  =  f.getColumns()  +  1;  [BUGGY]      if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	cols  =  f.getColumns()  +  1;	  cols    =    f.getColumns();    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
233	[BUG]  [BUGGY]  if(cols  ==  null  ||  cols.length  <  =  cols.length)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(cols  ==  null  ||  cols.length  <  =  cols.length)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(cols  ==  null  ||  cols.length  <  =  cols.length)  {	  if(cols    ==    null)    {    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
234	[BUG]  [BUGGY]  If(cols!=  null)  {  [CE]  ';'  expected  [FE]            FunctionEvaluationException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  If(cols!=  null)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	If(cols!=  null)  {	  if(cols!=    jacobian.length)    {    If(cols!=    jacobian.length)    {    	non-compiled	[CE]  ';'  expected	23	None	replace
235	[BUG]  [BUGGY]  If(rows!=  cols)  {  [CE]  ';'  expected  [FE]              FunctionEvaluationException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  If(rows!=  cols)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	If(rows!=  cols)  {	  if(cols!=    jacobian.length)    {    If(cols!=    jacobian.length)    {    	non-compiled	[CE]  ';'  expected	23	None	replace
236	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  MultivariateVectorialFunction  function  =  getMultivariateVectorialFunction(i);  if(function!=  null)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  MultivariateVectorialFunction  function  =  getMultivariateVectorialFunction(i);  if(function!=  null)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS  [BUGGY]      if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  MultivariateVectorialFunction  function  =  getMultivariateVectorialFunction(i);  if(function!=  null)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS	  for(int    i    =    0;    i    <    cols;    ++i)    {    MultivariateVectorialFunction    function    =    getMultivariateVectorialFunction(i);    if(function!=    null)    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats    	non-compiled	[CE]  ')'  expected	69	None	replace
237	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  function  =(MultivariateVectorialFunction)cols.get(i);  if(function!=  null)  {  throw  new  FunctionEvalu  [CE]  '('  or  '['  expected  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  function  =(MultivariateVectorialFunction)cols.get(i);  if(function!=  null)  {  throw  new  FunctionEvalu  [BUGGY]      if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  function  =(MultivariateVectorialFunction)cols.get(i);  if(function!=  null)  {  throw  new  FunctionEvalu	  for(int    i    =    0;    i    <    rows;    ++i)    {    MultivariateVectorialFunction    function    =(MultivariateVectorialFunction)cols.get(i);    if(function!=    null)    {    throw    new    FunctionEvaluationException(    	non-compiled	[CE]  '('  or  '['  expected	4	None	replace
238	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  function  =(MultivariateVectorialFunction)cols.get(i);  if(function!=  null)  {  throw  new  FunctionEvaluationException(  [CE]  '.class'  expected  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  For(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  function  =(MultivariateVectorialFunction)cols.get(i);  if(function!=  null)  {  throw  new  FunctionEvaluationException(  [BUGGY]      if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	For(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  function  =(MultivariateVectorialFunction)cols.get(i);  if(function!=  null)  {  throw  new  FunctionEvaluationException(	  for(int    i    =    0;    i    <    rows;    ++i)    {    MultivariateVectorialFunction    function    =(MultivariateVectorialFunction)cols.get(i);    if(function!=    null)    {    throw    new    FunctionEvaluationException(    	non-compiled	[CE]  '.class'  expected	4	None	replace
239	[BUG]  [BUGGY]  cols  =  jacobian.getColumns()  +  1;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  cols  =  jacobian.getColumns()  +  1;  [BUGGY]      if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	cols  =  jacobian.getColumns()  +  1;	  cols    =    jacobian.getColumns();    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
240	[BUG]  [BUGGY]  cols  =  Math.max(cols.length,  cols.length  -  1);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  cols  =  Math.max(cols.length,  cols.length  -  1);  [BUGGY]      if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	cols  =  Math.max(cols.length,  cols.length  -  1);	  cols    =    Math.min(cols.length,    cols.length    -    1);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
241	[BUG]  [BUGGY]  int  cols  =  Math.min(cols,  cols.length  +  1);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  int  cols  =  Math.min(cols,  cols.length  +  1);  [BUGGY]      if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	int  cols  =  Math.min(cols,  cols.length  +  1);	  int    cols    =    Math.min(cols,    cols.length);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
242	[BUG]  [BUGGY]  cols  =  jF.value(cols,  jacobian.length);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  cols  =  jF.value(cols,  jacobian.length);  [BUGGY]      if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	cols  =  jF.value(cols,  jacobian.length);	  cols    =    jF.value(cols,    cost);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
243	[BUG]  [BUGGY]  [FE]  FunctionEvaluationException  [FE]    FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(jacobian!=  null  &&  rows!=  cols)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	add	if(jacobian!=  null  &&  rows!=  cols)  {	  if(jacobian!=    null    &&    cols!=    rows)    {    	compilable	  [FE]  FunctionEvaluationException  	95	9	replace
244	[BUG]  [BUGGY]  if(jacobian!=  null  &&  rows!=  cols)  {  [FE]  FunctionEvaluationException  [FE]    FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(jacobian!=  null  &&  rows!=  cols)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(jacobian!=  null  &&  rows!=  cols)  {	  if(jacobian!=    null    &&    cols!=    rows)    {    	compilable	  [FE]  FunctionEvaluationException  	95	9	replace
245	[BUG]  [BUGGY]  [FE]  FunctionEvaluationException  [FE]      FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(jacobian!=  null  &&  cols  ==  cols)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	add	if(jacobian!=  null  &&  cols  ==  cols)  {	  if(jacobian!=    null    &&    cols!=    rows)    {    	compilable	  [FE]  FunctionEvaluationException  	95	16	replace
246	[BUG]  [BUGGY]  if(jacobian!=  null  &&  cols  ==  cols)  {  [FE]  FunctionEvaluationException  [FE]      FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(jacobian!=  null  &&  cols  ==  cols)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(jacobian!=  null  &&  cols  ==  cols)  {	  if(jacobian!=    null    &&    cols!=    rows)    {    	compilable	  [FE]  FunctionEvaluationException  	95	16	replace
247	[BUG]  [BUGGY]  if(jF!=  null)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  double[][]  jacobian  =  jF.value(cols);  for(int  i  =  0;  i  <  cols;  ++i)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(jF!=  null)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  double[][]  jacobian  =  jF.value(cols);  for(int  i  =  0;  i  <  cols;  ++i)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats  [BUGGY]      if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(jF!=  null)  {  for(int  i  =  0;  i  <  rows;  ++i)  {  double[][]  jacobian  =  jF.value(cols);  for(int  i  =  0;  i  <  cols;  ++i)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats	  for(int    i    =    0;    i    <    rows;    ++i)    {    double[][]    jacobian    =    jF.value(cols);    for(int    i    =    0;    i    <    cols;    ++i)    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,    	non-compiled	[CE]  ')'  expected	12	None	replace
248	[BUG]  [BUGGY]  [FE]  FunctionEvaluationException  [FE]          FunctionEvaluationException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(rows  >  cols)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	add	if(rows  >  cols)  {	  if(jacobian.length!=    cols)    {    if(jacobian.length    >=    cols)    {    	compilable	  [FE]  FunctionEvaluationException  	2	7	replace
249	[BUG]  [BUGGY]  if(rows  >  cols)  {  [FE]  FunctionEvaluationException  [FE]          FunctionEvaluationException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(rows  >  cols)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(rows  >  cols)  {	  if(jacobian.length!=    cols)    {    if(jacobian.length    >=    cols)    {    	compilable	  [FE]  FunctionEvaluationException  	2	7	replace
250	[BUG]  [BUGGY]  if(rows!=  null  &&  cols  <  =  1)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(rows!=  null  &&  cols  <  =  1)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(rows!=  null  &&  cols  <  =  1)  {	  if(rows!=    null    &&    cols    <    =    cols)    {    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
251	[BUG]  [BUGGY]  double[][]  jacobian  =  jF.value(cols);  for(int  i  =  0;  i  <  cols;  ++i)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  double[][]  jacobian  =  jF.value(cols);  for(int  i  =  0;  i  <  cols;  ++i)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  [BUGGY]      if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	double[][]  jacobian  =  jF.value(cols);  for(int  i  =  0;  i  <  cols;  ++i)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,	  for(int    i    =    0;    i    <    rows;    ++i)    {    double[][]    jacobian    =    jF.value(cols);    for(int    i    =    0;    i    <    cols;    ++i)    {    throw    new    FunctionEvaluationException(point,    LocalizedFormat    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
252	[BUG]  [BUGGY]  cols  =  jF.value(cols,  null,  null);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  cols  =  jF.value(cols,  null,  null);  [BUGGY]      if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	cols  =  jF.value(cols,  null,  null);	  cols    =    jF.value(cols,    null);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
253	[BUG]  [BUGGY]  cols  =  jF.value(cols,  this);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  cols  =  jF.value(cols,  this);  [BUGGY]      if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	cols  =  jF.value(cols,  this);	  cols    =    jF.value(cols,    null);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
254	[BUG]  [BUGGY]  [FE]  FunctionEvaluationException  [FE]          AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(jacobian!=  null  ||  rows!=  jacobian.length)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	add	if(jacobian!=  null  ||  rows!=  jacobian.length)  {	  if(rows!=    null    ||    rows!=    jacobian.length)    {    	compilable	  [FE]  FunctionEvaluationException  	82	16	replace
255	[BUG]  [BUGGY]  if(jacobian!=  null  ||  rows!=  jacobian.length)  {  [FE]  FunctionEvaluationException  [FE]          AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(jacobian!=  null  ||  rows!=  jacobian.length)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(jacobian!=  null  ||  rows!=  jacobian.length)  {	  if(rows!=    null    ||    rows!=    jacobian.length)    {    	compilable	  [FE]  FunctionEvaluationException  	82	16	replace
256	[BUG]  [BUGGY]  int  cols  =  Math.min(cols.length,  2);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  int  cols  =  Math.min(cols.length,  2);  [BUGGY]      if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	int  cols  =  Math.min(cols.length,  2);	  int    cols    =    Math.min(cols.length,    row);    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
257	[BUG]  [BUGGY]  int  cols  =  Math.min(cols.length,  column);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  int  cols  =  Math.min(cols.length,  column);  [BUGGY]      if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	int  cols  =  Math.min(cols.length,  column);	  int    cols    =    Math.min(cols.length,    row);    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
258	[BUG]  [BUGGY]  if(cols  ==  null  ||  cols.length!=  rows)  {  [CE]  incomparable  types:  int  and  <null>  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(cols  ==  null  ||  cols.length!=  rows)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(cols  ==  null  ||  cols.length!=  rows)  {	  if(cols!=    null    ||    cols.length!=    rows)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	37	None	replace
259	[BUG]  [BUGGY]  [FE]  FunctionEvaluationException  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(jacobian!=  null  ||  cols!=  rows)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	add	if(jacobian!=  null  ||  cols!=  rows)  {	  if(rows!=    null    ||    jacobian.length!=    cols)    {    	compilable	  [FE]  FunctionEvaluationException  	78	16	replace
260	[BUG]  [BUGGY]  if(jacobian!=  null  ||  cols!=  rows)  {  [FE]  FunctionEvaluationException  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(jacobian!=  null  ||  cols!=  rows)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(jacobian!=  null  ||  cols!=  rows)  {	  if(rows!=    null    ||    jacobian.length!=    cols)    {    	compilable	  [FE]  FunctionEvaluationException  	78	16	replace
261	[BUG]  [BUGGY]  if(cols!=  null)  {  If(cols!=  jacobian.length)  {  [CE]  ';'  expected  [FE]            FunctionEvaluationException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(cols!=  null)  {  If(cols!=  jacobian.length)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(cols!=  null)  {  If(cols!=  jacobian.length)  {	  if(cols!=    jacobian.length)    {    If(cols!=    jacobian.length)    {    	non-compiled	[CE]  ';'  expected	23	None	replace
262	[BUG]  [BUGGY]  cols  =  jF.value(cols,  row);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  cols  =  jF.value(cols,  row);  [BUGGY]      if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	cols  =  jF.value(cols,  row);	  cols    =    jF.value(cols,    dataArea);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
263	[BUG]  [BUGGY]  cols  =  jF.value(cols,  dataArea,  null);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  cols  =  jF.value(cols,  dataArea,  null);  [BUGGY]      if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	cols  =  jF.value(cols,  dataArea,  null);	  cols    =    jF.value(cols,    dataArea);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
264	[BUG]  [BUGGY]  int  cols  =  Math.min(cols.length,  jacobian.length  +  1);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  int  cols  =  Math.min(cols.length,  jacobian.length  +  1);  [BUGGY]      if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	int  cols  =  Math.min(cols.length,  jacobian.length  +  1);	  int    cols    =    Math.min(cols.length,    jacobian.length);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
265	[BUG]  [BUGGY]  if(jacobian!=  null  ||  rows!=  cols.length)  {  [CE]  int  cannot  be  dereferenced  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(jacobian!=  null  ||  rows!=  cols.length)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(jacobian!=  null  ||  rows!=  cols.length)  {	  if(cols!=    null    ||    rows!=    jacobian.length)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	93	None	replace
266	[BUG]  [BUGGY]  int  rows  =  Math.min(cols,  jacobian.length);  for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  function  =(MultivariateVectorialFunction)cols.get(i);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  int  rows  =  Math.min(cols,  jacobian.length);  for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  function  =(MultivariateVectorialFunction)cols.get(i);  [BUGGY]      if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	int  rows  =  Math.min(cols,  jacobian.length);  for(int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  function  =(MultivariateVectorialFunction)cols.get(i);	  int    rows    =    Math.min(residualsWeights,    jacobian.length);    for(int    i    =    0;    i    <    cols;    ++i)    {    MultivariateVectorialFunction    function    =(MultivariateVectorialFunction)cols.get(i);    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
267	[BUG]  [BUGGY]  int  rows  =  Math.min(residualsWeights,  cols);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  int  rows  =  Math.min(residualsWeights,  cols);  [BUGGY]      if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	int  rows  =  Math.min(residualsWeights,  cols);	  int    rows    =    Math.min(residualsWeights,    jacobian.length);    for(int    i    =    0;    i    <    cols;    ++i)    {    MultivariateVectorialFunction    function    =(MultivariateVectorialFunction)cols.get(i);    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
268	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  MultivariateVectorialFunction  function  =  getMultivariateVectorialFunction(i);  if(function!=  null)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENS  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  MultivariateVectorialFunction  function  =  getMultivariateVectorialFunction(i);  if(function!=  null)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENS  [BUGGY]      if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  MultivariateVectorialFunction  function  =  getMultivariateVectorialFunction(i);  if(function!=  null)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENS	  for(int    i    =    0;    i    <    cols;    ++i)    {    MultivariateVectorialFunction    function    =    getMultivariateVectorialFunction(i);    if(function!=    null)    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats    	non-compiled	[CE]  ')'  expected	69	None	replace
269	[BUG]  [BUGGY]  cols  =  jF.value(cols,  coefficient);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  cols  =  jF.value(cols,  coefficient);  [BUGGY]      if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	cols  =  jF.value(cols,  coefficient);	  cols    =    jF.value(cols,    value);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
270	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  MultivariateVectorialFunction  function  =(MultivariateVectorialFunction)jF.getValue(i);  if(function!=  null)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  MultivariateVectorialFunction  function  =(MultivariateVectorialFunction)jF.getValue(i);  if(function!=  null)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats  [BUGGY]      if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  MultivariateVectorialFunction  function  =(MultivariateVectorialFunction)jF.getValue(i);  if(function!=  null)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats	  for(int    i    =    0;    i    <    cols;    ++i)    {    MultivariateVectorialFunction    function    =(MultivariateVectorialFunction)jF.getValue(i);    if(function!=    null)    {    throw    new    FunctionEvalu    	non-compiled	[CE]  ')'  expected	52	None	replace
271	[BUG]  [BUGGY]  if(jocobian!=  null)  {  [CE]  cannot  find  symbol  jocobian  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(jocobian!=  null)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(jocobian!=  null)  {	  if(ji!=    null)    {    	non-compiled	[CE]  cannot  find  symbol  jocobian	84	None	replace
272	[BUG]  [BUGGY]  if(jacobian.length  ==  cols)  {  for(jacobian.length  ==  cols)  {  [CE]  not  a  statement  [FE]    FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(jacobian.length  ==  cols)  {  for(jacobian.length  ==  cols)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(jacobian.length    ==    cols)    {    for(jacobian.length  ==  cols)  {	  	non-compiled	[CE]  not  a  statement	67	None	add
273	[BUG]  [BUGGY]  if(cols!=  null)  {  If(jacobian.length!=  cols)  {  [CE]  ';'  expected  [FE]            FunctionEvaluationException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(cols!=  null)  {  If(jacobian.length!=  cols)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(cols!=  null)  {  If(jacobian.length!=  cols)  {	  if(jacobian.length!=    cols)    {    If(jacobian.length!=    cols)    {    	non-compiled	[CE]  ';'  expected	3	None	replace
274	[BUG]  [BUGGY]  if(rows!=  null  ||  rows!=  cols.length)  {  [CE]  incomparable  types:  int  and  <null>  [FE]          FunctionEvaluationException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(rows!=  null  ||  rows!=  cols.length)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(rows!=  null  ||  rows!=  cols.length)  {	  if(rows!=    cols.length)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	55	None	replace
275	[BUG]  [BUGGY]  cols  -=  jf.getColumns();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  cols  -=  jf.getColumns();  [BUGGY]      if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	cols  -=  jf.getColumns();	  cols    =    jf.getColumns();    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
276	[BUG]  [BUGGY]  cols  =  this.cols.getColumns();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  cols  =  this.cols.getColumns();  [BUGGY]      if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	cols  =  this.cols.getColumns();	  cols    =    jacobian.getColumns();    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
277	[BUG]  [BUGGY]  cols  =(cols  <  0)?  this.jF.getColumns()  :  cols;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  cols  =(cols  <  0)?  this.jF.getColumns()  :  cols;  [BUGGY]      if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	cols  =(cols  <  0)?  this.jF.getColumns()  :  cols;	  cols    =    this.jF.getColumns();    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
278	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(jacobian!=  null  &&  rows!=  jacobian.length)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	add	if(jacobian!=  null  &&  rows!=  jacobian.length)  {	  if(rows!=    null    &&    rows!=    jacobian.length)    {    	compilable	  [FE]  AssertionFailedError  	81	1	replace
279	[BUG]  [BUGGY]  if(jacobian!=  null  &&  rows!=  jacobian.length)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(jacobian!=  null  &&  rows!=  jacobian.length)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(jacobian!=  null  &&  rows!=  jacobian.length)  {	  if(rows!=    null    &&    rows!=    jacobian.length)    {    	compilable	  [FE]  AssertionFailedError  	81	1	replace
280	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(jF!=  null  &&  rows!=  jacobian.length)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	add	if(jF!=  null  &&  rows!=  jacobian.length)  {	  if(rows!=    null    &&    rows!=    jacobian.length)    {    	compilable	  [FE]  AssertionFailedError  	81	1	replace
281	[BUG]  [BUGGY]  if(jF!=  null  &&  rows!=  jacobian.length)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(jF!=  null  &&  rows!=  jacobian.length)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(jF!=  null  &&  rows!=  jacobian.length)  {	  if(rows!=    null    &&    rows!=    jacobian.length)    {    	compilable	  [FE]  AssertionFailedError  	81	1	replace
282	[BUG]  [BUGGY]  int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  function  =(MultivariateVectorialFunction)cols.get(i);  if(function  ==  null)  {  throw  new  FunctionEvaluationException(  [CE]  >  expected  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  function  =(MultivariateVectorialFunction)cols.get(i);  if(function  ==  null)  {  throw  new  FunctionEvaluationException(  [BUGGY]      if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  function  =(MultivariateVectorialFunction)cols.get(i);  if(function  ==  null)  {  throw  new  FunctionEvaluationException(	  for(int    i    =    0;    i    <    rows;    ++i)    {    MultivariateVectorialFunction    function    =(MultivariateVectorialFunction)cols.get(i);    if(function    ==    null)    {    throw    new    FunctionEvaluationException(    	non-compiled	[CE]  >  expected	6	None	replace
283	[BUG]  [BUGGY]  if(jacobian!=  null  &&  cols!=  null  &&  jacobian.length!=  rows)  {  [CE]  incomparable  types:  int  and  <null>  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(jacobian!=  null  &&  cols!=  null  &&  jacobian.length!=  rows)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(jacobian!=  null  &&  cols!=  null  &&  jacobian.length!=  rows)  {	  if(jF!=    null    &&    cols!=    null    &&    jacobian.length!=    rows)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	61	None	replace
284	[BUG]  [BUGGY]  [FE]  FunctionEvaluationException  [FE]    FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(jacobian!=  null  &&  cols  >  0)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	add	if(jacobian!=  null  &&  cols  >  0)  {	  if(jacobian!=    null)    {    	compilable	  [FE]  FunctionEvaluationException  	47	16	replace
285	[BUG]  [BUGGY]  if(jacobian!=  null  &&  cols  >  0)  {  [FE]  FunctionEvaluationException  [FE]    FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(jacobian!=  null  &&  cols  >  0)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(jacobian!=  null  &&  cols  >  0)  {	  if(jacobian!=    null)    {    	compilable	  [FE]  FunctionEvaluationException  	47	16	replace
286	[BUG]  [BUGGY]  if(jacobian!=  null  &&  cols  <  =  cols)  {  [CE]  illegal  start  of  expression  [FE]      FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(jacobian!=  null  &&  cols  <  =  cols)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(jacobian!=  null  &&  cols  <  =  cols)  {	  if(jacobian!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
287	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  MultivariateVectorialFunction  function  =(MultivariateVectorialFunction)cols.get(i);  if(function!=  null)  {  throw  new  FunctionEvaluationException(Point  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  for(int  i  =  0;  i  <  rows;  ++i)  {  MultivariateVectorialFunction  function  =(MultivariateVectorialFunction)cols.get(i);  if(function!=  null)  {  throw  new  FunctionEvaluationException(Point  [BUGGY]      if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	for(int  i  =  0;  i  <  rows;  ++i)  {  MultivariateVectorialFunction  function  =(MultivariateVectorialFunction)cols.get(i);  if(function!=  null)  {  throw  new  FunctionEvaluationException(Point	  for(int    i    =    0;    i    <    cols;    ++i)    {    MultivariateVectorialFunction    function    =(MultivariateVectorialFunction)cols.get(i);    if(function!=    null)    {    throw    new    FunctionEvaluationException    	non-compiled	[CE]  ')'  expected	72	None	replace
288	[BUG]  [BUGGY]  if(cols!=  cols.length  ||  cols.length!=  cols.length)  {  [CE]  int  cannot  be  dereferenced  [FE]            FunctionEvaluationException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(cols!=  cols.length  ||  cols.length!=  cols.length)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(cols!=  cols.length  ||  cols.length!=  cols.length)  {	  if(cols!=    cols.length)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	56	None	replace
289	[BUG]  [BUGGY]  double[][]  jacobian  =  jF.value(cols);  for(int  i  =  0;  i  <  cols;  ++i)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  double[][]  jacobian  =  jF.value(cols);  for(int  i  =  0;  i  <  cols;  ++i)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE  [BUGGY]      if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	double[][]  jacobian  =  jF.value(cols);  for(int  i  =  0;  i  <  cols;  ++i)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE	  for(int    i    =    0;    i    <    rows;    ++i)    {    double[][]    jacobian    =    jF.value(cols);    for(int    i    =    0;    i    <    cols;    ++i)    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE    	non-compiled	[CE]  ')'  expected	11	None	replace
290	[BUG]  [BUGGY]  [FE]  FunctionEvaluationException  [FE]    FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(jF!=  null  &&  jacobian.length  >  0)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	add	if(jF!=  null  &&  jacobian.length  >  0)  {	  if(jF!=    null)    {    	compilable	  [FE]  FunctionEvaluationException  	49	16	replace
291	[BUG]  [BUGGY]  if(jF!=  null  &&  jacobian.length  >  0)  {  [FE]  FunctionEvaluationException  [FE]    FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(jF!=  null  &&  jacobian.length  >  0)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(jF!=  null  &&  jacobian.length  >  0)  {	  if(jF!=    null)    {    	compilable	  [FE]  FunctionEvaluationException  	49	16	replace
292	[BUG]  [BUGGY]  [FE]  FunctionEvaluationException  [FE]      FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(jF!=  null  &&  cols  >  0)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	add	if(jF!=  null  &&  cols  >  0)  {	  if(jF!=    null)    {    	compilable	  [FE]  FunctionEvaluationException  	49	16	replace
293	[BUG]  [BUGGY]  if(jF!=  null  &&  cols  >  0)  {  [FE]  FunctionEvaluationException  [FE]      FunctionEvaluationException    [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(jF!=  null  &&  cols  >  0)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(jF!=  null  &&  cols  >  0)  {	  if(jF!=    null)    {    	compilable	  [FE]  FunctionEvaluationException  	49	16	replace
294	[BUG]  [BUGGY]  int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  function  =(MultivariateVectorialFunction)cols.get(i);  if(function!=  null)  {  throw  new  FunctionEvaluationException(  [CE]  >  expected  [FE]                AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  function  =(MultivariateVectorialFunction)cols.get(i);  if(function!=  null)  {  throw  new  FunctionEvaluationException(  [BUGGY]      if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	int  i  =  0;  i  <  cols;  ++i)  {  MultivariateVectorialFunction  function  =(MultivariateVectorialFunction)cols.get(i);  if(function!=  null)  {  throw  new  FunctionEvaluationException(	  for(int    i    =    0;    i    <    rows;    ++i)    {    MultivariateVectorialFunction    function    =(MultivariateVectorialFunction)cols.get(i);    if(function!=    null)    {    throw    new    FunctionEvaluationException(    	non-compiled	[CE]  >  expected	4	None	replace
295	[BUG]  [BUGGY]  if(cols.length  ==  cols.length)  {  [CE]  int  cannot  be  dereferenced  [FE]              FunctionEvaluationException      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(cols.length  ==  cols.length)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(cols.length  ==  cols.length)  {	  if(cols    ==    cols.length)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	57	None	replace
296	[BUG]  [BUGGY]  if(cols!=  null  &&  rows!=  cols.length)  {  [CE]  incomparable  types:  int  and  <null>  [FE]              AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  if(cols!=  null  &&  rows!=  cols.length)  {  [BUGGY]      throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	if(cols!=  null  &&  rows!=  cols.length)  {	  if(cols!=    null    &&    cols.length!=    rows)    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	58	None	replace
297	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  columns;  ++i)  {  MultivariateVectorialFunction  function  =(MultivariateVectorialFunction)this.cols.get(i);  if(function!=  null)  {  throw  new  FunctionEvaluationException(  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  for(int  i  =  0;  i  <  columns;  ++i)  {  MultivariateVectorialFunction  function  =(MultivariateVectorialFunction)this.cols.get(i);  if(function!=  null)  {  throw  new  FunctionEvaluationException(  [BUGGY]      if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	for(int  i  =  0;  i  <  columns;  ++i)  {  MultivariateVectorialFunction  function  =(MultivariateVectorialFunction)this.cols.get(i);  if(function!=  null)  {  throw  new  FunctionEvaluationException(	  for(int    i    =    0;    i    <    columns;    ++i)    {    MultivariateVectorialFunction    function    =(MultivariateVectorialFunction)cols.get(i);    if(function!=    null)    {    throw    new    FunctionEvaluationException(    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
298	[BUG]  [BUGGY]  cols  =  jF.columns(cols);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  cols  =  jF.columns(cols);  [BUGGY]      if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	cols  =  jF.columns(cols);	  cols    =    jF.columns();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
299	[BUG]  [BUGGY]  double[][]  jacobian  =  jF.value(cols);  for(int  i  =  0;  i  <  cols;  ++i)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_S  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      protected  void  updateJacobian()  throws  FunctionEvaluationException  {  ++jacobianEvaluations;  jacobian  =  jF.value(point);      [BUGGY]  double[][]  jacobian  =  jF.value(cols);  for(int  i  =  0;  i  <  cols;  ++i)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_S  [BUGGY]      if  (jacobian.length  !=  rows)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_SIMPLE,  jacobian.length,  rows);  }  for  (int  i  =  0;  i  <  rows;  i++)  {  final  double[]  ji  =  jacobian[i];  final  double  factor  =  -Math.sqrt(residualsWeights[i]);  for  (int  j  =  0;  j  <  cols;  ++j)  {  ji[j]  *=  factor;  }  }  [CLASS]  AbstractLeastSquaresOptimizer  [METHOD]  updateJacobian  [RETURN_TYPE]  void  [VARIABLES]  boolean  VectorialConvergenceChecker  checker  convergenceChecker  double[]  ji  objective  point  residuals  residualsWeights  targetValues  double  cost  factor  double[][]  jacobian  DifferentiableMultivariateVectorialFunction  function  MultivariateMatrixFunction  jF  int  DEFAULT_MAX_ITERATIONS  cols  i  iterations  j  jacobianEvaluations  maxEvaluations  maxIterations  objectiveEvaluations  rows  	projects/Math65/src/main/java/org/apache/commons/math/optimization/general/AbstractLeastSquaresOptimizer.java	0.25	186	186	1	replace	double[][]  jacobian  =  jF.value(cols);  for(int  i  =  0;  i  <  cols;  ++i)  {  throw  new  FunctionEvaluationException(point,  LocalizedFormats.DIMENSIONS_MISMATCH_S	  for(int    i    =    0;    i    <    rows;    ++i)    {    double[][]    jacobian    =    jF.value(cols);    for(int    i    =    0;    i    <    cols;    ++i)    {    throw    new    FunctionEvaluationException(point,    LocalizedFormats.DIMENSIONS_MISMATCH_S    	non-compiled	[CE]  ')'  expected	39	None	replace
