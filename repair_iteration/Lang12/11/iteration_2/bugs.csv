bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Character  ch  =  buffer.nextChar(gap);  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;    [BUGGY]  Character  ch  =  buffer.nextChar(gap);  [BUGGY]    if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	245	245	2	replace	Character  ch  =  buffer.nextChar(gap);	      Character    ch    =    random.nextChar(gap);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
2	[BUG]  [BUGGY]  Character  ch  =  buffer[random.nextChar(gap)];  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;    [BUGGY]  Character  ch  =  buffer[random.nextChar(gap)];  [BUGGY]    if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	245	245	2	replace	Character  ch  =  buffer[random.nextChar(gap)];	      Character    ch    =    random.nextChar(gap);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
3	[BUG]  [BUGGY]  Character  ch  =  random.nextChar(start);  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException    [CONTEXT]    end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;    [BUGGY]  Character  ch  =  random.nextChar(start);  [BUGGY]    if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	245	245	2	replace	Character  ch  =  random.nextChar(start);	      Character    ch    =    random.nextChar(gap);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
4	[BUG]  [BUGGY]  Character  ch  =  random.nextChar(buffer,  0,  gap);  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException    [CONTEXT]    end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;    [BUGGY]  Character  ch  =  random.nextChar(buffer,  0,  gap);  [BUGGY]    if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	245	245	2	replace	Character  ch  =  random.nextChar(buffer,  0,  gap);	      Character    ch    =    random.nextChar(gap);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
5	[BUG]  [BUGGY]  if(chars  ==  null  ||!chars.length  <  =  0)  {  [CE]  illegal  start  of  type  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;    [BUGGY]  if(chars  ==  null  ||!chars.length  <  =  0)  {  [BUGGY]    ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	245	245	2	replace	if(chars  ==  null  ||!chars.length  <  =  0)  {	  if(chars    ==    null    ||!chars.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
6	[BUG]  [BUGGY]  if(chars  ==  null  ||!chars.length  >  0)  {  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;    [BUGGY]  if(chars  ==  null  ||!chars.length  >  0)  {  [BUGGY]    ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	245	245	2	replace	if(chars  ==  null  ||!chars.length  >  0)  {	  if(chars    ==    null    ||!chars.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
7	[BUG]  [BUGGY]  if(chars  ==  null  ||!chars.length!=  0)  {  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;    [BUGGY]  if(chars  ==  null  ||!chars.length!=  0)  {  [BUGGY]    ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	245	245	2	replace	if(chars  ==  null  ||!chars.length!=  0)  {	  if(chars    ==    null    ||!chars.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
8	[BUG]  [BUGGY]  if(chars  ==  null  ||!chars.length  <  2)  {  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;    [BUGGY]  if(chars  ==  null  ||!chars.length  <  2)  {  [BUGGY]    ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	245	245	2	replace	if(chars  ==  null  ||!chars.length  <  2)  {	  if(chars    ==    null    ||!chars.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
9	[BUG]  [BUGGY]  if(chars!=  null  ||!numbers)  {  [CE]  illegal  start  of  type  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;    [BUGGY]  if(chars!=  null  ||!numbers)  {  [BUGGY]    ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	245	245	2	replace	if(chars!=  null  ||!numbers)  {	  if(chars    ==    null    ||!numbers)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
10	[BUG]  [BUGGY]  if(chars  ==  buffer[0]  ||!numbers)  {  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;    [BUGGY]  if(chars  ==  buffer[0]  ||!numbers)  {  [BUGGY]    ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	245	245	2	replace	if(chars  ==  buffer[0]  ||!numbers)  {	  if(chars    ==    null    ||!numbers)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
11	[BUG]  [BUGGY]  char  ch  =  buffer[random.nextInt(gap)]  +  start;  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;    [BUGGY]  char  ch  =  buffer[random.nextInt(gap)]  +  start;  [BUGGY]    if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	245	245	2	replace	char  ch  =  buffer[random.nextInt(gap)]  +  start;	      char    ch    =    buffer[random.nextInt(gap)];    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
12	[BUG]  [BUGGY]  if(buffer  ==  null  ||  buffer.length  ==  0)  {  [CE]  <identifier>  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;    [BUGGY]  if(buffer  ==  null  ||  buffer.length  ==  0)  {  [BUGGY]    ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	245	245	2	replace	if(buffer  ==  null  ||  buffer.length  ==  0)  {	  if(chars    ==    null    ||    buffer.length    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	7	None	replace
13	[BUG]  [BUGGY]  if(chars  ==  null  ||  buffer.length!=  0)  {  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;    [BUGGY]  if(chars  ==  null  ||  buffer.length!=  0)  {  [BUGGY]    ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	245	245	2	replace	if(chars  ==  null  ||  buffer.length!=  0)  {	  if(chars    ==    null    ||    buffer.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
14	[BUG]  [BUGGY]  if(chars  ==  null  ||  buffer.length  <  =  0)  {  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;    [BUGGY]  if(chars  ==  null  ||  buffer.length  <  =  0)  {  [BUGGY]    ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	245	245	2	replace	if(chars  ==  null  ||  buffer.length  <  =  0)  {	  if(chars    ==    null    ||    buffer.length    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
15	[BUG]  [BUGGY]  char  ch  =  buffer[random.nextInt(start)+  1];  [CE]  illegal  start  of  type  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;    [BUGGY]  char  ch  =  buffer[random.nextInt(start)+  1];  [BUGGY]    if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	245	245	2	replace	char  ch  =  buffer[random.nextInt(start)+  1];	      char    ch    =    buffer[random.nextInt(start)+    start];    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
16	[BUG]  [BUGGY]  char  ch  =  buffer[random.nextInt(start)+  gap];  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;    [BUGGY]  char  ch  =  buffer[random.nextInt(start)+  gap];  [BUGGY]    if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	245	245	2	replace	char  ch  =  buffer[random.nextInt(start)+  gap];	      char    ch    =    buffer[random.nextInt(start)+    start];    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
17	[BUG]  [BUGGY]  char  ch  =  buffer[random.nextInt(start)+  2];  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;    [BUGGY]  char  ch  =  buffer[random.nextInt(start)+  2];  [BUGGY]    if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	245	245	2	replace	char  ch  =  buffer[random.nextInt(start)+  2];	      char    ch    =    buffer[random.nextInt(start)+    start];    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
18	[BUG]  [BUGGY]  char  ch  =  buffer[random.nextInt(gap)+  2];  [CE]  illegal  start  of  type  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;    [BUGGY]  char  ch  =  buffer[random.nextInt(gap)+  2];  [BUGGY]    if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	245	245	2	replace	char  ch  =  buffer[random.nextInt(gap)+  2];	      char    ch    =    buffer[random.nextInt(gap)+    start];    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
19	[BUG]  [BUGGY]  char  ch  =  buffer.nextInt(gap);  [CE]  illegal  start  of  type  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;    [BUGGY]  char  ch  =  buffer.nextInt(gap);  [BUGGY]    if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	245	245	2	replace	char  ch  =  buffer.nextInt(gap);	      char    ch    =    random.nextInt(gap);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
20	[BUG]  [BUGGY]  if(buffer  ==  null  ||!buffer.contains(ch))  {  [CE]  illegal  start  of  type  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;    [BUGGY]  if(buffer  ==  null  ||!buffer.contains(ch))  {  [BUGGY]    ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	245	245	2	replace	if(buffer  ==  null  ||!buffer.contains(ch))  {	  if(chars    ==    null    ||!chars.contains(ch))    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
21	[BUG]  [BUGGY]  if(chars!=  null  ||!chars.contains(ch))  {  [CE]  illegal  start  of  type  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;    [BUGGY]  if(chars!=  null  ||!chars.contains(ch))  {  [BUGGY]    ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	245	245	2	replace	if(chars!=  null  ||!chars.contains(ch))  {	  if(chars    ==    null    ||!chars.contains(ch))    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
22	[BUG]  [BUGGY]  if(chars  ==  null  ||!chars.contains(ch)&&!numbers)  {  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;    [BUGGY]  if(chars  ==  null  ||!chars.contains(ch)&&!numbers)  {  [BUGGY]    ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	245	245	2	replace	if(chars  ==  null  ||!chars.contains(ch)&&!numbers)  {	  if(chars    ==    null    ||!chars.contains(ch))    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
23	[BUG]  [BUGGY]  if(chars!=  null  ||  buffer.length  ==  0)  {  [CE]  illegal  start  of  type  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;    [BUGGY]  if(chars!=  null  ||  buffer.length  ==  0)  {  [BUGGY]    ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	245	245	2	replace	if(chars!=  null  ||  buffer.length  ==  0)  {	  if(chars!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
24	[BUG]  [BUGGY]  Character  ch  =  random.nextChar(buffer);  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;    [BUGGY]  Character  ch  =  random.nextChar(buffer);  [BUGGY]    if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	245	245	2	replace	Character  ch  =  random.nextChar(buffer);	      Character    ch    =    random.nextChar(gap);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
25	[BUG]  [BUGGY]  Character  ch  =  random.nextChar(buffer,  start);  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;    [BUGGY]  Character  ch  =  random.nextChar(buffer,  start);  [BUGGY]    if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	245	245	2	replace	Character  ch  =  random.nextChar(buffer,  start);	      Character    ch    =    random.nextChar(gap);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
26	[BUG]  [BUGGY]  char  ch  =  random.nextInt(start);  [CE]  illegal  start  of  type  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;    [BUGGY]  char  ch  =  random.nextInt(start);  [BUGGY]    if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	245	245	2	replace	char  ch  =  random.nextInt(start);	      char    ch    =    random.nextInt(gap);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
27	[BUG]  [BUGGY]  char  ch  =  random.nextInt(gap  +  1);  [CE]  illegal  start  of  type  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;    [BUGGY]  char  ch  =  random.nextInt(gap  +  1);  [BUGGY]    if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	245	245	2	replace	char  ch  =  random.nextInt(gap  +  1);	      char    ch    =    random.nextInt(gap);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
28	[BUG]  [BUGGY]  char  ch  =  random.nextInt(buffer);  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;    [BUGGY]  char  ch  =  random.nextInt(buffer);  [BUGGY]    if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	245	245	2	replace	char  ch  =  random.nextInt(buffer);	      char    ch    =    random.nextInt(gap);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
29	[BUG]  [BUGGY]  char  ch  =  buffer[random.nextInt(gap)+1]  +  start;  [CE]  illegal  start  of  type  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;    [BUGGY]  char  ch  =  buffer[random.nextInt(gap)+1]  +  start;  [BUGGY]    if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	245	245	2	replace	char  ch  =  buffer[random.nextInt(gap)+1]  +  start;	      char    ch    =    buffer[random.nextInt(gap)+1];    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
30	[BUG]  [BUGGY]  if(chars  ==  null  ||!chars.length)  {  [CE]  illegal  start  of  type  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;    [BUGGY]  if(chars  ==  null  ||!chars.length)  {  [BUGGY]    ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	245	245	2	replace	if(chars  ==  null  ||!chars.length)  {	  if(chars    ==    null    ||!numbers)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
31	[BUG]  [BUGGY]  if(chars  ==  null  ||!letters)  {  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;    [BUGGY]  if(chars  ==  null  ||!letters)  {  [BUGGY]    ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	245	245	2	replace	if(chars  ==  null  ||!letters)  {	  if(chars    ==    null    ||!numbers)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
32	[BUG]  [BUGGY]  char  ch  =  buffer[random.nextInt(gap)-  start];  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;    [BUGGY]  char  ch  =  buffer[random.nextInt(gap)-  start];  [BUGGY]    if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	245	245	2	replace	char  ch  =  buffer[random.nextInt(gap)-  start];	      char    ch    =    buffer[random.nextInt(gap)];    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
33	[BUG]  [BUGGY]  char  ch  =  buffer[random.nextInt(gap  +  1)];  [CE]  <identifier>  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;    [BUGGY]  char  ch  =  buffer[random.nextInt(gap  +  1)];  [BUGGY]    if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	245	245	2	replace	char  ch  =  buffer[random.nextInt(gap  +  1)];	      char    ch    =    buffer[random.nextInt(gap)];    	non-compiled	[CE]  <identifier>  expected	3	None	replace
34	[BUG]  [BUGGY]  char  ch  =  buffer[random.nextInt(start)+  end];  [CE]  <identifier>  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;    [BUGGY]  char  ch  =  buffer[random.nextInt(start)+  end];  [BUGGY]    if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	245	245	2	replace	char  ch  =  buffer[random.nextInt(start)+  end];	      char    ch    =    buffer[random.nextInt(start)+    start];    	non-compiled	[CE]  <identifier>  expected	10	None	replace
35	[BUG]  [BUGGY]  char  ch  =  buffer[random.nextInt(gap)+  start  +  1];  [CE]  illegal  start  of  type  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;    [BUGGY]  char  ch  =  buffer[random.nextInt(gap)+  start  +  1];  [BUGGY]    if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	245	245	2	replace	char  ch  =  buffer[random.nextInt(gap)+  start  +  1];	      char    ch    =    buffer[random.nextInt(gap)+    start];    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
36	[BUG]  [BUGGY]  char  ch  =  buffer[random.nextInt(gap)+  start]  +  1;  [CE]  illegal  start  of  type  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;    [BUGGY]  char  ch  =  buffer[random.nextInt(gap)+  start]  +  1;  [BUGGY]    if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	245	245	2	replace	char  ch  =  buffer[random.nextInt(gap)+  start]  +  1;	      char    ch    =    buffer[random.nextInt(gap)+    start];    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
37	[BUG]  [BUGGY]  if(buffer!=  null)  {  [CE]  illegal  start  of  type  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;    [BUGGY]  if(buffer!=  null)  {  [BUGGY]    ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	245	245	2	replace	if(buffer!=  null)  {	  if(buffer    ==    null)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
38	[BUG]  [BUGGY]  if(chars  ==  null  ||!chars.contains(ch)||!numbers)  {  [CE]  illegal  start  of  type  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;    [BUGGY]  if(chars  ==  null  ||!chars.contains(ch)||!numbers)  {  [BUGGY]    ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	245	245	2	replace	if(chars  ==  null  ||!chars.contains(ch)||!numbers)  {	  if(chars    ==    null    ||!chars.contains(ch))    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
39	[BUG]  [BUGGY]  if(chars!=  null  &&!chars.length  >  0)  {  [CE]  illegal  start  of  type  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;    [BUGGY]  if(chars!=  null  &&!chars.length  >  0)  {  [BUGGY]    ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	245	245	2	replace	if(chars!=  null  &&!chars.length  >  0)  {	  if(chars!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
40	[BUG]  [BUGGY]  if(chars!=  null  &&!numbers)  {  [CE]  illegal  start  of  type  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;    [BUGGY]  if(chars!=  null  &&!numbers)  {  [BUGGY]    ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	245	245	2	replace	if(chars!=  null  &&!numbers)  {	  if(chars!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
41	[BUG]  [BUGGY]  if(chars!=  null  &&!chars.isEmpty())  {  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;    [BUGGY]  if(chars!=  null  &&!chars.isEmpty())  {  [BUGGY]    ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	245	245	2	replace	if(chars!=  null  &&!chars.isEmpty())  {	  if(chars!=    null)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
42	[BUG]  [BUGGY]  char  ch  =  chars[random.nextInt(gap)];  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;    [BUGGY]  char  ch  =  chars[random.nextInt(gap)];  [BUGGY]    if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	245	245	2	replace	char  ch  =  chars[random.nextInt(gap)];	      char    ch    =    buffer[random.nextInt(gap)];    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
43	[BUG]  [BUGGY]  if(ch  ==''  ||!chars.contains(ch))  {  [CE]  illegal  start  of  type  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;    [BUGGY]  if(ch  ==''  ||!chars.contains(ch))  {  [BUGGY]    ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	245	245	2	replace	if(ch  ==''  ||!chars.contains(ch))  {	  if(chars    ==    null    ||!chars.contains(ch))    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
44	[BUG]  [BUGGY]  if(ch  ==  '0'  &&  ch  <  =  '9')  {  [CE]  <identifier>  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;    [BUGGY]  if(ch  ==  '0'  &&  ch  <  =  '9')  {  [BUGGY]    ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	245	245	2	replace	if(ch  ==  '0'  &&  ch  <  =  '9')  {	  if(chars    ==    null    ||!chars.contains(ch))    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
45	[BUG]  [BUGGY]  char  ch  =  chars[random.nextInt(gap)+  start];  [CE]  <identifier>  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;    [BUGGY]  char  ch  =  chars[random.nextInt(gap)+  start];  [BUGGY]    if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	245	245	2	replace	char  ch  =  chars[random.nextInt(gap)+  start];	      char    ch    =    buffer[random.nextInt(gap)+    start];    	non-compiled	[CE]  <identifier>  expected	1	None	replace
46	[BUG]  [BUGGY]  char  ch  =  chars[random.nextInt(gap)+1];  [CE]  <identifier>  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;    [BUGGY]  char  ch  =  chars[random.nextInt(gap)+1];  [BUGGY]    if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	245	245	2	replace	char  ch  =  chars[random.nextInt(gap)+1];	      char    ch    =    buffer[random.nextInt(gap)+1];    	non-compiled	[CE]  <identifier>  expected	2	None	replace
47	[BUG]  [BUGGY]  char  ch  =  chars[random.nextInt(start)+  start];  [CE]  <identifier>  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;    [BUGGY]  char  ch  =  chars[random.nextInt(start)+  start];  [BUGGY]    if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	245	245	2	replace	char  ch  =  chars[random.nextInt(start)+  start];	      char    ch    =    buffer[random.nextInt(start)+    start];    	non-compiled	[CE]  <identifier>  expected	10	None	replace
48	[BUG]  [BUGGY]  char  ch  =  buffer[random.nextInt(start)/  start];  [CE]  <identifier>  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;    [BUGGY]  char  ch  =  buffer[random.nextInt(start)/  start];  [BUGGY]    if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	245	245	2	replace	char  ch  =  buffer[random.nextInt(start)/  start];	      char    ch    =    buffer[random.nextInt(start)+    start];    	non-compiled	[CE]  <identifier>  expected	10	None	replace
