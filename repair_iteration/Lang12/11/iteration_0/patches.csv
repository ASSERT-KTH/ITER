bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    char  ch  =  buffer[random.nextInt(gap)+  start];  [CE]  <identifier>  expected  [FE]    ArrayIndexOutOfBoundsException  [CONTEXT]  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  [BUGGY]    char  ch  =  buffer[random.nextInt(gap)+  start];  [BUGGY]  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	245	245	2	replace	    char  ch  =  buffer[random.nextInt(gap)+  start];		non-compiled	[CE]  <identifier>  expected	22	None	add
2	[BUG]  [BUGGY]    char  ch  =  buffer[random.nextInt(gap)+1];  [CE]  <identifier>  expected  [FE]      ArrayIndexOutOfBoundsException  [CONTEXT]  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  [BUGGY]    char  ch  =  buffer[random.nextInt(gap)+1];  [BUGGY]  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	245	245	2	replace	    char  ch  =  buffer[random.nextInt(gap)+1];		non-compiled	[CE]  <identifier>  expected	22	None	add
3	[BUG]  [BUGGY]    char  ch  =  buffer[random.nextInt(gap)];  [CE]  <identifier>  expected  [FE]        ArrayIndexOutOfBoundsException  [CONTEXT]  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  [BUGGY]    char  ch  =  buffer[random.nextInt(gap)];  [BUGGY]  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	245	245	2	replace	    char  ch  =  buffer[random.nextInt(gap)];		non-compiled	[CE]  <identifier>  expected	22	None	add
4	[BUG]  [BUGGY]    Character  ch  =  random.nextChar(gap);  [CE]  <identifier>  expected  [FE]          ArrayIndexOutOfBoundsException  [CONTEXT]  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  [BUGGY]    Character  ch  =  random.nextChar(gap);  [BUGGY]  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	245	245	2	replace	    Character  ch  =  random.nextChar(gap);		non-compiled	[CE]  <identifier>  expected	22	None	add
5	[BUG]  [BUGGY]  if(chars!=  null)  {  [CE]  <identifier>  expected  [FE]    ArrayIndexOutOfBoundsException  [CONTEXT]  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  [BUGGY]  if(chars!=  null)  {  [BUGGY]  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	245	245	2	replace	if(chars!=  null)  {	if  (chars  ==  null)  {  	non-compiled	[CE]  <identifier>  expected	21	None	replace
6	[BUG]  [BUGGY]  if(chars  ==  null  ||!numbers)  {  [CE]  <identifier>  expected  [FE]      ArrayIndexOutOfBoundsException  [CONTEXT]  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  [BUGGY]  if(chars  ==  null  ||!numbers)  {  [BUGGY]  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	245	245	2	replace	if(chars  ==  null  ||!numbers)  {	if  (chars  ==  null)  {  	non-compiled	[CE]  <identifier>  expected	21	None	replace
7	[BUG]  [BUGGY]  if(chars  ==  null  ||  buffer.length  ==  0)  {  [CE]  <identifier>  expected  [FE]        ArrayIndexOutOfBoundsException  [CONTEXT]  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  [BUGGY]  if(chars  ==  null  ||  buffer.length  ==  0)  {  [BUGGY]  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	245	245	2	replace	if(chars  ==  null  ||  buffer.length  ==  0)  {	if  (chars  ==  null)  {  	non-compiled	[CE]  <identifier>  expected	21	None	replace
8	[BUG]  [BUGGY]  if(buffer  ==  null)  {  [CE]  <identifier>  expected  [FE]    ArrayIndexOutOfBoundsException  [CONTEXT]  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  [BUGGY]  if(buffer  ==  null)  {  [BUGGY]  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	245	245	2	replace	if(buffer  ==  null)  {	if  (chars  ==  null)  {  	non-compiled	[CE]  <identifier>  expected	21	None	replace
9	[BUG]  [BUGGY]    char  ch  =  random.nextInt(gap);  [CE]  <identifier>  expected  [FE]    ArrayIndexOutOfBoundsException  [CONTEXT]  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  [BUGGY]    char  ch  =  random.nextInt(gap);  [BUGGY]  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	245	245	2	replace	    char  ch  =  random.nextInt(gap);		non-compiled	[CE]  <identifier>  expected	22	None	add
10	[BUG]  [BUGGY]    char  ch  =  buffer[random.nextInt(start)+  start];  [CE]  <identifier>  expected  [FE]      ArrayIndexOutOfBoundsException  [CONTEXT]  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  [BUGGY]    char  ch  =  buffer[random.nextInt(start)+  start];  [BUGGY]  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	245	245	2	replace	    char  ch  =  buffer[random.nextInt(start)+  start];		non-compiled	[CE]  <identifier>  expected	22	None	add
11	[BUG]  [BUGGY]  if(chars  ==  null  ||!chars.contains(ch))  {  [CE]  <identifier>  expected  [FE]    ArrayIndexOutOfBoundsException  [CONTEXT]  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  [BUGGY]  if(chars  ==  null  ||!chars.contains(ch))  {  [BUGGY]  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	245	245	2	replace	if(chars  ==  null  ||!chars.contains(ch))  {	if  (chars  ==  null)  {  	non-compiled	[CE]  <identifier>  expected	21	None	replace
12	[BUG]  [BUGGY]  if(chars  ==  null  ||!chars.length  ==  0)  {  [CE]  <identifier>  expected  [FE]      ArrayIndexOutOfBoundsException  [CONTEXT]  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  [BUGGY]  if(chars  ==  null  ||!chars.length  ==  0)  {  [BUGGY]  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  if(count  ==  0)  {  count++;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	245	245	2	replace	if(chars  ==  null  ||!chars.length  ==  0)  {	if  (chars  ==  null)  {  	non-compiled	[CE]  <identifier>  expected	21	None	replace
