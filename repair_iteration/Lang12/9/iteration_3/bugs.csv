bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  gap  =  buffer.length  -  start;  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  gap  =  buffer.length  -  start;  [BUGGY]        while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	int  gap  =  buffer.length  -  start;	  int    gap    =    buffer.length    -    end;    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
2	[BUG]  [BUGGY]  int  gap  =  end.length  -  buffer.length;  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  gap  =  end.length  -  buffer.length;  [BUGGY]        while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	int  gap  =  end.length  -  buffer.length;	  int    gap    =    buffer.length    -    end;    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
3	[BUG]  [BUGGY]  char  ch  =  random.random.nextInt(buffer,  count);  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  char  ch  =  random.random.nextInt(buffer,  count);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	char  ch  =  random.random.nextInt(buffer,  count);	  char    ch    =    random.random.nextInt(buffer);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
4	[BUG]  [BUGGY]  char  ch  =  buffer.nextInt(random);  [CE]  illegal  start  of  type  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  char  ch  =  buffer.nextInt(random);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	char  ch  =  buffer.nextInt(random);	  char    ch    =    random.random.nextInt(buffer);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
5	[BUG]  [BUGGY]  char  ch  =  random.random.nextInt(buffer,  0,  count);  [CE]  illegal  start  of  type  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  char  ch  =  random.random.nextInt(buffer,  0,  count);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	char  ch  =  random.random.nextInt(buffer,  0,  count);	  char    ch    =    random.random.nextInt(buffer);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
6	[BUG]  [BUGGY]  char[]  buffer  =  new  char[buffer.length  +  2];  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  char[]  buffer  =  new  char[buffer.length  +  2];  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	char[]  buffer  =  new  char[buffer.length  +  2];	  char[]    buffer    =    new    char[buffer.length    +    1];    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
7	[BUG]  [BUGGY]  char[]  buffer  =  new  char[buffer.length  *  1];  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  char[]  buffer  =  new  char[buffer.length  *  1];  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	char[]  buffer  =  new  char[buffer.length  *  1];	  char[]    buffer    =    new    char[buffer.length    +    1];    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
8	[BUG]  [BUGGY]  int  count  =  buffer[count.length()  ];  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  count  =  buffer[count.length()  ];  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	int  count  =  buffer[count.length()  ];	  int    count    =    buffer.length()    +    1;    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
9	[BUG]  [BUGGY]  Integer  count  =  buffer.length();  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  Integer  count  =  buffer.length();  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	Integer  count  =  buffer.length();	  int    count    =    buffer.length()    +    1;    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
10	[BUG]  [BUGGY]  int  count  =  random.nextInt(buff,  end);  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  count  =  random.nextInt(buff,  end);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	int  count  =  random.nextInt(buff,  end);	  int    count    =    random.nextInt(buff,    start);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
11	[BUG]  [BUGGY]  int  count  =  random.nextInt(buff,  0,  start);  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  count  =  random.nextInt(buff,  0,  start);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	int  count  =  random.nextInt(buff,  0,  start);	  int    count    =    random.nextInt(buff,    start);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
12	[BUG]  [BUGGY]  int  count  =  random.nextInt(gap,  end);  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  count  =  random.nextInt(gap,  end);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	int  count  =  random.nextInt(gap,  end);	  int    count    =    random.nextInt(gap,    start);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
13	[BUG]  [BUGGY]  int  count  =  random.nextInt(gap,  start  +  1);  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  count  =  random.nextInt(gap,  start  +  1);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	int  count  =  random.nextInt(gap,  start  +  1);	  int    count    =    random.nextInt(gap,    start);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
14	[BUG]  [BUGGY]  char[]  buffer  =  new  char[buffer  +  1];  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  char[]  buffer  =  new  char[buffer  +  1];  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	char[]  buffer  =  new  char[buffer  +  1];	  char[]    buffer    =    new    char[end    +    1];    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
15	[BUG]  [BUGGY]  int  gap  =  start  -  buffer.length  -  1;  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  gap  =  start  -  buffer.length  -  1;  [BUGGY]        while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	int  gap  =  start  -  buffer.length  -  1;	  int    gap    =    end    -    buffer.length    -    1;    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
16	[BUG]  [BUGGY]  int  gap  =  buffer.length  -  end  -  1;  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  gap  =  buffer.length  -  end  -  1;  [BUGGY]        while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	int  gap  =  buffer.length  -  end  -  1;	  int    gap    =    end    -    buffer.length    -    1;    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
17	[BUG]  [BUGGY]  int  gap  =  end  -  buffer.length  -  2;  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  gap  =  end  -  buffer.length  -  2;  [BUGGY]        while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	int  gap  =  end  -  buffer.length  -  2;	  int    gap    =    end    -    buffer.length    -    1;    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
18	[BUG]  [BUGGY]  Random  random  =  RandomStringUtils.getValue(buffer,  0,  buffer.length);  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  Random  random  =  RandomStringUtils.getValue(buffer,  0,  buffer.length);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	Random  random  =  RandomStringUtils.getValue(buffer,  0,  buffer.length);	  Random    random    =    RandomStringUtils.getValue(buffer,    0,    end);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
19	[BUG]  [BUGGY]  Random  random  =  RandomStringUtils.getValue(buffer,  0,  buffer.length,  end);  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  Random  random  =  RandomStringUtils.getValue(buffer,  0,  buffer.length,  end);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	Random  random  =  RandomStringUtils.getValue(buffer,  0,  buffer.length,  end);	  Random    random    =    RandomStringUtils.getValue(buffer,    0,    end);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
20	[BUG]  [BUGGY]  Random  random  =  RandomStringUtils.getValue(buffer,  0,  end,  count);  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  Random  random  =  RandomStringUtils.getValue(buffer,  0,  end,  count);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	Random  random  =  RandomStringUtils.getValue(buffer,  0,  end,  count);	  Random    random    =    RandomStringUtils.getValue(buffer,    0,    end);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
21	[BUG]  [BUGGY]  Random  random  =  RandomStringUtils.getRandom(random,  end);  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  Random  random  =  RandomStringUtils.getRandom(random,  end);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	Random  random  =  RandomStringUtils.getRandom(random,  end);	  Random    random    =    RandomStringUtils.getRandom(random,    start);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
22	[BUG]  [BUGGY]  Random  random  =  RandomStringUtils.getRandom(random,  buffer,  start);  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  Random  random  =  RandomStringUtils.getRandom(random,  buffer,  start);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	Random  random  =  RandomStringUtils.getRandom(random,  buffer,  start);	  Random    random    =    RandomStringUtils.getRandom(random,    start);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
23	[BUG]  [BUGGY]  Random  random  =  RandomStringUtils.getRandom(random,  start,  buffer.length);  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  Random  random  =  RandomStringUtils.getRandom(random,  start,  buffer.length);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	Random  random  =  RandomStringUtils.getRandom(random,  start,  buffer.length);	  Random    random    =    RandomStringUtils.getRandom(random,    start);    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
24	[BUG]  [BUGGY]  Character  ch  =  random.random.nextInt(buffer,  0,  start);  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  Character  ch  =  random.random.nextInt(buffer,  0,  start);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	Character  ch  =  random.random.nextInt(buffer,  0,  start);	  Character    ch    =    random.random.nextInt(buffer,    start);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
25	[BUG]  [BUGGY]  Character  ch  =  random.random.nextInt(buffer,  end);  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  Character  ch  =  random.random.nextInt(buffer,  end);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	Character  ch  =  random.random.nextInt(buffer,  end);	  Character    ch    =    random.random.nextInt(buffer,    start);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
26	[BUG]  [BUGGY]  Character  ch  =  random.random.nextInt(buffer,  start,  count);  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  Character  ch  =  random.random.nextInt(buffer,  start,  count);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	Character  ch  =  random.random.nextInt(buffer,  start,  count);	  Character    ch    =    random.random.nextInt(buffer,    start);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
27	[BUG]  [BUGGY]  Character  ch  =  random.random.nextInt(buffer,  start  +  1);  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  Character  ch  =  random.random.nextInt(buffer,  start  +  1);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	Character  ch  =  random.random.nextInt(buffer,  start  +  1);	  Character    ch    =    random.random.nextInt(buffer,    start);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
28	[BUG]  [BUGGY]  char[]  buffer  =  new  char[buffer.length];  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  char[]  buffer  =  new  char[buffer.length];  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	char[]  buffer  =  new  char[buffer.length];	  char[]    buffer    =    new    char[numbers];    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
29	[BUG]  [BUGGY]  Random  random  =  RandomStringUtils.getValue(buffer,  start,  end,  buffer.length);  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  Random  random  =  RandomStringUtils.getValue(buffer,  start,  end,  buffer.length);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	Random  random  =  RandomStringUtils.getValue(buffer,  start,  end,  buffer.length);	  Random    random    =    RandomStringUtils.getValue(buffer,    start,    end,    count);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
30	[BUG]  [BUGGY]  Random  random  =  RandomStringUtils.getValue(buffer,  start,  end,  count,  letters);  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  Random  random  =  RandomStringUtils.getValue(buffer,  start,  end,  count,  letters);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	Random  random  =  RandomStringUtils.getValue(buffer,  start,  end,  count,  letters);	  Random    random    =    RandomStringUtils.getValue(buffer,    start,    end,    count);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
31	[BUG]  [BUGGY]  String  count  =  chars.length;  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  String  count  =  chars.length;  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	String  count  =  chars.length;	  char    count    =    chars.length;    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
32	[BUG]  [BUGGY]  char  count  =  buffer.length;  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  char  count  =  buffer.length;  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	char  count  =  buffer.length;	  char    count    =    chars.length;    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
33	[BUG]  [BUGGY]  char  count  =  chars.length  -  1;  [CE]  illegal  start  of  type  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  char  count  =  chars.length  -  1;  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	char  count  =  chars.length  -  1;	  char    count    =    chars.length;    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
34	[BUG]  [BUGGY]  char[]  buffer  =  new  char[length  +  2];  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  char[]  buffer  =  new  char[length  +  2];  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	char[]  buffer  =  new  char[length  +  2];	  char[]    buffer    =    new    char[length    +    1];    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
35	[BUG]  [BUGGY]  int  gap  =  end  /  2;  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  gap  =  end  /  2;  [BUGGY]        while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	int  gap  =  end  /  2;	  int    gap    =    end    /    4;    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
36	[BUG]  [BUGGY]  int  gap  =  end  /  4  +  1;  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  gap  =  end  /  4  +  1;  [BUGGY]        while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	int  gap  =  end  /  4  +  1;	  int    gap    =    end    /    4;    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
37	[BUG]  [BUGGY]  Random  random  =  RandomStringUtils.getValue(buffer,  start,  end,  numbers);  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  Random  random  =  RandomStringUtils.getValue(buffer,  start,  end,  numbers);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	Random  random  =  RandomStringUtils.getValue(buffer,  start,  end,  numbers);	  Random    random    =    RandomStringUtils.getValue(buffer,    start,    end,    letters);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
38	[BUG]  [BUGGY]  Random  random  =  RandomStringUtils.getValue(buffer,  start,  end,  letters,  numbers);  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  Random  random  =  RandomStringUtils.getValue(buffer,  start,  end,  letters,  numbers);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	Random  random  =  RandomStringUtils.getValue(buffer,  start,  end,  letters,  numbers);	  Random    random    =    RandomStringUtils.getValue(buffer,    start,    end,    letters);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
39	[BUG]  [BUGGY]  int  count  =  random.nextInt(buffer,  0,  buffer.length  -  1);  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  count  =  random.nextInt(buffer,  0,  buffer.length  -  1);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	int  count  =  random.nextInt(buffer,  0,  buffer.length  -  1);	  int    count    =    random.nextInt(buffer,    0,    buffer.length);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
40	[BUG]  [BUGGY]  int  count  =  random.nextInt(buffer,  0,  buffer.length  -  start);  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  count  =  random.nextInt(buffer,  0,  buffer.length  -  start);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	int  count  =  random.nextInt(buffer,  0,  buffer.length  -  start);	  int    count    =    random.nextInt(buffer,    0,    buffer.length);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
41	[BUG]  [BUGGY]  int  count  =  random.nextInt(buffer,  0,  buffer.length  +  1);  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  count  =  random.nextInt(buffer,  0,  buffer.length  +  1);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	int  count  =  random.nextInt(buffer,  0,  buffer.length  +  1);	  int    count    =    random.nextInt(buffer,    0,    buffer.length);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
42	[BUG]  [BUGGY]  Random  random  =  RandomStringUtils.getValue(buffer,  0,  buffer.length,  start,  end);  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  Random  random  =  RandomStringUtils.getValue(buffer,  0,  buffer.length,  start,  end);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	Random  random  =  RandomStringUtils.getValue(buffer,  0,  buffer.length,  start,  end);	  Random    random    =    RandomStringUtils.getValue(buffer,    0,    start,    end);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
43	[BUG]  [BUGGY]  Random  random  =  RandomStringUtils.getValue(buffer,  0,  end,  start);  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  Random  random  =  RandomStringUtils.getValue(buffer,  0,  end,  start);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	Random  random  =  RandomStringUtils.getValue(buffer,  0,  end,  start);	  Random    random    =    RandomStringUtils.getValue(buffer,    0,    start,    end);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
44	[BUG]  [BUGGY]  Random  random  =  RandomStringUtils.getValue(buffer,  0,  buffer[count],  end);  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  Random  random  =  RandomStringUtils.getValue(buffer,  0,  buffer[count],  end);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	Random  random  =  RandomStringUtils.getValue(buffer,  0,  buffer[count],  end);	  Random    random    =    RandomStringUtils.getValue(buffer,    0,    start,    end);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
45	[BUG]  [BUGGY]  Random  random  =  RandomStringUtils.getValue(buffer,  0,  buffer,  0,  chars);  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  Random  random  =  RandomStringUtils.getValue(buffer,  0,  buffer,  0,  chars);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	Random  random  =  RandomStringUtils.getValue(buffer,  0,  buffer,  0,  chars);	  Random    random    =    RandomStringUtils.getValue(buffer,    start,    end,    chars);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
46	[BUG]  [BUGGY]  int  gap  =  buffer.length  -  start.length;  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  gap  =  buffer.length  -  start.length;  [BUGGY]        while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	int  gap  =  buffer.length  -  start.length;	  int    gap    =    start    -    buffer.length;    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
47	[BUG]  [BUGGY]  char  gap  =  end  -  buffer.length;  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  char  gap  =  end  -  buffer.length;  [BUGGY]        while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	char  gap  =  end  -  buffer.length;	  int    gap    =    start    -    buffer.length;    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
48	[BUG]  [BUGGY]  Character  ch  =  chars[random.nextInt(gap)+  start  +  1;  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  Character  ch  =  chars[random.nextInt(gap)+  start  +  1;  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	Character  ch  =  chars[random.nextInt(gap)+  start  +  1;	  Character    ch    =    chars[random.nextInt(gap)+    start;    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
49	[BUG]  [BUGGY]  Character  ch  =  buffer[random.nextInt(gap)+  start;  [CE]  illegal  start  of  type  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  Character  ch  =  buffer[random.nextInt(gap)+  start;  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	Character  ch  =  buffer[random.nextInt(gap)+  start;	  Character    ch    =    chars[random.nextInt(gap)+    start;    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
50	[BUG]  [BUGGY]  Character  ch  =  chars[random.nextInt(gap)+  1;  [CE]  illegal  start  of  type  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  Character  ch  =  chars[random.nextInt(gap)+  1;  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	Character  ch  =  chars[random.nextInt(gap)+  1;	  Character    ch    =    chars[random.nextInt(gap)+    start;    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
51	[BUG]  [BUGGY]  int  gap  =  0;  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  gap  =  0;  [BUGGY]        while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	int  gap  =  0;	  int    gap    =    0    -    end;    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
52	[BUG]  [BUGGY]  char  gap  =  0  -  start;  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  char  gap  =  0  -  start;  [BUGGY]        while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	char  gap  =  0  -  start;	  int    gap    =    0    -    end;    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
53	[BUG]  [BUGGY]  int  gap  =  0  -  start;  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  gap  =  0  -  start;  [BUGGY]        while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	int  gap  =  0  -  start;	  int    gap    =    0    -    end;    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
54	[BUG]  [BUGGY]  char  gap  =  0  -  end;  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  char  gap  =  0  -  end;  [BUGGY]        while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	char  gap  =  0  -  end;	  int    gap    =    0    -    end;    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
55	[BUG]  [BUGGY]  int  count  =  random.nextInt(buffer,  0,  start,  end);  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  count  =  random.nextInt(buffer,  0,  start,  end);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	int  count  =  random.nextInt(buffer,  0,  start,  end);	  int    count    =    random.nextInt(buffer,    0,    end);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
56	[BUG]  [BUGGY]  int  count  =  random.nextInt(buffer,  0,  end  +  1);  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  count  =  random.nextInt(buffer,  0,  end  +  1);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	int  count  =  random.nextInt(buffer,  0,  end  +  1);	  int    count    =    random.nextInt(buffer,    0,    end);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
57	[BUG]  [BUGGY]  char  count  =  random.nextInt(buffer,  0,  end);  [CE]  illegal  start  of  type  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  char  count  =  random.nextInt(buffer,  0,  end);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	char  count  =  random.nextInt(buffer,  0,  end);	  int    count    =    random.nextInt(buffer,    0,    end);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
58	[BUG]  [BUGGY]  Character  ch  =  random.random.nextInt(buffer,  start,  end);  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  Character  ch  =  random.random.nextInt(buffer,  start,  end);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	Character  ch  =  random.random.nextInt(buffer,  start,  end);	  Character    ch    =    random.random.nextInt(start,    end);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
59	[BUG]  [BUGGY]  Character  ch  =  random.random.nextInt(start,  end  +  1);  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  Character  ch  =  random.random.nextInt(start,  end  +  1);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	Character  ch  =  random.random.nextInt(start,  end  +  1);	  Character    ch    =    random.random.nextInt(start,    end);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
60	[BUG]  [BUGGY]  char  ch  =  random.random.nextInt(start,  end  +  1);  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  char  ch  =  random.random.nextInt(start,  end  +  1);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	char  ch  =  random.random.nextInt(start,  end  +  1);	  Character    ch    =    random.random.nextInt(start,    end);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
61	[BUG]  [BUGGY]  Character  ch  =  random.random.nextInt(buff,  start,  end);  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  Character  ch  =  random.random.nextInt(buff,  start,  end);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	Character  ch  =  random.random.nextInt(buff,  start,  end);	  Character    ch    =    random.random.nextInt(start,    end);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
62	[BUG]  [BUGGY]  int  count  =  random.nextInt(gap,  0,  buffer.length);  [CE]  illegal  start  of  type  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  count  =  random.nextInt(gap,  0,  buffer.length);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	int  count  =  random.nextInt(gap,  0,  buffer.length);	  int    count    =    random.nextInt(gap,    0,    start);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
63	[BUG]  [BUGGY]  int  count  =  random.nextInt(gap,  0,  end);  [CE]  illegal  start  of  type  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  count  =  random.nextInt(gap,  0,  end);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	int  count  =  random.nextInt(gap,  0,  end);	  int    count    =    random.nextInt(gap,    0,    start);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
64	[BUG]  [BUGGY]  char  gap  =  buffer.length  -  1;  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  char  gap  =  buffer.length  -  1;  [BUGGY]        while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	char  gap  =  buffer.length  -  1;	  int    gap    =    buffer.length    -    1;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
65	[BUG]  [BUGGY]  int  gap  =  buffer.length  -  2;  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  gap  =  buffer.length  -  2;  [BUGGY]        while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	int  gap  =  buffer.length  -  2;	  int    gap    =    buffer.length    -    1;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
66	[BUG]  [BUGGY]  char[]  buffer  =  new  char[length  -  start  +  1];  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  char[]  buffer  =  new  char[length  -  start  +  1];  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	char[]  buffer  =  new  char[length  -  start  +  1];	  char[]    buffer    =    new    char[length    -    start];    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
67	[BUG]  [BUGGY]  int  count  =  buffer.length  +  1;  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  count  =  buffer.length  +  1;  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	int  count  =  buffer.length  +  1;	  int    count    =    chars.length    +    1;    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
68	[BUG]  [BUGGY]  int  count  =  chars.length  /  1;  [CE]  illegal  start  of  type  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  count  =  chars.length  /  1;  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	int  count  =  chars.length  /  1;	  int    count    =    chars.length    +    1;    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
69	[BUG]  [BUGGY]  Character  ch  =  random.random.nextInt(buffer,  1,  count);  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  Character  ch  =  random.random.nextInt(buffer,  1,  count);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	Character  ch  =  random.random.nextInt(buffer,  1,  count);	  Character    ch    =    random.random.nextInt(buffer,    count);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
70	[BUG]  [BUGGY]  int  count  =  random.nextInt(buffer,  start,  end);  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  count  =  random.nextInt(buffer,  start,  end);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	int  count  =  random.nextInt(buffer,  start,  end);	  int    count    =    random.nextInt(buffer,    start);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
71	[BUG]  [BUGGY]  int  count  =  random.nextInt(buffer,  start,  0);  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  count  =  random.nextInt(buffer,  start,  0);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	int  count  =  random.nextInt(buffer,  start,  0);	  int    count    =    random.nextInt(buffer,    start);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
72	[BUG]  [BUGGY]  Random  random  =  RandomStringUtils.getValue(buffer,  0,  buffer,  0,  chars.length);  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  Random  random  =  RandomStringUtils.getValue(buffer,  0,  buffer,  0,  chars.length);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	Random  random  =  RandomStringUtils.getValue(buffer,  0,  buffer,  0,  chars.length);	  Random    random    =    RandomStringUtils.getValue(buffer,    start,    end,    chars.length);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
73	[BUG]  [BUGGY]  Random  random  =  RandomStringUtils.getValue(chars,  start,  end,  buffer.length);  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  Random  random  =  RandomStringUtils.getValue(chars,  start,  end,  buffer.length);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	Random  random  =  RandomStringUtils.getValue(chars,  start,  end,  buffer.length);	  Random    random    =    RandomStringUtils.getValue(buffer,    start,    end,    chars.length);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
74	[BUG]  [BUGGY]  Random  random  =  RandomStringUtils.getValue(buffer,  start,  end,  count,  chars.length);  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  Random  random  =  RandomStringUtils.getValue(buffer,  start,  end,  count,  chars.length);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	Random  random  =  RandomStringUtils.getValue(buffer,  start,  end,  count,  chars.length);	  Random    random    =    RandomStringUtils.getValue(buffer,    start,    end,    chars.length);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
75	[BUG]  [BUGGY]  Character  ch  =  buffer.nextInt(random);  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  Character  ch  =  buffer.nextInt(random);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	Character  ch  =  buffer.nextInt(random);	  Character    ch    =    random.random.nextInt(buffer);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
76	[BUG]  [BUGGY]  int  gap  =  buffer.length  -  end  +  1;  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  gap  =  buffer.length  -  end  +  1;  [BUGGY]        while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	int  gap  =  buffer.length  -  end  +  1;	  int    gap    =    end    -    buffer.length    +    1;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
77	[BUG]  [BUGGY]  int  gap  =  start  -  buffer.length  +  1;  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  gap  =  start  -  buffer.length  +  1;  [BUGGY]        while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	int  gap  =  start  -  buffer.length  +  1;	  int    gap    =    end    -    buffer.length    +    1;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
78	[BUG]  [BUGGY]  char[]  buffer  =  new  char[numbers  -  start  +  1];  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  char[]  buffer  =  new  char[numbers  -  start  +  1];  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	char[]  buffer  =  new  char[numbers  -  start  +  1];	  char[]    buffer    =    new    char[count    -    start    +    1];    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
79	[BUG]  [BUGGY]  char[]  buffer  =  new  char[buffer.length  -  start  +  1];  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  char[]  buffer  =  new  char[buffer.length  -  start  +  1];  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	char[]  buffer  =  new  char[buffer.length  -  start  +  1];	  char[]    buffer    =    new    char[count    -    start    +    1];    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
80	[BUG]  [BUGGY]  Random  random  =  RandomStringUtils.getRandom(buffer).toCharArray();  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  Random  random  =  RandomStringUtils.getRandom(buffer).toCharArray();  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	Random  random  =  RandomStringUtils.getRandom(buffer).toCharArray();	  Random    random    =    RandomStringUtils.getRandom(random).toCharArray();    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
81	[BUG]  [BUGGY]  Random  random  =  RandomStringUtils.getRandom(random),  buffer.toCharArray();  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  Random  random  =  RandomStringUtils.getRandom(random),  buffer.toCharArray();  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	Random  random  =  RandomStringUtils.getRandom(random),  buffer.toCharArray();	  Random    random    =    RandomStringUtils.getRandom(random).toCharArray();    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
82	[BUG]  [BUGGY]  Random  random  =  RandomStringUtils.getRandom(buffer,  start).toCharArray();  [CE]  illegal  start  of  type  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  Random  random  =  RandomStringUtils.getRandom(buffer,  start).toCharArray();  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	Random  random  =  RandomStringUtils.getRandom(buffer,  start).toCharArray();	  Random    random    =    RandomStringUtils.getRandom(random).toCharArray();    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
83	[BUG]  [BUGGY]  Random  random  =  RandomStringUtils.getValue(buffer,  0,  buffer.length,  end,  0);  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  Random  random  =  RandomStringUtils.getValue(buffer,  0,  buffer.length,  end,  0);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	Random  random  =  RandomStringUtils.getValue(buffer,  0,  buffer.length,  end,  0);	  Random    random    =    RandomStringUtils.getValue(buffer,    start,    end,    0);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
84	[BUG]  [BUGGY]  Random  random  =  RandomStringUtils.getValue(buffer,  0,  buffer.length,  0);  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  Random  random  =  RandomStringUtils.getValue(buffer,  0,  buffer.length,  0);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	Random  random  =  RandomStringUtils.getValue(buffer,  0,  buffer.length,  0);	  Random    random    =    RandomStringUtils.getValue(buffer,    start,    end,    0);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
85	[BUG]  [BUGGY]  Random  random  =  RandomStringUtils.getValue(buffer,  start,  end,  0,  count);  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  Random  random  =  RandomStringUtils.getValue(buffer,  start,  end,  0,  count);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	Random  random  =  RandomStringUtils.getValue(buffer,  start,  end,  0,  count);	  Random    random    =    RandomStringUtils.getValue(buffer,    start,    end,    0);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
86	[BUG]  [BUGGY]  Random  random  =  RandomStringUtils.getValue(buffer,  0,  end,  0);  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  Random  random  =  RandomStringUtils.getValue(buffer,  0,  end,  0);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	Random  random  =  RandomStringUtils.getValue(buffer,  0,  end,  0);	  Random    random    =    RandomStringUtils.getValue(buffer,    start,    end,    0);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
87	[BUG]  [BUGGY]  Character  ch  =  buffer[random.nextInt(gap)+  start];  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  Character  ch  =  buffer[random.nextInt(gap)+  start];  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	Character  ch  =  buffer[random.nextInt(gap)+  start];	  Character    ch    =    chars[random.nextInt(gap)+    start];    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
88	[BUG]  [BUGGY]  Character  ch  =  chars[random.nextInt(gap)+  1];  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  Character  ch  =  chars[random.nextInt(gap)+  1];  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	Character  ch  =  chars[random.nextInt(gap)+  1];	  Character    ch    =    chars[random.nextInt(gap)+    start];    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
89	[BUG]  [BUGGY]  char  ch  =  buffer[random.nextInt(gap)+  start];  [CE]  illegal  start  of  type  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  char  ch  =  buffer[random.nextInt(gap)+  start];  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	char  ch  =  buffer[random.nextInt(gap)+  start];	  Character    ch    =    chars[random.nextInt(gap)+    start];    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
90	[BUG]  [BUGGY]  int  gap  =  start  +  1;  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  gap  =  start  +  1;  [BUGGY]        while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	int  gap  =  start  +  1;	  int    gap    =    end    +    1;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
91	[BUG]  [BUGGY]  int  gap  =  buffer.length  +  1;  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  gap  =  buffer.length  +  1;  [BUGGY]        while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	int  gap  =  buffer.length  +  1;	  int    gap    =    end    +    1;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
92	[BUG]  [BUGGY]  int  gap  =  start  -  2;  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  gap  =  start  -  2;  [BUGGY]        while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	int  gap  =  start  -  2;	  int    gap    =    end    -    2;    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
93	[BUG]  [BUGGY]  int  gap  =  end  +  2;  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  gap  =  end  +  2;  [BUGGY]        while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	int  gap  =  end  +  2;	  int    gap    =    end    -    2;    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
94	[BUG]  [BUGGY]  char  gap  =  end  -  1;  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  char  gap  =  end  -  1;  [BUGGY]        while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	char  gap  =  end  -  1;	  int    gap    =    end    -    2;    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
95	[BUG]  [BUGGY]  char  ch  =  buffer.nextInt(gap);  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  char  ch  =  buffer.nextInt(gap);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	char  ch  =  buffer.nextInt(gap);	  char    ch    =    random.random.nextInt(gap);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
96	[BUG]  [BUGGY]  char  ch  =  buffer[random.nextInt(gap)];  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  char  ch  =  buffer[random.nextInt(gap)];  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	char  ch  =  buffer[random.nextInt(gap)];	  char    ch    =    random.random.nextInt(gap);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
97	[BUG]  [BUGGY]  char  ch  =  random.random.nextInt(gap,  start);  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  char  ch  =  random.random.nextInt(gap,  start);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	char  ch  =  random.random.nextInt(gap,  start);	  char    ch    =    random.random.nextInt(gap);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
98	[BUG]  [BUGGY]  char  ch  =  random.random.nextInt(start);  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  char  ch  =  random.random.nextInt(start);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	char  ch  =  random.random.nextInt(start);	  char    ch    =    random.random.nextInt(gap);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
99	[BUG]  [BUGGY]  char  gap  =  end  -  start  +  1;  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  char  gap  =  end  -  start  +  1;  [BUGGY]        while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	char  gap  =  end  -  start  +  1;	  char    gap    =    end    -    start;    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
100	[BUG]  [BUGGY]  char  gap  =  start  -  end;  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  char  gap  =  start  -  end;  [BUGGY]        while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	char  gap  =  start  -  end;	  char    gap    =    end    -    start;    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
101	[BUG]  [BUGGY]  String  gap  =  end  -  start;  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  String  gap  =  end  -  start;  [BUGGY]        while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	String  gap  =  end  -  start;	  char    gap    =    end    -    start;    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
102	[BUG]  [BUGGY]  Random  random  =  RandomStringUtils.getRandom(buffer,  0,  end);  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  Random  random  =  RandomStringUtils.getRandom(buffer,  0,  end);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	Random  random  =  RandomStringUtils.getRandom(buffer,  0,  end);	  Random    random    =    RandomStringUtils.getRandom(buffer,    start,    end);    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
103	[BUG]  [BUGGY]  Random  random  =  RandomStringUtils.getRandom(buffer,  start,  end,  letters);  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  Random  random  =  RandomStringUtils.getRandom(buffer,  start,  end,  letters);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	Random  random  =  RandomStringUtils.getRandom(buffer,  start,  end,  letters);	  Random    random    =    RandomStringUtils.getRandom(buffer,    start,    end);    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
104	[BUG]  [BUGGY]  Random  random  =  RandomStringUtils.getRandom(buffer,  0,  start,  end);  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  Random  random  =  RandomStringUtils.getRandom(buffer,  0,  start,  end);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	Random  random  =  RandomStringUtils.getRandom(buffer,  0,  start,  end);	  Random    random    =    RandomStringUtils.getRandom(buffer,    start,    end);    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
105	[BUG]  [BUGGY]  Random  random  =  RandomStringUtils.getRandom(buffer,  start,  end,  count);  [CE]  illegal  start  of  type  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  Random  random  =  RandomStringUtils.getRandom(buffer,  start,  end,  count);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	Random  random  =  RandomStringUtils.getRandom(buffer,  start,  end,  count);	  Random    random    =    RandomStringUtils.getRandom(buffer,    start,    end);    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
106	[BUG]  [BUGGY]  int  count  =  buffer.length  -  1;  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  count  =  buffer.length  -  1;  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	int  count  =  buffer.length  -  1;	  int    count    =    chars.length    -    1;    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
107	[BUG]  [BUGGY]  int  count  =  chars.length  -  2;  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  count  =  chars.length  -  2;  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	int  count  =  chars.length  -  2;	  int    count    =    chars.length    -    1;    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
108	[BUG]  [BUGGY]  int  count  =  chars.length  -  1  +  1;  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  count  =  chars.length  -  1  +  1;  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	int  count  =  chars.length  -  1  +  1;	  int    count    =    chars.length    -    1;    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
109	[BUG]  [BUGGY]  Character  ch  =  buffer[random.nextInt(gap)+1];  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  Character  ch  =  buffer[random.nextInt(gap)+1];  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	Character  ch  =  buffer[random.nextInt(gap)+1];	  Character    ch    =    buffer[random.nextInt(gap)];    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
110	[BUG]  [BUGGY]  Character  ch  =  buffer[random.nextInt(start)];  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  Character  ch  =  buffer[random.nextInt(start)];  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	Character  ch  =  buffer[random.nextInt(start)];	  Character    ch    =    buffer[random.nextInt(gap)];    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
111	[BUG]  [BUGGY]  char  ch  =  random.random.nextInt(buffer,  0,  start);  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  char  ch  =  random.random.nextInt(buffer,  0,  start);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	char  ch  =  random.random.nextInt(buffer,  0,  start);	  char    ch    =    random.random.nextInt(buffer,    start);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
112	[BUG]  [BUGGY]  char  ch  =  random.random.nextInt(buffer,  start  +  1);  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  char  ch  =  random.random.nextInt(buffer,  start  +  1);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	char  ch  =  random.random.nextInt(buffer,  start  +  1);	  char    ch    =    random.random.nextInt(buffer,    start);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
113	[BUG]  [BUGGY]  char  ch  =  random.random.nextInt(buffer,  end);  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  char  ch  =  random.random.nextInt(buffer,  end);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	char  ch  =  random.random.nextInt(buffer,  end);	  char    ch    =    random.random.nextInt(buffer,    start);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
114	[BUG]  [BUGGY]  char  ch  =  random.random.nextInt(buffer,  start,  count);  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  char  ch  =  random.random.nextInt(buffer,  start,  count);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	char  ch  =  random.random.nextInt(buffer,  start,  count);	  char    ch    =    random.random.nextInt(buffer,    start);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
115	[BUG]  [BUGGY]  String  count  =  random.nextInt(gap);  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  String  count  =  random.nextInt(gap);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	String  count  =  random.nextInt(gap);	  char    count    =    random.nextInt(gap);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
116	[BUG]  [BUGGY]  char  count  =  random.nextInt(buffer,  start);  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  char  count  =  random.nextInt(buffer,  start);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	char  count  =  random.nextInt(buffer,  start);	  char    count    =    random.nextInt(gap);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
117	[BUG]  [BUGGY]  char  count  =  random.nextInt(gap,  start);  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  char  count  =  random.nextInt(gap,  start);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	char  count  =  random.nextInt(gap,  start);	  char    count    =    random.nextInt(gap);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
118	[BUG]  [BUGGY]  char  count  =  random.nextInt(buffer);  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  char  count  =  random.nextInt(buffer);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	char  count  =  random.nextInt(buffer);	  char    count    =    random.nextInt(gap);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
119	[BUG]  [BUGGY]  Random  random  =  RandomStringUtils.getRandom(buffer,  0,  count);  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  Random  random  =  RandomStringUtils.getRandom(buffer,  0,  count);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	Random  random  =  RandomStringUtils.getRandom(buffer,  0,  count);	  Random    random    =    RandomStringUtils.getRandom(buffer);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
120	[BUG]  [BUGGY]  Random  random  =  RandomStringUtils.getRandom(buffer,  0,  buffer.length);  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  Random  random  =  RandomStringUtils.getRandom(buffer,  0,  buffer.length);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	Random  random  =  RandomStringUtils.getRandom(buffer,  0,  buffer.length);	  Random    random    =    RandomStringUtils.getRandom(buffer);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
121	[BUG]  [BUGGY]  int  count  =  random.nextInt(start,  end);  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  count  =  random.nextInt(start,  end);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	int  count  =  random.nextInt(start,  end);	  int    count    =    random.nextInt(buffer,    end);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
122	[BUG]  [BUGGY]  int  count  =  random.nextInt(buffer,  1,  end);  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  count  =  random.nextInt(buffer,  1,  end);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	int  count  =  random.nextInt(buffer,  1,  end);	  int    count    =    random.nextInt(buffer,    end);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
123	[BUG]  [BUGGY]  char[]  buffer  =  new  char[buffer.length  -  1  +  1];  [CE]  <identifier>  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  char[]  buffer  =  new  char[buffer.length  -  1  +  1];  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	char[]  buffer  =  new  char[buffer.length  -  1  +  1];	  char[]    buffer    =    new    char[buffer.length    -    1];    	non-compiled	[CE]  <identifier>  expected	26	None	replace
124	[BUG]  [BUGGY]  char[]  buffer  =  new  char[buffer.length  -  2];  [CE]  <identifier>  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  char[]  buffer  =  new  char[buffer.length  -  2];  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	char[]  buffer  =  new  char[buffer.length  -  2];	  char[]    buffer    =    new    char[buffer.length    -    1];    	non-compiled	[CE]  <identifier>  expected	26	None	replace
125	[BUG]  [BUGGY]  char  count  =  chars.nextInt(buffer,  start);  [CE]  <identifier>  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  char  count  =  chars.nextInt(buffer,  start);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	char  count  =  chars.nextInt(buffer,  start);	  int    count    =    chars.nextInt(gap);    	non-compiled	[CE]  <identifier>  expected	64	None	replace
126	[BUG]  [BUGGY]  char  count  =  chars.nextInt(buffer);  [CE]  <identifier>  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  char  count  =  chars.nextInt(buffer);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	char  count  =  chars.nextInt(buffer);	  int    count    =    chars.nextInt(gap);    	non-compiled	[CE]  <identifier>  expected	64	None	replace
127	[BUG]  [BUGGY]  Character  ch  =  random.random.nextInt(gap  +  1);  [CE]  <identifier>  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  Character  ch  =  random.random.nextInt(gap  +  1);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	Character  ch  =  random.random.nextInt(gap  +  1);	  Character    ch    =    random.random.nextInt(start    +    1);    	non-compiled	[CE]  <identifier>  expected	76	None	replace
128	[BUG]  [BUGGY]  Character  ch  =  random.random.nextInt(gap,  start  +  1);  [CE]  <identifier>  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  Character  ch  =  random.random.nextInt(gap,  start  +  1);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	Character  ch  =  random.random.nextInt(gap,  start  +  1);	  Character    ch    =    random.random.nextInt(start    +    1);    	non-compiled	[CE]  <identifier>  expected	76	None	replace
129	[BUG]  [BUGGY]  int  count  =  buffer.length  -  start;  [CE]  <identifier>  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  count  =  buffer.length  -  start;  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	int  count  =  buffer.length  -  start;	  int    count    =    buffer.length;    	non-compiled	[CE]  <identifier>  expected	28	None	replace
130	[BUG]  [BUGGY]  int  count  =  buffer.length  -  2;  [CE]  <identifier>  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  count  =  buffer.length  -  2;  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	int  count  =  buffer.length  -  2;	  int    count    =    buffer.length;    	non-compiled	[CE]  <identifier>  expected	28	None	replace
131	[BUG]  [BUGGY]  char  gap  =  last.length  -  1;  [CE]  <identifier>  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  char  gap  =  last.length  -  1;  [BUGGY]        while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	char  gap  =  last.length  -  1;	  int    gap    =    last.length    -    1;    	non-compiled	[CE]  <identifier>  expected	69	None	replace
132	[BUG]  [BUGGY]  int  gap  =  end.length  -  1;  [CE]  <identifier>  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  gap  =  end.length  -  1;  [BUGGY]        while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	int  gap  =  end.length  -  1;	  int    gap    =    last.length    -    1;    	non-compiled	[CE]  <identifier>  expected	69	None	replace
133	[BUG]  [BUGGY]  int  count  =  chars.length()  -  1;  [CE]  <identifier>  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  count  =  chars.length()  -  1;  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	int  count  =  chars.length()  -  1;	  int    count    =    buffer.length()    -    1;    	non-compiled	[CE]  <identifier>  expected	50	None	replace
134	[BUG]  [BUGGY]  Character  ch  =  buffer.nextInt(gap);  [CE]  <identifier>  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  Character  ch  =  buffer.nextInt(gap);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	Character  ch  =  buffer.nextInt(gap);	  Character    ch    =    chars.nextInt(gap);    	non-compiled	[CE]  <identifier>  expected	71	None	replace
135	[BUG]  [BUGGY]  Character  ch  =  random.random.nextInt(buffer,  0,  buffer.length);  [CE]  <identifier>  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  Character  ch  =  random.random.nextInt(buffer,  0,  buffer.length);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	Character  ch  =  random.random.nextInt(buffer,  0,  buffer.length);	  Character    ch    =    random.random.nextInt(buffer,    0,    count);    	non-compiled	[CE]  <identifier>  expected	63	None	replace
136	[BUG]  [BUGGY]  Character  ch  =  random.random.nextInt(buffer,  0,  count  +  1);  [CE]  <identifier>  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  Character  ch  =  random.random.nextInt(buffer,  0,  count  +  1);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	Character  ch  =  random.random.nextInt(buffer,  0,  count  +  1);	  Character    ch    =    random.random.nextInt(buffer,    0,    count);    	non-compiled	[CE]  <identifier>  expected	63	None	replace
137	[BUG]  [BUGGY]  Character  ch  =  random.random.nextInt(buffer,  0,  end);  [CE]  <identifier>  expected  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  Character  ch  =  random.random.nextInt(buffer,  0,  end);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	Character  ch  =  random.random.nextInt(buffer,  0,  end);	  Character    ch    =    random.random.nextInt(buffer,    0,    count);    	non-compiled	[CE]  <identifier>  expected	63	None	replace
138	[BUG]  [BUGGY]  Character  ch  =  random.random.nextInt(buffer,  0,  count  -  1);  [CE]  <identifier>  expected  [FE]                              ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  Character  ch  =  random.random.nextInt(buffer,  0,  count  -  1);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	Character  ch  =  random.random.nextInt(buffer,  0,  count  -  1);	  Character    ch    =    random.random.nextInt(buffer,    0,    count);    	non-compiled	[CE]  <identifier>  expected	63	None	replace
139	[BUG]  [BUGGY]  int  count  =  random.nextInt(buffer,  0,  start  +  1,  end);  [CE]  <identifier>  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  count  =  random.nextInt(buffer,  0,  start  +  1,  end);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	int  count  =  random.nextInt(buffer,  0,  start  +  1,  end);	  int    count    =    random.nextInt(buffer,    0,    start    +    1);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
140	[BUG]  [BUGGY]  int  count  =  random.nextInt(gap,  0,  start  +  1);  [CE]  <identifier>  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  count  =  random.nextInt(gap,  0,  start  +  1);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	int  count  =  random.nextInt(gap,  0,  start  +  1);	  int    count    =    random.nextInt(buffer,    0,    start    +    1);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
141	[BUG]  [BUGGY]  char[]  buffer  =  new  char[128];  [CE]  <identifier>  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  char[]  buffer  =  new  char[128];  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	char[]  buffer  =  new  char[128];	  char[]    buffer    =    new    char[1];    	non-compiled	[CE]  <identifier>  expected	68	None	replace
142	[BUG]  [BUGGY]  int  count  =  buffer.nextInt(start);  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  count  =  buffer.nextInt(start);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	int  count  =  buffer.nextInt(start);	  int    count    =    chars.nextInt(start);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
143	[BUG]  [BUGGY]  int  count  =  chars.nextInt(buffer,  start);  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  count  =  chars.nextInt(buffer,  start);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	int  count  =  chars.nextInt(buffer,  start);	  int    count    =    chars.nextInt(start);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
144	[BUG]  [BUGGY]  int  gap  =  end  -  start.length  -  1;  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  gap  =  end  -  start.length  -  1;  [BUGGY]        while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	int  gap  =  end  -  start.length  -  1;	  int    gap    =    end    -    start.length;    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
145	[BUG]  [BUGGY]  int  gap  =  start  -  end.length;  [CE]  illegal  start  of  type  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  gap  =  start  -  end.length;  [BUGGY]        while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	int  gap  =  start  -  end.length;	  int    gap    =    end    -    start.length;    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
146	[BUG]  [BUGGY]  int  gap  =  end  -  start.length  +  1;  [CE]  illegal  start  of  type  [FE]                            ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  gap  =  end  -  start.length  +  1;  [BUGGY]        while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	int  gap  =  end  -  start.length  +  1;	  int    gap    =    end    -    start.length;    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
147	[BUG]  [BUGGY]  int  count  =  buffer.nextInt(end);  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  count  =  buffer.nextInt(end);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	int  count  =  buffer.nextInt(end);	  int    count    =    buffer.nextInt(gap);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
148	[BUG]  [BUGGY]  Random  random  =  RandomStringUtils.getRandom(buffer,  end,  count);  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  Random  random  =  RandomStringUtils.getRandom(buffer,  end,  count);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	Random  random  =  RandomStringUtils.getRandom(buffer,  end,  count);	  Random    random    =    RandomStringUtils.getRandom(buffer,    end);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
149	[BUG]  [BUGGY]  Random  random  =  RandomStringUtils.getRandom(buffer,  end,  0);  [CE]  <identifier>  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  Random  random  =  RandomStringUtils.getRandom(buffer,  end,  0);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	Random  random  =  RandomStringUtils.getRandom(buffer,  end,  0);	  Random    random    =    RandomStringUtils.getRandom(buffer,    end);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
150	[BUG]  [BUGGY]  int  count  =  random.nextInt(buffer,  0,  end  -  start);  [CE]  <identifier>  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  count  =  random.nextInt(buffer,  0,  end  -  start);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	int  count  =  random.nextInt(buffer,  0,  end  -  start);	  int    count    =    random.nextInt(buffer,    0,    start    -    start);    	non-compiled	[CE]  <identifier>  expected	56	None	replace
151	[BUG]  [BUGGY]  int  count  =  random.nextInt(buffer,  0,  start  -  end);  [CE]  <identifier>  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  count  =  random.nextInt(buffer,  0,  start  -  end);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	int  count  =  random.nextInt(buffer,  0,  start  -  end);	  int    count    =    random.nextInt(buffer,    0,    start    -    start);    	non-compiled	[CE]  <identifier>  expected	56	None	replace
152	[BUG]  [BUGGY]  char  count  =  random.nextInt(buffer,  0,  end  -  start);  [CE]  <identifier>  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  char  count  =  random.nextInt(buffer,  0,  end  -  start);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	char  count  =  random.nextInt(buffer,  0,  end  -  start);	  int    count    =    random.nextInt(buffer,    0,    start    -    start);    	non-compiled	[CE]  <identifier>  expected	56	None	replace
153	[BUG]  [BUGGY]  char[]  buffer  =  new  char[end];  [CE]  <identifier>  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  char[]  buffer  =  new  char[end];  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	char[]  buffer  =  new  char[end];	  char[]    buffer    =    new    char[start];    	non-compiled	[CE]  <identifier>  expected	67	None	replace
154	[BUG]  [BUGGY]  Random  random  =  RandomStringUtils.getRandom(buffer,  1,  count);  [CE]  <identifier>  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  Random  random  =  RandomStringUtils.getRandom(buffer,  1,  count);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	Random  random  =  RandomStringUtils.getRandom(buffer,  1,  count);	  Random    random    =    RandomStringUtils.getRandom(buffer,    0);    	non-compiled	[CE]  <identifier>  expected	24	None	replace
155	[BUG]  [BUGGY]  Random  random  =  RandomStringUtils.getRandom(buffer,  start,  0);  [CE]  <identifier>  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  Random  random  =  RandomStringUtils.getRandom(buffer,  start,  0);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	Random  random  =  RandomStringUtils.getRandom(buffer,  start,  0);	  Random    random    =    RandomStringUtils.getRandom(buffer,    0);    	non-compiled	[CE]  <identifier>  expected	24	None	replace
156	[BUG]  [BUGGY]  int  count  =  chars.length  -  start  +  1;  [CE]  <identifier>  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  count  =  chars.length  -  start  +  1;  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	int  count  =  chars.length  -  start  +  1;	  int    count    =    chars.length    -    start;    	non-compiled	[CE]  <identifier>  expected	70	None	replace
157	[BUG]  [BUGGY]  int  count  =  random.nextInt(buffer,  0,  count);  [CE]  <identifier>  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  count  =  random.nextInt(buffer,  0,  count);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	int  count  =  random.nextInt(buffer,  0,  count);	  int    count    =    random.nextInt(buffer);    	non-compiled	[CE]  <identifier>  expected	58	None	replace
158	[BUG]  [BUGGY]  int  count  =  random.nextInt(buffer,  1);  [CE]  <identifier>  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  count  =  random.nextInt(buffer,  1);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	int  count  =  random.nextInt(buffer,  1);	  int    count    =    random.nextInt(buffer);    	non-compiled	[CE]  <identifier>  expected	58	None	replace
159	[BUG]  [BUGGY]  Random  random  =  RandomStringUtils.getRandom(buffer,  0,  start);  [CE]  <identifier>  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  Random  random  =  RandomStringUtils.getRandom(buffer,  0,  start);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	Random  random  =  RandomStringUtils.getRandom(buffer,  0,  start);	  Random    random    =    RandomStringUtils.getRandom(buffer,    start);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
160	[BUG]  [BUGGY]  Random  random  =  RandomStringUtils.getRandom(buffer,  start,  count);  [CE]  <identifier>  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  Random  random  =  RandomStringUtils.getRandom(buffer,  start,  count);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	Random  random  =  RandomStringUtils.getRandom(buffer,  start,  count);	  Random    random    =    RandomStringUtils.getRandom(buffer,    start);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
161	[BUG]  [BUGGY]  Character  ch  =  buffer.random.nextInt(count);  [CE]  <identifier>  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  Character  ch  =  buffer.random.nextInt(count);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	Character  ch  =  buffer.random.nextInt(count);	  Character    ch    =    buffer.random.nextInt(gap);    	non-compiled	[CE]  <identifier>  expected	47	None	replace
162	[BUG]  [BUGGY]  Character  ch  =  buffer.random.nextInt(start);  [CE]  <identifier>  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  Character  ch  =  buffer.random.nextInt(start);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	Character  ch  =  buffer.random.nextInt(start);	  Character    ch    =    buffer.random.nextInt(gap);    	non-compiled	[CE]  <identifier>  expected	47	None	replace
163	[BUG]  [BUGGY]  Character  ch  =  buffer.random.nextInt(end);  [CE]  <identifier>  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  Character  ch  =  buffer.random.nextInt(end);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	Character  ch  =  buffer.random.nextInt(end);	  Character    ch    =    buffer.random.nextInt(gap);    	non-compiled	[CE]  <identifier>  expected	47	None	replace
164	[BUG]  [BUGGY]  Character  ch  =  buffer.random.nextInt(0,  count);  [CE]  <identifier>  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  Character  ch  =  buffer.random.nextInt(0,  count);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	Character  ch  =  buffer.random.nextInt(0,  count);	  Character    ch    =    buffer.random.nextInt(gap);    	non-compiled	[CE]  <identifier>  expected	47	None	replace
165	[BUG]  [BUGGY]  int  count  =  buffer.length()  -  start  +  1;  [CE]  <identifier>  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  count  =  buffer.length()  -  start  +  1;  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	int  count  =  buffer.length()  -  start  +  1;	  int    count    =    buffer.length()    -    start;    	non-compiled	[CE]  <identifier>  expected	52	None	replace
166	[BUG]  [BUGGY]  char[]  buffer  =  new  char[buffer.length  -  1,  start];  [CE]  <identifier>  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  char[]  buffer  =  new  char[buffer.length  -  1,  start];  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	char[]  buffer  =  new  char[buffer.length  -  1,  start];	  char[]    buffer    =    new    char[buffer.length    -    start];    	non-compiled	[CE]  <identifier>  expected	45	None	replace
167	[BUG]  [BUGGY]  char[]  buffer  =  new  char[count  *  2];  [CE]  <identifier>  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  char[]  buffer  =  new  char[count  *  2];  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	char[]  buffer  =  new  char[count  *  2];	  char[]    buffer    =    new    char[count    +    2];    	non-compiled	[CE]  <identifier>  expected	74	None	replace
168	[BUG]  [BUGGY]  char[]  buffer  =  new  char[end  +  2];  [CE]  <identifier>  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  char[]  buffer  =  new  char[end  +  2];  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	char[]  buffer  =  new  char[end  +  2];	  char[]    buffer    =    new    char[count    +    2];    	non-compiled	[CE]  <identifier>  expected	74	None	replace
169	[BUG]  [BUGGY]  Character  ch  =  random.random.nextInt(buffer,  1);  [CE]  <identifier>  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  Character  ch  =  random.random.nextInt(buffer,  1);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	Character  ch  =  random.random.nextInt(buffer,  1);	  Character    ch    =    random.random.nextInt(buffer);    	non-compiled	[CE]  <identifier>  expected	61	None	replace
170	[BUG]  [BUGGY]  char  count  =  random.nextInt(start);  [CE]  <identifier>  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  char  count  =  random.nextInt(start);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	char  count  =  random.nextInt(start);	  char    count    =    random.nextInt(gap);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
171	[BUG]  [BUGGY]  Character  ch  =  random.nextInt(buffer,  start);  [CE]  <identifier>  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  Character  ch  =  random.nextInt(buffer,  start);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	Character  ch  =  random.nextInt(buffer,  start);	  Character    ch    =    buffer.random.nextInt(gap);    	non-compiled	[CE]  <identifier>  expected	47	None	replace
172	[BUG]  [BUGGY]  char[]  buffer  =  new  char[end  -  start  +  1];  [CE]  <identifier>  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  char[]  buffer  =  new  char[end  -  start  +  1];  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	char[]  buffer  =  new  char[end  -  start  +  1];	  char[]    buffer    =    new    char[count    -    start    +    1];    	non-compiled	[CE]  <identifier>  expected	46	None	replace
173	[BUG]  [BUGGY]  char[]  buffer  =  new  char[buffer  -  start];  [CE]  <identifier>  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  char[]  buffer  =  new  char[buffer  -  start];  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	char[]  buffer  =  new  char[buffer  -  start];	  char[]    buffer    =    new    char[end    -    start];    	non-compiled	[CE]  <identifier>  expected	44	None	replace
174	[BUG]  [BUGGY]  int  gap  =  0  /  end;  [CE]  <identifier>  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  gap  =  0  /  end;  [BUGGY]        while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	int  gap  =  0  /  end;	  int    gap    =    0    -    end;    	non-compiled	[CE]  <identifier>  expected	83	None	replace
175	[BUG]  [BUGGY]  int  gap  =  end  -  buffer.length  -  1  +  1;  [CE]  <identifier>  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  gap  =  end  -  buffer.length  -  1  +  1;  [BUGGY]        while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	int  gap  =  end  -  buffer.length  -  1  +  1;	  int    gap    =    end    -    buffer.length    -    1;    	non-compiled	[CE]  <identifier>  expected	32	None	replace
176	[BUG]  [BUGGY]  Character  ch  =  random.random.nextInt(buffer,  0,  count  -  start);  [CE]  <identifier>  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  Character  ch  =  random.random.nextInt(buffer,  0,  count  -  start);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	Character  ch  =  random.random.nextInt(buffer,  0,  count  -  start);	  Character    ch    =    random.random.nextInt(buffer,    0,    count);    	non-compiled	[CE]  <identifier>  expected	63	None	replace
177	[BUG]  [BUGGY]  Character  ch  =  random.random.nextInt(start,  buffer.length);  [CE]  <identifier>  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  Character  ch  =  random.random.nextInt(start,  buffer.length);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	Character  ch  =  random.random.nextInt(start,  buffer.length);	  Character    ch    =    random.random.nextInt(start,    end);    	non-compiled	[CE]  <identifier>  expected	77	None	replace
178	[BUG]  [BUGGY]  int  count  =  random.nextInt(buff,  start  +  1);  [CE]  <identifier>  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  count  =  random.nextInt(buff,  start  +  1);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	int  count  =  random.nextInt(buff,  start  +  1);	  int    count    =    random.nextInt(buff,    start);    	non-compiled	[CE]  <identifier>  expected	43	None	replace
179	[BUG]  [BUGGY]  Random  random  =  RandomStringUtils.getValue(buffer,  0,  start);  [CE]  <identifier>  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  Random  random  =  RandomStringUtils.getValue(buffer,  0,  start);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	Random  random  =  RandomStringUtils.getValue(buffer,  0,  start);	  Random    random    =    RandomStringUtils.getValue(buffer,    0,    end);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
180	[BUG]  [BUGGY]  int  gap  =  buffer.length  -  1  +  start;  [CE]  <identifier>  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  gap  =  buffer.length  -  1  +  start;  [BUGGY]        while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	int  gap  =  buffer.length  -  1  +  start;	  int    gap    =    buffer.length    -    1;    	non-compiled	[CE]  <identifier>  expected	1	None	replace
181	[BUG]  [BUGGY]  int  gap  =  buffer.length  -  1  +  1;  [CE]  <identifier>  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  gap  =  buffer.length  -  1  +  1;  [BUGGY]        while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	int  gap  =  buffer.length  -  1  +  1;	  int    gap    =    buffer.length    -    1;    	non-compiled	[CE]  <identifier>  expected	1	None	replace
182	[BUG]  [BUGGY]  int  count  =  random.nextInt(start,  0,  buffer.length);  [CE]  <identifier>  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  count  =  random.nextInt(start,  0,  buffer.length);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	int  count  =  random.nextInt(start,  0,  buffer.length);	  int    count    =    random.nextInt(gap,    0,    start);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
183	[BUG]  [BUGGY]  int  count  =  chars.length();  [CE]  <identifier>  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  count  =  chars.length();  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	int  count  =  chars.length();	  int    count    =    buffer.length()    -    1;    	non-compiled	[CE]  <identifier>  expected	50	None	replace
184	[BUG]  [BUGGY]  char  count  =  buffer.length();  [CE]  <identifier>  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  char  count  =  buffer.length();  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	char  count  =  buffer.length();	  int    count    =    buffer.length()    -    1;    	non-compiled	[CE]  <identifier>  expected	50	None	replace
185	[BUG]  [BUGGY]  Char  ch  =  random.random.nextInt(buffer,  start  +  1);  [CE]  <identifier>  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  Char  ch  =  random.random.nextInt(buffer,  start  +  1);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	Char  ch  =  random.random.nextInt(buffer,  start  +  1);	  Character    ch    =    random.random.nextInt(start    +    1);    	non-compiled	[CE]  <identifier>  expected	76	None	replace
186	[BUG]  [BUGGY]  Random  random  =  RandomStringUtils.getRandom(random).toCharArray(buffer);  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  Random  random  =  RandomStringUtils.getRandom(random).toCharArray(buffer);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	Random  random  =  RandomStringUtils.getRandom(random).toCharArray(buffer);	  Random    random    =    RandomStringUtils.getRandom(random).toCharArray();    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
187	[BUG]  [BUGGY]  Random  random  =  RandomStringUtils.getRandom(block).toCharArray();  [CE]  illegal  start  of  type  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  Random  random  =  RandomStringUtils.getRandom(block).toCharArray();  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	Random  random  =  RandomStringUtils.getRandom(block).toCharArray();	  Random    random    =    RandomStringUtils.getRandom(random).toCharArray();    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
188	[BUG]  [BUGGY]  int  gap  =  numbers  -  1;  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  gap  =  numbers  -  1;  [BUGGY]        while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	int  gap  =  numbers  -  1;	  int    gap    =    start    -    1;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
189	[BUG]  [BUGGY]  int  count  =  chars.nextInt(buffer);  [CE]  <identifier>  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  count  =  chars.nextInt(buffer);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	int  count  =  chars.nextInt(buffer);	  int    count    =    chars.nextInt(start);    	non-compiled	[CE]  <identifier>  expected	75	None	replace
190	[BUG]  [BUGGY]  int  count  =  chars[random.nextInt(start)];  [CE]  <identifier>  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  count  =  chars[random.nextInt(start)];  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	int  count  =  chars[random.nextInt(start)];	  int    count    =    chars.nextInt(start);    	non-compiled	[CE]  <identifier>  expected	75	None	replace
191	[BUG]  [BUGGY]  int  count  =  random.nextInt(buffer,  0,  start  +  1  -  start);  [CE]  <identifier>  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  count  =  random.nextInt(buffer,  0,  start  +  1  -  start);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	int  count  =  random.nextInt(buffer,  0,  start  +  1  -  start);	  int    count    =    random.nextInt(buffer,    0,    start    +    1);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
192	[BUG]  [BUGGY]  Random  random  =  RandomStringUtils.getValue(buffer,  0,  start,  end,  chars.length);  [CE]  <identifier>  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  Random  random  =  RandomStringUtils.getValue(buffer,  0,  start,  end,  chars.length);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	Random  random  =  RandomStringUtils.getValue(buffer,  0,  start,  end,  chars.length);	  Random    random    =    RandomStringUtils.getValue(buffer,    start,    end,    chars.length);    	non-compiled	[CE]  <identifier>  expected	66	None	replace
193	[BUG]  [BUGGY]  Character  ch  =  chars.nextInt(buffer);  [CE]  <identifier>  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  Character  ch  =  chars.nextInt(buffer);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	Character  ch  =  chars.nextInt(buffer);	  Character    ch    =    chars.nextInt(gap);    	non-compiled	[CE]  <identifier>  expected	71	None	replace
194	[BUG]  [BUGGY]  Character  ch  =  chars.nextInt(buffer,  count);  [CE]  <identifier>  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  Character  ch  =  chars.nextInt(buffer,  count);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	Character  ch  =  chars.nextInt(buffer,  count);	  Character    ch    =    chars.nextInt(gap);    	non-compiled	[CE]  <identifier>  expected	71	None	replace
195	[BUG]  [BUGGY]  int  count  =  chars[random.nextInt(gap)];  [CE]  <identifier>  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  count  =  chars[random.nextInt(gap)];  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	int  count  =  chars[random.nextInt(gap)];	  int    count    =    chars.nextInt(gap);    	non-compiled	[CE]  <identifier>  expected	64	None	replace
196	[BUG]  [BUGGY]  Char  count  =  chars.length;  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  Char  count  =  chars.length;  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	Char  count  =  chars.length;	  char    count    =    chars.length;    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
197	[BUG]  [BUGGY]  int  gap  =  numbers  -  start  +  1;  [CE]  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  gap  =  numbers  -  start  +  1;  [BUGGY]        while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	int  gap  =  numbers  -  start  +  1;	  int    gap    =    start    -    end    +    1;    	non-compiled	[CE]  	11	None	replace
198	[BUG]  [BUGGY]  char[]  buffer  =  new  char[buffer.length  *  start];  [CE]  <identifier>  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  char[]  buffer  =  new  char[buffer.length  *  start];  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	char[]  buffer  =  new  char[buffer.length  *  start];	  char[]    buffer    =    new    char[buffer.length    -    start];    	non-compiled	[CE]  <identifier>  expected	45	None	replace
199	[BUG]  [BUGGY]  int  count  =  random.nextInt(start,  gap);  [CE]  <identifier>  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  count  =  random.nextInt(start,  gap);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	int  count  =  random.nextInt(start,  gap);	  int    count    =    random.nextInt(gap,    start);    	non-compiled	[CE]  <identifier>  expected	42	None	replace
200	[BUG]  [BUGGY]  Random  random  =  RandomStringUtils.getRandom(buffer,  count);  [CE]  <identifier>  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  Random  random  =  RandomStringUtils.getRandom(buffer,  count);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	Random  random  =  RandomStringUtils.getRandom(buffer,  count);	  Random    random    =    RandomStringUtils.getRandom(buffer);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
201	[BUG]  [BUGGY]  Character  ch  =  chars[random.nextInt(gap)];  [CE]  <identifier>  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  Character  ch  =  chars[random.nextInt(gap)];  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	Character  ch  =  chars[random.nextInt(gap)];	  Character    ch    =    buffer[random.nextInt(gap)];    	non-compiled	[CE]  <identifier>  expected	48	None	replace
202	[BUG]  [BUGGY]  Character  ch  =  chars[random.nextInt(gap)+  start  +  1];  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  Character  ch  =  chars[random.nextInt(gap)+  start  +  1];  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	Character  ch  =  chars[random.nextInt(gap)+  start  +  1];	  Character    ch    =    chars[random.nextInt(gap)+    start];    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
203	[BUG]  [BUGGY]  int  count  =  random.nextInt(buffer,  0,  start  -  start,  end);  [CE]  illegal  start  of  type  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  count  =  random.nextInt(buffer,  0,  start  -  start,  end);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	int  count  =  random.nextInt(buffer,  0,  start  -  start,  end);	  int    count    =    random.nextInt(buffer,    0,    start    -    start);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
204	[BUG]  [BUGGY]  int  count  =  random.nextInt(buffer,  0,  start  -  start  +  1);  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  count  =  random.nextInt(buffer,  0,  start  -  start  +  1);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	int  count  =  random.nextInt(buffer,  0,  start  -  start  +  1);	  int    count    =    random.nextInt(buffer,    0,    start    -    start);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
205	[BUG]  [BUGGY]  Random  random  =  RandomStringUtils.getValue(buffer,  start,  end,  1);  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  Random  random  =  RandomStringUtils.getValue(buffer,  start,  end,  1);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	Random  random  =  RandomStringUtils.getValue(buffer,  start,  end,  1);	  Random    random    =    RandomStringUtils.getValue(buffer,    start,    end,    count);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
206	[BUG]  [BUGGY]  int  gap  =  buffer.length  -  4;  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  gap  =  buffer.length  -  4;  [BUGGY]        while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	int  gap  =  buffer.length  -  4;	  int    gap    =    start    -    4;    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
207	[BUG]  [BUGGY]  Random  random  =  RandomStringUtils.getValue(buffer,  start,  end,  chars,  letters);  [CE]  <identifier>  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  Random  random  =  RandomStringUtils.getValue(buffer,  start,  end,  chars,  letters);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	Random  random  =  RandomStringUtils.getValue(buffer,  start,  end,  chars,  letters);	  Random    random    =    RandomStringUtils.getValue(buffer,    start,    end,    chars);    	non-compiled	[CE]  <identifier>  expected	82	None	replace
208	[BUG]  [BUGGY]  char  ch  =  chars[random.nextInt(gap)+  start;  [CE]  <identifier>  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  char  ch  =  chars[random.nextInt(gap)+  start;  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	char  ch  =  chars[random.nextInt(gap)+  start;	  char    ch    =    random.random.nextInt(gap);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
209	[BUG]  [BUGGY]  char  ch  =  chars[random.nextInt(gap);  [CE]  <identifier>  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  char  ch  =  chars[random.nextInt(gap);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	char  ch  =  chars[random.nextInt(gap);	  char    ch    =    random.random.nextInt(gap);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
210	[BUG]  [BUGGY]  char  ch  =  random.random.nextInt(buffer,  1);  [CE]  <identifier>  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  char  ch  =  random.random.nextInt(buffer,  1);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	char  ch  =  random.random.nextInt(buffer,  1);	  char    ch    =    random.random.nextInt(buffer);    	non-compiled	[CE]  <identifier>  expected	49	None	replace
211	[BUG]  [BUGGY]  char[]  buffer  =  new  char[start  +  2];  [CE]  <identifier>  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  char[]  buffer  =  new  char[start  +  2];  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	char[]  buffer  =  new  char[start  +  2];	  char[]    buffer    =    new    char[count    +    2];    	non-compiled	[CE]  <identifier>  expected	74	None	replace
212	[BUG]  [BUGGY]  Random  random  =  RandomStringUtils.getRandom(buffer,  start,  end,  0);  [CE]  <identifier>  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  Random  random  =  RandomStringUtils.getRandom(buffer,  start,  end,  0);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	Random  random  =  RandomStringUtils.getRandom(buffer,  start,  end,  0);	  Random    random    =    RandomStringUtils.getRandom(buffer,    start,    end);    	non-compiled	[CE]  <identifier>  expected	80	None	replace
213	[BUG]  [BUGGY]  Random  random  =  RandomStringUtils.getRandom(buffer,  start,  end  -  start);  [CE]  <identifier>  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  Random  random  =  RandomStringUtils.getRandom(buffer,  start,  end  -  start);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	Random  random  =  RandomStringUtils.getRandom(buffer,  start,  end  -  start);	  Random    random    =    RandomStringUtils.getRandom(buffer,    start,    end);    	non-compiled	[CE]  <identifier>  expected	80	None	replace
214	[BUG]  [BUGGY]  Random  random  =  RandomStringUtils.getRandom(start,  start);  [CE]  <identifier>  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  Random  random  =  RandomStringUtils.getRandom(start,  start);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	Random  random  =  RandomStringUtils.getRandom(start,  start);	  Random    random    =    RandomStringUtils.getRandom(random,    start);    	non-compiled	[CE]  <identifier>  expected	79	None	replace
215	[BUG]  [BUGGY]  Random  random  =  RandomStringUtils.getRandom(random,  start,  count);  [CE]  <identifier>  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  Random  random  =  RandomStringUtils.getRandom(random,  start,  count);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	Random  random  =  RandomStringUtils.getRandom(random,  start,  count);	  Random    random    =    RandomStringUtils.getRandom(random,    start);    	non-compiled	[CE]  <identifier>  expected	79	None	replace
216	[BUG]  [BUGGY]  int  count  =  random.nextInt(buffer,  start  +  1);  [CE]  <identifier>  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  count  =  random.nextInt(buffer,  start  +  1);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	int  count  =  random.nextInt(buffer,  start  +  1);	  int    count    =    random.nextInt(buffer,    start);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
217	[BUG]  [BUGGY]  char  ch  =  random.random.nextInt(buffer,  start  +  1,  count);  [CE]  <identifier>  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  char  ch  =  random.random.nextInt(buffer,  start  +  1,  count);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	char  ch  =  random.random.nextInt(buffer,  start  +  1,  count);	  char    ch    =    random.random.nextInt(buffer,    start);    	non-compiled	[CE]  <identifier>  expected	37	None	replace
218	[BUG]  [BUGGY]  char[]  buffer  =  new  char[end  -  1];  [CE]  <identifier>  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  char[]  buffer  =  new  char[end  -  1];  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	char[]  buffer  =  new  char[end  -  1];	  char[]    buffer    =    new    char[length    -    1];    	non-compiled	[CE]  <identifier>  expected	27	None	replace
219	[BUG]  [BUGGY]  Random  random  =  RandomStringUtils.getValue(buffer,  0,  start,  end,  count);  [CE]  <identifier>  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  Random  random  =  RandomStringUtils.getValue(buffer,  0,  start,  end,  count);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	Random  random  =  RandomStringUtils.getValue(buffer,  0,  start,  end,  count);	  Random    random    =    RandomStringUtils.getValue(buffer,    0,    start,    end);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
220	[BUG]  [BUGGY]  char  count  =  random.nextInt(gap  +  1);  [CE]  <identifier>  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  char  count  =  random.nextInt(gap  +  1);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	char  count  =  random.nextInt(gap  +  1);	  char    count    =    random.nextInt(gap);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
221	[BUG]  [BUGGY]  int  gap  =  last.nextInt(start  -  4);  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  gap  =  last.nextInt(start  -  4);  [BUGGY]        while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	int  gap  =  last.nextInt(start  -  4);	  int    gap    =    start    -    4;    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
222	[BUG]  [BUGGY]  int  gap  =  last.nextInt(start)-  1;  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  gap  =  last.nextInt(start)-  1;  [BUGGY]        while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	int  gap  =  last.nextInt(start)-  1;	  int    gap    =    start    -    4;    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
223	[BUG]  [BUGGY]  Random  random  =  RandomStringUtils.getValue(buffer,  0,  count);  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  Random  random  =  RandomStringUtils.getValue(buffer,  0,  count);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	Random  random  =  RandomStringUtils.getValue(buffer,  0,  count);	  Random    random    =    RandomStringUtils.getValue(buffer,    0,    end);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
224	[BUG]  [BUGGY]  Random  random  =  RandomStringUtils.getValue(chars,  start,  end);  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  Random  random  =  RandomStringUtils.getValue(chars,  start,  end);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	Random  random  =  RandomStringUtils.getValue(chars,  start,  end);	  Random    random    =    RandomStringUtils.getValue(buffer,    0,    end);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
225	[BUG]  [BUGGY]  int  gap  =  length  -  buffer.length  -  1;  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  gap  =  length  -  buffer.length  -  1;  [BUGGY]        while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	int  gap  =  length  -  buffer.length  -  1;	  int    gap    =    end    -    buffer.length    -    1;    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
226	[BUG]  [BUGGY]  int  count  =  end  -  start;  [CE]  illegal  start  of  type  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  count  =  end  -  start;  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	int  count  =  end  -  start;	  int    count    =    chars.length    -    start;    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
227	[BUG]  [BUGGY]  Character  ch  =  buffer[random.nextInt(gap)-  start];  [CE]  illegal  start  of  type  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  Character  ch  =  buffer[random.nextInt(gap)-  start];  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	Character  ch  =  buffer[random.nextInt(gap)-  start];	  Character    ch    =    buffer[random.nextInt(gap)];    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
228	[BUG]  [BUGGY]  Random  random  =  RandomStringUtils.getValue(random,  start,  end,  chars.length);  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  Random  random  =  RandomStringUtils.getValue(random,  start,  end,  chars.length);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	Random  random  =  RandomStringUtils.getValue(random,  start,  end,  chars.length);	  Random    random    =    RandomStringUtils.getValue(buffer,    start,    end,    chars.length);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
229	[BUG]  [BUGGY]  Random  random  =  RandomStringUtils.getValue(random,  start,  end,  buffer.length);  [CE]  <identifier>  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  Random  random  =  RandomStringUtils.getValue(random,  start,  end,  buffer.length);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	Random  random  =  RandomStringUtils.getValue(random,  start,  end,  buffer.length);	  Random    random    =    RandomStringUtils.getValue(buffer,    start,    end,    chars.length);    	non-compiled	[CE]  <identifier>  expected	66	None	replace
230	[BUG]  [BUGGY]  char  ch  =  random.random.nextInt(gap  +  1);  [CE]  <identifier>  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  char  ch  =  random.random.nextInt(gap  +  1);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	char  ch  =  random.random.nextInt(gap  +  1);	  char    ch    =    random.random.nextInt(gap);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
231	[BUG]  [BUGGY]  char  ch  =  chars[random.nextInt(gap));  [CE]  <identifier>  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  char  ch  =  chars[random.nextInt(gap));  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	char  ch  =  chars[random.nextInt(gap));	  char    ch    =    random.random.nextInt(gap);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
232	[BUG]  [BUGGY]  Random  random  =  RandomStringUtils.getRandom(start,  buffer,  end);  [CE]  <identifier>  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  Random  random  =  RandomStringUtils.getRandom(start,  buffer,  end);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	Random  random  =  RandomStringUtils.getRandom(start,  buffer,  end);	  Random    random    =    RandomStringUtils.getRandom(buffer,    end);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
233	[BUG]  [BUGGY]  Random  random  =  RandomStringUtils.getValue(chars,  start,  end,  buffer);  [CE]  <identifier>  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  Random  random  =  RandomStringUtils.getValue(chars,  start,  end,  buffer);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	Random  random  =  RandomStringUtils.getValue(chars,  start,  end,  buffer);	  Random    random    =    RandomStringUtils.getValue(buffer,    start,    end,    chars);    	non-compiled	[CE]  <identifier>  expected	82	None	replace
234	[BUG]  [BUGGY]  Character  ch  =  chars.nextInt(buffer,  start);  [CE]  <identifier>  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  Character  ch  =  chars.nextInt(buffer,  start);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	Character  ch  =  chars.nextInt(buffer,  start);	  Character    ch    =    chars.nextInt(gap);    	non-compiled	[CE]  <identifier>  expected	71	None	replace
235	[BUG]  [BUGGY]  Character  ch  =  chars.nextInt(buffer,  0,  count);  [CE]  <identifier>  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  Character  ch  =  chars.nextInt(buffer,  0,  count);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	Character  ch  =  chars.nextInt(buffer,  0,  count);	  Character    ch    =    chars.nextInt(gap);    	non-compiled	[CE]  <identifier>  expected	71	None	replace
236	[BUG]  [BUGGY]  Character  ch  =  random.random.nextInt(start,  end  -  start);  [CE]  <identifier>  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  Character  ch  =  random.random.nextInt(start,  end  -  start);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	Character  ch  =  random.random.nextInt(start,  end  -  start);	  Character    ch    =    random.random.nextInt(start,    end);    	non-compiled	[CE]  <identifier>  expected	77	None	replace
237	[BUG]  [BUGGY]  Character  ch  =  random.random.nextInt(start,  end  -  1);  [CE]  <identifier>  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  Character  ch  =  random.random.nextInt(start,  end  -  1);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	Character  ch  =  random.random.nextInt(start,  end  -  1);	  Character    ch    =    random.random.nextInt(start,    end);    	non-compiled	[CE]  <identifier>  expected	77	None	replace
238	[BUG]  [BUGGY]  Random  random  =  RandomStringUtils.getValue(buffer,  start,  end,  4);  [CE]  <identifier>  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  Random  random  =  RandomStringUtils.getValue(buffer,  start,  end,  4);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	Random  random  =  RandomStringUtils.getValue(buffer,  start,  end,  4);	  Random    random    =    RandomStringUtils.getValue(buffer,    start,    end,    count);    	non-compiled	[CE]  <identifier>  expected	20	None	replace
239	[BUG]  [BUGGY]  Random  random  =  RandomStringUtils.getRandom(random).toCharArray(buffer,  0,  count);  [CE]  <identifier>  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  Random  random  =  RandomStringUtils.getRandom(random).toCharArray(buffer,  0,  count);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	Random  random  =  RandomStringUtils.getRandom(random).toCharArray(buffer,  0,  count);	  Random    random    =    RandomStringUtils.getRandom(random).toCharArray();    	non-compiled	[CE]  <identifier>  expected	81	None	replace
240	[BUG]  [BUGGY]  int  gap  =  end  -  buffer.length  /  1;  [CE]  <identifier>  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  gap  =  end  -  buffer.length  /  1;  [BUGGY]        while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	int  gap  =  end  -  buffer.length  /  1;	  int    gap    =    end    -    buffer.length    +    1;    	non-compiled	[CE]  <identifier>  expected	10	None	replace
241	[BUG]  [BUGGY]  int  gap  =  end  /  1;  [CE]  <identifier>  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  gap  =  end  /  1;  [BUGGY]        while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	int  gap  =  end  /  1;	  int    gap    =    end    +    1;    	non-compiled	[CE]  <identifier>  expected	3	None	replace
242	[BUG]  [BUGGY]  int  gap  =  length  -  buffer.length;  [CE]  <identifier>  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  gap  =  length  -  buffer.length;  [BUGGY]        while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	int  gap  =  length  -  buffer.length;	  int    gap    =    start    -    buffer.length;    	non-compiled	[CE]  <identifier>  expected	34	None	replace
243	[BUG]  [BUGGY]  int  count  =  random.nextInt(start,  0,  end);  [CE]  <identifier>  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  count  =  random.nextInt(start,  0,  end);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	int  count  =  random.nextInt(start,  0,  end);	  int    count    =    random.nextInt(buffer,    0,    end);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
244	[BUG]  [BUGGY]  Character  ch  =  random.random.nextInt(start  +  1,  count);  [CE]  <identifier>  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  Character  ch  =  random.random.nextInt(start  +  1,  count);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	Character  ch  =  random.random.nextInt(start  +  1,  count);	  Character    ch    =    random.random.nextInt(start    +    1);    	non-compiled	[CE]  <identifier>  expected	76	None	replace
245	[BUG]  [BUGGY]  char[]  buffer  =  new  char[buffers  +  1];  [CE]  <identifier>  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  char[]  buffer  =  new  char[buffers  +  1];  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	char[]  buffer  =  new  char[buffers  +  1];	  char[]    buffer    =    new    char[numbers    +    1];    	non-compiled	[CE]  <identifier>  expected	53	None	replace
246	[BUG]  [BUGGY]  char  ch  =  chars[random.nextInt(buffer);  [CE]  <identifier>  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  char  ch  =  chars[random.nextInt(buffer);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	char  ch  =  chars[random.nextInt(buffer);	  char    ch    =    random.random.nextInt(buffer);    	non-compiled	[CE]  <identifier>  expected	49	None	replace
247	[BUG]  [BUGGY]  char  ch  =  random.nextInt(buffer,  start);  [CE]  <identifier>  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  char  ch  =  random.nextInt(buffer,  start);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	char  ch  =  random.nextInt(buffer,  start);	  char    ch    =    random.random.nextInt(buffer);    	non-compiled	[CE]  <identifier>  expected	49	None	replace
248	[BUG]  [BUGGY]  char[]  buffer  =  new  char[2];  [CE]  <identifier>  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  char[]  buffer  =  new  char[2];  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	char[]  buffer  =  new  char[2];	  char[]    buffer    =    new    char[1];    	non-compiled	[CE]  <identifier>  expected	68	None	replace
249	[BUG]  [BUGGY]  Character  ch  =  chars[random.nextInt(buffer);  [CE]  <identifier>  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  Character  ch  =  chars[random.nextInt(buffer);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	Character  ch  =  chars[random.nextInt(buffer);	  Character    ch    =    random.random.nextInt(buffer);    	non-compiled	[CE]  <identifier>  expected	61	None	replace
250	[BUG]  [BUGGY]  int  count  =  random.nextInt(buffer,  start,  end  -  start);  [CE]  <identifier>  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  count  =  random.nextInt(buffer,  start,  end  -  start);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	int  count  =  random.nextInt(buffer,  start,  end  -  start);	  int    count    =    random.nextInt(buffer,    0,    start    -    start);    	non-compiled	[CE]  <identifier>  expected	56	None	replace
251	[BUG]  [BUGGY]  int  gap  =  last.length  -  2;  [CE]  <identifier>  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  gap  =  last.length  -  2;  [BUGGY]        while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	int  gap  =  last.length  -  2;	  int    gap    =    end    -    2;    	non-compiled	[CE]  <identifier>  expected	41	None	replace
252	[BUG]  [BUGGY]  int  gap  =  last  -  start.length;  [CE]  <identifier>  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  gap  =  last  -  start.length;  [BUGGY]        while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	int  gap  =  last  -  start.length;	  int    gap    =    end    -    start.length;    	non-compiled	[CE]  <identifier>  expected	35	None	replace
253	[BUG]  [BUGGY]  Random  random  =  RandomStringUtils.getRandom(buffer,  -1);  [CE]  <identifier>  expected  [FE]                        ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  Random  random  =  RandomStringUtils.getRandom(buffer,  -1);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	Random  random  =  RandomStringUtils.getRandom(buffer,  -1);	  Random    random    =    RandomStringUtils.getRandom(buffer,    0);    	non-compiled	[CE]  <identifier>  expected	24	None	replace
254	[BUG]  [BUGGY]  int  count  =  chars[random.nextInt(gap)+  start];  [CE]  <identifier>  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  count  =  chars[random.nextInt(gap)+  start];  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	int  count  =  chars[random.nextInt(gap)+  start];	  int    count    =    chars.nextInt(gap);    	non-compiled	[CE]  <identifier>  expected	64	None	replace
255	[BUG]  [BUGGY]  int  count  =  chars[random.nextInt(gap)+  start;  [CE]  <identifier>  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  count  =  chars[random.nextInt(gap)+  start;  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	int  count  =  chars[random.nextInt(gap)+  start;	  int    count    =    chars.nextInt(gap);    	non-compiled	[CE]  <identifier>  expected	64	None	replace
256	[BUG]  [BUGGY]  int  gap  =  chars.length  -  1;  [CE]  <identifier>  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  gap  =  chars.length  -  1;  [BUGGY]        while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	int  gap  =  chars.length  -  1;	  int    gap    =    last.length    -    1;    	non-compiled	[CE]  <identifier>  expected	69	None	replace
257	[BUG]  [BUGGY]  int  gap  =  start  /  4;  [CE]  <identifier>  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  gap  =  start  /  4;  [BUGGY]        while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	int  gap  =  start  /  4;	  int    gap    =    end    /    4;    	non-compiled	[CE]  <identifier>  expected	40	None	replace
258	[BUG]  [BUGGY]  Random  random  =  RandomStringUtils.getRandom(random,  start,  0);  [CE]  <identifier>  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  Random  random  =  RandomStringUtils.getRandom(random,  start,  0);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	Random  random  =  RandomStringUtils.getRandom(random,  start,  0);	  Random    random    =    RandomStringUtils.getRandom(random,    start);    	non-compiled	[CE]  <identifier>  expected	79	None	replace
259	[BUG]  [BUGGY]  Random  random  =  RandomStringUtils.getRandom(random,  start,  end);  [CE]  <identifier>  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  Random  random  =  RandomStringUtils.getRandom(random,  start,  end);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	Random  random  =  RandomStringUtils.getRandom(random,  start,  end);	  Random    random    =    RandomStringUtils.getRandom(random,    start);    	non-compiled	[CE]  <identifier>  expected	79	None	replace
260	[BUG]  [BUGGY]  int  count  =  chars.length  -  1  ||(numbers  &&  Character.isDigit(ch));  [CE]  <identifier>  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  count  =  chars.length  -  1  ||(numbers  &&  Character.isDigit(ch));  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	int  count  =  chars.length  -  1  ||(numbers  &&  Character.isDigit(ch));	  int    count    =    chars.length    -    1;    	non-compiled	[CE]  <identifier>  expected	29	None	replace
261	[BUG]  [BUGGY]  int  count  =  chars.length  -  1  ||(numbers  &&  Character.isLetter(ch));  [CE]  <identifier>  expected  [FE]                      ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  count  =  chars.length  -  1  ||(numbers  &&  Character.isLetter(ch));  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	int  count  =  chars.length  -  1  ||(numbers  &&  Character.isLetter(ch));	  int    count    =    chars.length    -    1;    	non-compiled	[CE]  <identifier>  expected	29	None	replace
262	[BUG]  [BUGGY]  int  gap  =  last  -  start  +  1;  [CE]  <identifier>  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  gap  =  last  -  start  +  1;  [BUGGY]        while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	int  gap  =  last  -  start  +  1;	  int    gap    =    start    -    end    +    1;    	non-compiled	[CE]  <identifier>  expected	11	None	replace
263	[BUG]  [BUGGY]  int  gap  =  last.length  -  start  +  1;  [CE]  <identifier>  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  gap  =  last.length  -  start  +  1;  [BUGGY]        while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	int  gap  =  last.length  -  start  +  1;	  int    gap    =    buffer.length    -    start    +    1;    	non-compiled	[CE]  <identifier>  expected	12	None	replace
264	[BUG]  [BUGGY]  int  count  =  random.nextInt(gap,  start,  end);  [CE]  <identifier>  expected  [FE]                          ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  int  count  =  random.nextInt(gap,  start,  end);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	int  count  =  random.nextInt(gap,  start,  end);	  int    count    =    random.nextInt(gap,    0,    start);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
265	[BUG]  [BUGGY]  Character  ch  =  random.random.nextInt(buffer,  start  +  1,  count);  [CE]  <identifier>  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      if  (start  ==  0  &&  end  ==  0)  {  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];      [BUGGY]  Character  ch  =  random.random.nextInt(buffer,  start  +  1,  count);  [BUGGY]      int  gap  =  end  -  start;  while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	241	241	2	replace	Character  ch  =  random.random.nextInt(buffer,  start  +  1,  count);	  Character    ch    =    random.random.nextInt(buffer,    start);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
