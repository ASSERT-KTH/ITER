bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  count  =  buffer[random.nextInt(gap)];  [CE]  invalid  method  declaration;  return  type  required  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;    [BUGGY]  int  count  =  buffer[random.nextInt(gap)];  [BUGGY]    while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	243	243	2	replace	int  count  =  buffer[random.nextInt(gap)];	      int    count    =    chars[random.nextInt(gap)];    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
2	[BUG]  [BUGGY]  int  count  =  chars[random.nextInt(gap)]  +  1;  [CE]  invalid  method  declaration;  return  type  required  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;    [BUGGY]  int  count  =  chars[random.nextInt(gap)]  +  1;  [BUGGY]    while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	243	243	2	replace	int  count  =  chars[random.nextInt(gap)]  +  1;	      int    count    =    chars[random.nextInt(gap)];    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	1	None	replace
3	[BUG]  [BUGGY]  char  ch  =  random.nextInt(buffer,  start);  [CE]  invalid  method  declaration;  return  type  required  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;    [BUGGY]  char  ch  =  random.nextInt(buffer,  start);  [BUGGY]    while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	243	243	2	replace	char  ch  =  random.nextInt(buffer,  start);	      char    ch    =    random.nextInt(gap);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
4	[BUG]  [BUGGY]  char  ch  =  random.nextInt(buffer,  gap);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;    [BUGGY]  char  ch  =  random.nextInt(buffer,  gap);  [BUGGY]    while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	243	243	2	replace	char  ch  =  random.nextInt(buffer,  gap);	      char    ch    =    random.nextInt(gap);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
5	[BUG]  [BUGGY]  char  ch  =  random.nextInt(buffer,  end);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;    [BUGGY]  char  ch  =  random.nextInt(buffer,  end);  [BUGGY]    while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	243	243	2	replace	char  ch  =  random.nextInt(buffer,  end);	      char    ch    =    random.nextInt(gap);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
6	[BUG]  [BUGGY]  char  ch  =  random.nextInt(gap,  start);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;    [BUGGY]  char  ch  =  random.nextInt(gap,  start);  [BUGGY]    while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	243	243	2	replace	char  ch  =  random.nextInt(gap,  start);	      char    ch    =    random.nextInt(gap);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	10	None	replace
7	[BUG]  [BUGGY]  while  (count--  >  0)  {  [CE]  invalid  method  declaration;  return  type  required  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;    [BUGGY]  while  (count--  >  0)  {  [BUGGY]    char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	243	243	2	replace	while  (count--  >  0)  {	  while    (count--    >=    0)    {    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	5	None	replace
8	[BUG]  [BUGGY]  int  count  =  chars[random.nextInt(gap)+  2];  [CE]  invalid  method  declaration;  return  type  required  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;    [BUGGY]  int  count  =  chars[random.nextInt(gap)+  2];  [BUGGY]    while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	243	243	2	replace	int  count  =  chars[random.nextInt(gap)+  2];	      int    count    =    chars[random.nextInt(gap)+    start];    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
9	[BUG]  [BUGGY]  int  count  =  buffer[random.nextInt(gap)+  start];  [CE]  invalid  method  declaration;  return  type  required  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;    [BUGGY]  int  count  =  buffer[random.nextInt(gap)+  start];  [BUGGY]    while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	243	243	2	replace	int  count  =  buffer[random.nextInt(gap)+  start];	      int    count    =    chars[random.nextInt(gap)+    start];    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	3	None	replace
10	[BUG]  [BUGGY]  int  count  =  random.nextInt(buffer,  end);  [CE]  invalid  method  declaration;  return  type  required  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;    [BUGGY]  int  count  =  random.nextInt(buffer,  end);  [BUGGY]    while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	243	243	2	replace	int  count  =  random.nextInt(buffer,  end);	      int    count    =    random.nextInt(gap);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
11	[BUG]  [BUGGY]  char  count  =  random.nextInt(gap);  [CE]  invalid  method  declaration;  return  type  required  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;    [BUGGY]  char  count  =  random.nextInt(gap);  [BUGGY]    while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	243	243	2	replace	char  count  =  random.nextInt(gap);	      int    count    =    random.nextInt(gap);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
12	[BUG]  [BUGGY]  int  count  =  random.nextInt(buffer,  start);  [CE]  invalid  method  declaration;  return  type  required  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;    [BUGGY]  int  count  =  random.nextInt(buffer,  start);  [BUGGY]    while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	243	243	2	replace	int  count  =  random.nextInt(buffer,  start);	      int    count    =    random.nextInt(gap);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
13	[BUG]  [BUGGY]  int  count  =  random.nextInt(buffer,  start,  end);  [CE]  invalid  method  declaration;  return  type  required  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;    [BUGGY]  int  count  =  random.nextInt(buffer,  start,  end);  [BUGGY]    while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	243	243	2	replace	int  count  =  random.nextInt(buffer,  start,  end);	      int    count    =    random.nextInt(gap);    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	8	None	replace
14	[BUG]  [BUGGY]  char  ch  =  chars[random.nextInt(gap)+  1];  [CE]  invalid  method  declaration;  return  type  required  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;    [BUGGY]  char  ch  =  chars[random.nextInt(gap)+  1];  [BUGGY]    while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	243	243	2	replace	char  ch  =  chars[random.nextInt(gap)+  1];	      char    ch    =    buffer[random.nextInt(gap)+    1];    	non-compiled	[CE]  invalid  method  declaration;  return  type  required	11	None	replace
15	[BUG]  [BUGGY]  char  ch  =  buffer[random.nextInt(gap)/  1];  [CE]  <identifier>  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;    [BUGGY]  char  ch  =  buffer[random.nextInt(gap)/  1];  [BUGGY]    while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	243	243	2	replace	char  ch  =  buffer[random.nextInt(gap)/  1];	      char    ch    =    buffer[random.nextInt(gap)+    1];    	non-compiled	[CE]  <identifier>  expected	11	None	replace
16	[BUG]  [BUGGY]  char  ch  =  chars[random.nextInt(gap)+  start];  [CE]  <identifier>  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;    [BUGGY]  char  ch  =  chars[random.nextInt(gap)+  start];  [BUGGY]    while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	243	243	2	replace	char  ch  =  chars[random.nextInt(gap)+  start];	      char    ch    =    buffer[random.nextInt(gap)+    start];    	non-compiled	[CE]  <identifier>  expected	9	None	replace
17	[BUG]  [BUGGY]  char  ch  =  buffer[random.nextInt(gap)+  end];  [CE]  <identifier>  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;    [BUGGY]  char  ch  =  buffer[random.nextInt(gap)+  end];  [BUGGY]    while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	243	243	2	replace	char  ch  =  buffer[random.nextInt(gap)+  end];	      char    ch    =    buffer[random.nextInt(gap)+    start];    	non-compiled	[CE]  <identifier>  expected	9	None	replace
18	[BUG]  [BUGGY]  int  count  =  chars.length  -  1;  [CE]  <identifier>  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;    [BUGGY]  int  count  =  chars.length  -  1;  [BUGGY]    while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	243	243	2	replace	int  count  =  chars.length  -  1;	      int    count    =    chars.length;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
19	[BUG]  [BUGGY]  int  count  =  0;  [CE]  <identifier>  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;    [BUGGY]  int  count  =  0;  [BUGGY]    while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	243	243	2	replace	int  count  =  0;	      int    count    =    chars.length;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
20	[BUG]  [BUGGY]  char  count  =  chars.length;  [CE]  <identifier>  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;    [BUGGY]  char  count  =  chars.length;  [BUGGY]    while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	243	243	2	replace	char  count  =  chars.length;	      int    count    =    chars.length;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
21	[BUG]  [BUGGY]  int  count  =  buffer[random.nextInt(gap)+1];  [CE]  <identifier>  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;    [BUGGY]  int  count  =  buffer[random.nextInt(gap)+1];  [BUGGY]    while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	243	243	2	replace	int  count  =  buffer[random.nextInt(gap)+1];	      int    count    =    chars[random.nextInt(gap)+1];    	non-compiled	[CE]  <identifier>  expected	4	None	replace
22	[BUG]  [BUGGY]  int  count  =  chars[random.nextInt(gap)+1]  +  1;  [CE]  <identifier>  expected  [FE]                ArrayIndexOutOfBoundsException    [CONTEXT]    end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;    [BUGGY]  int  count  =  chars[random.nextInt(gap)+1]  +  1;  [BUGGY]    while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	243	243	2	replace	int  count  =  chars[random.nextInt(gap)+1]  +  1;	      int    count    =    chars[random.nextInt(gap)+1];    	non-compiled	[CE]  <identifier>  expected	4	None	replace
23	[BUG]  [BUGGY]  while  (count--  <  0)  {  [CE]  <identifier>  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;    [BUGGY]  while  (count--  <  0)  {  [BUGGY]    char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	243	243	2	replace	while  (count--  <  0)  {	  while    (count--    ==    0)    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
24	[BUG]  [BUGGY]  int  count  =  buffer.length  -  1;  [CE]  <identifier>  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;    [BUGGY]  int  count  =  buffer.length  -  1;  [BUGGY]    while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	243	243	2	replace	int  count  =  buffer.length  -  1;	      int    count    =    buffer.length;    	non-compiled	[CE]  <identifier>  expected	7	None	replace
25	[BUG]  [BUGGY]  int  count  =  buffer.length  -  start;  [CE]  <identifier>  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;    [BUGGY]  int  count  =  buffer.length  -  start;  [BUGGY]    while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	243	243	2	replace	int  count  =  buffer.length  -  start;	      int    count    =    buffer.length;    	non-compiled	[CE]  <identifier>  expected	7	None	replace
26	[BUG]  [BUGGY]  int  count  =  buffer.length  -  2;  [CE]  <identifier>  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;    [BUGGY]  int  count  =  buffer.length  -  2;  [BUGGY]    while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	243	243	2	replace	int  count  =  buffer.length  -  2;	      int    count    =    buffer.length;    	non-compiled	[CE]  <identifier>  expected	7	None	replace
27	[BUG]  [BUGGY]  int  count  =  chars.nextInt(gap);  [CE]  <identifier>  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;    [BUGGY]  int  count  =  chars.nextInt(gap);  [BUGGY]    while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	243	243	2	replace	int  count  =  chars.nextInt(gap);	      int    count    =    random.nextInt(gap);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
28	[BUG]  [BUGGY]  int  count  =  random.nextInt(start,  gap);  [CE]  <identifier>  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;    [BUGGY]  int  count  =  random.nextInt(start,  gap);  [BUGGY]    while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	243	243	2	replace	int  count  =  random.nextInt(start,  gap);	      int    count    =    random.nextInt(gap);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
29	[BUG]  [BUGGY]  int  count  =  chars[random.nextInt(gap)+  start  +  1];  [CE]  <identifier>  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;    [BUGGY]  int  count  =  chars[random.nextInt(gap)+  start  +  1];  [BUGGY]    while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	243	243	2	replace	int  count  =  chars[random.nextInt(gap)+  start  +  1];	      int    count    =    chars[random.nextInt(gap)+    start];    	non-compiled	[CE]  <identifier>  expected	3	None	replace
30	[BUG]  [BUGGY]  int  count  =  chars[random.nextInt(gap)+  start]  +  1;  [CE]  <identifier>  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;    [BUGGY]  int  count  =  chars[random.nextInt(gap)+  start]  +  1;  [BUGGY]    while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	243	243	2	replace	int  count  =  chars[random.nextInt(gap)+  start]  +  1;	      int    count    =    chars[random.nextInt(gap)+    start];    	non-compiled	[CE]  <identifier>  expected	3	None	replace
31	[BUG]  [BUGGY]  int  count  =  chars.length  +  1;  [CE]  <identifier>  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;    [BUGGY]  int  count  =  chars.length  +  1;  [BUGGY]    while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	243	243	2	replace	int  count  =  chars.length  +  1;	      int    count    =    chars.length;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
32	[BUG]  [BUGGY]  char  ch  =  buffer[random.nextInt(gap)+  start  +  1];  [CE]  <identifier>  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;    [BUGGY]  char  ch  =  buffer[random.nextInt(gap)+  start  +  1];  [BUGGY]    while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	243	243	2	replace	char  ch  =  buffer[random.nextInt(gap)+  start  +  1];	      char    ch    =    buffer[random.nextInt(gap)+    start];    	non-compiled	[CE]  <identifier>  expected	9	None	replace
33	[BUG]  [BUGGY]  char  ch  =  random.nextInt(buffer,  0,  gap);  [CE]  <identifier>  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;    [BUGGY]  char  ch  =  random.nextInt(buffer,  0,  gap);  [BUGGY]    while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	243	243	2	replace	char  ch  =  random.nextInt(buffer,  0,  gap);	      char    ch    =    random.nextInt(gap);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
34	[BUG]  [BUGGY]  int  count  =  chars[random.nextInt(gap)+1]  +  start;  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;    [BUGGY]  int  count  =  chars[random.nextInt(gap)+1]  +  start;  [BUGGY]    while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	243	243	2	replace	int  count  =  chars[random.nextInt(gap)+1]  +  start;	      int    count    =    chars[random.nextInt(gap)+1];    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
35	[BUG]  [BUGGY]  int  count  =  chars[random.nextInt(gap)/  start];  [CE]  <identifier>  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;    [BUGGY]  int  count  =  chars[random.nextInt(gap)/  start];  [BUGGY]    while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	243	243	2	replace	int  count  =  chars[random.nextInt(gap)/  start];	      int    count    =    chars[random.nextInt(gap)+    start];    	non-compiled	[CE]  <identifier>  expected	3	None	replace
36	[BUG]  [BUGGY]  int  count  =  random.nextInt(gap,  end);  [CE]  <identifier>  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;    [BUGGY]  int  count  =  random.nextInt(gap,  end);  [BUGGY]    while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	243	243	2	replace	int  count  =  random.nextInt(gap,  end);	      int    count    =    random.nextInt(gap);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
37	[BUG]  [BUGGY]  int  count  =  chars[random.nextInt(gap)-  1];  [CE]  <identifier>  expected  [FE]              ArrayIndexOutOfBoundsException    [CONTEXT]    end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;    [BUGGY]  int  count  =  chars[random.nextInt(gap)-  1];  [BUGGY]    while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	243	243	2	replace	int  count  =  chars[random.nextInt(gap)-  1];	      int    count    =    chars[random.nextInt(gap)+1];    	non-compiled	[CE]  <identifier>  expected	4	None	replace
38	[BUG]  [BUGGY]  int  count  =  chars[random.nextInt(gap  +  1)];  [CE]  <identifier>  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;    [BUGGY]  int  count  =  chars[random.nextInt(gap  +  1)];  [BUGGY]    while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	243	243	2	replace	int  count  =  chars[random.nextInt(gap  +  1)];	      int    count    =    chars[random.nextInt(gap)];    	non-compiled	[CE]  <identifier>  expected	1	None	replace
39	[BUG]  [BUGGY]  char  ch  =  chars[random.nextInt(gap)+  start);  [CE]  <identifier>  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;    [BUGGY]  char  ch  =  chars[random.nextInt(gap)+  start);  [BUGGY]    while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	243	243	2	replace	char  ch  =  chars[random.nextInt(gap)+  start);	      char    ch    =    random.nextInt(gap);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
40	[BUG]  [BUGGY]  char  ch  =  chars[random.nextInt(gap));  [CE]  illegal  start  of  type  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]    end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;    [BUGGY]  char  ch  =  chars[random.nextInt(gap));  [BUGGY]    while  (count--  !=  0)  {  char  ch;  if  (chars  ==  null)  {  ch  =  (char)  (random.nextInt(gap)  +  start);  }  else  {  ch  =  chars[random.nextInt(gap)  +  start];  }  if  (letters  &&  Character.isLetter(ch)  ||  numbers  &&  Character.isDigit(ch)  ||  !letters  &&  !numbers)  {  if(ch  >=  56320  &&  ch  <=  57343)  {  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	243	243	2	replace	char  ch  =  chars[random.nextInt(gap));	      char    ch    =    random.nextInt(gap);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
