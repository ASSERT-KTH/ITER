bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    Random  random  =  random.nullValue();  [CE]  [FE]    ArrayIndexOutOfBoundsException  [CONTEXT]  char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return   " ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException( "Requested  random  string  length   "  +  count  +   "  is  less  than  0. ");  }  if  (start  ==  0  &&  end  ==  0)  {  [BUGGY]    Random  random  =  random.nullValue();  [BUGGY]  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	232	232	2	replace	    Random  random  =  random.nullValue();		non-compiled	[CE]  	12	None	add
2	[BUG]  [BUGGY]    char[]  buffer  =  new  char[count  +  1];  [CE]  [FE]      ArrayIndexOutOfBoundsException  [CONTEXT]  char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return   " ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException( "Requested  random  string  length   "  +  count  +   "  is  less  than  0. ");  }  if  (start  ==  0  &&  end  ==  0)  {  [BUGGY]    char[]  buffer  =  new  char[count  +  1];  [BUGGY]  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	232	232	2	replace	    char[]  buffer  =  new  char[count  +  1];		non-compiled	[CE]  	12	None	add
3	[BUG]  [BUGGY]    char[]  buffer  =  random.getChars(start,  end);  [CE]  [FE]        ArrayIndexOutOfBoundsException  [CONTEXT]  char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return   " ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException( "Requested  random  string  length   "  +  count  +   "  is  less  than  0. ");  }  if  (start  ==  0  &&  end  ==  0)  {  [BUGGY]    char[]  buffer  =  random.getChars(start,  end);  [BUGGY]  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	232	232	2	replace	    char[]  buffer  =  random.getChars(start,  end);		non-compiled	[CE]  	12	None	add
4	[BUG]  [BUGGY]    char[]  buf  =  random.getChars(start,  end);  [CE]  [FE]          ArrayIndexOutOfBoundsException  [CONTEXT]  char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return   " ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException( "Requested  random  string  length   "  +  count  +   "  is  less  than  0. ");  }  if  (start  ==  0  &&  end  ==  0)  {  [BUGGY]    char[]  buf  =  random.getChars(start,  end);  [BUGGY]  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	232	232	2	replace	    char[]  buf  =  random.getChars(start,  end);		non-compiled	[CE]  	12	None	add
5	[BUG]  [BUGGY]    char[]  buffer  =  random.getChars(ch,  start,  end);  [CE]  [FE]            ArrayIndexOutOfBoundsException  [CONTEXT]  char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return   " ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException( "Requested  random  string  length   "  +  count  +   "  is  less  than  0. ");  }  if  (start  ==  0  &&  end  ==  0)  {  [BUGGY]    char[]  buffer  =  random.getChars(ch,  start,  end);  [BUGGY]  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	232	232	2	replace	    char[]  buffer  =  random.getChars(ch,  start,  end);		non-compiled	[CE]  	12	None	add
6	[BUG]  [BUGGY]  if  (!letters  ||!numbers)  {  [CE]  [FE]    ArrayIndexOutOfBoundsException  [CONTEXT]  char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return   " ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException( "Requested  random  string  length   "  +  count  +   "  is  less  than  0. ");  }  if  (start  ==  0  &&  end  ==  0)  {  [BUGGY]  if  (!letters  ||!numbers)  {  [BUGGY]  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	232	232	2	replace	if  (!letters  ||!numbers)  {	if  (!letters  &&  !numbers)  {  	non-compiled	[CE]  	11	None	replace
7	[BUG]  [BUGGY]  if(!letters  &&!numbers  &&  random.equals(ch))  {  [CE]  [FE]      ArrayIndexOutOfBoundsException  [CONTEXT]  char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return   " ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException( "Requested  random  string  length   "  +  count  +   "  is  less  than  0. ");  }  if  (start  ==  0  &&  end  ==  0)  {  [BUGGY]  if(!letters  &&!numbers  &&  random.equals(ch))  {  [BUGGY]  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	232	232	2	replace	if(!letters  &&!numbers  &&  random.equals(ch))  {	if  (!letters  &&  !numbers)  {  	non-compiled	[CE]  	11	None	replace
8	[BUG]  [BUGGY]    char[]  buffer  =  random.getChars(start,  start);  [CE]  [FE]    ArrayIndexOutOfBoundsException  [CONTEXT]  char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return   " ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException( "Requested  random  string  length   "  +  count  +   "  is  less  than  0. ");  }  if  (start  ==  0  &&  end  ==  0)  {  [BUGGY]    char[]  buffer  =  random.getChars(start,  start);  [BUGGY]  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	232	232	2	replace	    char[]  buffer  =  random.getChars(start,  start);		non-compiled	[CE]  	12	None	add
9	[BUG]  [BUGGY]    int  letters  =  random.numbers;  [CE]  [FE]      ArrayIndexOutOfBoundsException  [CONTEXT]  char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return   " ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException( "Requested  random  string  length   "  +  count  +   "  is  less  than  0. ");  }  if  (start  ==  0  &&  end  ==  0)  {  [BUGGY]    int  letters  =  random.numbers;  [BUGGY]  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	232	232	2	replace	    int  letters  =  random.numbers;		non-compiled	[CE]  	12	None	add
10	[BUG]  [BUGGY]    int  letters  =  random.numbers  -  start;  [CE]  [FE]        ArrayIndexOutOfBoundsException  [CONTEXT]  char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return   " ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException( "Requested  random  string  length   "  +  count  +   "  is  less  than  0. ");  }  if  (start  ==  0  &&  end  ==  0)  {  [BUGGY]    int  letters  =  random.numbers  -  start;  [BUGGY]  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	232	232	2	replace	    int  letters  =  random.numbers  -  start;		non-compiled	[CE]  	12	None	add
11	[BUG]  [BUGGY]  if(!letters  &&!numbers  &&  random.matches(ch))  {  [CE]  [FE]    ArrayIndexOutOfBoundsException  [CONTEXT]  char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return   " ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException( "Requested  random  string  length   "  +  count  +   "  is  less  than  0. ");  }  if  (start  ==  0  &&  end  ==  0)  {  [BUGGY]  if(!letters  &&!numbers  &&  random.matches(ch))  {  [BUGGY]  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	232	232	2	replace	if(!letters  &&!numbers  &&  random.matches(ch))  {	if  (!letters  &&  !numbers)  {  	non-compiled	[CE]  	11	None	replace
12	[BUG]  [BUGGY]    char[]  buffer  =  random.getChars(start,  start,  end);  [CE]  [FE]    ArrayIndexOutOfBoundsException  [CONTEXT]  char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return   " ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException( "Requested  random  string  length   "  +  count  +   "  is  less  than  0. ");  }  if  (start  ==  0  &&  end  ==  0)  {  [BUGGY]    char[]  buffer  =  random.getChars(start,  start,  end);  [BUGGY]  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	232	232	2	replace	    char[]  buffer  =  random.getChars(start,  start,  end);		non-compiled	[CE]  	12	None	add
13	[BUG]  [BUGGY]    char[]  buffer  =  random.getChars(start,  start  +  1,  count);  [CE]  [FE]      ArrayIndexOutOfBoundsException  [CONTEXT]  char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return   " ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException( "Requested  random  string  length   "  +  count  +   "  is  less  than  0. ");  }  if  (start  ==  0  &&  end  ==  0)  {  [BUGGY]    char[]  buffer  =  random.getChars(start,  start  +  1,  count);  [BUGGY]  if  (!letters  &&  !numbers)  {  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	232	232	2	replace	    char[]  buffer  =  random.getChars(start,  start  +  1,  count);		non-compiled	[CE]  	12	None	add
14	[BUG]  [BUGGY]  if(!letters  &&!numbers  &&!ch.equals(ch))  {  [CE]  [FE]    ArrayIndexOutOfBoundsException  [CONTEXT]  char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return   " ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException( "Requested  random  string  length   "  +  count  +   "  is  less  than  0. ");  }  if  (start  ==  0  &&  end  ==  0)  {  [BUGGY]  if(!letters  &&!numbers  &&!ch.equals(ch))  {  [BUGGY]  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	232	232	2	replace	if(!letters  &&!numbers  &&!ch.equals(ch))  {	if  (!letters  &&  !numbers)  {  	non-compiled	[CE]  	11	None	replace
15	[BUG]  [BUGGY]  if(!letters  &&!numbers  &&  random.getChars(ch)!=  0)  {  [CE]  illegal  start  of  type  [FE]      ArrayIndexOutOfBoundsException  [CONTEXT]  char[]  chars,  Random  random)  {  if  (count  ==  0)  {  return   " ";  }  else  if  (count  <  0)  {  throw  new  IllegalArgumentException( "Requested  random  string  length   "  +  count  +   "  is  less  than  0. ");  }  if  (start  ==  0  &&  end  ==  0)  {  [BUGGY]  if(!letters  &&!numbers  &&  random.getChars(ch)!=  0)  {  [BUGGY]  end  =  Integer.MAX_VALUE;  }  else  {  end  =  'z'  +  1;  start  =  '  ';  }  }  char[]  buffer  =  new  char[count];  int  gap  =  end  -  start;  [CLASS]  RandomStringUtils  [METHOD]  random  [RETURN_TYPE]  String  int  count  int  start  int  end  boolean  letters  boolean  numbers  char[]  chars  Random  random  [VARIABLES]  char  ch  boolean  letters  numbers  Random  RANDOM  random  int  count  end  gap  start  char[]  buffer  chars  	projects/Lang12/src/main/java/org/apache/commons/lang3/RandomStringUtils.java	0.7071067811865475	232	232	2	replace	if(!letters  &&!numbers  &&  random.getChars(ch)!=  0)  {	if  (!letters  &&  !numbers)  {  	non-compiled	[CE]  illegal  start  of  type	11	None	replace
