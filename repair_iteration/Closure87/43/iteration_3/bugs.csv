bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Node  assign  =  thenBranch.getLastChild();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();      [BUGGY]  Node  assign  =  thenBranch.getLastChild();  [BUGGY]        if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	272	272	1	replace	Node  assign  =  thenBranch.getLastChild();	  Node    assign    =    thenBranch.getParent();    	non-compiled	[CE]  	8	None	replace
2	[BUG]  [BUGGY]  Node  assign  =  cond.getParent();  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();      [BUGGY]  Node  assign  =  cond.getParent();  [BUGGY]        if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	272	272	1	replace	Node  assign  =  cond.getParent();	  Node    assign    =    thenBranch.getParent();    	non-compiled	[CE]  	8	None	replace
3	[BUG]  [BUGGY]  Node  assign  =  cond.getNext();  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();      [BUGGY]  Node  assign  =  cond.getNext();  [BUGGY]        if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	272	272	1	replace	Node  assign  =  cond.getNext();	  Node    assign    =    thenBranch.getParent();    	non-compiled	[CE]  	8	None	replace
4	[BUG]  [BUGGY]  Node  assign  =  thenBranch.getPrevious();  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();      [BUGGY]  Node  assign  =  thenBranch.getPrevious();  [BUGGY]        if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	272	272	1	replace	Node  assign  =  thenBranch.getPrevious();	  Node    assign    =    thenBranch.getParent();    	non-compiled	[CE]  	8	None	replace
5	[BUG]  [BUGGY]  Node  elseBranch  =  cond.cloneChildren();  [CE]  [FE]            AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();      [BUGGY]  Node  elseBranch  =  cond.cloneChildren();  [BUGGY]        if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	272	272	1	replace	Node  elseBranch  =  cond.cloneChildren();	  Node    elseBranch    =    thenBranch.cloneChildren();    	non-compiled	[CE]  	34	None	replace
6	[BUG]  [BUGGY]  Node  elseBranch  =  thenBranch.next();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();      [BUGGY]  Node  elseBranch  =  thenBranch.next();  [BUGGY]        if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	272	272	1	replace	Node  elseBranch  =  thenBranch.next();	  Node    elseBranch    =    thenBranch.cloneChildren();    	non-compiled	[CE]  	34	None	replace
7	[BUG]  [BUGGY]  Node  elseBranch  =  cond.cloneBlock();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();      [BUGGY]  Node  elseBranch  =  cond.cloneBlock();  [BUGGY]        if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	272	272	1	replace	Node  elseBranch  =  cond.cloneBlock();	  Node    elseBranch    =    thenBranch.cloneBlock();    	non-compiled	[CE]  	18	None	replace
8	[BUG]  [BUGGY]  Node  elseBranch  =  secondBranch.cloneBlock();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();      [BUGGY]  Node  elseBranch  =  secondBranch.cloneBlock();  [BUGGY]        if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	272	272	1	replace	Node  elseBranch  =  secondBranch.cloneBlock();	  Node    elseBranch    =    thenBranch.cloneBlock();    	non-compiled	[CE]  	18	None	replace
9	[BUG]  [BUGGY]  Node  nextBranch  =  cond.getNext();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();      [BUGGY]  Node  nextBranch  =  cond.getNext();  [BUGGY]        if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	272	272	1	replace	Node  nextBranch  =  cond.getNext();	  Node    nextBranch    =    thenBranch.getNext();    	non-compiled	[CE]  	6	None	replace
10	[BUG]  [BUGGY]  Node  nextBranch  =  thenBranch.getLastChild();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();      [BUGGY]  Node  nextBranch  =  thenBranch.getLastChild();  [BUGGY]        if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	272	272	1	replace	Node  nextBranch  =  thenBranch.getLastChild();	  Node    nextBranch    =    thenBranch.getNext();    	non-compiled	[CE]  	6	None	replace
11	[BUG]  [BUGGY]  Node  nextBranch  =  firstBranch.getNext();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();      [BUGGY]  Node  nextBranch  =  firstBranch.getNext();  [BUGGY]        if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	272	272	1	replace	Node  nextBranch  =  firstBranch.getNext();	  Node    nextBranch    =    thenBranch.getNext();    	non-compiled	[CE]  	6	None	replace
12	[BUG]  [BUGGY]  Node  nextBranch  =  n.getNext();  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();      [BUGGY]  Node  nextBranch  =  n.getNext();  [BUGGY]        if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	272	272	1	replace	Node  nextBranch  =  n.getNext();	  Node    nextBranch    =    thenBranch.getNext();    	non-compiled	[CE]  	6	None	replace
13	[BUG]  [BUGGY]  Node  nextBranch  =  thenBranch.getParent();  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();      [BUGGY]  Node  nextBranch  =  thenBranch.getParent();  [BUGGY]        if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	272	272	1	replace	Node  nextBranch  =  thenBranch.getParent();	  Node    nextBranch    =    thenBranch.getNext();    	non-compiled	[CE]  	6	None	replace
14	[BUG]  [BUGGY]  Node  nextBranch  =  node.getNext();  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();      [BUGGY]  Node  nextBranch  =  node.getNext();  [BUGGY]        if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	272	272	1	replace	Node  nextBranch  =  node.getNext();	  Node    nextBranch    =    thenBranch.getNext();    	non-compiled	[CE]  	6	None	replace
15	[BUG]  [BUGGY]  Node  elseBranch  =  n.getFirstChild();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();      [BUGGY]  Node  elseBranch  =  n.getFirstChild();  [BUGGY]        if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	272	272	1	replace	Node  elseBranch  =  n.getFirstChild();	  Node    elseBranch    =    thenBranch.getfirstChild();    	non-compiled	[CE]  	23	None	replace
16	[BUG]  [BUGGY]  Node  elseBranch  =  cond.getPreviousChild();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();      [BUGGY]  Node  elseBranch  =  cond.getPreviousChild();  [BUGGY]        if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	272	272	1	replace	Node  elseBranch  =  cond.getPreviousChild();	  Node    elseBranch    =    thenBranch.getPreviousChild();    	non-compiled	[CE]  	21	None	replace
17	[BUG]  [BUGGY]  Node  elseBranch  =  thenBranch.getOwnerChild();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();      [BUGGY]  Node  elseBranch  =  thenBranch.getOwnerChild();  [BUGGY]        if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	272	272	1	replace	Node  elseBranch  =  thenBranch.getOwnerChild();	  Node    elseBranch    =    thenBranch.getPreviousChild();    	non-compiled	[CE]  	21	None	replace
18	[BUG]  [BUGGY]  thenBranch  =  cond.getNext();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();      [BUGGY]  thenBranch  =  cond.getNext();  [BUGGY]        if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	272	272	1	replace	thenBranch  =  cond.getNext();	  thenBranch    =    thenBranch.getNext();    	non-compiled	[CE]  	5	None	replace
19	[BUG]  [BUGGY]  thenBranch  =  thenBranch.getParent();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();      [BUGGY]  thenBranch  =  thenBranch.getParent();  [BUGGY]        if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	272	272	1	replace	thenBranch  =  thenBranch.getParent();	  thenBranch    =    thenBranch.getNext();    	non-compiled	[CE]  	5	None	replace
20	[BUG]  [BUGGY]  thenBranch  =  thenBranch.removeFirstChild();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();      [BUGGY]  thenBranch  =  thenBranch.removeFirstChild();  [BUGGY]        if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	272	272	1	replace	thenBranch  =  thenBranch.removeFirstChild();	  thenBranch    =    thenBranch.getNext();    	non-compiled	[CE]  	5	None	replace
21	[BUG]  [BUGGY]  thenBranch  =  thenBranch.cloneTree();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();      [BUGGY]  thenBranch  =  thenBranch.cloneTree();  [BUGGY]        if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	272	272	1	replace	thenBranch  =  thenBranch.cloneTree();	  thenBranch    =    thenBranch.getNext();    	non-compiled	[CE]  	5	None	replace
22	[BUG]  [BUGGY]  Node  elseBranch  =  cond.getNext(),  thenBranchIsExpressionBlock;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();      [BUGGY]  Node  elseBranch  =  cond.getNext(),  thenBranchIsExpressionBlock;  [BUGGY]        if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	272	272	1	replace	Node  elseBranch  =  cond.getNext(),  thenBranchIsExpressionBlock;	  Node    elseBranch    =    cond.getNext(),    thenBranch;    	non-compiled	[CE]  	14	None	replace
23	[BUG]  [BUGGY]  Node  elseBranch  =  thenBranch.getNext(),  cond;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();      [BUGGY]  Node  elseBranch  =  thenBranch.getNext(),  cond;  [BUGGY]        if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	272	272	1	replace	Node  elseBranch  =  thenBranch.getNext(),  cond;	  Node    elseBranch    =    cond.getNext(),    thenBranch;    	non-compiled	[CE]  	14	None	replace
24	[BUG]  [BUGGY]  Node  elseBranch  =  cond.getNext(),  thenBranchIsVar;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();      [BUGGY]  Node  elseBranch  =  cond.getNext(),  thenBranchIsVar;  [BUGGY]        if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	272	272	1	replace	Node  elseBranch  =  cond.getNext(),  thenBranchIsVar;	  Node    elseBranch    =    cond.getNext(),    thenBranch;    	non-compiled	[CE]  	14	None	replace
25	[BUG]  [BUGGY]  Node  elseBranch  =  cond.getParent(),  thenBranch;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();      [BUGGY]  Node  elseBranch  =  cond.getParent(),  thenBranch;  [BUGGY]        if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	272	272	1	replace	Node  elseBranch  =  cond.getParent(),  thenBranch;	  Node    elseBranch    =    cond.getNext(),    thenBranch;    	non-compiled	[CE]  	14	None	replace
26	[BUG]  [BUGGY]  Node  elseBranch  =  cond.getNext(),  thenBranch  +  1;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();      [BUGGY]  Node  elseBranch  =  cond.getNext(),  thenBranch  +  1;  [BUGGY]        if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	272	272	1	replace	Node  elseBranch  =  cond.getNext(),  thenBranch  +  1;	  Node    elseBranch    =    cond.getNext(),    thenBranch;    	non-compiled	[CE]  	14	None	replace
27	[BUG]  [BUGGY]  Node  elseBranch  =  cond.getFirstChild(),  thenBranch;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();      [BUGGY]  Node  elseBranch  =  cond.getFirstChild(),  thenBranch;  [BUGGY]        if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	272	272	1	replace	Node  elseBranch  =  cond.getFirstChild(),  thenBranch;	  Node    elseBranch    =    cond.getNext(),    thenBranch;    	non-compiled	[CE]  	14	None	replace
28	[BUG]  [BUGGY]  Node  elseBranch  =  cond.cloneNode();  [CE]  [FE]            AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();      [BUGGY]  Node  elseBranch  =  cond.cloneNode();  [BUGGY]        if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	272	272	1	replace	Node  elseBranch  =  cond.cloneNode();	  Node    elseBranch    =    cond.cloneTree();    	non-compiled	[CE]  	15	None	replace
29	[BUG]  [BUGGY]  Node  elseBranch  =  cond.cloneTree(),  thenBranch;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();      [BUGGY]  Node  elseBranch  =  cond.cloneTree(),  thenBranch;  [BUGGY]        if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	272	272	1	replace	Node  elseBranch  =  cond.cloneTree(),  thenBranch;	  Node    elseBranch    =    cond.cloneTree();    	non-compiled	[CE]  	15	None	replace
30	[BUG]  [BUGGY]  Node  elseBranch  =  cond.clone();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();      [BUGGY]  Node  elseBranch  =  cond.clone();  [BUGGY]        if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	272	272	1	replace	Node  elseBranch  =  cond.clone();	  Node    elseBranch    =    cond.cloneTree();    	non-compiled	[CE]  	15	None	replace
31	[BUG]  [BUGGY]  Node  thenBranch  =  cond.getLastChild();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();      [BUGGY]  Node  thenBranch  =  cond.getLastChild();  [BUGGY]        if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	272	272	1	replace	Node  thenBranch  =  cond.getLastChild();	  Node    thenBranch    =    thenBranch.getLastChild();    	non-compiled	[CE]  	26	None	replace
32	[BUG]  [BUGGY]  Node  thenBranch  =  cond.getFirstChild();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();      [BUGGY]  Node  thenBranch  =  cond.getFirstChild();  [BUGGY]        if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	272	272	1	replace	Node  thenBranch  =  cond.getFirstChild();	  Node    thenBranch    =    thenBranch.getLastChild();    	non-compiled	[CE]  	26	None	replace
33	[BUG]  [BUGGY]  Node  thenBranch  =  thenBranch.getPreviousChild();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();      [BUGGY]  Node  thenBranch  =  thenBranch.getPreviousChild();  [BUGGY]        if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	272	272	1	replace	Node  thenBranch  =  thenBranch.getPreviousChild();	  Node    thenBranch    =    thenBranch.getLastChild();    	non-compiled	[CE]  	26	None	replace
34	[BUG]  [BUGGY]  Node  thenBranch  =  thenBranch.removeFirstChild();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();      [BUGGY]  Node  thenBranch  =  thenBranch.removeFirstChild();  [BUGGY]        if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	272	272	1	replace	Node  thenBranch  =  thenBranch.removeFirstChild();	  Node    thenBranch    =    thenBranch.getFirstChild();    	non-compiled	[CE]  	27	None	replace
35	[BUG]  [BUGGY]  Node  elseBranch  =  thenBranch.getOwnerDocument();  [CE]  [FE]            AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();      [BUGGY]  Node  elseBranch  =  thenBranch.getOwnerDocument();  [BUGGY]        if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	272	272	1	replace	Node  elseBranch  =  thenBranch.getOwnerDocument();	  Node    elseBranch    =    cond.getOwnerDocument();    	non-compiled	[CE]  	22	None	replace
36	[BUG]  [BUGGY]  Node  elseBranch  =  cond.getOwnDocument();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();      [BUGGY]  Node  elseBranch  =  cond.getOwnDocument();  [BUGGY]        if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	272	272	1	replace	Node  elseBranch  =  cond.getOwnDocument();	  Node    elseBranch    =    cond.getOwnerDocument();    	non-compiled	[CE]  	22	None	replace
37	[BUG]  [BUGGY]  Node  elseBranch  =  cond.getOwnerDocument(),  thenBranch;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();      [BUGGY]  Node  elseBranch  =  cond.getOwnerDocument(),  thenBranch;  [BUGGY]        if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	272	272	1	replace	Node  elseBranch  =  cond.getOwnerDocument(),  thenBranch;	  Node    elseBranch    =    cond.getOwnerDocument();    	non-compiled	[CE]  	22	None	replace
38	[BUG]  [BUGGY]  Node  elseBranch  =  cond.getOwnerDocument(),  thenBranch);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();      [BUGGY]  Node  elseBranch  =  cond.getOwnerDocument(),  thenBranch);  [BUGGY]        if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	272	272	1	replace	Node  elseBranch  =  cond.getOwnerDocument(),  thenBranch);	  Node    elseBranch    =    cond.getOwnerDocument();    	non-compiled	[CE]  	22	None	replace
39	[BUG]  [BUGGY]  Node  elseBranch  =  cond.getOwnerNode();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();      [BUGGY]  Node  elseBranch  =  cond.getOwnerNode();  [BUGGY]        if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	272	272	1	replace	Node  elseBranch  =  cond.getOwnerNode();	  Node    elseBranch    =    cond.getOwnerDocument();    	non-compiled	[CE]  	22	None	replace
40	[BUG]  [BUGGY]  Node  elseBranch  =  cond.cloneNext();  [CE]  [FE]            AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();      [BUGGY]  Node  elseBranch  =  cond.cloneNext();  [BUGGY]        if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	272	272	1	replace	Node  elseBranch  =  cond.cloneNext();	  Node    elseBranch    =    thenBranch.cloneNext();    	non-compiled	[CE]  	25	None	replace
41	[BUG]  [BUGGY]  Node  elseBranch  =  node.getFirstChild();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();      [BUGGY]  Node  elseBranch  =  node.getFirstChild();  [BUGGY]        if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	272	272	1	replace	Node  elseBranch  =  node.getFirstChild();	  Node    elseBranch    =    node.getLastChild();    	non-compiled	[CE]  	20	None	replace
42	[BUG]  [BUGGY]  Node  assign  =  n.getNext();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();      [BUGGY]  Node  assign  =  n.getNext();  [BUGGY]        if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	272	272	1	replace	Node  assign  =  n.getNext();	  Node    assign    =    thenBranch.getNext();    	non-compiled	[CE]  	4	None	replace
43	[BUG]  [BUGGY]  Node  elseBranch  =  cond,  thenBranch.getNext();  [CE]  [FE]            AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();      [BUGGY]  Node  elseBranch  =  cond,  thenBranch.getNext();  [BUGGY]        if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	272	272	1	replace	Node  elseBranch  =  cond,  thenBranch.getNext();	  Node    elseBranch    =    thenBranch,    cond.getNext();    	non-compiled	[CE]  	33	None	replace
44	[BUG]  [BUGGY]  Node  elseBranch  =  thenBranch,  cond.getParent();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();      [BUGGY]  Node  elseBranch  =  thenBranch,  cond.getParent();  [BUGGY]        if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	272	272	1	replace	Node  elseBranch  =  thenBranch,  cond.getParent();	  Node    elseBranch    =    thenBranch,    cond.getNext();    	non-compiled	[CE]  	33	None	replace
45	[BUG]  [BUGGY]  Node  elseBranch  =  thenBranch,  cond.getLastChild();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();      [BUGGY]  Node  elseBranch  =  thenBranch,  cond.getLastChild();  [BUGGY]        if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	272	272	1	replace	Node  elseBranch  =  thenBranch,  cond.getLastChild();	  Node    elseBranch    =    thenBranch,    cond.getNext();    	non-compiled	[CE]  	33	None	replace
46	[BUG]  [BUGGY]  Node  elseBranch  =  thenBranch,  cond.getFirstChild();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();      [BUGGY]  Node  elseBranch  =  thenBranch,  cond.getFirstChild();  [BUGGY]        if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	272	272	1	replace	Node  elseBranch  =  thenBranch,  cond.getFirstChild();	  Node    elseBranch    =    thenBranch,    cond.getNext();    	non-compiled	[CE]  	33	None	replace
47	[BUG]  [BUGGY]  Node  elseBranch  =  thenBranch,  cond.getPrevious();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();      [BUGGY]  Node  elseBranch  =  thenBranch,  cond.getPrevious();  [BUGGY]        if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	272	272	1	replace	Node  elseBranch  =  thenBranch,  cond.getPrevious();	  Node    elseBranch    =    thenBranch,    cond.getNext();    	non-compiled	[CE]  	33	None	replace
48	[BUG]  [BUGGY]  Node  thenBranch  =  cond.getNext();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();      [BUGGY]  Node  thenBranch  =  cond.getNext();  [BUGGY]        if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	272	272	1	replace	Node  thenBranch  =  cond.getNext();	  Node    thenBranch    =    thenBranch.getNext();    	non-compiled	[CE]  	3	None	replace
49	[BUG]  [BUGGY]  Node  thenBranch  =  thenBranch.cloneTree();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();      [BUGGY]  Node  thenBranch  =  thenBranch.cloneTree();  [BUGGY]        if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	272	272	1	replace	Node  thenBranch  =  thenBranch.cloneTree();	  Node    thenBranch    =    thenBranch.getNext();    	non-compiled	[CE]  	3	None	replace
50	[BUG]  [BUGGY]  Node  elseBranch  =  cond.getOwner();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();      [BUGGY]  Node  elseBranch  =  cond.getOwner();  [BUGGY]        if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	272	272	1	replace	Node  elseBranch  =  cond.getOwner();	  Node    elseBranch    =    thenBranch.getOwner();    	non-compiled	[CE]  	2	None	replace
51	[BUG]  [BUGGY]  Node  elseBranch  =  thenBranch.getLowerCase();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();      [BUGGY]  Node  elseBranch  =  thenBranch.getLowerCase();  [BUGGY]        if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	272	272	1	replace	Node  elseBranch  =  thenBranch.getLowerCase();	  Node    elseBranch    =    thenBranch.getOwner();    	non-compiled	[CE]  	2	None	replace
52	[BUG]  [BUGGY]  Node  elseBranch  =  thenBranch.getOwnerCall();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();      [BUGGY]  Node  elseBranch  =  thenBranch.getOwnerCall();  [BUGGY]        if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	272	272	1	replace	Node  elseBranch  =  thenBranch.getOwnerCall();	  Node    elseBranch    =    thenBranch.getOwner();    	non-compiled	[CE]  	2	None	replace
53	[BUG]  [BUGGY]  Node  elseBranch  =  thenBranch  ==  null?  thenBranch.getNext()  :  null;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();      [BUGGY]  Node  elseBranch  =  thenBranch  ==  null?  thenBranch.getNext()  :  null;  [BUGGY]        if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	272	272	1	replace	Node  elseBranch  =  thenBranch  ==  null?  thenBranch.getNext()  :  null;	  Node    elseBranch    =    thenBranch!=    null?    thenBranch.getNext()    :    null;    	non-compiled	[CE]  	29	None	replace
54	[BUG]  [BUGGY]  Node  elseBranch  =  thenBranch!=  null?  thenBranch.getParent()  :  null;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();      [BUGGY]  Node  elseBranch  =  thenBranch!=  null?  thenBranch.getParent()  :  null;  [BUGGY]        if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	272	272	1	replace	Node  elseBranch  =  thenBranch!=  null?  thenBranch.getParent()  :  null;	  Node    elseBranch    =    thenBranch!=    null?    thenBranch.getNext()    :    null;    	non-compiled	[CE]  	29	None	replace
55	[BUG]  [BUGGY]  Node  elseBranch  =  thenBranch!=  null?  thenBranch.getFirstChild()  :  null;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();      [BUGGY]  Node  elseBranch  =  thenBranch!=  null?  thenBranch.getFirstChild()  :  null;  [BUGGY]        if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	272	272	1	replace	Node  elseBranch  =  thenBranch!=  null?  thenBranch.getFirstChild()  :  null;	  Node    elseBranch    =    thenBranch!=    null?    thenBranch.getNext()    :    null;    	non-compiled	[CE]  	29	None	replace
56	[BUG]  [BUGGY]  Node  elseBranch  =  cond.removeChild(thenBranch);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();      [BUGGY]  Node  elseBranch  =  cond.removeChild(thenBranch);  [BUGGY]        if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	272	272	1	replace	Node  elseBranch  =  cond.removeChild(thenBranch);	  Node    elseBranch    =    thenBranch.removeChild(thenBranch);    	non-compiled	[CE]  	30	None	replace
57	[BUG]  [BUGGY]  Node  elseBranch  =  thenBranch.removeChild(cond);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();      [BUGGY]  Node  elseBranch  =  thenBranch.removeChild(cond);  [BUGGY]        if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	272	272	1	replace	Node  elseBranch  =  thenBranch.removeChild(cond);	  Node    elseBranch    =    thenBranch.removeChild(thenBranch);    	non-compiled	[CE]  	30	None	replace
58	[BUG]  [BUGGY]  Node  elseBranch  =  thenBranch.removeChild(n);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();      [BUGGY]  Node  elseBranch  =  thenBranch.removeChild(n);  [BUGGY]        if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	272	272	1	replace	Node  elseBranch  =  thenBranch.removeChild(n);	  Node    elseBranch    =    thenBranch.removeChild(thenBranch);    	non-compiled	[CE]  	30	None	replace
59	[BUG]  [BUGGY]  Node  elseBranch  =  thenBranch.removeChild(elseBranch);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();      [BUGGY]  Node  elseBranch  =  thenBranch.removeChild(elseBranch);  [BUGGY]        if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	272	272	1	replace	Node  elseBranch  =  thenBranch.removeChild(elseBranch);	  Node    elseBranch    =    thenBranch.removeChild(thenBranch);    	non-compiled	[CE]  	30	None	replace
60	[BUG]  [BUGGY]  Node  thenBranch  =  thenBranch.next();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();      [BUGGY]  Node  thenBranch  =  thenBranch.next();  [BUGGY]        if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	272	272	1	replace	Node  thenBranch  =  thenBranch.next();	  Node    thenBranch    =    thenBranch.getParent();    	non-compiled	[CE]  	28	None	replace
61	[BUG]  [BUGGY]  Node  elseBranch  =  thenBranch.replaceChild(n,  cond);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();      [BUGGY]  Node  elseBranch  =  thenBranch.replaceChild(n,  cond);  [BUGGY]        if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	272	272	1	replace	Node  elseBranch  =  thenBranch.replaceChild(n,  cond);	  Node    elseBranch    =    thenBranch.replaceChild(n,    nextBranch);    	non-compiled	[CE]  	31	None	replace
62	[BUG]  [BUGGY]  Node  elseBranch  =  thenBranch.replaceChild(n,  n);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();      [BUGGY]  Node  elseBranch  =  thenBranch.replaceChild(n,  n);  [BUGGY]        if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	272	272	1	replace	Node  elseBranch  =  thenBranch.replaceChild(n,  n);	  Node    elseBranch    =    thenBranch.replaceChild(n,    nextBranch);    	non-compiled	[CE]  	31	None	replace
63	[BUG]  [BUGGY]  Node  elseBranch  =  thenBranch.replaceChild(n,  secondBranch);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();      [BUGGY]  Node  elseBranch  =  thenBranch.replaceChild(n,  secondBranch);  [BUGGY]        if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	272	272	1	replace	Node  elseBranch  =  thenBranch.replaceChild(n,  secondBranch);	  Node    elseBranch    =    thenBranch.replaceChild(n,    nextBranch);    	non-compiled	[CE]  	31	None	replace
64	[BUG]  [BUGGY]  Node  elseBranch  =  thenBranch.replaceChild(n,  this);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();      [BUGGY]  Node  elseBranch  =  thenBranch.replaceChild(n,  this);  [BUGGY]        if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	272	272	1	replace	Node  elseBranch  =  thenBranch.replaceChild(n,  this);	  Node    elseBranch    =    thenBranch.replaceChild(n,    nextBranch);    	non-compiled	[CE]  	31	None	replace
65	[BUG]  [BUGGY]  Node  elseBranch  =  nextBranch.replaceChild(n,  thenBranch);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();      [BUGGY]  Node  elseBranch  =  nextBranch.replaceChild(n,  thenBranch);  [BUGGY]        if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	272	272	1	replace	Node  elseBranch  =  nextBranch.replaceChild(n,  thenBranch);	  Node    elseBranch    =    thenBranch.replaceChild(n,    nextBranch);    	non-compiled	[CE]  	31	None	replace
66	[BUG]  [BUGGY]  Node  elseBranch  =  cond.removeLastChild();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();      [BUGGY]  Node  elseBranch  =  cond.removeLastChild();  [BUGGY]        if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	272	272	1	replace	Node  elseBranch  =  cond.removeLastChild();	  Node    elseBranch    =    thenBranch.removeLastChild();    	non-compiled	[CE]  	9	None	replace
67	[BUG]  [BUGGY]  thenBranch  =  cond.getFirstChild();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();      [BUGGY]  thenBranch  =  cond.getFirstChild();  [BUGGY]        if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	272	272	1	replace	thenBranch  =  cond.getFirstChild();	  thenBranch    =    thenBranch.getFirstChild();    	non-compiled	[CE]  	36	None	replace
68	[BUG]  [BUGGY]  thenBranch  =  thenBranch.getPreviousChild();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();      [BUGGY]  thenBranch  =  thenBranch.getPreviousChild();  [BUGGY]        if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	272	272	1	replace	thenBranch  =  thenBranch.getPreviousChild();	  thenBranch    =    thenBranch.getFirstChild();    	non-compiled	[CE]  	36	None	replace
69	[BUG]  [BUGGY]  Node  elseBranch  =  thenBranch.replaceChild(n,  elseBranch);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();      [BUGGY]  Node  elseBranch  =  thenBranch.replaceChild(n,  elseBranch);  [BUGGY]        if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	272	272	1	replace	Node  elseBranch  =  thenBranch.replaceChild(n,  elseBranch);	  Node    elseBranch    =    thenBranch.replaceChild(n,    thenBranch);    	non-compiled	[CE]  	32	None	replace
70	[BUG]  [BUGGY]  Node  elseBranch  =  cond.replaceChild(n,  thenBranch);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();      [BUGGY]  Node  elseBranch  =  cond.replaceChild(n,  thenBranch);  [BUGGY]        if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	272	272	1	replace	Node  elseBranch  =  cond.replaceChild(n,  thenBranch);	  Node    elseBranch    =    thenBranch.replaceChild(n,    thenBranch);    	non-compiled	[CE]  	32	None	replace
71	[BUG]  [BUGGY]  Node  elseBranch  =  thenBranch.replaceChild(cond,  thenBranch);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();      [BUGGY]  Node  elseBranch  =  thenBranch.replaceChild(cond,  thenBranch);  [BUGGY]        if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	272	272	1	replace	Node  elseBranch  =  thenBranch.replaceChild(cond,  thenBranch);	  Node    elseBranch    =    thenBranch.replaceChild(n,    thenBranch);    	non-compiled	[CE]  	32	None	replace
72	[BUG]  [BUGGY]  Node  assign  =  cond.getFirstChild();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();      [BUGGY]  Node  assign  =  cond.getFirstChild();  [BUGGY]        if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	272	272	1	replace	Node  assign  =  cond.getFirstChild();	  Node    assign    =    thenBranch.getFirstChild();    	non-compiled	[CE]  	7	None	replace
73	[BUG]  [BUGGY]  Node  assign  =  n.getFirstChild();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();      [BUGGY]  Node  assign  =  n.getFirstChild();  [BUGGY]        if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	272	272	1	replace	Node  assign  =  n.getFirstChild();	  Node    assign    =    thenBranch.getFirstChild();    	non-compiled	[CE]  	7	None	replace
74	[BUG]  [BUGGY]  Node  assign  =  thenBranch.getAssignedValue();  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();      [BUGGY]  Node  assign  =  thenBranch.getAssignedValue();  [BUGGY]        if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	272	272	1	replace	Node  assign  =  thenBranch.getAssignedValue();	  Node    assign    =    thenBranch.getFirstChild();    	non-compiled	[CE]  	7	None	replace
75	[BUG]  [BUGGY]  Node  elseBranch  =  thenBranch!=  null?  thenBranch.clone()  :  null;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();      [BUGGY]  Node  elseBranch  =  thenBranch!=  null?  thenBranch.clone()  :  null;  [BUGGY]        if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	272	272	1	replace	Node  elseBranch  =  thenBranch!=  null?  thenBranch.clone()  :  null;	  Node    elseBranch    =    thenBranch.clone();    	non-compiled	[CE]  	17	None	replace
76	[BUG]  [BUGGY]  Node  elseBranch  =  thenBranch!=  null?  secondBranch.clone()  :  null;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();      [BUGGY]  Node  elseBranch  =  thenBranch!=  null?  secondBranch.clone()  :  null;  [BUGGY]        if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	272	272	1	replace	Node  elseBranch  =  thenBranch!=  null?  secondBranch.clone()  :  null;	  Node    elseBranch    =    thenBranch.clone();    	non-compiled	[CE]  	17	None	replace
77	[BUG]  [BUGGY]  thenBranch  =  cond.getLastChild();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();      [BUGGY]  thenBranch  =  cond.getLastChild();  [BUGGY]        if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	272	272	1	replace	thenBranch  =  cond.getLastChild();	  thenBranch    =    thenBranch.getLastChild();    	non-compiled	[CE]  	35	None	replace
78	[BUG]  [BUGGY]  thenBranch  -=  thenBranch.getLastChild();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();      [BUGGY]  thenBranch  -=  thenBranch.getLastChild();  [BUGGY]        if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	272	272	1	replace	thenBranch  -=  thenBranch.getLastChild();	  thenBranch    =    thenBranch.getLastChild();    	non-compiled	[CE]  	35	None	replace
79	[BUG]  [BUGGY]  Node  elseBranch  =  thenBranch.getlastChild();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();      [BUGGY]  Node  elseBranch  =  thenBranch.getlastChild();  [BUGGY]        if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	272	272	1	replace	Node  elseBranch  =  thenBranch.getlastChild();	  Node    elseBranch    =    node.getLastChild();    	non-compiled	[CE]  	20	None	replace
80	[BUG]  [BUGGY]  Node  elseBranch  =  thenBranch.getNextChild();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();      [BUGGY]  Node  elseBranch  =  thenBranch.getNextChild();  [BUGGY]        if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	272	272	1	replace	Node  elseBranch  =  thenBranch.getNextChild();	  Node    elseBranch    =    thenBranch.getPreviousChild();    	non-compiled	[CE]  	21	None	replace
81	[BUG]  [BUGGY]  Node  elseBranch  =  thenBranch!=  null?  thenBranch.getNext()  :  next;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();      [BUGGY]  Node  elseBranch  =  thenBranch!=  null?  thenBranch.getNext()  :  next;  [BUGGY]        if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	272	272	1	replace	Node  elseBranch  =  thenBranch!=  null?  thenBranch.getNext()  :  next;	  Node    elseBranch    =    thenBranch!=    null?    thenBranch.getNext()    :    null;    	non-compiled	[CE]  	29	None	replace
82	[BUG]  [BUGGY]  Node  elseBranch  =  thenBranch!=  null?  thenBranch.getNext()  :  node;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();      [BUGGY]  Node  elseBranch  =  thenBranch!=  null?  thenBranch.getNext()  :  node;  [BUGGY]        if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	272	272	1	replace	Node  elseBranch  =  thenBranch!=  null?  thenBranch.getNext()  :  node;	  Node    elseBranch    =    thenBranch!=    null?    thenBranch.getNext()    :    null;    	non-compiled	[CE]  	29	None	replace
83	[BUG]  [BUGGY]  Node  elseBranch  =  cond.getOwnerDocument()  +  thenBranch;  [CE]  [FE]            AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();      [BUGGY]  Node  elseBranch  =  cond.getOwnerDocument()  +  thenBranch;  [BUGGY]        if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	272	272	1	replace	Node  elseBranch  =  cond.getOwnerDocument()  +  thenBranch;	  Node    elseBranch    =    cond.getOwnerDocument();    	non-compiled	[CE]  	22	None	replace
84	[BUG]  [BUGGY]  Node  thenBranch  =  thenBranch.getfirstChild();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();      [BUGGY]  Node  thenBranch  =  thenBranch.getfirstChild();  [BUGGY]        if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	272	272	1	replace	Node  thenBranch  =  thenBranch.getfirstChild();	  Node    thenBranch    =    thenBranch.getLastChild();    	non-compiled	[CE]  	26	None	replace
85	[BUG]  [BUGGY]  Node  elseBranch  =  thenBranch!=  null?  thenBranch.clone()  :  secondBranch;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();      [BUGGY]  Node  elseBranch  =  thenBranch!=  null?  thenBranch.clone()  :  secondBranch;  [BUGGY]        if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	272	272	1	replace	Node  elseBranch  =  thenBranch!=  null?  thenBranch.clone()  :  secondBranch;	  Node    elseBranch    =    thenBranch.clone();    	non-compiled	[CE]  	17	None	replace
86	[BUG]  [BUGGY]  Node  elseBranch  =  elseBranch.clone();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();      [BUGGY]  Node  elseBranch  =  elseBranch.clone();  [BUGGY]        if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	272	272	1	replace	Node  elseBranch  =  elseBranch.clone();	  Node    elseBranch    =    thenBranch.clone();    	non-compiled	[CE]  	17	None	replace
87	[BUG]  [BUGGY]  Node  elseBranch  =  thenBranch!=  null?  thenBranch.clone()  :  nextBranch;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();      [BUGGY]  Node  elseBranch  =  thenBranch!=  null?  thenBranch.clone()  :  nextBranch;  [BUGGY]        if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	272	272	1	replace	Node  elseBranch  =  thenBranch!=  null?  thenBranch.clone()  :  nextBranch;	  Node    elseBranch    =    thenBranch.clone();    	non-compiled	[CE]  	17	None	replace
88	[BUG]  [BUGGY]  Node  elseBranch  =  thenBranch.cloneParentNode();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();      [BUGGY]  Node  elseBranch  =  thenBranch.cloneParentNode();  [BUGGY]        if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	272	272	1	replace	Node  elseBranch  =  thenBranch.cloneParentNode();	  Node    elseBranch    =    thenBranch.cloneNode();    	non-compiled	[CE]  	16	None	replace
89	[BUG]  [BUGGY]  Node  elseBranch  =  thenBranch.cloneParent();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();      [BUGGY]  Node  elseBranch  =  thenBranch.cloneParent();  [BUGGY]        if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	272	272	1	replace	Node  elseBranch  =  thenBranch.cloneParent();	  Node    elseBranch    =    thenBranch.cloneNode();    	non-compiled	[CE]  	16	None	replace
90	[BUG]  [BUGGY]  Node  elseBranch  =  thenBranch.getAssignmentOwner();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();      [BUGGY]  Node  elseBranch  =  thenBranch.getAssignmentOwner();  [BUGGY]        if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	272	272	1	replace	Node  elseBranch  =  thenBranch.getAssignmentOwner();	  Node    elseBranch    =    thenBranch.getOwner();    	non-compiled	[CE]  	2	None	replace
91	[BUG]  [BUGGY]  Node  nextBranch  =  thenBranch.removeFirstChild();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();      [BUGGY]  Node  nextBranch  =  thenBranch.removeFirstChild();  [BUGGY]        if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	272	272	1	replace	Node  nextBranch  =  thenBranch.removeFirstChild();	  Node    nextBranch    =    thenBranch.getNext();    	non-compiled	[CE]  	6	None	replace
92	[BUG]  [BUGGY]  Node  nextBranch  =  thenBranch.cloneTree();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();      [BUGGY]  Node  nextBranch  =  thenBranch.cloneTree();  [BUGGY]        if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	272	272	1	replace	Node  nextBranch  =  thenBranch.cloneTree();	  Node    nextBranch    =    thenBranch.getNext();    	non-compiled	[CE]  	6	None	replace
93	[BUG]  [BUGGY]  Node  nextBranch  =  thenBranch.getNext()  -  1;  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();      [BUGGY]  Node  nextBranch  =  thenBranch.getNext()  -  1;  [BUGGY]        if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	272	272	1	replace	Node  nextBranch  =  thenBranch.getNext()  -  1;	  Node    nextBranch    =    thenBranch.getNext();    	non-compiled	[CE]  	6	None	replace
94	[BUG]  [BUGGY]  Node  thenBranch  =  thenBranch.getPrevious();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();      [BUGGY]  Node  thenBranch  =  thenBranch.getPrevious();  [BUGGY]        if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	272	272	1	replace	Node  thenBranch  =  thenBranch.getPrevious();	  Node    thenBranch    =    thenBranch.getNext();    	non-compiled	[CE]  	3	None	replace
95	[BUG]  [BUGGY]  Node  assign  =  thenBranch.removeFirstChild();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();      [BUGGY]  Node  assign  =  thenBranch.removeFirstChild();  [BUGGY]        if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	272	272	1	replace	Node  assign  =  thenBranch.removeFirstChild();	  Node    assign    =    thenBranch.getParent();    	non-compiled	[CE]  	8	None	replace
96	[BUG]  [BUGGY]  Node  elseBranch  =  nextBranch.replaceChild(thenBranch,  elseBranch);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();      [BUGGY]  Node  elseBranch  =  nextBranch.replaceChild(thenBranch,  elseBranch);  [BUGGY]        if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	272	272	1	replace	Node  elseBranch  =  nextBranch.replaceChild(thenBranch,  elseBranch);	  Node    elseBranch    =    thenBranch.replaceChild(n,    nextBranch);    	non-compiled	[CE]  	31	None	replace
97	[BUG]  [BUGGY]  Node  elseBranch  =  thenBranch.getChildCount();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();      [BUGGY]  Node  elseBranch  =  thenBranch.getChildCount();  [BUGGY]        if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	272	272	1	replace	Node  elseBranch  =  thenBranch.getChildCount();	  Node    elseBranch    =    thenBranch.removeChild(thenBranch);    	non-compiled	[CE]  	30	None	replace
98	[BUG]  [BUGGY]  Node  elseBranch  =  thenBranch,  cond.getOwner();  [CE]  [FE]            AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();      [BUGGY]  Node  elseBranch  =  thenBranch,  cond.getOwner();  [BUGGY]        if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	272	272	1	replace	Node  elseBranch  =  thenBranch,  cond.getOwner();	  Node    elseBranch    =    thenBranch,    cond.getNext();    	non-compiled	[CE]  	33	None	replace
99	[BUG]  [BUGGY]  Node  elseBranch  =  n.replaceChild(thenBranch,  elseBranch);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();      [BUGGY]  Node  elseBranch  =  n.replaceChild(thenBranch,  elseBranch);  [BUGGY]        if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	272	272	1	replace	Node  elseBranch  =  n.replaceChild(thenBranch,  elseBranch);	  Node    elseBranch    =    thenBranch.replaceChild(n,    thenBranch);    	non-compiled	[CE]  	32	None	replace
100	[BUG]  [BUGGY]  Node  elseBranch  =  firstBranch.getLastChild();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();      [BUGGY]  Node  elseBranch  =  firstBranch.getLastChild();  [BUGGY]        if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	272	272	1	replace	Node  elseBranch  =  firstBranch.getLastChild();	  Node    elseBranch    =    n.getLastChild();    	non-compiled	[CE]  	19	None	replace
101	[BUG]  [BUGGY]  Node  elseBranch  =  thenBranch.nextChild();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();      [BUGGY]  Node  elseBranch  =  thenBranch.nextChild();  [BUGGY]        if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	272	272	1	replace	Node  elseBranch  =  thenBranch.nextChild();	  Node    elseBranch    =    thenBranch.removeLastChild();    	non-compiled	[CE]  	9	None	replace
102	[BUG]  [BUGGY]  thenBranch  =  thenBranch.getNextChild();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();      [BUGGY]  thenBranch  =  thenBranch.getNextChild();  [BUGGY]        if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	272	272	1	replace	thenBranch  =  thenBranch.getNextChild();	  thenBranch    =    thenBranch.getLastChild();    	non-compiled	[CE]  	35	None	replace
103	[BUG]  [BUGGY]  Node  assign  =  thenBranch.getAssignment();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();      [BUGGY]  Node  assign  =  thenBranch.getAssignment();  [BUGGY]        if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	272	272	1	replace	Node  assign  =  thenBranch.getAssignment();	  Node    assign    =    thenBranch.getNext();    	non-compiled	[CE]  	4	None	replace
104	[BUG]  [BUGGY]  Node  elseBranch  =  thenBranch.clonePath();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();      [BUGGY]  Node  elseBranch  =  thenBranch.clonePath();  [BUGGY]        if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	272	272	1	replace	Node  elseBranch  =  thenBranch.clonePath();	  Node    elseBranch    =    thenBranch.cloneBlock();    	non-compiled	[CE]  	18	None	replace
105	[BUG]  [BUGGY]  Node  elseBranch  =  thenBranch.removeChildren();  [CE]  [FE]            AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();      [BUGGY]  Node  elseBranch  =  thenBranch.removeChildren();  [BUGGY]        if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	272	272	1	replace	Node  elseBranch  =  thenBranch.removeChildren();	  Node    elseBranch    =    thenBranch.cloneChildren();    	non-compiled	[CE]  	34	None	replace
106	[BUG]  [BUGGY]  Node  elseBranch  =  cond.getNext(),  thenBranch&&  elseBranch;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();      [BUGGY]  Node  elseBranch  =  cond.getNext(),  thenBranch&&  elseBranch;  [BUGGY]        if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	272	272	1	replace	Node  elseBranch  =  cond.getNext(),  thenBranch&&  elseBranch;	  Node    elseBranch    =    cond.getNext(),    thenBranch;    	non-compiled	[CE]  	14	None	replace
107	[BUG]  [BUGGY]  Node  elseBranch  =  cond.getNext(),  thenBranch);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();      [BUGGY]  Node  elseBranch  =  cond.getNext(),  thenBranch);  [BUGGY]        if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	272	272	1	replace	Node  elseBranch  =  cond.getNext(),  thenBranch);	  Node    elseBranch    =    cond.getNext(),    thenBranch;    	non-compiled	[CE]  	14	None	replace
108	[BUG]  [BUGGY]  Node  thenBranch  =  thenBranch.removeChild(thenBranch);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();      [BUGGY]  Node  thenBranch  =  thenBranch.removeChild(thenBranch);  [BUGGY]        if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	272	272	1	replace	Node  thenBranch  =  thenBranch.removeChild(thenBranch);	  Node    thenBranch    =    thenBranch.getNext();    	non-compiled	[CE]  	3	None	replace
109	[BUG]  [BUGGY]  Node  thenBranch  =  thenBranch.replaceChild(n,  thenBranch);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();      [BUGGY]  Node  thenBranch  =  thenBranch.replaceChild(n,  thenBranch);  [BUGGY]        if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	272	272	1	replace	Node  thenBranch  =  thenBranch.replaceChild(n,  thenBranch);	  Node    thenBranch    =    thenBranch.getLastChild();    	non-compiled	[CE]  	26	None	replace
110	[BUG]  [BUGGY]  Node  elseBranch  =  nextBranch.replaceChild(thenBranch,  thenBranch);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();      [BUGGY]  Node  elseBranch  =  nextBranch.replaceChild(thenBranch,  thenBranch);  [BUGGY]        if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	272	272	1	replace	Node  elseBranch  =  nextBranch.replaceChild(thenBranch,  thenBranch);	  Node    elseBranch    =    thenBranch.replaceChild(n,    nextBranch);    	non-compiled	[CE]  	31	None	replace
111	[BUG]  [BUGGY]  Node  elseBranch  =  thenBranch.replaceChild(n,  firstBranch);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();      [BUGGY]  Node  elseBranch  =  thenBranch.replaceChild(n,  firstBranch);  [BUGGY]        if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	272	272	1	replace	Node  elseBranch  =  thenBranch.replaceChild(n,  firstBranch);	  Node    elseBranch    =    thenBranch.replaceChild(n,    nextBranch);    	non-compiled	[CE]  	31	None	replace
112	[BUG]  [BUGGY]  Node  elseBranch  =  thenBranch.clonePosition();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();      [BUGGY]  Node  elseBranch  =  thenBranch.clonePosition();  [BUGGY]        if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	272	272	1	replace	Node  elseBranch  =  thenBranch.clonePosition();	  Node    elseBranch    =    thenBranch.cloneNode();    	non-compiled	[CE]  	16	None	replace
113	[BUG]  [BUGGY]  Node  elseBranch  =  thenBranch!=  null?  thenBranch.cloneTree()  :  null;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();      [BUGGY]  Node  elseBranch  =  thenBranch!=  null?  thenBranch.cloneTree()  :  null;  [BUGGY]        if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	272	272	1	replace	Node  elseBranch  =  thenBranch!=  null?  thenBranch.cloneTree()  :  null;	  Node    elseBranch    =    thenBranch.clone();    	non-compiled	[CE]  	17	None	replace
114	[BUG]  [BUGGY]  Node  elseBranch  =  consd.getOwnerDocument();  [CE]  [FE]            AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();      [BUGGY]  Node  elseBranch  =  consd.getOwnerDocument();  [BUGGY]        if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	272	272	1	replace	Node  elseBranch  =  consd.getOwnerDocument();	  Node    elseBranch    =    cond.getOwnerDocument();    	non-compiled	[CE]  	22	None	replace
115	[BUG]  [BUGGY]  Node  elseBranch  =  n.getOwnerDocument();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();      [BUGGY]  Node  elseBranch  =  n.getOwnerDocument();  [BUGGY]        if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	272	272	1	replace	Node  elseBranch  =  n.getOwnerDocument();	  Node    elseBranch    =    cond.getOwnerDocument();    	non-compiled	[CE]  	22	None	replace
116	[BUG]  [BUGGY]  Node  elseBranch  =  thenBranch.replaceChild(cond,  elseBranch);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();      [BUGGY]  Node  elseBranch  =  thenBranch.replaceChild(cond,  elseBranch);  [BUGGY]        if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	272	272	1	replace	Node  elseBranch  =  thenBranch.replaceChild(cond,  elseBranch);	  Node    elseBranch    =    thenBranch.replaceChild(n,    thenBranch);    	non-compiled	[CE]  	32	None	replace
117	[BUG]  [BUGGY]  Node  elseBranch  =  thenBranch.replaceChild(n,  new  Node(tokenBranch));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();      [BUGGY]  Node  elseBranch  =  thenBranch.replaceChild(n,  new  Node(tokenBranch));  [BUGGY]        if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	272	272	1	replace	Node  elseBranch  =  thenBranch.replaceChild(n,  new  Node(tokenBranch));	  Node    elseBranch    =    thenBranch.replaceChild(n,    thenBranch);    	non-compiled	[CE]  	32	None	replace
118	[BUG]  [BUGGY]  Node  elseBranch  =  thenBranch.getPreviousSibling();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();      [BUGGY]  Node  elseBranch  =  thenBranch.getPreviousSibling();  [BUGGY]        if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	272	272	1	replace	Node  elseBranch  =  thenBranch.getPreviousSibling();	  Node    elseBranch    =    n.getLastChild();    	non-compiled	[CE]  	19	None	replace
119	[BUG]  [BUGGY]  Node  assign  =  thenBranch.cloneTree();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();      [BUGGY]  Node  assign  =  thenBranch.cloneTree();  [BUGGY]        if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	272	272	1	replace	Node  assign  =  thenBranch.cloneTree();	  Node    assign    =    thenBranch.getParent();    	non-compiled	[CE]  	8	None	replace
120	[BUG]  [BUGGY]  Node  assign  =  thenBranch.removeChild(cond);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();      [BUGGY]  Node  assign  =  thenBranch.removeChild(cond);  [BUGGY]        if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	272	272	1	replace	Node  assign  =  thenBranch.removeChild(cond);	  Node    assign    =    thenBranch.getParent();    	non-compiled	[CE]  	8	None	replace
121	[BUG]  [BUGGY]  thenBranch  =  thenBranch.replaceChild(n,  thenBranch);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();      [BUGGY]  thenBranch  =  thenBranch.replaceChild(n,  thenBranch);  [BUGGY]        if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	272	272	1	replace	thenBranch  =  thenBranch.replaceChild(n,  thenBranch);	  thenBranch    =    thenBranch.getFirstChild();    	non-compiled	[CE]  	36	None	replace
122	[BUG]  [BUGGY]  Node  elseBranch  =  thenBranch.getNext(),  cond);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();      [BUGGY]  Node  elseBranch  =  thenBranch.getNext(),  cond);  [BUGGY]        if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	272	272	1	replace	Node  elseBranch  =  thenBranch.getNext(),  cond);	  Node    elseBranch    =    cond.getNext(),    thenBranch;    	non-compiled	[CE]  	14	None	replace
123	[BUG]  [BUGGY]  thenBranch  =  thenBranch.replaceChild(n,  Node.newString(Token.NAME,  Token.EMPTY));  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();      [BUGGY]  thenBranch  =  thenBranch.replaceChild(n,  Node.newString(Token.NAME,  Token.EMPTY));  [BUGGY]        if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	272	272	1	replace	thenBranch  =  thenBranch.replaceChild(n,  Node.newString(Token.NAME,  Token.EMPTY));	  thenBranch    =    thenBranch.getNext();    	non-compiled	[CE]  	5	None	replace
124	[BUG]  [BUGGY]  thenBranch  =  thenBranch.replaceChild(n,  Node.newString(Token.NAME));  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();      [BUGGY]  thenBranch  =  thenBranch.replaceChild(n,  Node.newString(Token.NAME));  [BUGGY]        if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	272	272	1	replace	thenBranch  =  thenBranch.replaceChild(n,  Node.newString(Token.NAME));	  thenBranch    =    thenBranch.getNext();    	non-compiled	[CE]  	5	None	replace
125	[BUG]  [BUGGY]  thenBranch  =  thenBranch.replaceChild(n,  Node.newString(Token.NAME,  Token.FUNCTION));  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();      [BUGGY]  thenBranch  =  thenBranch.replaceChild(n,  Node.newString(Token.NAME,  Token.FUNCTION));  [BUGGY]        if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	272	272	1	replace	thenBranch  =  thenBranch.replaceChild(n,  Node.newString(Token.NAME,  Token.FUNCTION));	  thenBranch    =    thenBranch.getNext();    	non-compiled	[CE]  	5	None	replace
126	[BUG]  [BUGGY]  Node  elseBranch  =  cond.cloneTree(),  thenBranch);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();      [BUGGY]  Node  elseBranch  =  cond.cloneTree(),  thenBranch);  [BUGGY]        if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	272	272	1	replace	Node  elseBranch  =  cond.cloneTree(),  thenBranch);	  Node    elseBranch    =    cond.cloneTree();    	non-compiled	[CE]  	15	None	replace
127	[BUG]  [BUGGY]  thenBranch  -=  thenBranch.getFirstChild();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();      [BUGGY]  thenBranch  -=  thenBranch.getFirstChild();  [BUGGY]        if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	272	272	1	replace	thenBranch  -=  thenBranch.getFirstChild();	  thenBranch    =    thenBranch.getLastChild();    	non-compiled	[CE]  	35	None	replace
128	[BUG]  [BUGGY]  Node  elseBranch  =  thenBranch,  cond.removeFirstChild();  [CE]  [FE]            AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();      [BUGGY]  Node  elseBranch  =  thenBranch,  cond.removeFirstChild();  [BUGGY]        if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	272	272	1	replace	Node  elseBranch  =  thenBranch,  cond.removeFirstChild();	  Node    elseBranch    =    thenBranch,    cond.getNext();    	non-compiled	[CE]  	33	None	replace
