bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>();  [CE]  ')'  expected  [FE]    AssertionFailedError  [CONTEXT]  private  boolean  isPropertyAssignmentInExpression(Node  n)  {  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>();  [BUGGY]  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>();	Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  	non-compiled	[CE]  ')'  expected	27	None	replace
2	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType())  {  [CE]  ')'  expected  [FE]      AssertionFailedError  [CONTEXT]  private  boolean  isPropertyAssignmentInExpression(Node  n)  {  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType())  {  [BUGGY]  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType())  {	Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  	non-compiled	[CE]  ')'  expected	27	None	replace
3	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>()  {  [CE]  ')'  expected  [FE]        AssertionFailedError  [CONTEXT]  private  boolean  isPropertyAssignmentInExpression(Node  n)  {  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>()  {  [BUGGY]  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>()  {	Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  	non-compiled	[CE]  ')'  expected	27	None	replace
4	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType());  [CE]  ')'  expected  [FE]          AssertionFailedError  [CONTEXT]  private  boolean  isPropertyAssignmentInExpression(Node  n)  {  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType());  [BUGGY]  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType());	Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  	non-compiled	[CE]  ')'  expected	27	None	replace
5	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n);  [CE]  ')'  expected  [FE]            AssertionFailedError  [CONTEXT]  private  boolean  isPropertyAssignmentInExpression(Node  n)  {  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n);  [BUGGY]  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n);	Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  	non-compiled	[CE]  ')'  expected	27	None	replace
6	[BUG]  [BUGGY]  final  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>()  {  [CE]  ')'  expected  [FE]              AssertionFailedError  [CONTEXT]  private  boolean  isPropertyAssignmentInExpression(Node  n)  {  [BUGGY]  final  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>()  {  [BUGGY]  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	final  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>()  {	Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  	non-compiled	[CE]  ')'  expected	27	None	replace
7	[BUG]  [BUGGY]    [CE]  ')'  expected  [FE]                AssertionFailedError  [CONTEXT]  private  boolean  isPropertyAssignmentInExpression(Node  n)  {  [BUGGY]    [BUGGY]  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	  	Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  	non-compiled	[CE]  ')'  expected	27	None	replace
8	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n)  {  [CE]  ')'  expected  [FE]    AssertionFailedError  [CONTEXT]  private  boolean  isPropertyAssignmentInExpression(Node  n)  {  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n)  {  [BUGGY]  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n)  {	Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  	non-compiled	[CE]  ')'  expected	27	None	replace
9	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(1)  {  [CE]  ')'  expected  [FE]      AssertionFailedError  [CONTEXT]  private  boolean  isPropertyAssignmentInExpression(Node  n)  {  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(1)  {  [BUGGY]  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(1)  {	Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  	non-compiled	[CE]  ')'  expected	27	None	replace
10	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild());  [CE]  ')'  expected  [FE]    AssertionFailedError  [CONTEXT]  private  boolean  isPropertyAssignmentInExpression(Node  n)  {  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild());  [BUGGY]  new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild());	Predicate<Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate<Node>()  {  	non-compiled	[CE]  ')'  expected	27	None	replace
