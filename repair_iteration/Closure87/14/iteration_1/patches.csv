bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getParent())  {  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {    [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getParent())  {  [BUGGY]    new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getParent())  {	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getType())    {    	non-compiled	[CE]  ')'  expected	2	None	replace
2	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getString())  {  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {    [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getString())  {  [BUGGY]    new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getString())  {	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getType())    {    	non-compiled	[CE]  ')'  expected	2	None	replace
3	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild().getType())  {  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {    [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild().getType())  {  [BUGGY]    new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild().getType())  {	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getType())    {    	non-compiled	[CE]  ')'  expected	2	None	replace
4	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild())  {  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {    [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild())  {  [BUGGY]    new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild())  {	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getType())    {    	non-compiled	[CE]  ')'  expected	2	None	replace
5	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType(),  n.getString())  {  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {    [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType(),  n.getString())  {  [BUGGY]    new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType(),  n.getString())  {	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getType())    {    	non-compiled	[CE]  ')'  expected	2	None	replace
6	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  n.getType())  {  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {    [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  n.getType())  {  [BUGGY]    new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  n.getType())  {	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getType())    {    	non-compiled	[CE]  ')'  expected	2	None	replace
7	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType(),  Integer.MAX_VALUE)  {  [CE]  ')'  expected  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {    [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType(),  Integer.MAX_VALUE)  {  [BUGGY]    new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType(),  Integer.MAX_VALUE)  {	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getType())    {    	non-compiled	[CE]  ')'  expected	2	None	replace
8	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(1);  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {    [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(1);  [BUGGY]    new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(1);	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>();    	non-compiled	[CE]  ')'  expected	1	None	replace
9	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(0);  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {    [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(0);  [BUGGY]    new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(0);	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>();    	non-compiled	[CE]  ')'  expected	1	None	replace
10	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(2);  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {    [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(2);  [BUGGY]    new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(2);	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>();    	non-compiled	[CE]  ')'  expected	1	None	replace
11	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>();  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {    [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>();  [BUGGY]    new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>();	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    DefaultPredicate    <    Node>()    {    	non-compiled	[CE]  ')'  expected	3	None	replace
12	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(n.getType())  {  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {    [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(n.getType())  {  [BUGGY]    new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(n.getType())  {	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    DefaultPredicate    <    Node>()    {    	non-compiled	[CE]  ')'  expected	3	None	replace
13	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>());  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {    [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>());  [BUGGY]    new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>());	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    DefaultPredicate    <    Node>()    {    	non-compiled	[CE]  ')'  expected	3	None	replace
14	[BUG]  [BUGGY]  final  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>()  {  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {    [BUGGY]  final  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>()  {  [BUGGY]    new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	final  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>()  {	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    DefaultPredicate    <    Node>()    {    	non-compiled	[CE]  ')'  expected	3	None	replace
15	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(n);  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {    [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(n);  [BUGGY]    new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(n);	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    DefaultPredicate    <    Node>()    {    	non-compiled	[CE]  ')'  expected	3	None	replace
16	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  NODE>()  {  [CE]  ')'  expected  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {    [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  NODE>()  {  [BUGGY]    new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  NODE>()  {	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    DefaultPredicate    <    Node>()    {    	non-compiled	[CE]  ')'  expected	3	None	replace
17	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  INVALID_REGULAR_EXPRESSION_FLAGS)  {  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {    [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  INVALID_REGULAR_EXPRESSION_FLAGS)  {  [BUGGY]    new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  INVALID_REGULAR_EXPRESSION_FLAGS)  {	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n)    {    	non-compiled	[CE]  ')'  expected	8	None	replace
18	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  input.getType())  {  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {    [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  input.getType())  {  [BUGGY]    new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  input.getType())  {	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n)    {    	non-compiled	[CE]  ')'  expected	8	None	replace
19	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  predicate)  {  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {    [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  predicate)  {  [BUGGY]    new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  predicate)  {	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n)    {    	non-compiled	[CE]  ')'  expected	8	None	replace
20	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  input.getParent())  {  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {    [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  input.getParent())  {  [BUGGY]    new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  input.getParent())  {	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n)    {    	non-compiled	[CE]  ')'  expected	8	None	replace
21	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  INVALID_REGULAR_EXPRESSION_PREDICATE)  {  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {    [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  INVALID_REGULAR_EXPRESSION_PREDICATE)  {  [BUGGY]    new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  INVALID_REGULAR_EXPRESSION_PREDICATE)  {	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n)    {    	non-compiled	[CE]  ')'  expected	8	None	replace
22	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getParent());  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {    [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getParent());  [BUGGY]    new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getParent());	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getType());    	non-compiled	[CE]  ')'  expected	4	None	replace
23	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  n.getType());  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {    [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  n.getType());  [BUGGY]    new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  n.getType());	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getType());    	non-compiled	[CE]  ')'  expected	4	None	replace
24	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getString());  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {    [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getString());  [BUGGY]    new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getString());	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getType());    	non-compiled	[CE]  ')'  expected	4	None	replace
25	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType(),  n.getParent());  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {    [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType(),  n.getParent());  [BUGGY]    new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType(),  n.getParent());	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getType());    	non-compiled	[CE]  ')'  expected	4	None	replace
26	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getLastChild());  [CE]  ')'  expected  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {    [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getLastChild());  [BUGGY]    new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getLastChild());	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getType());    	non-compiled	[CE]  ')'  expected	4	None	replace
27	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getNext());  [CE]  ')'  expected  [FE]                        AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {    [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getNext());  [BUGGY]    new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getNext());	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getType());    	non-compiled	[CE]  ')'  expected	4	None	replace
28	[BUG]  [BUGGY]  static  final  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>()  {  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {    [BUGGY]  static  final  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>()  {  [BUGGY]    new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	static  final  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>()  {	  final    Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>()    {    	non-compiled	[CE]  ')'  expected	6	None	replace
29	[BUG]  [BUGGY]  final  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>();  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {    [BUGGY]  final  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>();  [BUGGY]    new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	final  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>();	  final    Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>()    {    	non-compiled	[CE]  ')'  expected	6	None	replace
30	[BUG]  [BUGGY]  final  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType())  {  [CE]  ')'  expected  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {    [BUGGY]  final  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType())  {  [BUGGY]    new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	final  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType())  {	  final    Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>()    {    	non-compiled	[CE]  ')'  expected	6	None	replace
31	[BUG]  [BUGGY]  Predicate  input  =  n.getFirstChild();  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {    [BUGGY]  Predicate  input  =  n.getFirstChild();  [BUGGY]    new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  input  =  n.getFirstChild();	      	non-compiled	[CE]  ')'  expected	7	None	replace
32	[BUG]  [BUGGY]  Node  input  =  n.getFirstChild();  [CE]  ')'  expected  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {    [BUGGY]  Node  input  =  n.getFirstChild();  [BUGGY]    new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Node  input  =  n.getFirstChild();	      	non-compiled	[CE]  ')'  expected	7	None	replace
33	[BUG]  [BUGGY]  Predicate  input  =  n.getNext();  [CE]  ')'  expected  [FE]                        AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {    [BUGGY]  Predicate  input  =  n.getNext();  [BUGGY]    new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  input  =  n.getNext();	      	non-compiled	[CE]  ')'  expected	7	None	replace
34	[BUG]  [BUGGY]  Predicate  predicate  =  n.getFirstChild();  [CE]  ')'  expected  [FE]                          AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {    [BUGGY]  Predicate  predicate  =  n.getFirstChild();  [BUGGY]    new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  predicate  =  n.getFirstChild();	      	non-compiled	[CE]  ')'  expected	7	None	replace
35	[BUG]  [BUGGY]  Predicate  input  =  n.getLastChild();  [CE]  ')'  expected  [FE]                            AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {    [BUGGY]  Predicate  input  =  n.getLastChild();  [BUGGY]    new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  input  =  n.getLastChild();	      	non-compiled	[CE]  ')'  expected	7	None	replace
36	[BUG]  [BUGGY]  Node  input  =  n.getNext();  [CE]  ')'  expected  [FE]                              AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {    [BUGGY]  Node  input  =  n.getNext();  [BUGGY]    new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Node  input  =  n.getNext();	      	non-compiled	[CE]  ')'  expected	7	None	replace
37	[BUG]  [BUGGY]  Predicate  input  =  n.getParent();  [CE]  ')'  expected  [FE]                                AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {    [BUGGY]  Predicate  input  =  n.getParent();  [BUGGY]    new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  input  =  n.getParent();	      	non-compiled	[CE]  ')'  expected	7	None	replace
38	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {    [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]    new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  INVALID_REGULAR_EXPRESSION_FLAGS);	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n);    	non-compiled	[CE]  ')'  expected	5	None	replace
39	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  input.getType());  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {    [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  input.getType());  [BUGGY]    new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  input.getType());	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n);    	non-compiled	[CE]  ')'  expected	5	None	replace
40	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  input);  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {    [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  input);  [BUGGY]    new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  input);	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n);    	non-compiled	[CE]  ')'  expected	5	None	replace
41	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  n.type);  [CE]  ')'  expected  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {    [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  n.type);  [BUGGY]    new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  n.type);	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n);    	non-compiled	[CE]  ')'  expected	5	None	replace
42	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(2)  {  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {    [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(2)  {  [BUGGY]    new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(2)  {	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(1)    {    	non-compiled	[CE]  ')'  expected	9	None	replace
43	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(3)  {  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {    [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(3)  {  [BUGGY]    new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(3)  {	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(1)    {    	non-compiled	[CE]  ')'  expected	9	None	replace
44	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(4)  {  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {    [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(4)  {  [BUGGY]    new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(4)  {	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(1)    {    	non-compiled	[CE]  ')'  expected	9	None	replace
45	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(0)  {  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {    [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(0)  {  [BUGGY]    new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(0)  {	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(1)    {    	non-compiled	[CE]  ')'  expected	9	None	replace
46	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild(),  n.getLastChild());  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {    [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild(),  n.getLastChild());  [BUGGY]    new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild(),  n.getLastChild());	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getFirstChild());    	non-compiled	[CE]  ')'  expected	10	None	replace
47	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild(),  n.getType());  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {    [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild(),  n.getType());  [BUGGY]    new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild(),  n.getType());	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getFirstChild());    	non-compiled	[CE]  ')'  expected	10	None	replace
48	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild(),  n.getNext());  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {    [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild(),  n.getNext());  [BUGGY]    new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild(),  n.getNext());	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getFirstChild());    	non-compiled	[CE]  ')'  expected	10	None	replace
49	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild(),  n.getString());  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {    [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild(),  n.getString());  [BUGGY]    new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild(),  n.getString());	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getFirstChild());    	non-compiled	[CE]  ')'  expected	10	None	replace
50	[BUG]  [BUGGY]  final  Node  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>()  {  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {    [BUGGY]  final  Node  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>()  {  [BUGGY]    new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	final  Node  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>()  {	  final    Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>()    {    	non-compiled	[CE]  ')'  expected	6	None	replace
51	[BUG]  [BUGGY]  final  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>()  ==  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {    [BUGGY]  final  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>()  ==  [BUGGY]    new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	final  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>()  ==	  final    Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>()    {    	non-compiled	[CE]  ')'  expected	6	None	replace
52	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(8)  {  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {    [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(8)  {  [BUGGY]    new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(8)  {	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(1)    {    	non-compiled	[CE]  ')'  expected	9	None	replace
53	[BUG]  [BUGGY]  Predicates.  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>()  {  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {    [BUGGY]  Predicates.  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>()  {  [BUGGY]    new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicates.  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>()  {	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    DefaultPredicate    <    Node>()    {    	non-compiled	[CE]  ')'  expected	3	None	replace
54	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType(),  true)  {  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {    [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType(),  true)  {  [BUGGY]    new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType(),  true)  {	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getType())    {    	non-compiled	[CE]  ')'  expected	2	None	replace
55	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType(),  n.getParent())  {  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {    [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType(),  n.getParent())  {  [BUGGY]    new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType(),  n.getParent())  {	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getType())    {    	non-compiled	[CE]  ')'  expected	2	None	replace
56	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  STANDARD_OBJECT_CONSTRUCTORS);  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {    [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  STANDARD_OBJECT_CONSTRUCTORS);  [BUGGY]    new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  STANDARD_OBJECT_CONSTRUCTORS);	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n);    	non-compiled	[CE]  ')'  expected	5	None	replace
57	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  STANDARD_OBJECT_EXPRESSION_FLAGS);  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {    [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  STANDARD_OBJECT_EXPRESSION_FLAGS);  [BUGGY]    new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  STANDARD_OBJECT_EXPRESSION_FLAGS);	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n);    	non-compiled	[CE]  ')'  expected	5	None	replace
58	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  INVALID_REGULAR_EXPRESSION_PREDICATE);  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {    [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  INVALID_REGULAR_EXPRESSION_PREDICATE);  [BUGGY]    new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  INVALID_REGULAR_EXPRESSION_PREDICATE);	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n);    	non-compiled	[CE]  ')'  expected	5	None	replace
59	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  STANDARD_OBJECT_CONSTRUCTORS)  {  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {    [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  STANDARD_OBJECT_CONSTRUCTORS)  {  [BUGGY]    new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  STANDARD_OBJECT_CONSTRUCTORS)  {	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n)    {    	non-compiled	[CE]  ')'  expected	8	None	replace
60	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType(),  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {    [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType(),  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]    new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType(),  INVALID_REGULAR_EXPRESSION_FLAGS);	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getType());    	non-compiled	[CE]  ')'  expected	4	None	replace
61	[BUG]  [BUGGY]  Predicate  <  Node>  input  =  n.getFirstChild();  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {    [BUGGY]  Predicate  <  Node>  input  =  n.getFirstChild();  [BUGGY]    new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  input  =  n.getFirstChild();	      	non-compiled	[CE]  ')'  expected	7	None	replace
62	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getLastChild())  {  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {    [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getLastChild())  {  [BUGGY]    new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getLastChild())  {	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getType())    {    	non-compiled	[CE]  ')'  expected	2	None	replace
63	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getChildCount())  {  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {    [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getChildCount())  {  [BUGGY]    new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getChildCount())  {	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getType())    {    	non-compiled	[CE]  ')'  expected	2	None	replace
64	[BUG]  [BUGGY]  final  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n);  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {    [BUGGY]  final  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n);  [BUGGY]    new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	final  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n);	  final    Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>()    {    	non-compiled	[CE]  ')'  expected	6	None	replace
65	[BUG]  [BUGGY]  final  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild());  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {    [BUGGY]  final  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild());  [BUGGY]    new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	final  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild());	  final    Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>()    {    	non-compiled	[CE]  ')'  expected	6	None	replace
66	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(n.getFirstChild());  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {    [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(n.getFirstChild());  [BUGGY]    new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(n.getFirstChild());	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    DefaultPredicate    <    Node>()    {    	non-compiled	[CE]  ')'  expected	3	None	replace
67	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(n.getType());  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {    [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(n.getType());  [BUGGY]    new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(n.getType());	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    DefaultPredicate    <    Node>()    {    	non-compiled	[CE]  ')'  expected	3	None	replace
68	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(1)  {  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {    [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(1)  {  [BUGGY]    new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(1)  {	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    DefaultPredicate    <    Node>()    {    	non-compiled	[CE]  ')'  expected	3	None	replace
69	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  isLowerPrecedencePredicate);  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {    [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  isLowerPrecedencePredicate);  [BUGGY]    new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  isLowerPrecedencePredicate);	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n);    	non-compiled	[CE]  ')'  expected	5	None	replace
70	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.type);  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {    [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.type);  [BUGGY]    new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.type);	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n);    	non-compiled	[CE]  ')'  expected	5	None	replace
71	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild(),  n);  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {    [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild(),  n);  [BUGGY]    new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild(),  n);	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getFirstChild());    	non-compiled	[CE]  ')'  expected	10	None	replace
72	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]    new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);	      	non-compiled	[CE]  ')'  expected	7	None	replace
73	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT);  [CE]  ')'  expected  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {    [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]    new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT);	      	non-compiled	[CE]  ')'  expected	7	None	replace
74	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  [CE]  ')'  expected  [FE]                        AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]    new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME);	      	non-compiled	[CE]  ')'  expected	7	None	replace
75	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [CE]  ')'  expected  [FE]                          AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {    [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [BUGGY]    new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.NAME);	      	non-compiled	[CE]  ')'  expected	7	None	replace
76	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  n.getFirstChild())  {  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {    [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  n.getFirstChild())  {  [BUGGY]    new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  n.getFirstChild())  {	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n)    {    	non-compiled	[CE]  ')'  expected	8	None	replace
77	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getChildCount());  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isPropertyAssignmentInExpression(Node  n)  {    [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getChildCount());  [BUGGY]    new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getChildCount());	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getType());    	non-compiled	[CE]  ')'  expected	4	None	replace
