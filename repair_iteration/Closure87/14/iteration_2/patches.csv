bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(4);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(4);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(4);	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(4)    {    	non-compiled	[CE]  ')'  expected	44	None	replace
2	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(5)  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(5)  {  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(5)  {	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(4)    {    	non-compiled	[CE]  ')'  expected	44	None	replace
3	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(input,  n.getType());  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(input,  n.getType());  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(input,  n.getType());	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n,    input.getType());    	non-compiled	[CE]  ')'  expected	39	None	replace
4	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  input.getType(),  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  input.getType(),  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  input.getType(),  INVALID_REGULAR_EXPRESSION_FLAGS);	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n,    input.getType());    	non-compiled	[CE]  ')'  expected	39	None	replace
5	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  input.getFirstChild());  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  input.getFirstChild());  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  input.getFirstChild());	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n,    input.getType());    	non-compiled	[CE]  ')'  expected	39	None	replace
6	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  input.getParent());  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  input.getParent());  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  input.getParent());	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n,    input.getType());    	non-compiled	[CE]  ')'  expected	39	None	replace
7	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  input.getString());  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  input.getString());  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  input.getString());	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n,    input.getType());    	non-compiled	[CE]  ')'  expected	39	None	replace
8	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  input.getType(),  Integer.MAX_VALUE);  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  input.getType(),  Integer.MAX_VALUE);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  input.getType(),  Integer.MAX_VALUE);	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n,    input.getType());    	non-compiled	[CE]  ')'  expected	39	None	replace
9	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(input.getType(),  n);  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(input.getType(),  n);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(input.getType(),  n);	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n,    input.getType());    	non-compiled	[CE]  ')'  expected	39	None	replace
10	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  n.type,  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  n.type,  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  n.type,  INVALID_REGULAR_EXPRESSION_FLAGS);	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n,    n.type);    	non-compiled	[CE]  ')'  expected	41	None	replace
11	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  n.type,  STANDARD_OBJECT_CONSTRUCTORS);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  n.type,  STANDARD_OBJECT_CONSTRUCTORS);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  n.type,  STANDARD_OBJECT_CONSTRUCTORS);	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n,    n.type);    	non-compiled	[CE]  ')'  expected	41	None	replace
12	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.type,  n.type);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.type,  n.type);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.type,  n.type);	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n,    n.type);    	non-compiled	[CE]  ')'  expected	41	None	replace
13	[BUG]  [BUGGY]  Predicate  input  =  n.getInput();  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  input  =  n.getInput();  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  input  =  n.getInput();	  Predicate    input    =    n.getNext();    	non-compiled	[CE]  ')'  expected	33	None	replace
14	[BUG]  [BUGGY]  Predicate  input  =  n.getInitialValue();  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  input  =  n.getInitialValue();  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  input  =  n.getInitialValue();	  Predicate    input    =    n.getNext();    	non-compiled	[CE]  ')'  expected	33	None	replace
15	[BUG]  [BUGGY]  Predicate  input  =  n.getAncestor(1);  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  input  =  n.getAncestor(1);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  input  =  n.getAncestor(1);	  Predicate    input    =    n.getNext();    	non-compiled	[CE]  ')'  expected	33	None	replace
16	[BUG]  [BUGGY]  Predicate  input  =  n.getCondition();  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  input  =  n.getCondition();  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  input  =  n.getCondition();	  Predicate    input    =    n.getNext();    	non-compiled	[CE]  ')'  expected	33	None	replace
17	[BUG]  [BUGGY]  Predicate  input  =  n.getInitializingChild();  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  input  =  n.getInitializingChild();  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  input  =  n.getInitializingChild();	  Predicate    input    =    n.getFirstChild();    	non-compiled	[CE]  ')'  expected	31	None	replace
18	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getLastChild(),  n.getType());  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getLastChild(),  n.getType());  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getLastChild(),  n.getType());	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getFirstChild(),    n.getType());    	non-compiled	[CE]  ')'  expected	47	None	replace
19	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild(),  n.getType(),  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild(),  n.getType(),  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild(),  n.getType(),  INVALID_REGULAR_EXPRESSION_FLAGS);	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getFirstChild(),    n.getType());    	non-compiled	[CE]  ')'  expected	47	None	replace
20	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild(),  n.getType(),  Integer.MAX_VALUE);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild(),  n.getType(),  Integer.MAX_VALUE);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild(),  n.getType(),  Integer.MAX_VALUE);	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getFirstChild(),    n.getType());    	non-compiled	[CE]  ')'  expected	47	None	replace
21	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.type,  n.getType());  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.type,  n.getType());  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.type,  n.getType());	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.type);    	non-compiled	[CE]  ')'  expected	70	None	replace
22	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.type,  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.type,  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.type,  INVALID_REGULAR_EXPRESSION_FLAGS);	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.type);    	non-compiled	[CE]  ')'  expected	70	None	replace
23	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.type,  n.cloneTree());  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.type,  n.cloneTree());  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.type,  n.cloneTree());	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.type);    	non-compiled	[CE]  ')'  expected	70	None	replace
24	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.type,  Integer.MAX_VALUE);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.type,  Integer.MAX_VALUE);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.type,  Integer.MAX_VALUE);	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.type);    	non-compiled	[CE]  ')'  expected	70	None	replace
25	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.type,  input.getType());  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.type,  input.getType());  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.type,  input.getType());	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.type);    	non-compiled	[CE]  ')'  expected	70	None	replace
26	[BUG]  [BUGGY]  static  final  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>()  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  static  final  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>()  {  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	static  final  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>()  {	  final    Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    DefaultPredicate    <    Node>()    {    	non-compiled	[CE]  ')'  expected	14	None	replace
27	[BUG]  [BUGGY]  final  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>();  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  final  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>();  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	final  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>();	  final    Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    DefaultPredicate    <    Node>()    {    	non-compiled	[CE]  ')'  expected	14	None	replace
28	[BUG]  [BUGGY]  final  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(n.getType())  {  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  final  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(n.getType())  {  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	final  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(n.getType())  {	  final    Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    DefaultPredicate    <    Node>()    {    	non-compiled	[CE]  ')'  expected	14	None	replace
29	[BUG]  [BUGGY]  final  Node  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>()  {  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  final  Node  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>()  {  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	final  Node  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>()  {	  final    Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    DefaultPredicate    <    Node>()    {    	non-compiled	[CE]  ')'  expected	14	None	replace
30	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType(),  Integer.MIN_VALUE)  {  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType(),  Integer.MIN_VALUE)  {  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType(),  Integer.MIN_VALUE)  {	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getType(),    Integer.MAX_VALUE)    {    	non-compiled	[CE]  ')'  expected	7	None	replace
31	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType(),  Integer.MAX_VALUE);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType(),  Integer.MAX_VALUE);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType(),  Integer.MAX_VALUE);	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getType(),    Integer.MAX_VALUE)    {    	non-compiled	[CE]  ')'  expected	7	None	replace
32	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(input.getType(),  Integer.MAX_VALUE)  {  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(input.getType(),  Integer.MAX_VALUE)  {  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(input.getType(),  Integer.MAX_VALUE)  {	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getType(),    Integer.MAX_VALUE)    {    	non-compiled	[CE]  ')'  expected	7	None	replace
33	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType(),  Integer.MAX_VALUE  +  1)  {  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType(),  Integer.MAX_VALUE  +  1)  {  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType(),  Integer.MAX_VALUE  +  1)  {	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getType(),    Integer.MAX_VALUE)    {    	non-compiled	[CE]  ')'  expected	7	None	replace
34	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType(),  Integer.MAX_VALUE));  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType(),  Integer.MAX_VALUE));  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType(),  Integer.MAX_VALUE));	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getType(),    Integer.MAX_VALUE)    {    	non-compiled	[CE]  ')'  expected	7	None	replace
35	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType(),  Long.MAX_VALUE)  {  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType(),  Long.MAX_VALUE)  {  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType(),  Long.MAX_VALUE)  {	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getType(),    Integer.MAX_VALUE)    {    	non-compiled	[CE]  ')'  expected	7	None	replace
36	[BUG]  [BUGGY]  Predicates.  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>();  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicates.  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>();  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicates.  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>();	  Predicates.    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    DefaultPredicate    <    Node>()    {    	non-compiled	[CE]  ')'  expected	53	None	replace
37	[BUG]  [BUGGY]  Predicates.  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>());  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicates.  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>());  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicates.  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>());	  Predicates.    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    DefaultPredicate    <    Node>()    {    	non-compiled	[CE]  ')'  expected	53	None	replace
38	[BUG]  [BUGGY]  Predicates.  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(n.getType())  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicates.  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(n.getType())  {  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicates.  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(n.getType())  {	  Predicates.    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    DefaultPredicate    <    Node>()    {    	non-compiled	[CE]  ')'  expected	53	None	replace
39	[BUG]  [BUGGY]  Predicates.  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  NODE>()  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicates.  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  NODE>()  {  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicates.  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  NODE>()  {	  Predicates.    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    DefaultPredicate    <    Node>()    {    	non-compiled	[CE]  ')'  expected	53	None	replace
40	[BUG]  [BUGGY]  Predicates.  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(n);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicates.  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(n);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicates.  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(n);	  Predicates.    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    DefaultPredicate    <    Node>()    {    	non-compiled	[CE]  ')'  expected	53	None	replace
41	[BUG]  [BUGGY]  Predicates.  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>())  {  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicates.  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>())  {  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicates.  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>())  {	  Predicates.    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    DefaultPredicate    <    Node>()    {    	non-compiled	[CE]  ')'  expected	53	None	replace
42	[BUG]  [BUGGY]  Predicate  <  Node>  input  =  n.getLastChild();  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  input  =  n.getLastChild();  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  input  =  n.getLastChild();	  Predicate    <    Node>    input    =    n.getFirstChild();    	non-compiled	[CE]  ')'  expected	61	None	replace
43	[BUG]  [BUGGY]  Predicate  <  Node>  input  =  n.getAncestor(1);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  input  =  n.getAncestor(1);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  input  =  n.getAncestor(1);	  Predicate    <    Node>    input    =    n.getFirstChild();    	non-compiled	[CE]  ')'  expected	61	None	replace
44	[BUG]  [BUGGY]  Predicate  <  Node>  input  =  n.getNext();  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  input  =  n.getNext();  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  input  =  n.getNext();	  Predicate    <    Node>    input    =    n.getFirstChild();    	non-compiled	[CE]  ')'  expected	61	None	replace
45	[BUG]  [BUGGY]  Predicate  <  Node>  input  =  n.getAncestor(2);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  input  =  n.getAncestor(2);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  input  =  n.getAncestor(2);	  Predicate    <    Node>    input    =    n.getFirstChild();    	non-compiled	[CE]  ')'  expected	61	None	replace
46	[BUG]  [BUGGY]  Predicate  <  Node>  input  =  n.getParent();  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  input  =  n.getParent();  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  input  =  n.getParent();	  Predicate    <    Node>    input    =    n.getFirstChild();    	non-compiled	[CE]  ')'  expected	61	None	replace
47	[BUG]  [BUGGY]  Predicate  <  Node>  input  =  n.getCondition();  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  input  =  n.getCondition();  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  input  =  n.getCondition();	  Predicate    <    Node>    input    =    n.getFirstChild();    	non-compiled	[CE]  ')'  expected	61	None	replace
48	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n,    INVALID_REGULAR_EXPRESSION_PREDICATE);    	non-compiled	[CE]  ')'  expected	58	None	replace
49	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  INVALID_REGULAR_EXPRESSION_PREDICATE,  STANDARD_OBJECT_CONSTRUCTORS);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  INVALID_REGULAR_EXPRESSION_PREDICATE,  STANDARD_OBJECT_CONSTRUCTORS);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  INVALID_REGULAR_EXPRESSION_PREDICATE,  STANDARD_OBJECT_CONSTRUCTORS);	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n,    INVALID_REGULAR_EXPRESSION_PREDICATE);    	non-compiled	[CE]  ')'  expected	58	None	replace
50	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  INVALID_REGULAR_EXPRESSION_PREDICATE,  REGEXP_FLAGS_RE);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  INVALID_REGULAR_EXPRESSION_PREDICATE,  REGEXP_FLAGS_RE);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  INVALID_REGULAR_EXPRESSION_PREDICATE,  REGEXP_FLAGS_RE);	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n,    INVALID_REGULAR_EXPRESSION_PREDICATE);    	non-compiled	[CE]  ')'  expected	58	None	replace
51	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  INVALID_REGULAR_EXPRESSION_PREDICATE,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  INVALID_REGULAR_EXPRESSION_PREDICATE,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  INVALID_REGULAR_EXPRESSION_PREDICATE,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n,    INVALID_REGULAR_EXPRESSION_PREDICATE);    	non-compiled	[CE]  ')'  expected	58	None	replace
52	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  INVALID_REGULAR_EXPRESSION_PREDICATE,  n.getType());  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  INVALID_REGULAR_EXPRESSION_PREDICATE,  n.getType());  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  INVALID_REGULAR_EXPRESSION_PREDICATE,  n.getType());	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n,    INVALID_REGULAR_EXPRESSION_PREDICATE);    	non-compiled	[CE]  ')'  expected	58	None	replace
53	[BUG]  [BUGGY]  Node  input  =  n.getLastChild();  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Node  input  =  n.getLastChild();  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Node  input  =  n.getLastChild();	  Node    input    =    n.getFirstChild();    	non-compiled	[CE]  ')'  expected	32	None	replace
54	[BUG]  [BUGGY]  Node  input  =  n.getAncestor(1);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Node  input  =  n.getAncestor(1);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Node  input  =  n.getAncestor(1);	  Node    input    =    n.getFirstChild();    	non-compiled	[CE]  ')'  expected	32	None	replace
55	[BUG]  [BUGGY]  Node  input  =  n.getParent();  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Node  input  =  n.getParent();  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Node  input  =  n.getParent();	  Node    input    =    n.getFirstChild();    	non-compiled	[CE]  ')'  expected	32	None	replace
56	[BUG]  [BUGGY]  Node  input  =  n.getOwnerChild();  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Node  input  =  n.getOwnerChild();  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Node  input  =  n.getOwnerChild();	  Node    input    =    n.getFirstChild();    	non-compiled	[CE]  ')'  expected	32	None	replace
57	[BUG]  [BUGGY]  Node  input  =  n.getAncestor(2);  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Node  input  =  n.getAncestor(2);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Node  input  =  n.getAncestor(2);	  Node    input    =    n.getFirstChild();    	non-compiled	[CE]  ')'  expected	32	None	replace
58	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  STANDARD_OBJECT_CONSTRUCTORS,  INVALID_REGULAR_EXPRESSION_FLAGS)  {  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  STANDARD_OBJECT_CONSTRUCTORS,  INVALID_REGULAR_EXPRESSION_FLAGS)  {  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  STANDARD_OBJECT_CONSTRUCTORS,  INVALID_REGULAR_EXPRESSION_FLAGS)  {	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n,    STANDARD_OBJECT_CONSTRUCTORS)    {    	non-compiled	[CE]  ')'  expected	59	None	replace
59	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  CONSTRUCTORS)  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  CONSTRUCTORS)  {  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  CONSTRUCTORS)  {	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n,    STANDARD_OBJECT_CONSTRUCTORS)    {    	non-compiled	[CE]  ')'  expected	59	None	replace
60	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n,    STANDARD_OBJECT_CONSTRUCTORS)    {    	non-compiled	[CE]  ')'  expected	59	None	replace
61	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  PROPERTY_ASSIGNMENT)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  PROPERTY_ASSIGNMENT)  {  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  PROPERTY_ASSIGNMENT)  {	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n,    STANDARD_OBJECT_CONSTRUCTORS)    {    	non-compiled	[CE]  ')'  expected	59	None	replace
62	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getString()  +  1);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getString()  +  1);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getString()  +  1);	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getString());    	non-compiled	[CE]  ')'  expected	24	None	replace
63	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getLineno());  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getLineno());  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getLineno());	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getString());    	non-compiled	[CE]  ')'  expected	24	None	replace
64	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  n.getString());  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  n.getString());  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  n.getString());	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getString());    	non-compiled	[CE]  ')'  expected	24	None	replace
65	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getString(),  n.getType());  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getString(),  n.getType());  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getString(),  n.getType());	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getString());    	non-compiled	[CE]  ')'  expected	24	None	replace
66	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType(),  n.getNext());  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType(),  n.getNext());  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType(),  n.getNext());	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getType(),    n.getParent());    	non-compiled	[CE]  ')'  expected	25	None	replace
67	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType(),  n.getFirstChild());  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType(),  n.getFirstChild());  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType(),  n.getFirstChild());	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getType(),    n.getParent());    	non-compiled	[CE]  ')'  expected	25	None	replace
68	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType(),  n.getLastChild());  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType(),  n.getLastChild());  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType(),  n.getLastChild());	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getType(),    n.getParent());    	non-compiled	[CE]  ')'  expected	25	None	replace
69	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType(),  n.getString());  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType(),  n.getString());  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType(),  n.getString());	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getType(),    n.getParent());    	non-compiled	[CE]  ')'  expected	25	None	replace
70	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType(),  n.getChildCount());  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType(),  n.getChildCount());  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType(),  n.getChildCount());	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getType(),    n.getParent());    	non-compiled	[CE]  ')'  expected	25	None	replace
71	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType(),  n.getLineno());  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType(),  n.getLineno());  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType(),  n.getLineno());	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getType(),    n.getParent());    	non-compiled	[CE]  ')'  expected	25	None	replace
72	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType(),  false)  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType(),  false)  {  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType(),  false)  {	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getType(),    true)    {    	non-compiled	[CE]  ')'  expected	54	None	replace
73	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getParent(),  true)  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getParent(),  true)  {  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getParent(),  true)  {	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getType(),    true)    {    	non-compiled	[CE]  ')'  expected	54	None	replace
74	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType(),  null)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType(),  null)  {  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType(),  null)  {	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getType(),    true)    {    	non-compiled	[CE]  ')'  expected	54	None	replace
75	[BUG]  [BUGGY]  final  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType(),  true)  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  final  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType(),  true)  {  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	final  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType(),  true)  {	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getType(),    true)    {    	non-compiled	[CE]  ')'  expected	54	None	replace
76	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(input.getType(),  true)  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(input.getType(),  true)  {  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(input.getType(),  true)  {	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getType(),    true)    {    	non-compiled	[CE]  ')'  expected	54	None	replace
77	[BUG]  [BUGGY]  Predicates.  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType(),  false)  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicates.  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType(),  false)  {  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicates.  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType(),  false)  {	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getType(),    true)    {    	non-compiled	[CE]  ')'  expected	54	None	replace
78	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  predicate);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  predicate);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  predicate);	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n,    isLowerPrecedencePredicate);    	non-compiled	[CE]  ')'  expected	69	None	replace
79	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  PROPERTY_ASSIGNMENT);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  PROPERTY_ASSIGNMENT);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  PROPERTY_ASSIGNMENT);	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n,    isLowerPrecedencePredicate);    	non-compiled	[CE]  ')'  expected	69	None	replace
80	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(2)  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(2)  {  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(2)  {	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    DefaultPredicate    <    Node>(1)    {    	non-compiled	[CE]  ')'  expected	68	None	replace
81	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(4)  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(4)  {  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(4)  {	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    DefaultPredicate    <    Node>(1)    {    	non-compiled	[CE]  ')'  expected	68	None	replace
82	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(3)  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(3)  {  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(3)  {	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    DefaultPredicate    <    Node>(1)    {    	non-compiled	[CE]  ')'  expected	68	None	replace
83	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(1);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(1);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(1);	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    DefaultPredicate    <    Node>(1)    {    	non-compiled	[CE]  ')'  expected	68	None	replace
84	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(3);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(3);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(3);	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(3)    {    	non-compiled	[CE]  ')'  expected	43	None	replace
85	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getString()  +  1)  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getString()  +  1)  {  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getString()  +  1)  {	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getString())    {    	non-compiled	[CE]  ')'  expected	2	None	replace
86	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getLineno())  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getLineno())  {  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getLineno())  {	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getString())    {    	non-compiled	[CE]  ')'  expected	2	None	replace
87	[BUG]  [BUGGY]  Preconditions.checkState(input.getType()  ==  Token.NAME);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(input.getType()  ==  Token.NAME);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Preconditions.checkState(input.getType()  ==  Token.NAME);	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  ')'  expected	74	None	replace
88	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  isPropertyAssignmentInExpressionPredicate);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  isPropertyAssignmentInExpressionPredicate);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  isPropertyAssignmentInExpressionPredicate);	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  ')'  expected	74	None	replace
89	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME);  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Preconditions.checkState(n.getType()!=  Token.NAME);	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  ')'  expected	74	None	replace
90	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.EXPR_RESULT);  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  ')'  expected	74	None	replace
91	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  isPropertyAssignmentInExpression);  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  isPropertyAssignmentInExpression);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  isPropertyAssignmentInExpression);	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  ')'  expected	74	None	replace
92	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.GETPROP);  [CE]  ')'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.GETPROP);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.GETPROP);	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  ')'  expected	74	None	replace
93	[BUG]  [BUGGY]  final  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType());  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  final  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType());  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	final  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType());	  final    Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>();    	non-compiled	[CE]  ')'  expected	29	None	replace
94	[BUG]  [BUGGY]  final  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(1);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  final  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(1);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	final  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(1);	  final    Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>();    	non-compiled	[CE]  ')'  expected	29	None	replace
95	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getLastChild(),  n.getFirstChild());  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getLastChild(),  n.getFirstChild());  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getLastChild(),  n.getFirstChild());	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getFirstChild(),    n.getLastChild());    	non-compiled	[CE]  ')'  expected	46	None	replace
96	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild(),  n.getLastChild(),  n.getType());  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild(),  n.getLastChild(),  n.getType());  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild(),  n.getLastChild(),  n.getType());	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getFirstChild(),    n.getLastChild());    	non-compiled	[CE]  ')'  expected	46	None	replace
97	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild(),  n.getLastChild()  +  1);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild(),  n.getLastChild()  +  1);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild(),  n.getLastChild()  +  1);	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getFirstChild(),    n.getLastChild());    	non-compiled	[CE]  ')'  expected	46	None	replace
98	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild(),  n.getLastChild(),  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild(),  n.getLastChild(),  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild(),  n.getLastChild(),  INVALID_REGULAR_EXPRESSION_FLAGS);	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getFirstChild(),    n.getLastChild());    	non-compiled	[CE]  ')'  expected	46	None	replace
99	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild(),  n.getLastChild(),  Integer.MAX_VALUE);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild(),  n.getLastChild(),  Integer.MAX_VALUE);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild(),  n.getLastChild(),  Integer.MAX_VALUE);	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getFirstChild(),    n.getLastChild());    	non-compiled	[CE]  ')'  expected	46	None	replace
100	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild(),  n.getLastChild(),  n.getParent());  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild(),  n.getLastChild(),  n.getParent());  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild(),  n.getLastChild(),  n.getParent());	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getFirstChild(),    n.getLastChild());    	non-compiled	[CE]  ')'  expected	46	None	replace
101	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  n.getLastChild())  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  n.getLastChild())  {  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  n.getLastChild())  {	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getLastChild())    {    	non-compiled	[CE]  ')'  expected	62	None	replace
102	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(input.getFirstChild())  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(input.getFirstChild())  {  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(input.getFirstChild())  {	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getLastChild())    {    	non-compiled	[CE]  ')'  expected	62	None	replace
103	[BUG]  [BUGGY]  final  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getLastChild())  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  final  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getLastChild())  {  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	final  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getLastChild())  {	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getLastChild())    {    	non-compiled	[CE]  ')'  expected	62	None	replace
104	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getLastChild(),  n.getType())  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getLastChild(),  n.getType())  {  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getLastChild(),  n.getType())  {	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getLastChild())    {    	non-compiled	[CE]  ')'  expected	62	None	replace
105	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getLastChild(),  n.getString())  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getLastChild(),  n.getString())  {  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getLastChild(),  n.getString())  {	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getLastChild())    {    	non-compiled	[CE]  ')'  expected	62	None	replace
106	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getChildCount()  -  1);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getChildCount()  -  1);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getChildCount()  -  1);	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getChildCount());    	non-compiled	[CE]  ')'  expected	77	None	replace
107	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getChildCount()  +  1);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getChildCount()  +  1);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getChildCount()  +  1);	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getChildCount());    	non-compiled	[CE]  ')'  expected	77	None	replace
108	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getChildCount()  -  2);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getChildCount()  -  2);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getChildCount()  -  2);	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getChildCount());    	non-compiled	[CE]  ')'  expected	77	None	replace
109	[BUG]  [BUGGY]  Preconditions.checkState(input.getType()  ==  Token.EXPR_RESULT);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(input.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Preconditions.checkState(input.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  ')'  expected	72	None	replace
110	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.EXPR_RESULT);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.EXPR_RESULT);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Preconditions.checkState(n.getType()!=  Token.EXPR_RESULT);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  ')'  expected	72	None	replace
111	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.EXPR_RESULT);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  ')'  expected	72	None	replace
112	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  isPropertyAssignmentInExpressionPredicate);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  isPropertyAssignmentInExpressionPredicate);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  isPropertyAssignmentInExpressionPredicate);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  ')'  expected	72	None	replace
113	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.ASSIGN);  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.ASSIGN);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.ASSIGN);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  ')'  expected	72	None	replace
114	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.NAME);  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.NAME);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.NAME);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  ')'  expected	72	None	replace
115	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  REGEXP_FLAGS_RE)  {  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  REGEXP_FLAGS_RE)  {  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  REGEXP_FLAGS_RE)  {	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n,    INVALID_REGULAR_EXPRESSION_FLAGS)    {    	non-compiled	[CE]  ')'  expected	17	None	replace
116	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  INVALID_REGULAR_EXPRESSION_FLAGS,  STANDARD_OBJECT_CONSTRUCTORS)  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  INVALID_REGULAR_EXPRESSION_FLAGS,  STANDARD_OBJECT_CONSTRUCTORS)  {  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  INVALID_REGULAR_EXPRESSION_FLAGS,  STANDARD_OBJECT_CONSTRUCTORS)  {	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n,    INVALID_REGULAR_EXPRESSION_FLAGS)    {    	non-compiled	[CE]  ')'  expected	17	None	replace
117	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  INVALID_REGULAR_EXPRESSION_FLAGS,  REGEXP_FLAGS_RE)  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  INVALID_REGULAR_EXPRESSION_FLAGS,  REGEXP_FLAGS_RE)  {  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  INVALID_REGULAR_EXPRESSION_FLAGS,  REGEXP_FLAGS_RE)  {	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n,    INVALID_REGULAR_EXPRESSION_FLAGS)    {    	non-compiled	[CE]  ')'  expected	17	None	replace
118	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  INVALID_REGULAR_EXPRESSION_FLAGS,  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  INVALID_REGULAR_EXPRESSION_FLAGS,  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  INVALID_REGULAR_EXPRESSION_FLAGS,  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n,    INVALID_REGULAR_EXPRESSION_FLAGS)    {    	non-compiled	[CE]  ')'  expected	17	None	replace
119	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(),  n);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(),  n);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(),  n);	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    DefaultPredicate    <    Node>());    	non-compiled	[CE]  ')'  expected	13	None	replace
120	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>()  +  1);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>()  +  1);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>()  +  1);	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    DefaultPredicate    <    Node>());    	non-compiled	[CE]  ')'  expected	13	None	replace
121	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(n.getParent());  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(n.getParent());  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(n.getParent());	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    DefaultPredicate    <    Node>(n.getType());    	non-compiled	[CE]  ')'  expected	67	None	replace
122	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(n.getType(),  n.getParent());  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(n.getType(),  n.getParent());  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(n.getType(),  n.getParent());	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    DefaultPredicate    <    Node>(n.getType());    	non-compiled	[CE]  ')'  expected	67	None	replace
123	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(n.getString());  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(n.getString());  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(n.getString());	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    DefaultPredicate    <    Node>(n.getType());    	non-compiled	[CE]  ')'  expected	67	None	replace
124	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(n,  n.getType());  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(n,  n.getType());  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(n,  n.getType());	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    DefaultPredicate    <    Node>(n.getType());    	non-compiled	[CE]  ')'  expected	67	None	replace
125	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(n.getLastChild());  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(n.getLastChild());  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(n.getLastChild());	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    DefaultPredicate    <    Node>(n.getType());    	non-compiled	[CE]  ')'  expected	67	None	replace
126	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(n.getChildCount());  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(n.getChildCount());  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(n.getChildCount());	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    DefaultPredicate    <    Node>(n.getType());    	non-compiled	[CE]  ')'  expected	67	None	replace
127	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(input,  n.getType())  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(input,  n.getType())  {  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(input,  n.getType())  {	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n,    input.getType())    {    	non-compiled	[CE]  ')'  expected	18	None	replace
128	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  input.getType(),  INVALID_REGULAR_EXPRESSION_FLAGS)  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  input.getType(),  INVALID_REGULAR_EXPRESSION_FLAGS)  {  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  input.getType(),  INVALID_REGULAR_EXPRESSION_FLAGS)  {	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n,    input.getType())    {    	non-compiled	[CE]  ')'  expected	18	None	replace
129	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  input.getString())  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  input.getString())  {  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  input.getString())  {	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n,    input.getType())    {    	non-compiled	[CE]  ')'  expected	18	None	replace
130	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  input.getFirstChild())  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  input.getFirstChild())  {  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  input.getFirstChild())  {	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n,    input.getType())    {    	non-compiled	[CE]  ')'  expected	18	None	replace
131	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(input,  input.getType())  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(input,  input.getType())  {  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(input,  input.getType())  {	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n,    input.getType())    {    	non-compiled	[CE]  ')'  expected	18	None	replace
132	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(input,  input.getType(),  INVALID_REGULAR_EXPRESSION_FLAGS)  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(input,  input.getType(),  INVALID_REGULAR_EXPRESSION_FLAGS)  {  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(input,  input.getType(),  INVALID_REGULAR_EXPRESSION_FLAGS)  {	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n,    input.getType())    {    	non-compiled	[CE]  ')'  expected	18	None	replace
133	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  n.getFirstChild());  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  n.getFirstChild());  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  n.getFirstChild());	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n,    n.getType());    	non-compiled	[CE]  ')'  expected	23	None	replace
134	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  n.getParent());  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  n.getParent());  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  n.getParent());	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n,    n.getType());    	non-compiled	[CE]  ')'  expected	23	None	replace
135	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  n.getType(),  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  n.getType(),  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  n.getType(),  INVALID_REGULAR_EXPRESSION_FLAGS);	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n,    n.getType());    	non-compiled	[CE]  ')'  expected	23	None	replace
136	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  n.getLastChild());  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  n.getLastChild());  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  n.getLastChild());	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n,    n.getType());    	non-compiled	[CE]  ')'  expected	23	None	replace
137	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  n.getChildCount());  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  n.getChildCount());  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  n.getChildCount());	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n,    n.getType());    	non-compiled	[CE]  ')'  expected	23	None	replace
138	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  n.getString())  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  n.getString())  {  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  n.getString())  {	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n,    n.getType())    {    	non-compiled	[CE]  ')'  expected	6	None	replace
139	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  n.getParent())  {  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  n.getParent())  {  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  n.getParent())  {	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n,    n.getType())    {    	non-compiled	[CE]  ')'  expected	6	None	replace
140	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  n.getType(),  INVALID_REGULAR_EXPRESSION_FLAGS)  {  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  n.getType(),  INVALID_REGULAR_EXPRESSION_FLAGS)  {  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  n.getType(),  INVALID_REGULAR_EXPRESSION_FLAGS)  {	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n,    n.getType())    {    	non-compiled	[CE]  ')'  expected	6	None	replace
141	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  n.getChildCount())  {  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  n.getChildCount())  {  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  n.getChildCount())  {	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n,    n.getType())    {    	non-compiled	[CE]  ')'  expected	6	None	replace
142	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  n.getType()  -  1)  {  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  n.getType()  -  1)  {  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  n.getType()  -  1)  {	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n,    n.getType())    {    	non-compiled	[CE]  ')'  expected	6	None	replace
143	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getNext())  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getNext())  {  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getNext())  {	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getParent())    {    	non-compiled	[CE]  ')'  expected	1	None	replace
144	[BUG]  [BUGGY]  final  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getLastChild());  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  final  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getLastChild());  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	final  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getLastChild());	  final    Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getFirstChild());    	non-compiled	[CE]  ')'  expected	65	None	replace
145	[BUG]  [BUGGY]  final  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild(),  n.getLastChild());  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  final  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild(),  n.getLastChild());  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	final  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild(),  n.getLastChild());	  final    Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getFirstChild());    	non-compiled	[CE]  ')'  expected	65	None	replace
146	[BUG]  [BUGGY]  final  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild(),  n.getType());  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  final  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild(),  n.getType());  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	final  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild(),  n.getType());	  final    Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getFirstChild());    	non-compiled	[CE]  ')'  expected	65	None	replace
147	[BUG]  [BUGGY]  final  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild(),  n.getNext());  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  final  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild(),  n.getNext());  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	final  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild(),  n.getNext());	  final    Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getFirstChild());    	non-compiled	[CE]  ')'  expected	65	None	replace
148	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  INVALID_REGULAR_EXPRESSION_PREDICATE,  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  INVALID_REGULAR_EXPRESSION_PREDICATE,  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  INVALID_REGULAR_EXPRESSION_PREDICATE,  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n,    INVALID_REGULAR_EXPRESSION_PREDICATE)    {    	non-compiled	[CE]  ')'  expected	21	None	replace
149	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  INVALID_REGULAR_EXPRESSION_PREDICATE,  STANDARD_OBJECT_CONSTRUCTORS)  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  INVALID_REGULAR_EXPRESSION_PREDICATE,  STANDARD_OBJECT_CONSTRUCTORS)  {  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  INVALID_REGULAR_EXPRESSION_PREDICATE,  STANDARD_OBJECT_CONSTRUCTORS)  {	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n,    INVALID_REGULAR_EXPRESSION_PREDICATE)    {    	non-compiled	[CE]  ')'  expected	21	None	replace
150	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType(),  STANDARD_OBJECT_CONSTRUCTORS);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType(),  STANDARD_OBJECT_CONSTRUCTORS);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType(),  STANDARD_OBJECT_CONSTRUCTORS);	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getType(),    INVALID_REGULAR_EXPRESSION_FLAGS);    	non-compiled	[CE]  ')'  expected	60	None	replace
151	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType(),  INVALID_REGULAR_EXPRESSION_FLAGS,  STANDARD_OBJECT_CONSTRUCTORS);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType(),  INVALID_REGULAR_EXPRESSION_FLAGS,  STANDARD_OBJECT_CONSTRUCTORS);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType(),  INVALID_REGULAR_EXPRESSION_FLAGS,  STANDARD_OBJECT_CONSTRUCTORS);	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getType(),    INVALID_REGULAR_EXPRESSION_FLAGS);    	non-compiled	[CE]  ')'  expected	60	None	replace
152	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType(),  REGEXP_FLAGS_RE);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType(),  REGEXP_FLAGS_RE);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType(),  REGEXP_FLAGS_RE);	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getType(),    INVALID_REGULAR_EXPRESSION_FLAGS);    	non-compiled	[CE]  ')'  expected	60	None	replace
153	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType(),  INVALID_REGULAR_EXPRESSION_FLAGS,  REGEXP_FLAGS_RE);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType(),  INVALID_REGULAR_EXPRESSION_FLAGS,  REGEXP_FLAGS_RE);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType(),  INVALID_REGULAR_EXPRESSION_FLAGS,  REGEXP_FLAGS_RE);	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getType(),    INVALID_REGULAR_EXPRESSION_FLAGS);    	non-compiled	[CE]  ')'  expected	60	None	replace
154	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType(),  INVALID_REGULAR_EXPRESSION_FLAGS,  DEFAULT_OBJECT_CONSTRUCTORS);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType(),  INVALID_REGULAR_EXPRESSION_FLAGS,  DEFAULT_OBJECT_CONSTRUCTORS);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType(),  INVALID_REGULAR_EXPRESSION_FLAGS,  DEFAULT_OBJECT_CONSTRUCTORS);	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getType(),    INVALID_REGULAR_EXPRESSION_FLAGS);    	non-compiled	[CE]  ')'  expected	60	None	replace
155	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType(),  PROPERTY);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType(),  PROPERTY);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType(),  PROPERTY);	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getType(),    INVALID_REGULAR_EXPRESSION_FLAGS);    	non-compiled	[CE]  ')'  expected	60	None	replace
156	[BUG]  [BUGGY]  Predicate  input  =  n.removeFirstChild();  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  input  =  n.removeFirstChild();  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  input  =  n.removeFirstChild();	  Predicate    input    =    n.getLastChild();    	non-compiled	[CE]  ')'  expected	35	None	replace
157	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType(),  n.getLineno())  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType(),  n.getLineno())  {  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType(),  n.getLineno())  {	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getType(),    n.getString())    {    	non-compiled	[CE]  ')'  expected	5	None	replace
158	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType(),  n.getQualifiedName())  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType(),  n.getQualifiedName())  {  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType(),  n.getQualifiedName())  {	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getType(),    n.getString())    {    	non-compiled	[CE]  ')'  expected	5	None	replace
159	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType(),  n.getString()  +  1)  {  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType(),  n.getString()  +  1)  {  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType(),  n.getString()  +  1)  {	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getType(),    n.getString())    {    	non-compiled	[CE]  ')'  expected	5	None	replace
160	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType(),  n.getFirstChild())  {  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType(),  n.getFirstChild())  {  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType(),  n.getFirstChild())  {	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getType(),    n.getString())    {    	non-compiled	[CE]  ')'  expected	5	None	replace
161	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getLastChild(),  n);  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getLastChild(),  n);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getLastChild(),  n);	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getFirstChild(),    n);    	non-compiled	[CE]  ')'  expected	71	None	replace
162	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild(),  n,  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild(),  n,  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild(),  n,  INVALID_REGULAR_EXPRESSION_FLAGS);	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getFirstChild(),    n);    	non-compiled	[CE]  ')'  expected	71	None	replace
163	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild(),  n,  STANDARD_OBJECT_CONSTRUCTORS);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild(),  n,  STANDARD_OBJECT_CONSTRUCTORS);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild(),  n,  STANDARD_OBJECT_CONSTRUCTORS);	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getFirstChild(),    n);    	non-compiled	[CE]  ')'  expected	71	None	replace
164	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getNext(),  n);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getNext(),  n);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getNext(),  n);	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getFirstChild(),    n);    	non-compiled	[CE]  ')'  expected	71	None	replace
165	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getParent(),  n);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getParent(),  n);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getParent(),  n);	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getFirstChild(),    n);    	non-compiled	[CE]  ')'  expected	71	None	replace
166	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getLastChild(),  n.getNext());  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getLastChild(),  n.getNext());  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getLastChild(),  n.getNext());	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getFirstChild(),    n.getNext());    	non-compiled	[CE]  ')'  expected	48	None	replace
167	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild(),  n.getParent());  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild(),  n.getParent());  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild(),  n.getParent());	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getFirstChild(),    n.getNext());    	non-compiled	[CE]  ')'  expected	48	None	replace
168	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild(),  n.getNext(),  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild(),  n.getNext(),  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild(),  n.getNext(),  INVALID_REGULAR_EXPRESSION_FLAGS);	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getFirstChild(),    n.getNext());    	non-compiled	[CE]  ')'  expected	48	None	replace
169	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild(),  n.getNext(),  STANDARD_OBJECT_CONSTRUCTORS);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild(),  n.getNext(),  STANDARD_OBJECT_CONSTRUCTORS);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild(),  n.getNext(),  STANDARD_OBJECT_CONSTRUCTORS);	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getFirstChild(),    n.getNext());    	non-compiled	[CE]  ')'  expected	48	None	replace
170	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  input)  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  input)  {  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  input)  {	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n,    predicate)    {    	non-compiled	[CE]  ')'  expected	19	None	replace
171	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  predicate,  INVALID_REGULAR_EXPRESSION_FLAGS)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  predicate,  INVALID_REGULAR_EXPRESSION_FLAGS)  {  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  predicate,  INVALID_REGULAR_EXPRESSION_FLAGS)  {	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n,    predicate)    {    	non-compiled	[CE]  ')'  expected	19	None	replace
172	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(predicate,  n)  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(predicate,  n)  {  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(predicate,  n)  {	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n,    predicate)    {    	non-compiled	[CE]  ')'  expected	19	None	replace
173	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  predicate.getType())  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  predicate.getType())  {  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  predicate.getType())  {	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n,    predicate)    {    	non-compiled	[CE]  ')'  expected	19	None	replace
174	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getLastChild().getType())  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getLastChild().getType())  {  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getLastChild().getType())  {	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getFirstChild().getType())    {    	non-compiled	[CE]  ')'  expected	3	None	replace
175	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild().getType(),  n.getLastChild())  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild().getType(),  n.getLastChild())  {  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild().getType(),  n.getLastChild())  {	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getFirstChild().getType())    {    	non-compiled	[CE]  ')'  expected	3	None	replace
176	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild().getType(),  n.getNext())  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild().getType(),  n.getNext())  {  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild().getType(),  n.getNext())  {	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getFirstChild().getType())    {    	non-compiled	[CE]  ')'  expected	3	None	replace
177	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild().getString())  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild().getString())  {  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild().getString())  {	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getFirstChild().getType())    {    	non-compiled	[CE]  ')'  expected	3	None	replace
178	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild().getNext().getType())  {  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild().getNext().getType())  {  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild().getNext().getType())  {	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getFirstChild().getType())    {    	non-compiled	[CE]  ')'  expected	3	None	replace
179	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild().getType(),  n.getString())  {  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild().getType(),  n.getString())  {  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild().getType(),  n.getString())  {	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getFirstChild().getType())    {    	non-compiled	[CE]  ')'  expected	3	None	replace
180	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild().getType(),  n.getParent())  {  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild().getType(),  n.getParent())  {  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild().getType(),  n.getParent())  {	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getFirstChild().getType())    {    	non-compiled	[CE]  ')'  expected	3	None	replace
181	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(n,  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(n,  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(n,  INVALID_REGULAR_EXPRESSION_FLAGS);	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    DefaultPredicate    <    Node>(n);    	non-compiled	[CE]  ')'  expected	15	None	replace
182	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(n,  input);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(n,  input);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(n,  input);	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    DefaultPredicate    <    Node>(n);    	non-compiled	[CE]  ')'  expected	15	None	replace
183	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(n,  input.getType());  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(n,  input.getType());  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(n,  input.getType());	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    DefaultPredicate    <    Node>(n);    	non-compiled	[CE]  ')'  expected	15	None	replace
184	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(n,  predicate);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(n,  predicate);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(n,  predicate);	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    DefaultPredicate    <    Node>(n);    	non-compiled	[CE]  ')'  expected	15	None	replace
185	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(n.getFirstChild(),  n.getLastChild());  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(n.getFirstChild(),  n.getLastChild());  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(n.getFirstChild(),  n.getLastChild());	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    DefaultPredicate    <    Node>(n.getFirstChild());    	non-compiled	[CE]  ')'  expected	66	None	replace
186	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(n.getFirstChild(),  n.getType());  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(n.getFirstChild(),  n.getType());  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(n.getFirstChild(),  n.getType());	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    DefaultPredicate    <    Node>(n.getFirstChild());    	non-compiled	[CE]  ')'  expected	66	None	replace
187	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(n.getFirstChild(),  n.getNext());  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(n.getFirstChild(),  n.getNext());  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(n.getFirstChild(),  n.getNext());	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    DefaultPredicate    <    Node>(n.getFirstChild());    	non-compiled	[CE]  ')'  expected	66	None	replace
188	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(n.getNext());  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(n.getNext());  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(n.getNext());	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    DefaultPredicate    <    Node>(n.getFirstChild());    	non-compiled	[CE]  ')'  expected	66	None	replace
189	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild(),  n.getLastChild())  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild(),  n.getLastChild())  {  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild(),  n.getLastChild())  {	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getFirstChild())    {    	non-compiled	[CE]  ')'  expected	4	None	replace
190	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild(),  n.getType())  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild(),  n.getType())  {  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild(),  n.getType())  {	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getFirstChild())    {    	non-compiled	[CE]  ')'  expected	4	None	replace
191	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild(),  n.getNext())  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild(),  n.getNext())  {  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild(),  n.getNext())  {	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getFirstChild())    {    	non-compiled	[CE]  ')'  expected	4	None	replace
192	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(0);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(0);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(0);	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    DefaultPredicate    <    Node>();    	non-compiled	[CE]  ')'  expected	11	None	replace
193	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(2);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(2);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(2);	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    DefaultPredicate    <    Node>();    	non-compiled	[CE]  ')'  expected	11	None	replace
194	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getNext(),  n.getType());  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getNext(),  n.getType());  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getNext(),  n.getType());	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getNext());    	non-compiled	[CE]  ')'  expected	27	None	replace
195	[BUG]  [BUGGY]  final  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  n.getType());  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  final  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  n.getType());  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	final  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  n.getType());	  final    Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n);    	non-compiled	[CE]  ')'  expected	64	None	replace
196	[BUG]  [BUGGY]  final  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  final  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	final  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  INVALID_REGULAR_EXPRESSION_FLAGS);	  final    Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n);    	non-compiled	[CE]  ')'  expected	64	None	replace
197	[BUG]  [BUGGY]  final  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  input.getType());  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  final  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  input.getType());  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	final  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  input.getType());	  final    Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n);    	non-compiled	[CE]  ')'  expected	64	None	replace
198	[BUG]  [BUGGY]  final  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  n.type);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  final  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  n.type);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	final  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  n.type);	  final    Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n);    	non-compiled	[CE]  ')'  expected	64	None	replace
199	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getLastChild(),  n.getString());  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getLastChild(),  n.getString());  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getLastChild(),  n.getString());	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getFirstChild(),    n.getString());    	non-compiled	[CE]  ')'  expected	49	None	replace
200	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild(),  n.getString()  +  1);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild(),  n.getString()  +  1);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild(),  n.getString()  +  1);	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getFirstChild(),    n.getString());    	non-compiled	[CE]  ')'  expected	49	None	replace
201	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild(),  n.getString(),  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild(),  n.getString(),  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild(),  n.getString(),  INVALID_REGULAR_EXPRESSION_FLAGS);	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getFirstChild(),    n.getString());    	non-compiled	[CE]  ')'  expected	49	None	replace
202	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild(),  n.getString(),  Integer.MAX_VALUE);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild(),  n.getString(),  Integer.MAX_VALUE);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild(),  n.getString(),  Integer.MAX_VALUE);	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getFirstChild(),    n.getString());    	non-compiled	[CE]  ')'  expected	49	None	replace
203	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(8);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(8);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(8);	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(8)    {    	non-compiled	[CE]  ')'  expected	52	None	replace
204	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(7)  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(7)  {  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(7)  {	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(8)    {    	non-compiled	[CE]  ')'  expected	52	None	replace
205	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(6)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(6)  {  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(6)  {	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(8)    {    	non-compiled	[CE]  ')'  expected	52	None	replace
206	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType(),  n.getNext())  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType(),  n.getNext())  {  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType(),  n.getNext())  {	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getType(),    n.getParent())    {    	non-compiled	[CE]  ')'  expected	55	None	replace
207	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType(),  n.getLastChild())  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType(),  n.getLastChild())  {  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType(),  n.getLastChild())  {	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getType(),    n.getParent())    {    	non-compiled	[CE]  ')'  expected	55	None	replace
208	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType(),  n.getChildCount())  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType(),  n.getChildCount())  {  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType(),  n.getChildCount())  {	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getType(),    n.getParent())    {    	non-compiled	[CE]  ')'  expected	55	None	replace
209	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(input,  n);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(input,  n);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(input,  n);	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n,    input);    	non-compiled	[CE]  ')'  expected	40	None	replace
210	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(input);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(input);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(input);	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n,    input);    	non-compiled	[CE]  ')'  expected	40	None	replace
211	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(input,  input);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(input,  input);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(input,  input);	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n,    input);    	non-compiled	[CE]  ')'  expected	40	None	replace
212	[BUG]  [BUGGY]  Preconditions.checkArgument(input.getType()  ==  Token.EXPR_RESULT);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Preconditions.checkArgument(input.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Preconditions.checkArgument(input.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkArgument(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  ')'  expected	73	None	replace
213	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.EXPR_RESULT);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.EXPR_RESULT);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Preconditions.checkArgument(n.getType()!=  Token.EXPR_RESULT);	  Preconditions.checkArgument(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  ')'  expected	73	None	replace
214	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.GETPROP);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.GETPROP);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.GETPROP);	  Preconditions.checkArgument(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  ')'  expected	73	None	replace
215	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.ASSIGN);  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.ASSIGN);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.ASSIGN);	  Preconditions.checkArgument(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  ')'  expected	73	None	replace
216	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.NAME);  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.NAME);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.NAME);	  Preconditions.checkArgument(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  ')'  expected	73	None	replace
217	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(input,  n.getParent())  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(input,  n.getParent())  {  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(input,  n.getParent())  {	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n,    input.getParent())    {    	non-compiled	[CE]  ')'  expected	20	None	replace
218	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(input,  n.getNext())  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(input,  n.getNext())  {  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(input,  n.getNext())  {	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n,    input.getParent())    {    	non-compiled	[CE]  ')'  expected	20	None	replace
219	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  input.getLastChild())  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  input.getLastChild())  {  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  input.getLastChild())  {	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n,    input.getParent())    {    	non-compiled	[CE]  ')'  expected	20	None	replace
220	[BUG]  [BUGGY]  Node  input  =  n.getInput();  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Node  input  =  n.getInput();  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Node  input  =  n.getInput();	  Node    input    =    n.getNext();    	non-compiled	[CE]  ')'  expected	36	None	replace
221	[BUG]  [BUGGY]  Node  input  =  n.getCondition();  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Node  input  =  n.getCondition();  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Node  input  =  n.getCondition();	  Node    input    =    n.getNext();    	non-compiled	[CE]  ')'  expected	36	None	replace
222	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  NODE>();  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  NODE>();  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  NODE>();	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    DefaultPredicate    <    NODE>()    {    	non-compiled	[CE]  ')'  expected	16	None	replace
223	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  NODE>(n.getType())  {  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  NODE>(n.getType())  {  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  NODE>(n.getType())  {	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    DefaultPredicate    <    NODE>()    {    	non-compiled	[CE]  ')'  expected	16	None	replace
224	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  >()  {  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  >()  {  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  >()  {	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    DefaultPredicate    <    NODE>()    {    	non-compiled	[CE]  ')'  expected	16	None	replace
225	[BUG]  [BUGGY]  final  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getParent())  {  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  final  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getParent())  {  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	final  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getParent())  {	  final    Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getType())    {    	non-compiled	[CE]  ')'  expected	30	None	replace
226	[BUG]  [BUGGY]  final  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild().getType())  {  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  final  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild().getType())  {  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	final  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild().getType())  {	  final    Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getType())    {    	non-compiled	[CE]  ')'  expected	30	None	replace
227	[BUG]  [BUGGY]  final  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getString())  {  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  final  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getString())  {  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	final  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getString())  {	  final    Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getType())    {    	non-compiled	[CE]  ')'  expected	30	None	replace
228	[BUG]  [BUGGY]  final  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType(),  n.getString())  {  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  final  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType(),  n.getString())  {  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	final  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType(),  n.getString())  {	  final    Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getType())    {    	non-compiled	[CE]  ')'  expected	30	None	replace
229	[BUG]  [BUGGY]  final  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild())  {  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  final  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild())  {  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	final  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild())  {	  final    Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getType())    {    	non-compiled	[CE]  ')'  expected	30	None	replace
230	[BUG]  [BUGGY]  final  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  n.getType())  {  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  final  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  n.getType())  {  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	final  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  n.getType())  {	  final    Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getType())    {    	non-compiled	[CE]  ')'  expected	30	None	replace
231	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  INVALID_REGULAR_EXPRESSION_FLAGS,  STANDARD_OBJECT_CONSTRUCTORS);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  INVALID_REGULAR_EXPRESSION_FLAGS,  STANDARD_OBJECT_CONSTRUCTORS);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  INVALID_REGULAR_EXPRESSION_FLAGS,  STANDARD_OBJECT_CONSTRUCTORS);	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n,    INVALID_REGULAR_EXPRESSION_FLAGS);    	non-compiled	[CE]  ')'  expected	38	None	replace
232	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  REGEXP_FLAGS_RE);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  REGEXP_FLAGS_RE);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  REGEXP_FLAGS_RE);	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n,    INVALID_REGULAR_EXPRESSION_FLAGS);    	non-compiled	[CE]  ')'  expected	38	None	replace
233	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  INVALID_REGULAR_EXPRESSION_FLAGS,  REGEXP_FLAGS_RE);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  INVALID_REGULAR_EXPRESSION_FLAGS,  REGEXP_FLAGS_RE);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  INVALID_REGULAR_EXPRESSION_FLAGS,  REGEXP_FLAGS_RE);	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n,    INVALID_REGULAR_EXPRESSION_FLAGS);    	non-compiled	[CE]  ')'  expected	38	None	replace
234	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  INVALID_REGULAR_EXPRESSION_FLAGS,  n.getType());  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  INVALID_REGULAR_EXPRESSION_FLAGS,  n.getType());  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  INVALID_REGULAR_EXPRESSION_FLAGS,  n.getType());	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n,    INVALID_REGULAR_EXPRESSION_FLAGS);    	non-compiled	[CE]  ')'  expected	38	None	replace
235	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  INVALID_REGULAR_EXPRESSION_FLAGS,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  INVALID_REGULAR_EXPRESSION_FLAGS,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  INVALID_REGULAR_EXPRESSION_FLAGS,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n,    INVALID_REGULAR_EXPRESSION_FLAGS);    	non-compiled	[CE]  ')'  expected	38	None	replace
236	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  INVALID_REGULAR_EXPRESSION_FLAGS,  DEFAULT_OBJECT_CONSTRUCTORS);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  INVALID_REGULAR_EXPRESSION_FLAGS,  DEFAULT_OBJECT_CONSTRUCTORS);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  INVALID_REGULAR_EXPRESSION_FLAGS,  DEFAULT_OBJECT_CONSTRUCTORS);	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n,    INVALID_REGULAR_EXPRESSION_FLAGS);    	non-compiled	[CE]  ')'  expected	38	None	replace
237	[BUG]  [BUGGY]  Predicate  predicate  =  n.getLastChild();  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  predicate  =  n.getLastChild();  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  predicate  =  n.getLastChild();	  Predicate    predicate    =    n.getFirstChild();    	non-compiled	[CE]  ')'  expected	34	None	replace
238	[BUG]  [BUGGY]  Predicate  predicate  =  n.getNext();  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  predicate  =  n.getNext();  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  predicate  =  n.getNext();	  Predicate    predicate    =    n.getFirstChild();    	non-compiled	[CE]  ')'  expected	34	None	replace
239	[BUG]  [BUGGY]  Predicate  predicate  =  input.getFirstChild();  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  predicate  =  input.getFirstChild();  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  predicate  =  input.getFirstChild();	  Predicate    predicate    =    n.getFirstChild();    	non-compiled	[CE]  ')'  expected	34	None	replace
240	[BUG]  [BUGGY]  Predicate  predicate  =  n.getPreviousChild();  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  predicate  =  n.getPreviousChild();  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  predicate  =  n.getPreviousChild();	  Predicate    predicate    =    n.getFirstChild();    	non-compiled	[CE]  ')'  expected	34	None	replace
241	[BUG]  [BUGGY]  Predicate  predicate  =  n.getParent();  [CE]  ')'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  predicate  =  n.getParent();  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  predicate  =  n.getParent();	  Predicate    predicate    =    n.getFirstChild();    	non-compiled	[CE]  ')'  expected	34	None	replace
242	[BUG]  [BUGGY]  Predicate  predicate  =  n.getInitializingChild();  [CE]  ')'  expected  [FE]                                        AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  predicate  =  n.getInitializingChild();  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  predicate  =  n.getInitializingChild();	  Predicate    predicate    =    n.getFirstChild();    	non-compiled	[CE]  ')'  expected	34	None	replace
243	[BUG]  [BUGGY]  final  static  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>()  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  final  static  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>()  {  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	final  static  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>()  {	  static    final    Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>()    {    	non-compiled	[CE]  ')'  expected	28	None	replace
244	[BUG]  [BUGGY]  static  final  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType())  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  static  final  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType())  {  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	static  final  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType())  {	  static    final    Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>()    {    	non-compiled	[CE]  ')'  expected	28	None	replace
245	[BUG]  [BUGGY]  static  final  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>();  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  static  final  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>();  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	static  final  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>();	  static    final    Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>()    {    	non-compiled	[CE]  ')'  expected	28	None	replace
246	[BUG]  [BUGGY]  static  final  Node  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>()  {  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  static  final  Node  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>()  {  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	static  final  Node  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>()  {	  static    final    Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>()    {    	non-compiled	[CE]  ')'  expected	28	None	replace
247	[BUG]  [BUGGY]  static  final  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild())  {  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  static  final  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild())  {  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	static  final  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild())  {	  static    final    Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>()    {    	non-compiled	[CE]  ')'  expected	28	None	replace
248	[BUG]  [BUGGY]  final  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(),  n.getFirstChild());  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  final  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(),  n.getFirstChild());  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	final  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(),  n.getFirstChild());	  final    Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>()    ==    	non-compiled	[CE]  ')'  expected	51	None	replace
249	[BUG]  [BUGGY]  final  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>()  ||  n.getType()  ==  Token.EXPR_RESULT);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  final  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>()  ||  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	final  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>()  ||  n.getType()  ==  Token.EXPR_RESULT);	  final    Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>()    ==    	non-compiled	[CE]  ')'  expected	51	None	replace
250	[BUG]  [BUGGY]  static  final  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>()  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  static  final  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>()  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	static  final  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>()	  final    Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>()    ==    	non-compiled	[CE]  ')'  expected	51	None	replace
251	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  STANDARD_OBJECT_CONSTRUCTORS,  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  STANDARD_OBJECT_CONSTRUCTORS,  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  STANDARD_OBJECT_CONSTRUCTORS,  INVALID_REGULAR_EXPRESSION_FLAGS);	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n,    STANDARD_OBJECT_CONSTRUCTORS);    	non-compiled	[CE]  ')'  expected	56	None	replace
252	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  CONSTRUCTORS);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  CONSTRUCTORS);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  CONSTRUCTORS);	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n,    STANDARD_OBJECT_CONSTRUCTORS);    	non-compiled	[CE]  ')'  expected	56	None	replace
253	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  STANDARD_OBJECT_CONSTRUCTORS,  ImmutableSet);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  STANDARD_OBJECT_CONSTRUCTORS,  ImmutableSet);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  STANDARD_OBJECT_CONSTRUCTORS,  ImmutableSet);	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n,    STANDARD_OBJECT_CONSTRUCTORS);    	non-compiled	[CE]  ')'  expected	56	None	replace
254	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  STANDARD_OBJECT_CONSTRUCTORS,  n.getType());  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  STANDARD_OBJECT_CONSTRUCTORS,  n.getType());  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  STANDARD_OBJECT_CONSTRUCTORS,  n.getType());	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n,    STANDARD_OBJECT_CONSTRUCTORS);    	non-compiled	[CE]  ')'  expected	56	None	replace
255	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  n.getNext())  {  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  n.getNext())  {  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  n.getNext())  {	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n,    n.getFirstChild())    {    	non-compiled	[CE]  ')'  expected	76	None	replace
256	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  STANDARD_OBJECT_EXPRESSION_FLAGS,  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  STANDARD_OBJECT_EXPRESSION_FLAGS,  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  STANDARD_OBJECT_EXPRESSION_FLAGS,  INVALID_REGULAR_EXPRESSION_FLAGS);	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n,    STANDARD_OBJECT_EXPRESSION_FLAGS);    	non-compiled	[CE]  ')'  expected	57	None	replace
257	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  REGEXP_FLAGS_REGULAR_EXPRESSION_FLAGS);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  REGEXP_FLAGS_REGULAR_EXPRESSION_FLAGS);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  REGEXP_FLAGS_REGULAR_EXPRESSION_FLAGS);	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n,    STANDARD_OBJECT_EXPRESSION_FLAGS);    	non-compiled	[CE]  ')'  expected	57	None	replace
258	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  STANDARD_OBJECT_EXPRESSION_FLAGS,  n.getType());  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  STANDARD_OBJECT_EXPRESSION_FLAGS,  n.getType());  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  STANDARD_OBJECT_EXPRESSION_FLAGS,  n.getType());	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n,    STANDARD_OBJECT_EXPRESSION_FLAGS);    	non-compiled	[CE]  ')'  expected	57	None	replace
259	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  STANDARD_OBJECT_EXPRESSION_FLAGS,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  STANDARD_OBJECT_EXPRESSION_FLAGS,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  STANDARD_OBJECT_EXPRESSION_FLAGS,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n,    STANDARD_OBJECT_EXPRESSION_FLAGS);    	non-compiled	[CE]  ')'  expected	57	None	replace
260	[BUG]  [BUGGY]  Node  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>()  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Node  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>()  {  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Node  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>()  {	  final    Node    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>()    {    	non-compiled	[CE]  ')'  expected	50	None	replace
261	[BUG]  [BUGGY]  final  Node  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Node  <  Node>()  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  final  Node  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Node  <  Node>()  {  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	final  Node  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Node  <  Node>()  {	  final    Node    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>()    {    	non-compiled	[CE]  ')'  expected	50	None	replace
262	[BUG]  [BUGGY]  Node  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Node  <  Node>()  {  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Node  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Node  <  Node>()  {  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Node  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Node  <  Node>()  {	  final    Node    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>()    {    	non-compiled	[CE]  ')'  expected	50	None	replace
263	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(n.getParent())  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(n.getParent())  {  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(n.getParent())  {	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    DefaultPredicate    <    Node>(n.getType())    {    	non-compiled	[CE]  ')'  expected	12	None	replace
264	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(n.getString())  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(n.getString())  {  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(n.getString())  {	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    DefaultPredicate    <    Node>(n.getType())    {    	non-compiled	[CE]  ')'  expected	12	None	replace
265	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(n.getFirstChild().getType())  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(n.getFirstChild().getType())  {  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(n.getFirstChild().getType())  {	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    DefaultPredicate    <    Node>(n.getType())    {    	non-compiled	[CE]  ')'  expected	12	None	replace
266	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(n.getFirstChild())  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(n.getFirstChild())  {  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(n.getFirstChild())  {	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    DefaultPredicate    <    Node>(n.getType())    {    	non-compiled	[CE]  ')'  expected	12	None	replace
267	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(n.getType(),  n.getString())  {  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(n.getType(),  n.getString())  {  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(n.getType(),  n.getString())  {	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    DefaultPredicate    <    Node>(n.getType())    {    	non-compiled	[CE]  ')'  expected	12	None	replace
268	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(n.getType(),  n.getParent())  {  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(n.getType(),  n.getParent())  {  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(n.getType(),  n.getParent())  {	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    DefaultPredicate    <    Node>(n.getType())    {    	non-compiled	[CE]  ')'  expected	12	None	replace
269	[BUG]  [BUGGY]  Preconditions.checkArgument(input.getType()  ==  Token.NAME);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Preconditions.checkArgument(input.getType()  ==  Token.NAME);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Preconditions.checkArgument(input.getType()  ==  Token.NAME);	  Preconditions.checkArgument(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  ')'  expected	75	None	replace
270	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME,  isPropertyAssignmentInExpressionPredicate);  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME,  isPropertyAssignmentInExpressionPredicate);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.NAME,  isPropertyAssignmentInExpressionPredicate);	  Preconditions.checkArgument(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  ')'  expected	75	None	replace
271	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.GETPROP);  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.GETPROP);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.GETPROP);	  Preconditions.checkArgument(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  ')'  expected	75	None	replace
272	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.EXPR_RESULT);  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkArgument(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  ')'  expected	75	None	replace
273	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME,  input.getString());  [CE]  ')'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME,  input.getString());  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.NAME,  input.getString());	  Preconditions.checkArgument(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  ')'  expected	75	None	replace
274	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getChildCount()  -  1)  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getChildCount()  -  1)  {  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getChildCount()  -  1)  {	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getChildCount())    {    	non-compiled	[CE]  ')'  expected	63	None	replace
275	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getChildCount()  +  1)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getChildCount()  +  1)  {  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getChildCount()  +  1)  {	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getChildCount())    {    	non-compiled	[CE]  ')'  expected	63	None	replace
276	[BUG]  [BUGGY]  final  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getNext());  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  final  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getNext());  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	final  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getNext());	  final    Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getFirstChild());    	non-compiled	[CE]  ')'  expected	65	None	replace
277	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  PROPERTY_ASIGNMENT);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  PROPERTY_ASIGNMENT);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  PROPERTY_ASIGNMENT);	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n,    isLowerPrecedencePredicate);    	non-compiled	[CE]  ')'  expected	69	None	replace
278	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getNext(),  n.getParent());  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getNext(),  n.getParent());  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getNext(),  n.getParent());	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getNext());    	non-compiled	[CE]  ')'  expected	27	None	replace
279	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild(),  n.getLowerString());  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild(),  n.getLowerString());  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild(),  n.getLowerString());	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getFirstChild(),    n.getString());    	non-compiled	[CE]  ')'  expected	49	None	replace
280	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getNext(),  n.getString());  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getNext(),  n.getString());  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getNext(),  n.getString());	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getFirstChild(),    n.getString());    	non-compiled	[CE]  ')'  expected	49	None	replace
281	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType(),  Integer.MAX_VALUE),  this)  {  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType(),  Integer.MAX_VALUE),  this)  {  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType(),  Integer.MAX_VALUE),  this)  {	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getType(),    Integer.MAX_VALUE)    {    	non-compiled	[CE]  ')'  expected	7	None	replace
282	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType(),  Integer.MAX_VALUE),  predicate)  {  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType(),  Integer.MAX_VALUE),  predicate)  {  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType(),  Integer.MAX_VALUE),  predicate)  {	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getType(),    Integer.MAX_VALUE)    {    	non-compiled	[CE]  ')'  expected	7	None	replace
283	[BUG]  [BUGGY]  Predicates.  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild(),  n.getLastChild());  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicates.  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild(),  n.getLastChild());  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicates.  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild(),  n.getLastChild());	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getFirstChild(),    n.getLastChild());    	non-compiled	[CE]  ')'  expected	46	None	replace
284	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild(),  n.getLastChild())+  1;  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild(),  n.getLastChild())+  1;  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild(),  n.getLastChild())+  1;	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getFirstChild(),    n.getLastChild());    	non-compiled	[CE]  ')'  expected	46	None	replace
285	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getNext(),  n.getLastChild());  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getNext(),  n.getLastChild());  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getNext(),  n.getLastChild());	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getFirstChild(),    n.getLastChild());    	non-compiled	[CE]  ')'  expected	46	None	replace
286	[BUG]  [BUGGY]  final  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>()  &&  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  final  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>()  &&  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	final  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>()  &&	  final    Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>()    ==    	non-compiled	[CE]  ')'  expected	51	None	replace
287	[BUG]  [BUGGY]  final  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>()  ||  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  final  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>()  ||  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	final  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>()  ||	  final    Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>()    ==    	non-compiled	[CE]  ')'  expected	51	None	replace
288	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(7);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(7);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(7);	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(8)    {    	non-compiled	[CE]  ')'  expected	52	None	replace
289	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getString(),  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getString(),  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getString(),  INVALID_REGULAR_EXPRESSION_FLAGS);	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getString());    	non-compiled	[CE]  ')'  expected	24	None	replace
290	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(n.getType(),  true)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(n.getType(),  true)  {  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(n.getType(),  true)  {	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    DefaultPredicate    <    Node>(n.getType())    {    	non-compiled	[CE]  ')'  expected	12	None	replace
291	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(n.getType(),  this)  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(n.getType(),  this)  {  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(n.getType(),  this)  {	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    DefaultPredicate    <    Node>(n.getType())    {    	non-compiled	[CE]  ')'  expected	12	None	replace
292	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  PROPERTY)  {  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  PROPERTY)  {  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  PROPERTY)  {	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n,    INVALID_REGULAR_EXPRESSION_FLAGS)    {    	non-compiled	[CE]  ')'  expected	17	None	replace
293	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  INVALID_REGULAR_EXPRESSION_FLAGS  -  1)  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  INVALID_REGULAR_EXPRESSION_FLAGS  -  1)  {  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  INVALID_REGULAR_EXPRESSION_FLAGS  -  1)  {	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n,    INVALID_REGULAR_EXPRESSION_FLAGS)    {    	non-compiled	[CE]  ')'  expected	17	None	replace
294	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(8)  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(8)  {  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(8)  {	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    DefaultPredicate    <    Node>(1)    {    	non-compiled	[CE]  ')'  expected	68	None	replace
295	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  STANDARD_OBJECT_CONSTRUCTORS);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  STANDARD_OBJECT_CONSTRUCTORS);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  STANDARD_OBJECT_CONSTRUCTORS);	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  ')'  expected	74	None	replace
296	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  INVALID_REGULAR_EXPRESSION);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  INVALID_REGULAR_EXPRESSION);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  INVALID_REGULAR_EXPRESSION);	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  ')'  expected	74	None	replace
297	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.ASSIGN);  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.ASSIGN);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.ASSIGN);	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  ')'  expected	74	None	replace
298	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  INVALID_REGULAR_EXPRESSION_FLAGS  +  1);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  INVALID_REGULAR_EXPRESSION_FLAGS  +  1);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  INVALID_REGULAR_EXPRESSION_FLAGS  +  1);	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n,    INVALID_REGULAR_EXPRESSION_FLAGS);    	non-compiled	[CE]  ')'  expected	38	None	replace
299	[BUG]  [BUGGY]  Predicate  input  =  n.getAncestor(2);  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  input  =  n.getAncestor(2);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  input  =  n.getAncestor(2);	  Predicate    input    =    n.getParent();    	non-compiled	[CE]  ')'  expected	37	None	replace
300	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  input.getNext())  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  input.getNext())  {  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  input.getNext())  {	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n,    input.getParent())    {    	non-compiled	[CE]  ')'  expected	20	None	replace
301	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(input,  input.getParent())  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(input,  input.getParent())  {  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(input,  input.getParent())  {	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n,    input.getParent())    {    	non-compiled	[CE]  ')'  expected	20	None	replace
302	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild(),  n.getType()  -  1);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild(),  n.getType()  -  1);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild(),  n.getType()  -  1);	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getFirstChild(),    n.getType());    	non-compiled	[CE]  ')'  expected	47	None	replace
303	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  PROPERTY);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  PROPERTY);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  PROPERTY);	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n,    STANDARD_OBJECT_CONSTRUCTORS);    	non-compiled	[CE]  ')'  expected	56	None	replace
304	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  n.getType()  -  1);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  n.getType()  -  1);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  n.getType()  -  1);	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n,    n.getType());    	non-compiled	[CE]  ')'  expected	23	None	replace
305	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType(),  n.getName());  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType(),  n.getName());  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType(),  n.getName());	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getType(),    n.getParent());    	non-compiled	[CE]  ')'  expected	25	None	replace
306	[BUG]  [BUGGY]  static  final  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>()  ==  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  static  final  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>()  ==  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	static  final  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>()  ==	  static    final    Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>()    {    	non-compiled	[CE]  ')'  expected	28	None	replace
307	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild(),  n.getNext()  +  1);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild(),  n.getNext()  +  1);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild(),  n.getNext()  +  1);	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getFirstChild(),    n.getNext());    	non-compiled	[CE]  ')'  expected	48	None	replace
308	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild().getType(),  n)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild().getType(),  n)  {  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild().getType(),  n)  {	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getFirstChild().getType())    {    	non-compiled	[CE]  ')'  expected	3	None	replace
309	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getNext().getType())  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getNext().getType())  {  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getNext().getType())  {	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getFirstChild().getType())    {    	non-compiled	[CE]  ')'  expected	3	None	replace
310	[BUG]  [BUGGY]  final  DefaultPredicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>()  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  final  DefaultPredicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>()  {  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	final  DefaultPredicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>()  {	  final    Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    DefaultPredicate    <    Node>()    {    	non-compiled	[CE]  ')'  expected	14	None	replace
311	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType(),  INVALID_REGULAR_EXPRESSION_FLAGS,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType(),  INVALID_REGULAR_EXPRESSION_FLAGS,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType(),  INVALID_REGULAR_EXPRESSION_FLAGS,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getType(),    INVALID_REGULAR_EXPRESSION_FLAGS);    	non-compiled	[CE]  ')'  expected	60	None	replace
312	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getName())  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getName())  {  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getName())  {	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getParent())    {    	non-compiled	[CE]  ')'  expected	1	None	replace
313	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getParent(),  input)  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getParent(),  input)  {  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getParent(),  input)  {	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getParent())    {    	non-compiled	[CE]  ')'  expected	1	None	replace
314	[BUG]  [BUGGY]  Predicate  input  =  n.getfirstChild();  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  input  =  n.getfirstChild();  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  input  =  n.getfirstChild();	  Predicate    input    =    n.getLastChild();    	non-compiled	[CE]  ')'  expected	35	None	replace
315	[BUG]  [BUGGY]  Predicates.  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>()  ==  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicates.  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>()  ==  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicates.  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>()  ==	  Predicates.    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    DefaultPredicate    <    Node>()    {    	non-compiled	[CE]  ')'  expected	53	None	replace
316	[BUG]  [BUGGY]  Predicates.  <  Node>  arePropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>()  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicates.  <  Node>  arePropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>()  {  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicates.  <  Node>  arePropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>()  {	  Predicates.    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    DefaultPredicate    <    Node>()    {    	non-compiled	[CE]  ')'  expected	53	None	replace
317	[BUG]  [BUGGY]  Predicates.  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  node>()  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicates.  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  node>()  {  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicates.  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  node>()  {	  Predicates.    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    DefaultPredicate    <    Node>()    {    	non-compiled	[CE]  ')'  expected	53	None	replace
318	[BUG]  [BUGGY]  Predicate  predicate  =  n.getPrevious();  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  predicate  =  n.getPrevious();  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  predicate  =  n.getPrevious();	  Predicate    predicate    =    n.getFirstChild();    	non-compiled	[CE]  ')'  expected	34	None	replace
319	[BUG]  [BUGGY]  Predicates.  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild())  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicates.  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild())  {  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicates.  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild())  {	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getLastChild())    {    	non-compiled	[CE]  ')'  expected	62	None	replace
320	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getLastChild(),  n.getFirstChild())  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getLastChild(),  n.getFirstChild())  {  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getLastChild(),  n.getFirstChild())  {	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getLastChild())    {    	non-compiled	[CE]  ')'  expected	62	None	replace
321	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getLastChild(),  n.getNext())  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getLastChild(),  n.getNext())  {  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getLastChild(),  n.getNext())  {	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getLastChild())    {    	non-compiled	[CE]  ')'  expected	62	None	replace
322	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType(),  n.getName())  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType(),  n.getName())  {  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType(),  n.getName())  {	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getType(),    n.getString())    {    	non-compiled	[CE]  ')'  expected	5	None	replace
323	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  node>()  {  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  node>()  {  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  node>()  {	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    DefaultPredicate    <    NODE>()    {    	non-compiled	[CE]  ')'  expected	16	None	replace
324	[BUG]  [BUGGY]  final  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType(),  n.getParent())  {  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  final  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType(),  n.getParent())  {  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	final  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType(),  n.getParent())  {	  final    Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getType())    {    	non-compiled	[CE]  ')'  expected	30	None	replace
325	[BUG]  [BUGGY]  final  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType(),  predicate)  {  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  final  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType(),  predicate)  {  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	final  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType(),  predicate)  {	  final    Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getType())    {    	non-compiled	[CE]  ')'  expected	30	None	replace
326	[BUG]  [BUGGY]  final  Node  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>();  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  final  Node  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>();  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	final  Node  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>();	  final    Node    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>()    {    	non-compiled	[CE]  ')'  expected	50	None	replace
327	[BUG]  [BUGGY]  final  Node  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>()  ==  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  final  Node  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>()  ==  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	final  Node  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>()  ==	  final    Node    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>()    {    	non-compiled	[CE]  ')'  expected	50	None	replace
328	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.type,  input);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.type,  input);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.type,  input);	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.type);    	non-compiled	[CE]  ')'  expected	70	None	replace
329	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.type  -  1);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.type  -  1);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.type  -  1);	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.type);    	non-compiled	[CE]  ')'  expected	70	None	replace
330	[BUG]  [BUGGY]  Predicates.  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild());  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicates.  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild());  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicates.  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild());	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getLastChild());    	non-compiled	[CE]  ')'  expected	26	None	replace
331	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType(),  n);  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType(),  n);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType(),  n);	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getFirstChild(),    n);    	non-compiled	[CE]  ')'  expected	71	None	replace
332	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild(),  n  +  1);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild(),  n  +  1);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild(),  n  +  1);	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getFirstChild(),    n);    	non-compiled	[CE]  ')'  expected	71	None	replace
333	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  STANDARD_OBJECT_EXPRESSION_FLAGS  |  STANDARD_OBJECT_CONSTRUCTORS);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  STANDARD_OBJECT_EXPRESSION_FLAGS  |  STANDARD_OBJECT_CONSTRUCTORS);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  STANDARD_OBJECT_EXPRESSION_FLAGS  |  STANDARD_OBJECT_CONSTRUCTORS);	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n,    STANDARD_OBJECT_EXPRESSION_FLAGS);    	non-compiled	[CE]  ')'  expected	57	None	replace
334	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  STANDARD_OBJECT_EXPRESSION_FLAGS  +  1);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  STANDARD_OBJECT_EXPRESSION_FLAGS  +  1);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  STANDARD_OBJECT_EXPRESSION_FLAGS  +  1);	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n,    STANDARD_OBJECT_EXPRESSION_FLAGS);    	non-compiled	[CE]  ')'  expected	57	None	replace
335	[BUG]  [BUGGY]  Predicate  <  Node>  input  =  n.removeFirstChild();  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  input  =  n.removeFirstChild();  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  input  =  n.removeFirstChild();	  Predicate    <    Node>    input    =    n.getFirstChild();    	non-compiled	[CE]  ')'  expected	61	None	replace
336	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(input,  input.getType());  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(input,  input.getType());  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(input,  input.getType());	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n,    input.getType());    	non-compiled	[CE]  ')'  expected	39	None	replace
337	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  input.getType()  -  1);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  input.getType()  -  1);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  input.getType()  -  1);	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n,    input.getType());    	non-compiled	[CE]  ')'  expected	39	None	replace
338	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild(),  n)  {  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild(),  n)  {  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild(),  n)  {	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n,    n.getFirstChild())    {    	non-compiled	[CE]  ')'  expected	76	None	replace
339	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  PROPERTY_ACTION_INVALID_REGULAR_EXPRESSION_FLAGS)  {  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  PROPERTY_ACTION_INVALID_REGULAR_EXPRESSION_FLAGS)  {  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  PROPERTY_ACTION_INVALID_REGULAR_EXPRESSION_FLAGS)  {	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n,    STANDARD_OBJECT_CONSTRUCTORS)    {    	non-compiled	[CE]  ')'  expected	59	None	replace
340	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  n.type  +  1);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  n.type  +  1);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  n.type  +  1);	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n,    n.type);    	non-compiled	[CE]  ')'  expected	41	None	replace
341	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(n,  STANDARD_OBJECT_CONSTRUCTORS);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(n,  STANDARD_OBJECT_CONSTRUCTORS);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(n,  STANDARD_OBJECT_CONSTRUCTORS);	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    DefaultPredicate    <    Node>(n);    	non-compiled	[CE]  ')'  expected	15	None	replace
342	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getChildCount()  -  2)  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getChildCount()  -  2)  {  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getChildCount()  -  2)  {	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getChildCount())    {    	non-compiled	[CE]  ')'  expected	63	None	replace
343	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  INVALID_REGULAR_EXPRESSION_FLAGS);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  ')'  expected	72	None	replace
344	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.GETPROP);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.GETPROP);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.GETPROP);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  ')'  expected	72	None	replace
345	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.CALL);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.CALL);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.CALL);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  ')'  expected	72	None	replace
346	[BUG]  [BUGGY]  final  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  STANDARD_OBJECT_CONSTRUCTORS);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  final  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  STANDARD_OBJECT_CONSTRUCTORS);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	final  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  STANDARD_OBJECT_CONSTRUCTORS);	  final    Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n);    	non-compiled	[CE]  ')'  expected	64	None	replace
347	[BUG]  [BUGGY]  final  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  predicate);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  final  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  predicate);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	final  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  predicate);	  final    Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n);    	non-compiled	[CE]  ')'  expected	64	None	replace
348	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT,  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT,  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT,  INVALID_REGULAR_EXPRESSION_FLAGS);	  Preconditions.checkArgument(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  ')'  expected	73	None	replace
349	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  &&!NodeUtil.isExpressionNode(n));  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  &&!NodeUtil.isExpressionNode(n));  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.NAME  &&!NodeUtil.isExpressionNode(n));	  Preconditions.checkArgument(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  ')'  expected	75	None	replace
350	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  &&  NodeUtil.isExpressionNode(n));  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  &&  NodeUtil.isExpressionNode(n));  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.NAME  &&  NodeUtil.isExpressionNode(n));	  Preconditions.checkArgument(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  ')'  expected	75	None	replace
351	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  predicate.cloneTree())  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  predicate.cloneTree())  {  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  predicate.cloneTree())  {	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n,    predicate)    {    	non-compiled	[CE]  ')'  expected	19	None	replace
352	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  predicate.getParent())  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  predicate.getParent())  {  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  predicate.getParent())  {	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n,    predicate)    {    	non-compiled	[CE]  ')'  expected	19	None	replace
353	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(n.getType(),  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(n.getType(),  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(n.getType(),  INVALID_REGULAR_EXPRESSION_FLAGS);	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    DefaultPredicate    <    Node>(n.getType());    	non-compiled	[CE]  ')'  expected	67	None	replace
354	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(n.getType(),  n);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(n.getType(),  n);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(n.getType(),  n);	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    DefaultPredicate    <    Node>(n.getType());    	non-compiled	[CE]  ')'  expected	67	None	replace
355	[BUG]  [BUGGY]  final  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(n);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  final  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(n);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	final  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(n);	  final    Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    DefaultPredicate    <    Node>()    {    	non-compiled	[CE]  ')'  expected	14	None	replace
356	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.removeFirstChild());  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.removeFirstChild());  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.removeFirstChild());	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getLastChild());    	non-compiled	[CE]  ')'  expected	26	None	replace
357	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.VAR);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.VAR);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.VAR);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  ')'  expected	72	None	replace
358	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  STANDARD_OBJECT_CONSTRUCTORS_PREDICATE);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  STANDARD_OBJECT_CONSTRUCTORS_PREDICATE);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  STANDARD_OBJECT_CONSTRUCTORS_PREDICATE);	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n,    INVALID_REGULAR_EXPRESSION_PREDICATE);    	non-compiled	[CE]  ')'  expected	58	None	replace
359	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(8)  ==  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(8)  ==  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(8)  ==	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(8)    {    	non-compiled	[CE]  ')'  expected	52	None	replace
360	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  DEFAULT_PROPERTY_ASSIGNMENT);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  DEFAULT_PROPERTY_ASSIGNMENT);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  DEFAULT_PROPERTY_ASSIGNMENT);	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n,    STANDARD_OBJECT_CONSTRUCTORS);    	non-compiled	[CE]  ')'  expected	56	None	replace
361	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType()  ||  true)  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType()  ||  true)  {  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType()  ||  true)  {	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getType(),    true)    {    	non-compiled	[CE]  ')'  expected	54	None	replace
362	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild(),  n.getFirstChild());  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild(),  n.getFirstChild());  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild(),  n.getFirstChild());	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getFirstChild(),    n.getLastChild());    	non-compiled	[CE]  ')'  expected	46	None	replace
363	[BUG]  [BUGGY]  Predicates.  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>()  ||  n.getType()  ==  Token.EXPR_RESULT;  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicates.  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>()  ||  n.getType()  ==  Token.EXPR_RESULT;  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicates.  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>()  ||  n.getType()  ==  Token.EXPR_RESULT;	  Predicates.    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    DefaultPredicate    <    Node>()    {    	non-compiled	[CE]  ')'  expected	53	None	replace
364	[BUG]  [BUGGY]  Predicates.  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(1)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicates.  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(1)  {  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicates.  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(1)  {	  Predicates.    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    DefaultPredicate    <    Node>()    {    	non-compiled	[CE]  ')'  expected	53	None	replace
365	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  input.getLastChild());  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  input.getLastChild());  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  input.getLastChild());	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n,    input.getType());    	non-compiled	[CE]  ')'  expected	39	None	replace
366	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  n.type,  DEFAULT_PROPERTY);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  n.type,  DEFAULT_PROPERTY);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  n.type,  DEFAULT_PROPERTY);	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n,    n.type);    	non-compiled	[CE]  ')'  expected	41	None	replace
367	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  n.type,  Integer.MAX_VALUE);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  n.type,  Integer.MAX_VALUE);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  n.type,  Integer.MAX_VALUE);	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n,    n.type);    	non-compiled	[CE]  ')'  expected	41	None	replace
368	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getFirstChild());  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getFirstChild());  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getFirstChild());	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  ')'  expected	74	None	replace
369	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  &&  n.getFirstChild()  ==  null);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  &&  n.getFirstChild()  ==  null);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  &&  n.getFirstChild()  ==  null);	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  ')'  expected	74	None	replace
370	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.CALL);  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.CALL);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.CALL);	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  ')'  expected	74	None	replace
371	[BUG]  [BUGGY]  Predicates.checkState(n.getType()  ==  Token.EXPR_RESULT);  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicates.checkState(n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicates.checkState(n.getType()  ==  Token.EXPR_RESULT);	  Predicate    input    =    n.getLastChild();    	non-compiled	[CE]  ')'  expected	35	None	replace
372	[BUG]  [BUGGY]  Predicates.checkState(n.getType()  ==  Token.ASSIGN);  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicates.checkState(n.getType()  ==  Token.ASSIGN);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicates.checkState(n.getType()  ==  Token.ASSIGN);	  Predicate    input    =    n.getLastChild();    	non-compiled	[CE]  ')'  expected	35	None	replace
373	[BUG]  [BUGGY]  Predicate  in  =  n.getFirstChild();  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  in  =  n.getFirstChild();  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  in  =  n.getFirstChild();	  Predicate    input    =    n.getLastChild();    	non-compiled	[CE]  ')'  expected	35	None	replace
374	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getParent(),  n.getString());  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getParent(),  n.getString());  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getParent(),  n.getString());	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getFirstChild(),    n.getString());    	non-compiled	[CE]  ')'  expected	49	None	replace
375	[BUG]  [BUGGY]  final  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>()  ||  n.getType()  ==  Token.EXPR_RESULT;  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  final  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>()  ||  n.getType()  ==  Token.EXPR_RESULT;  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	final  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>()  ||  n.getType()  ==  Token.EXPR_RESULT;	  final    Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>()    ==    	non-compiled	[CE]  ')'  expected	51	None	replace
376	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>()  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>()  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>()	  final    Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>()    ==    	non-compiled	[CE]  ')'  expected	51	None	replace
377	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(4);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(4);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(4);	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    DefaultPredicate    <    Node>(1)    {    	non-compiled	[CE]  ')'  expected	68	None	replace
378	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  n.getNext());  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  n.getNext());  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  n.getNext());	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n,    n.getType());    	non-compiled	[CE]  ')'  expected	23	None	replace
379	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(n.getLastChild())  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(n.getLastChild())  {  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(n.getLastChild())  {	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    DefaultPredicate    <    Node>(n.getType())    {    	non-compiled	[CE]  ')'  expected	12	None	replace
380	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(n.getChildCount())  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(n.getChildCount())  {  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(n.getChildCount())  {	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    DefaultPredicate    <    Node>(n.getType())    {    	non-compiled	[CE]  ')'  expected	12	None	replace
381	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(n.getNext())  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(n.getNext())  {  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(n.getNext())  {	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    DefaultPredicate    <    Node>(n.getType())    {    	non-compiled	[CE]  ')'  expected	12	None	replace
382	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.type,  STANDARD_OBJECT_CONSTRUCTORS);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.type,  STANDARD_OBJECT_CONSTRUCTORS);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.type,  STANDARD_OBJECT_CONSTRUCTORS);	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.type);    	non-compiled	[CE]  ')'  expected	70	None	replace
383	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.type,  n.input);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.type,  n.input);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.type,  n.input);	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.type);    	non-compiled	[CE]  ')'  expected	70	None	replace
384	[BUG]  [BUGGY]  Predicate  predicate  =  n.getPreviousSibling();  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  predicate  =  n.getPreviousSibling();  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  predicate  =  n.getPreviousSibling();	  Predicate    predicate    =    n.getFirstChild();    	non-compiled	[CE]  ')'  expected	34	None	replace
385	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  INVALID_REGULAR_EXPRESSION_FLAGS  |  STANDARD_OBJECT_EXPRESSION_FLAGS);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  INVALID_REGULAR_EXPRESSION_FLAGS  |  STANDARD_OBJECT_EXPRESSION_FLAGS);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  INVALID_REGULAR_EXPRESSION_FLAGS  |  STANDARD_OBJECT_EXPRESSION_FLAGS);	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n,    STANDARD_OBJECT_EXPRESSION_FLAGS);    	non-compiled	[CE]  ')'  expected	57	None	replace
386	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  PROPERTY_OBJECT_CONSTRUCTORS)  {  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  PROPERTY_OBJECT_CONSTRUCTORS)  {  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  PROPERTY_OBJECT_CONSTRUCTORS)  {	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n,    STANDARD_OBJECT_CONSTRUCTORS)    {    	non-compiled	[CE]  ')'  expected	59	None	replace
387	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  PROPERTY_APPLICATIONS)  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  PROPERTY_APPLICATIONS)  {  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  PROPERTY_APPLICATIONS)  {	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n,    STANDARD_OBJECT_CONSTRUCTORS)    {    	non-compiled	[CE]  ')'  expected	59	None	replace
388	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  PROPERTY_ACTION_PROPERTY)  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  PROPERTY_ACTION_PROPERTY)  {  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  PROPERTY_ACTION_PROPERTY)  {	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n,    STANDARD_OBJECT_CONSTRUCTORS)    {    	non-compiled	[CE]  ')'  expected	59	None	replace
389	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  PROPERTY_ASSIGNMENT_IN_PROPERTY)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  PROPERTY_ASSIGNMENT_IN_PROPERTY)  {  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  PROPERTY_ASSIGNMENT_IN_PROPERTY)  {	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n,    STANDARD_OBJECT_CONSTRUCTORS)    {    	non-compiled	[CE]  ')'  expected	59	None	replace
390	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(input,  n.getFirstChild())  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(input,  n.getFirstChild())  {  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(input,  n.getFirstChild())  {	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n,    input.getParent())    {    	non-compiled	[CE]  ')'  expected	20	None	replace
391	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType(),  Integer.DEFAULT_VALUE)  {  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType(),  Integer.DEFAULT_VALUE)  {  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType(),  Integer.DEFAULT_VALUE)  {	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getType(),    Integer.MAX_VALUE)    {    	non-compiled	[CE]  ')'  expected	7	None	replace
392	[BUG]  [BUGGY]  final  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(),  n;  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  final  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(),  n;  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	final  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(),  n;	  final    Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>();    	non-compiled	[CE]  ')'  expected	29	None	replace
393	[BUG]  [BUGGY]  final  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.type);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  final  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.type);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	final  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.type);	  final    Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n);    	non-compiled	[CE]  ')'  expected	64	None	replace
394	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(n,  isLowerPrecedencePredicate);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(n,  isLowerPrecedencePredicate);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(n,  isLowerPrecedencePredicate);	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    DefaultPredicate    <    Node>(n);    	non-compiled	[CE]  ')'  expected	15	None	replace
395	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(n.type);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(n.type);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(n.type);	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    DefaultPredicate    <    Node>(n);    	non-compiled	[CE]  ')'  expected	15	None	replace
396	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(n  +  1);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(n  +  1);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(n  +  1);	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    DefaultPredicate    <    Node>(n);    	non-compiled	[CE]  ')'  expected	15	None	replace
397	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild(),  n.getNext(),  n.getParent());  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild(),  n.getNext(),  n.getParent());  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild(),  n.getNext(),  n.getParent());	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getFirstChild(),    n.getNext());    	non-compiled	[CE]  ')'  expected	48	None	replace
398	[BUG]  [BUGGY]  static  final  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  static  final  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	static  final  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n);	  static    final    Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>()    {    	non-compiled	[CE]  ')'  expected	28	None	replace
399	[BUG]  [BUGGY]  static  final  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild());  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  static  final  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild());  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	static  final  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild());	  static    final    Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>()    {    	non-compiled	[CE]  ')'  expected	28	None	replace
400	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  &&  n.getFirstChild()!=  null);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  &&  n.getFirstChild()!=  null);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.NAME  &&  n.getFirstChild()!=  null);	  Preconditions.checkArgument(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  ')'  expected	75	None	replace
401	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  &&  n.getFirstChild()  ==  null);  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  &&  n.getFirstChild()  ==  null);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.NAME  &&  n.getFirstChild()  ==  null);	  Preconditions.checkArgument(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  ')'  expected	75	None	replace
402	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(n.getFirstChild(),  n);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(n.getFirstChild(),  n);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  Node>(n.getFirstChild(),  n);	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    DefaultPredicate    <    Node>(n.getFirstChild());    	non-compiled	[CE]  ')'  expected	66	None	replace
403	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.VAR);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.VAR);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.VAR);	  Preconditions.checkArgument(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  ')'  expected	73	None	replace
404	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.CALL);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.CALL);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.CALL);	  Preconditions.checkArgument(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  ')'  expected	73	None	replace
405	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild().getLastChild().getType())  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild().getLastChild().getType())  {  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getFirstChild().getLastChild().getType())  {	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getFirstChild().getType())    {    	non-compiled	[CE]  ')'  expected	3	None	replace
406	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  input.type);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  input.type);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  input.type);	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n,    input);    	non-compiled	[CE]  ')'  expected	40	None	replace
407	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.removeFirstChild())  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.removeFirstChild())  {  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.removeFirstChild())  {	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getLastChild())    {    	non-compiled	[CE]  ')'  expected	62	None	replace
408	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  STANDARD_OBJECT_CONSTRUCTORS_PREDICATE)  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  STANDARD_OBJECT_CONSTRUCTORS_PREDICATE)  {  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  STANDARD_OBJECT_CONSTRUCTORS_PREDICATE)  {	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n,    INVALID_REGULAR_EXPRESSION_PREDICATE)    {    	non-compiled	[CE]  ')'  expected	21	None	replace
409	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  PROPERTY_ASSIGNMENT_IN_PROPERTY);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  PROPERTY_ASSIGNMENT_IN_PROPERTY);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n,  PROPERTY_ASSIGNMENT_IN_PROPERTY);	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n,    isLowerPrecedencePredicate);    	non-compiled	[CE]  ')'  expected	69	None	replace
410	[BUG]  [BUGGY]  Node  input  =  n.removeFirstChild();  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Node  input  =  n.removeFirstChild();  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Node  input  =  n.removeFirstChild();	  Node    input    =    n.getFirstChild();    	non-compiled	[CE]  ')'  expected	32	None	replace
411	[BUG]  [BUGGY]  Node  input  =  n.getFirstChild().getNext();  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Node  input  =  n.getFirstChild().getNext();  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Node  input  =  n.getFirstChild().getNext();	  Node    input    =    n.getFirstChild();    	non-compiled	[CE]  ')'  expected	32	None	replace
412	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getString(),  n.getParent());  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getString(),  n.getParent());  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getString(),  n.getParent());	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getString());    	non-compiled	[CE]  ')'  expected	24	None	replace
413	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getChildCount()  *  2);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getChildCount()  *  2);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getChildCount()  *  2);	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getChildCount());    	non-compiled	[CE]  ')'  expected	77	None	replace
414	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  NODE>(n);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  NODE>(n);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  DefaultPredicate  <  NODE>(n);	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    DefaultPredicate    <    NODE>()    {    	non-compiled	[CE]  ')'  expected	16	None	replace
415	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getString(),  STANDARD_OBJECT_CONSTRUCTORS)  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getString(),  STANDARD_OBJECT_CONSTRUCTORS)  {  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getString(),  STANDARD_OBJECT_CONSTRUCTORS)  {	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getString())    {    	non-compiled	[CE]  ')'  expected	2	None	replace
416	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getString(),  PROPERTY)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getString(),  PROPERTY)  {  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getString(),  PROPERTY)  {	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getString())    {    	non-compiled	[CE]  ')'  expected	2	None	replace
417	[BUG]  [BUGGY]  final  Node  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType())  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  final  Node  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType())  {  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	final  Node  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType())  {	  final    Node    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>()    {    	non-compiled	[CE]  ')'  expected	50	None	replace
418	[BUG]  [BUGGY]  final  Node  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  final  Node  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	final  Node  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n);	  final    Node    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>()    {    	non-compiled	[CE]  ')'  expected	50	None	replace
419	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType(),  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType(),  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType(),  DONT_TRAVERSE_FUNCTIONS_PREDICATE);	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getType(),    INVALID_REGULAR_EXPRESSION_FLAGS);    	non-compiled	[CE]  ')'  expected	60	None	replace
420	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType(),  INVALID_REGULAR_EXPRESSION_FLAGS,  PROPERTY);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType(),  INVALID_REGULAR_EXPRESSION_FLAGS,  PROPERTY);  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getType(),  INVALID_REGULAR_EXPRESSION_FLAGS,  PROPERTY);	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getType(),    INVALID_REGULAR_EXPRESSION_FLAGS);    	non-compiled	[CE]  ')'  expected	60	None	replace
421	[BUG]  [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getParent(),  n.getType());  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isPropertyAssignmentInExpression(Node  n)  {      [BUGGY]  Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getParent(),  n.getType());  [BUGGY]      new  Predicate<Node>()  {  @Override  public  boolean  apply(Node  input)  {  return  (input.getType()  ==  Token.GETPROP  &&  input.getParent().getType()  ==  Token.ASSIGN);  }  };  return  NodeUtil.has(n,  isPropertyAssignmentInExpressionPredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isPropertyAssignmentInExpression  [RETURN_TYPE]  boolean  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	645	646	1	replace	Predicate  <  Node>  isPropertyAssignmentInExpressionPredicate  =  new  Predicate  <  Node>(n.getParent(),  n.getType());	  Predicate    <    Node>    isPropertyAssignmentInExpressionPredicate    =    new    Predicate    <    Node>(n.getFirstChild(),    n.getType());    	non-compiled	[CE]  ')'  expected	47	None	replace
