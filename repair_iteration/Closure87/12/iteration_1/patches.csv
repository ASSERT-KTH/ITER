bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  precedence)  {  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {    [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  precedence)  {  [BUGGY]    @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  precedence)  {	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n.getType())    {    	non-compiled	[CE]  ')'  expected	6	None	replace
2	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getFirstChild())  {  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {    [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getFirstChild())  {  [BUGGY]    @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getFirstChild())  {	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n.getType())    {    	non-compiled	[CE]  ')'  expected	6	None	replace
3	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getParent())  {  [CE]  ')'  expected  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {    [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getParent())  {  [BUGGY]    @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getParent())  {	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n.getType())    {    	non-compiled	[CE]  ')'  expected	6	None	replace
4	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  n.getType())  {  [CE]  ')'  expected  [FE]                        AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {    [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  n.getType())  {  [BUGGY]    @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  n.getType())  {	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n.getType())    {    	non-compiled	[CE]  ')'  expected	6	None	replace
5	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getString())  {  [CE]  ')'  expected  [FE]                          AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {    [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getString())  {  [BUGGY]    @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getString())  {	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n.getType())    {    	non-compiled	[CE]  ')'  expected	6	None	replace
6	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getNext())  {  [CE]  ')'  expected  [FE]                            AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {    [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getNext())  {  [BUGGY]    @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getNext())  {	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n.getType())    {    	non-compiled	[CE]  ')'  expected	6	None	replace
7	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  precedence)  {  [CE]  ')'  expected  [FE]                              AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {    [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  precedence)  {  [BUGGY]    @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  precedence)  {	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n.getType())    {    	non-compiled	[CE]  ')'  expected	6	None	replace
8	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(previousence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {    [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(previousence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [BUGGY]    @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(previousence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(previousence);    	non-compiled	[CE]  ')'  expected	3	None	replace
9	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.previousence);  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {    [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.previousence);  [BUGGY]    @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.previousence);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(previousence);    	non-compiled	[CE]  ')'  expected	3	None	replace
10	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getFirstChild(),  precedence);  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {    [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getFirstChild(),  precedence);  [BUGGY]    @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getFirstChild(),  precedence);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(previousence);    	non-compiled	[CE]  ')'  expected	3	None	replace
11	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {    [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]    @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n.getType(),    precedence);    	non-compiled	[CE]  ')'  expected	2	None	replace
12	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {    [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [BUGGY]    @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n.getType(),    precedence);    	non-compiled	[CE]  ')'  expected	2	None	replace
13	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  precedence  +  1);  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {    [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  precedence  +  1);  [BUGGY]    @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  precedence  +  1);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n.getType(),    precedence);    	non-compiled	[CE]  ')'  expected	2	None	replace
14	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  precedence,  STANDARD_OBJECT_CONSTRUCTORS);  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {    [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  precedence,  STANDARD_OBJECT_CONSTRUCTORS);  [BUGGY]    @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  precedence,  STANDARD_OBJECT_CONSTRUCTORS);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n.getType(),    precedence);    	non-compiled	[CE]  ')'  expected	2	None	replace
15	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  precedence,  complementOperator);  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {    [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  precedence,  complementOperator);  [BUGGY]    @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  precedence,  complementOperator);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n.getType(),    precedence);    	non-compiled	[CE]  ')'  expected	2	None	replace
16	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  precedence,  OR_PRECEDENCE);  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {    [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  precedence,  OR_PRECEDENCE);  [BUGGY]    @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  precedence,  OR_PRECEDENCE);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n.getType(),    precedence);    	non-compiled	[CE]  ')'  expected	2	None	replace
17	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getLastChild());  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {    [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getLastChild());  [BUGGY]    @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getLastChild());	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n.getFirstChild());    	non-compiled	[CE]  ')'  expected	9	None	replace
18	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getNext());  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {    [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getNext());  [BUGGY]    @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getNext());	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n.getFirstChild());    	non-compiled	[CE]  ')'  expected	9	None	replace
19	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getChildCount());  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {    [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getChildCount());  [BUGGY]    @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getChildCount());	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n.getFirstChild());    	non-compiled	[CE]  ')'  expected	9	None	replace
20	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  n.getFirstChild());  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {    [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  n.getFirstChild());  [BUGGY]    @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  n.getFirstChild());	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n.getFirstChild());    	non-compiled	[CE]  ')'  expected	9	None	replace
21	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.cloneTree());  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {    [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.cloneTree());  [BUGGY]    @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.cloneTree());	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n);    	non-compiled	[CE]  ')'  expected	10	None	replace
22	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(1);  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {    [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(1);  [BUGGY]    @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(1);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>();    	non-compiled	[CE]  ')'  expected	1	None	replace
23	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {    [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]    @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n,    precedence);    	non-compiled	[CE]  ')'  expected	5	None	replace
24	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {    [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]    @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  INVALID_REGULAR_EXPRESSION_FLAGS);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n,    precedence);    	non-compiled	[CE]  ')'  expected	5	None	replace
25	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  AND_PRECEDENCE);  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {    [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  AND_PRECEDENCE);  [BUGGY]    @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  AND_PRECEDENCE);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n,    precedence);    	non-compiled	[CE]  ')'  expected	5	None	replace
26	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  OR_PRECEDENCE);  [CE]  ')'  expected  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {    [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  OR_PRECEDENCE);  [BUGGY]    @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  OR_PRECEDENCE);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n,    precedence);    	non-compiled	[CE]  ')'  expected	5	None	replace
27	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CE]  ')'  expected  [FE]                        AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {    [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [BUGGY]    @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n,    precedence);    	non-compiled	[CE]  ')'  expected	5	None	replace
28	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CE]  ')'  expected  [FE]                          AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {    [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [BUGGY]    @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n,    precedence);    	non-compiled	[CE]  ')'  expected	5	None	replace
29	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  precedence  +  1);  [CE]  ')'  expected  [FE]                            AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {    [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  precedence  +  1);  [BUGGY]    @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  precedence  +  1);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n,    precedence);    	non-compiled	[CE]  ')'  expected	5	None	replace
30	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(2)  {  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {    [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(2)  {  [BUGGY]    @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(2)  {	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(1)    {    	non-compiled	[CE]  ')'  expected	8	None	replace
31	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(0)  {  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {    [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(0)  {  [BUGGY]    @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(0)  {	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(1)    {    	non-compiled	[CE]  ')'  expected	8	None	replace
32	[BUG]  [BUGGY]  Predicate  input  =  n.getFirstChild();  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {    [BUGGY]  Predicate  input  =  n.getFirstChild();  [BUGGY]    @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  input  =  n.getFirstChild();	      	non-compiled	[CE]  ')'  expected	7	None	replace
33	[BUG]  [BUGGY]  Node  input  =  n.getFirstChild();  [CE]  ')'  expected  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {    [BUGGY]  Node  input  =  n.getFirstChild();  [BUGGY]    @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Node  input  =  n.getFirstChild();	      	non-compiled	[CE]  ')'  expected	7	None	replace
34	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  [CE]  ')'  expected  [FE]                        AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]    @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);	      	non-compiled	[CE]  ')'  expected	7	None	replace
35	[BUG]  [BUGGY]  Predicates.checkState(n.getType()  ==  Token.EXPR_RESULT);  [CE]  ')'  expected  [FE]                          AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {    [BUGGY]  Predicates.checkState(n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]    @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicates.checkState(n.getType()  ==  Token.EXPR_RESULT);	      	non-compiled	[CE]  ')'  expected	7	None	replace
36	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  [CE]  ')'  expected  [FE]                            AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]    @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME);	      	non-compiled	[CE]  ')'  expected	7	None	replace
37	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.REGEXP);  [CE]  ')'  expected  [FE]                              AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.REGEXP);  [BUGGY]    @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Preconditions.checkState(n.getType()  ==  Token.REGEXP);	      	non-compiled	[CE]  ')'  expected	7	None	replace
38	[BUG]  [BUGGY]  Predicates.checkState(n.getType()  ==  Token.REGEXP);  [CE]  ')'  expected  [FE]                                AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {    [BUGGY]  Predicates.checkState(n.getType()  ==  Token.REGEXP);  [BUGGY]    @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicates.checkState(n.getType()  ==  Token.REGEXP);	      	non-compiled	[CE]  ')'  expected	7	None	replace
39	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getParent());  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {    [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getParent());  [BUGGY]    @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getParent());	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n.getType());    	non-compiled	[CE]  ')'  expected	4	None	replace
40	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  n.getType());  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {    [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  n.getType());  [BUGGY]    @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  n.getType());	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n.getType());    	non-compiled	[CE]  ')'  expected	4	None	replace
41	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getString());  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {    [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getString());  [BUGGY]    @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getString());	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n.getType());    	non-compiled	[CE]  ')'  expected	4	None	replace
42	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(0);  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {    [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(0);  [BUGGY]    @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(0);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>();    	non-compiled	[CE]  ')'  expected	1	None	replace
43	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(),  precedence;  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {    [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(),  precedence;  [BUGGY]    @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(),  precedence;	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>();    	non-compiled	[CE]  ')'  expected	1	None	replace
44	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n  +  precedence);  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {    [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n  +  precedence);  [BUGGY]    @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n  +  precedence);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n);    	non-compiled	[CE]  ')'  expected	10	None	replace
45	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.length);  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {    [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.length);  [BUGGY]    @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.length);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n);    	non-compiled	[CE]  ')'  expected	10	None	replace
46	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(previousence,  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {    [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(previousence,  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]    @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(previousence,  INVALID_REGULAR_EXPRESSION_FLAGS);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(previousence);    	non-compiled	[CE]  ')'  expected	3	None	replace
47	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(previousence  +  1);  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {    [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(previousence  +  1);  [BUGGY]    @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(previousence  +  1);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(previousence);    	non-compiled	[CE]  ')'  expected	3	None	replace
48	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(input);  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {    [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(input);  [BUGGY]    @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(input);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(previousence);    	non-compiled	[CE]  ')'  expected	3	None	replace
49	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  precedence  -  1);  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {    [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  precedence  -  1);  [BUGGY]    @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  precedence  -  1);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n,    precedence);    	non-compiled	[CE]  ')'  expected	5	None	replace
50	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS);  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {    [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS);  [BUGGY]    @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n,    precedence);    	non-compiled	[CE]  ')'  expected	5	None	replace
51	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT);  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {    [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]    @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT);	      	non-compiled	[CE]  ')'  expected	7	None	replace
52	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [CE]  ')'  expected  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {    [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [BUGGY]    @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.NAME);	      	non-compiled	[CE]  ')'  expected	7	None	replace
53	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(4)  {  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {    [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(4)  {  [BUGGY]    @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(4)  {	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(1)    {    	non-compiled	[CE]  ')'  expected	8	None	replace
54	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(3)  {  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {    [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(3)  {  [BUGGY]    @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(3)  {	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(1)    {    	non-compiled	[CE]  ')'  expected	8	None	replace
55	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  input.getType(),  precedence);  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {    [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  input.getType(),  precedence);  [BUGGY]    @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  input.getType(),  precedence);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n.getType(),    precedence);    	non-compiled	[CE]  ')'  expected	2	None	replace
56	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  n.getType(),  precedence);  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {    [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  n.getType(),  precedence);  [BUGGY]    @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  n.getType(),  precedence);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n.getType(),    precedence);    	non-compiled	[CE]  ')'  expected	2	None	replace
57	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.removeFirstChild());  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {    [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.removeFirstChild());  [BUGGY]    @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.removeFirstChild());	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n.getFirstChild());    	non-compiled	[CE]  ')'  expected	9	None	replace
58	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.REGEXP);  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {    [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.REGEXP);  [BUGGY]    @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.REGEXP);	      	non-compiled	[CE]  ')'  expected	7	None	replace
59	[BUG]  [BUGGY]  Preconditions.checkState(isLowerPrecedenceInExpression(n));  [CE]  ')'  expected  [FE]                      AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {    [BUGGY]  Preconditions.checkState(isLowerPrecedenceInExpression(n));  [BUGGY]    @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Preconditions.checkState(isLowerPrecedenceInExpression(n));	      	non-compiled	[CE]  ')'  expected	7	None	replace
60	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(previousence,  precedence);  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {    [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(previousence,  precedence);  [BUGGY]    @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(previousence,  precedence);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(previousence);    	non-compiled	[CE]  ')'  expected	3	None	replace
61	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(8)  {  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {    [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(8)  {  [BUGGY]    @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(8)  {	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(1)    {    	non-compiled	[CE]  ')'  expected	8	None	replace
62	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(4);  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {    [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(4);  [BUGGY]    @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(4);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(1)    {    	non-compiled	[CE]  ')'  expected	8	None	replace
63	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getChildCount())  {  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {    [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getChildCount())  {  [BUGGY]    @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getChildCount())  {	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n.getType())    {    	non-compiled	[CE]  ')'  expected	6	None	replace
64	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.type);  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {    [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.type);  [BUGGY]    @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.type);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n);    	non-compiled	[CE]  ')'  expected	10	None	replace
