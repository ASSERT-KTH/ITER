projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(){
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>();
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n.getType(),precedence);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(previousence);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n.getType());
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n,precedence);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n.getType()){
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(1){
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n.getFirstChild());
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n.getType(),precedence){
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n.getFirstChild()){
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n.getParent()){
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n,n.getType()){
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n.getString()){
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n.getNext()){
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n,precedence){
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(previousence,DONT_TRAVERSE_FUNCTIONS_PREDICATE);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n.previousence);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n.getFirstChild(),precedence);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n.getType(),precedence,INVALID_REGULAR_EXPRESSION_FLAGS);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n.getType(),precedence,DONT_TRAVERSE_FUNCTIONS_PREDICATE);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n.getType(),precedence+1);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n.getType(),precedence,STANDARD_OBJECT_CONSTRUCTORS);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n.getType(),precedence,complementOperator);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n.getType(),precedence,OR_PRECEDENCE);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n.getLastChild());
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n.getNext());
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n.getChildCount());
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n,n.getFirstChild());
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n.cloneTree());
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(1);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n,precedence,INVALID_REGULAR_EXPRESSION_FLAGS);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n,INVALID_REGULAR_EXPRESSION_FLAGS);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n,AND_PRECEDENCE);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n,OR_PRECEDENCE);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n,precedence,DONT_TRAVERSE_FUNCTIONS_PREDICATE);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n,DONT_TRAVERSE_FUNCTIONS_PREDICATE);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n,precedence+1);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(2){
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(0){
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicateinput=n.getFirstChild();
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Nodeinput=n.getFirstChild();
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Preconditions.checkState(n.getType()==Token.EXPR_RESULT);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicates.checkState(n.getType()==Token.EXPR_RESULT);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Preconditions.checkState(n.getType()==Token.NAME);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Preconditions.checkState(n.getType()==Token.REGEXP);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicates.checkState(n.getType()==Token.REGEXP);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n.getParent());
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n,n.getType());
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n.getString());
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(0);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(),precedence;
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n+precedence);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n.length);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(previousence,INVALID_REGULAR_EXPRESSION_FLAGS);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(previousence+1);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(input);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n,precedence-1);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n,precedence,STANDARD_OBJECT_CONSTRUCTORS);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Preconditions.checkArgument(n.getType()==Token.EXPR_RESULT);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Preconditions.checkArgument(n.getType()==Token.NAME);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(4){
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(3){
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n,input.getType(),precedence);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n,n.getType(),precedence);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n.removeFirstChild());
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Preconditions.checkArgument(n.getType()==Token.REGEXP);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Preconditions.checkState(isLowerPrecedenceInExpression(n));
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(previousence,precedence);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(8){
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(4);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n.getChildCount()){
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n.type);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n,INVALID_REGULAR_EXPRESSION_FLAGS,precedence);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n,precedence,INVALID_REGULAR_EXPRESSION_FLAGS,STANDARD_OBJECT_CONSTRUCTORS);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n,precedence,INVALID_REGULAR_EXPRESSION_FLAGS,DONT_TRAVERSE_FUNCTIONS_PREDICATE);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n,precedence,AND_PRECEDENCE);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n,precedence,INVALID_REGULAR_EXPRESSION_FLAGS,REGEXP_FLAGS_RE);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n,precedence,INVALID_REGULAR_EXPRESSION_FLAGS,OR_PRECEDENCE);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicates.checkState(n.getType()!=Token.EXPR_RESULT);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicates.checkState(n.getType()==Token.EXPR_RESULT,precedence);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicates.checkState(n.getType()==Token.EXPR_RESULT||precedence==INVALID_REGULAR_EXPRESSION_FLAGS);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicates.checkState(n.getType()==Token.EXPR_RESULT||n.getType()==Token.EXPR_RESULT);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicates.checkState(n.getType()==Token.EXPR_RESULT,isLowerPrecedenceInExpression);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicates.checkState(n.getType()==Token.EXPR_RESULT,n.getString());
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Preconditions.checkArgument(n.getType()==Token.REGEXP,precedence);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Preconditions.checkArgument(n.getType()!=Token.REGEXP);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Preconditions.checkArgument(n.getType()==Token.REGEXP||n.getType()==Token.NAME);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Preconditions.checkArgument(n.getType()==Token.REGEXP||n.getType()==Token.FUNCTION);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Preconditions.checkArgument(n.getType()==Token.REGEXP||n.getType()==Token.GETPROP);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n.getNext(),precedence){
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n.getLastChild()){
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n.getLineno()){
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Preconditions.checkState(n.getType()!=Token.EXPR_RESULT);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Preconditions.checkState(n.getType()==Token.EXPR_RESULT,precedence);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Preconditions.checkState(n.getType()==Token.EXPR_RESULT||n.getType()==Token.EXPR_RESULT);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Preconditions.checkState(n.getType()==Token.EXPR_RESULT||n.getType()==Token.FUNCTION);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Preconditions.checkState(n.getType()==Token.EXPR_RESULT||precedence==Integer.MAX_VALUE);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Preconditions.checkState(n.getType()==Token.EXPR_RESULT||n.getType()==Token.NAME);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n.getString(),precedence);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n.getString()+1);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n.getLineno());
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n.getInput());
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n.getLastChild(),precedence);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n,n.getLastChild());
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630finalPredicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n.getLastChild());
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n.length,precedence);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n.length+1);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n.length-1);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n.length-precedence);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n.length-1,n.length);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n.length-1,precedence);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Preconditions.checkState(n.getType()==Token.REGEXP,precedence);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Preconditions.checkState(n.getType()!=Token.REGEXP);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Preconditions.checkState(n.getType()==Token.REGEXP||n.getType()==Token.NAME);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Preconditions.checkState(n.getType()==Token.REGEXP||n.getType()==Token.EXPR_RESULT);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Preconditions.checkState(n.getType()==Token.REGEXP||n.getType()==Token.FUNCTION);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Preconditions.checkState(n.getType()==Token.REGEXP_FLAGS);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n.getType()+precedence);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n+1);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n.length+precedence);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n.intValue()+precedence);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n+1,precedence);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(2);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n.getType(),precedence,STANDARD_OBJECT_CONSTRUCTORS,INVALID_REGULAR_EXPRESSION_FLAGS);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n.getType(),precedence,STANDARD_OBJECT_CONSTRUCTORS,DONT_TRAVERSE_FUNCTIONS_PREDICATE);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n.getType(),precedence,AND_PRECEDENCE);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n.getType(),precedence,STANDARD_OBJECT_CONSTRUCTORS,complementOperator);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n,precedence,STANDARD_OBJECT_CONSTRUCTORS,INVALID_REGULAR_EXPRESSION_FLAGS);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n,precedence,STANDARD_OBJECT_CONSTRUCTORS,DONT_TRAVERSE_FUNCTIONS_PREDICATE);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n,precedence,STANDARD_OBJECT_CONSTRUCTORS,complementOperator);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n,precedence,PROPERTY);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n.getType(),AND_PRECEDENCE,complementOperator);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n.getType(),AND_PRECEDENCE,precedence);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n.getType(),OR_PRECEDENCE,precedence);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n.getType(),precedence,AND_PRECEDENCE,complementOperator);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Nodeinput=n.getLastChild();
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Nodeinput=n.getNext();
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Nodeinput=n.getAncestor(1);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Nodeinput=n.getAncestor(2);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Nodeinput=n.getParent();
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Nodeinput=n.getInput();
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n,input.getType(),precedence,INVALID_REGULAR_EXPRESSION_FLAGS);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(input,input.getType(),precedence,INVALID_REGULAR_EXPRESSION_FLAGS);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(input,n.getType(),precedence);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(input.getType(),precedence,INVALID_REGULAR_EXPRESSION_FLAGS);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n,input.getType(),INVALID_REGULAR_EXPRESSION_FLAGS);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(input,input.getType(),precedence);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n,input.getType(),precedence,complementOperator);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(previousence,INVALID_REGULAR_EXPRESSION_FLAGS,STANDARD_OBJECT_CONSTRUCTORS);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(previousence,INVALID_REGULAR_EXPRESSION_FLAGS,DONT_TRAVERSE_FUNCTIONS_PREDICATE);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(previousence,INVALID_REGULAR_EXPRESSION_FLAGS,n.getType());
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(previousence,INVALID_REGULAR_EXPRESSION_FLAGS,REGEXP_FLAGS_RE);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(previousence,INVALID_REGULAR_EXPRESSION_FLAGS,n);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n.previousence,precedence);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n.previousence+1);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n.previousence,INVALID_REGULAR_EXPRESSION_FLAGS);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n.previousence-1);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(input,precedence);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n.getFirstChild(),input);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n.getString(),precedence){
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n.getInput()){
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n.getString()+1){
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n.removeFirstChild(),precedence);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n.removeLastChild());
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n.getParent(),precedence){
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n,n.getParent()){
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n,DONT_TRAVERSE_FUNCTIONS_PREDICATE,precedence);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630finalPredicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n,DONT_TRAVERSE_FUNCTIONS_PREDICATE);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n.getType(),DONT_TRAVERSE_FUNCTIONS_PREDICATE);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n.getFirstChild(),DONT_TRAVERSE_FUNCTIONS_PREDICATE);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Preconditions.checkState(n.getType()==Token.NAME,precedence);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Preconditions.checkState(n.getType()==Token.NAME,INVALID_REGULAR_EXPRESSION_FLAGS);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Preconditions.checkState(n.getType()==Token.NAME,isLowerPrecedenceInExpression);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Preconditions.checkState(n.getType()!=Token.NAME);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Preconditions.checkState(n.getType()==Token.NAME||n.getType()==Token.EXPR_RESULT);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Preconditions.checkState(n.getType()==Token.NAME||n.getType()==Token.FUNCTION);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n,precedence,INVALID_REGULAR_EXPRESSION_FLAGS-1);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n,precedence-1,INVALID_REGULAR_EXPRESSION_FLAGS);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n,precedence.getType());
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n,input.getType());
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n.getFirstChild(),n.getType());
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n,n.getChildCount());
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n,n.getFirstChild(),precedence);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n,n.getNext());
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630finalPredicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(previousence,INVALID_REGULAR_EXPRESSION_FLAGS);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(previousence,AND_PRECEDENCE);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(previousence,n.getType());
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(5){
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(6){
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n,OR_PRECEDENCE,precedence);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n,OR_PRECEDENCE,complementOperator);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n,OR_PRECEDENCE,INVALID_REGULAR_EXPRESSION_FLAGS);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n,OR_PRECEDENCE,DONT_TRAVERSE_FUNCTIONS_PREDICATE);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n.getParent(),precedence);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n,n.getParent());
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Preconditions.checkArgument(n.getType()!=Token.EXPR_RESULT);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Preconditions.checkArgument(n.getType()==Token.EXPR_RESULT,precedence);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Preconditions.checkArgument(n.getType()==Token.EXPR_RESULT||n.getType()==Token.EXPR_RESULT);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Preconditions.checkArgument(n.getType()==Token.EXPR_RESULT||n.getType()==Token.FUNCTION);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Preconditions.checkArgument(n.getType()==Token.EXPR_RESULT,n.getString());
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Preconditions.checkArgument(n.getType()==Token.NAME,precedence);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Preconditions.checkArgument(n.getType()!=Token.NAME);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Preconditions.checkArgument(n.getType()==Token.NAME,n.getString());
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Preconditions.checkArgument(n.getType()==Token.NAME,isLowerPrecedenceInExpression);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Preconditions.checkArgument(n.getType()==Token.NAME,n.getFirstChild());
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(8);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n,precedence+2);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n,precedence+3);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n,precedence*1);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n,precedence+4);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n,n.getType(),precedence,INVALID_REGULAR_EXPRESSION_FLAGS);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n,n.getType(),INVALID_REGULAR_EXPRESSION_FLAGS);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n,n.getType(),precedence,STANDARD_OBJECT_CONSTRUCTORS);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n,n.getType(),precedence,DONT_TRAVERSE_FUNCTIONS_PREDICATE);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n,n.getType(),precedence,complementOperator);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n,precedence.getType(),INVALID_REGULAR_EXPRESSION_FLAGS);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(previousence+2);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(previousence,precedence+1);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n.getFirstChild(),precedence){
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n.getType(),precedence,INVALID_REGULAR_EXPRESSION_FLAGS,STANDARD_OBJECT_CONSTRUCTORS);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n.getType(),precedence,INVALID_REGULAR_EXPRESSION_FLAGS,DONT_TRAVERSE_FUNCTIONS_PREDICATE);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n.getType(),precedence,INVALID_REGULAR_EXPRESSION_FLAGS,OR_PRECEDENCE);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n.getType(),precedence,INVALID_REGULAR_EXPRESSION_FLAGS,REGEXP_FLAGS_RE);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n.getChildCount()-1);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n.getChildCount()+1);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n.getChildCount()-2);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n.cloneTree(),precedence);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n,n.cloneTree());
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n.getType(),OR_PRECEDENCE,complementOperator);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n.getType(),precedence,OR_PRECEDENCE,INVALID_REGULAR_EXPRESSION_FLAGS);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n.getType(),precedence,OR_PRECEDENCE,DONT_TRAVERSE_FUNCTIONS_PREDICATE);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n.getType(),precedence,OR_PRECEDENCE,STANDARD_OBJECT_CONSTRUCTORS);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(7){
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(),n,precedence;
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(),precedence,INVALID_REGULAR_EXPRESSION_FLAGS;
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(),INVALID_REGULAR_EXPRESSION_FLAGS;
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(),precedence,DONT_TRAVERSE_FUNCTIONS_PREDICATE;
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(),precedence+1;
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(),DONT_TRAVERSE_FUNCTIONS_PREDICATE;
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(),AND_PRECEDENCE;
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n,precedence,DONT_TRAVERSE_FUNCTIONS_PREDICATE,complementOperator);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n,precedence,DONT_TRAVERSE_FUNCTIONS_PREDICATE,INVALID_REGULAR_EXPRESSION_FLAGS);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n,precedence,DONT_TRAVERSE_FUNCTIONS_PREDICATE,STANDARD_OBJECT_CONSTRUCTORS);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n,precedence,OR_PRECEDENCE);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n.getType(),precedence+2);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n.getType(),precedence+3);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n.getType(),precedence*precedence+1);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n.getType(),precedence+4);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630finalPredicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n.getType(),precedence+1);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicateinput=n.getLastChild();
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicateinput=n.getNext();
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicateinput=n.getAncestor(1);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicateinput=n.getInitialValue();
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicateinput=n.getInput();
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicateinput=n.getParent();
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n.getType(),precedence,DONT_TRAVERSE_FUNCTIONS_PREDICATE,complementOperator);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n.getType(),precedence,DONT_TRAVERSE_FUNCTIONS_PREDICATE,INVALID_REGULAR_EXPRESSION_FLAGS);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n.getType(),precedence,DONT_TRAVERSE_FUNCTIONS_PREDICATE,STANDARD_OBJECT_CONSTRUCTORS);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicates.checkState(n.getType()==Token.REGEXP,precedence);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicates.checkState(n.getType()!=Token.REGEXP);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicates.checkState(n.getType()==Token.REGEXP&&isLowerPrecedenceInExpression(n,precedence));
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicates.checkState(n.getType()==Token.REGEXP,n.getString());
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicates.checkState(n.getType()==Token.REGEXP,n.getFirstChild());
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicates.checkState(n.getType()==Token.REGEXP||n.getType()==Token.NAME);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n.getChildCount()-1){
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n.getChildCount()+1){
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n.type,precedence);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n,n.type);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Preconditions.checkState(isLowerPrecedenceInExpression(n,precedence));
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Preconditions.checkState(isLowerPrecedenceInExpression(n)||isLowerPrecedenceInExpression(n));
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Preconditions.checkState(!isLowerPrecedenceInExpression(n));
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Preconditions.checkState(isLowerPrecedenceInExpression(n),precedence);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Preconditions.checkState(isLowerPrecedenceInExpression(n)&&isLowerPrecedenceInExpression(n));
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Preconditions.checkArgument(isLowerPrecedenceInExpression(n));
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630finalPredicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(previousence,DONT_TRAVERSE_FUNCTIONS_PREDICATE);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(previousence,DONT_TRAVERSE_FUNCTIONS_PREDICATE,INVALID_REGULAR_EXPRESSION_FLAGS);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(previousence,DONT_TRAVERSE_FUNCTIONS_PREDICATE,complementOperator);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(previousence,DONT_TRAVERSE_FUNCTIONS_PREDICATE,n.getType());
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(previousence,DONT_TRAVERSE_FUNCTIONS_PREDICATE,STANDARD_OBJECT_CONSTRUCTORS);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n.getNext(),precedence);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n,n.getType(),precedence){
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n,n.getFirstChild()){
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n,input.getType()){
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n,precedence.getType()){
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n,n.getString()){
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n,INVALID_REGULAR_EXPRESSION_FLAGS,DONT_TRAVERSE_FUNCTIONS_PREDICATE);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n,INVALID_REGULAR_EXPRESSION_FLAGS,STANDARD_OBJECT_CONSTRUCTORS);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n,AND_PRECEDENCE,precedence);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n,AND_PRECEDENCE,complementOperator);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n,STANDARD_OBJECT_EXPRESSION_FLAGS);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n.getFirstChild(),precedence,INVALID_REGULAR_EXPRESSION_FLAGS);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n.getFirstChild(),precedence,DONT_TRAVERSE_FUNCTIONS_PREDICATE);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n.getFirstChild(),precedence,complementOperator);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n.getFirstChild(),precedence,STANDARD_OBJECT_CONSTRUCTORS);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n.getFirstChild(),precedence+1);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n.getType(),precedence,INVALID_REGULAR_EXPRESSION_FLAGS){
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n.getType(),precedence,DONT_TRAVERSE_FUNCTIONS_PREDICATE){
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n.getType(),precedence,STANDARD_OBJECT_CONSTRUCTORS){
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n.getType(),precedence,false){
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n.getType(),precedence,predicence){
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(3);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n,precedence,INVALID_REGULAR_EXPRESSION_FLAGS){
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n,INVALID_REGULAR_EXPRESSION_FLAGS){
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n,OR_PRECEDENCE){
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n,precedence,DONT_TRAVERSE_FUNCTIONS_PREDICATE){
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n,AND_PRECEDENCE){
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n,precedence,STANDARD_OBJECT_CONSTRUCTORS){
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n,precedence,STANDARD_OBJECT_EXPRESSION_FLAGS){
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Preconditions.checkState(n.getType()==Token.NAME,STANDARD_OBJECT_CONSTRUCTORS);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Preconditions.checkState(n.getType()==Token.NAME||n.getType()==Token.GETPROP);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Preconditions.checkState(n.getType()==Token.NAME,INVALID_REGULAR_EXPRESSION);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(previousence,STANDARD_OBJECT_CONSTRUCTORS);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Preconditions.checkArgument(n.getType()==Token.NAME||n.getType()==Token.EXPR_RESULT);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Preconditions.checkArgument(n.getType()==Token.NAME||n.getType()==Token.GETPROP);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Preconditions.checkArgument(n.getType()!=Token.NAME,precedence);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n,n.getType()-precedence);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n,n.getType()-1);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Nodeinput=n.removeFirstChild();
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(previousence,n);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(previousence,DONT_TRAVERSE_FUNCTIONS_PREDICATE,precedence);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n.getType(),AND_PRECEDENCE,OR_PRECEDENCE);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Preconditions.checkArgument(n.getType()==Token.EXPR_RESULT||precedence==INVALID_REGULAR_EXPRESSION_FLAGS);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Preconditions.checkArgument(n.getType()==Token.EXPR_RESULT||precedence==0);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Preconditions.checkArgument(n.getType()==Token.EXPR_RESULT||precedence==Integer.MIN_VALUE);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(7);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n.getType(),precedence+1){
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n,AND_PRECEDENCE,DONT_TRAVERSE_FUNCTIONS_PREDICATE);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n,precedence-1,DONT_TRAVERSE_FUNCTIONS_PREDICATE);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n,precedence,STANDARD_OBJECT_EXPRESSION_FLAGS);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n+INVALID_REGULAR_EXPRESSION_FLAGS);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n.previousence+precedence);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n+precedence,INVALID_REGULAR_EXPRESSION_FLAGS);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n,STANDARD_OBJECT_CONSTRUCTORS);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n,REGEXP_FLAGS_RE);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n,INVALID_REGULAR_EXPRESSION_FLAGS+precedence);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(),n;
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(previousence){
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n.getNext()+precedence);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(previousence+1,precedence);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(input,input.getType(),precedence+1);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n,input.getType(),precedence+1);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n,precedence+1,INVALID_REGULAR_EXPRESSION_FLAGS);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n,n.getChildCount()){
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicates.checkState(n.getType()==Token.REGEXP_FLAGS);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicates.checkState(n.getType()==Token.GETPROP);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicates.checkState(n.getType()==Token.NAME);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n.getType(),precedence+1,STANDARD_OBJECT_CONSTRUCTORS);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n.getType(),precedence,PROPERTY);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n.getFirstChild(),n.getLastChild());
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n.getType(),precedence,STANDARD_OBJECT_EXPRESSION_FLAGS);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n.getType(),precedence,INVALID_REGULAR_EXPRESSION_PREDICATE);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n,AND_PRECEDENCE,INVALID_REGULAR_EXPRESSION_FLAGS);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n,precedence,NOT_SAFE_TO_FOLD_WITHOUT_ARGS);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n.getType(),precedence,INVALID_REGULAR_EXPRESSION_FLAGS,AND_PRECEDENCE);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n.getType(),precedence,NOT_SAFE_TO_FOLD_WITHOUT_ARGS);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n,n.getType(),precedence+1);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n,precedence.getType(),n);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n,n.getType(),precedence,OR_PRECEDENCE);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicates.checkState(n.getType()==Token.EXPR_RESULT,INVALID_REGULAR_EXPRESSION_FLAGS);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicates.checkState(n.getType()==Token.EXPR_RESULT||precedence==Integer.MAX_VALUE);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicates.checkState(n.getType()==Token.EXPR_RESULT||precedence==Integer.MIN_VALUE);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n,precedence.cloneTree());
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Preconditions.checkArgument(n.getType()==Token.REGEXP_FLAGS);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Preconditions.checkArgument(n.getType()==Token.GETPROP);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n,n.getType()-1){
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n,AND_PRECEDENCE,STANDARD_OBJECT_CONSTRUCTORS);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n,precedence-1,STANDARD_OBJECT_CONSTRUCTORS);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n,precedence-1+1);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n,precedence-2);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n,precedence*precedence-1);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n.getType(),precedence+1,INVALID_REGULAR_EXPRESSION_FLAGS);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicateinput=n.getPreviousChild();
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicateinput=n.getAncestor(2);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n,precedence-1){
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n,precedence+1){
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(input,AND_PRECEDENCE);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n.getFirstChild(),AND_PRECEDENCE);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Preconditions.checkState(isLowerPrecedenceInExpression(n)||precedence==INVALID_REGULAR_EXPRESSION_FLAGS);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Preconditions.checkState(isLowerPrecedenceInExpression(n)||precedence==DONT_TRAVERSE_FUNCTIONS_PREDICATE);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Preconditions.checkState(n.getType()==Token.REGEXP||n.getType()==Token.GETPROP);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Preconditions.checkState(n.getType()==Token.GETPROP);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n.type&DONT_TRAVERSE_FUNCTIONS_PREDICATE);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n.type-1);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Preconditions.checkState(n.getType()==Token.EXPR_RESULT,INVALID_REGULAR_EXPRESSION_FLAGS);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Preconditions.checkState(n.getType()==Token.EXPR_RESULT||precedence==INVALID_REGULAR_EXPRESSION_FLAGS);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Preconditions.checkState(n.getType()==Token.EXPR_RESULT||precedence==Integer.MIN_VALUE);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Preconditions.checkState(n.getType()==Token.EXPR_RESULT||precedence==0);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n.getType(),INVALID_REGULAR_EXPRESSION_FLAGS,precedence);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n.getType(),input);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicates.<Node>isLowerPrecedencePredicate=newPredicate<Node>(n.getFirstChild());
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n.getString(),predicate){
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(previousence+n);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Preconditions.checkArgument(n.getType()==Token.REGEXP||n.getType()==Token.EXPR_RESULT);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n.length+1,precedence);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicates.checkState(n.getType()==Token.EXPR_RESULT||precedence==0);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n.getType(),precedence,STANDARD_OBJECT_CONSTRUCTORS,ImmutableSet);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(),precedence,INVALID_REGULAR_EXPRESSION_FLAGS);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n,input.getFirstChild(),precedence);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n,input.getType(),precedence,STANDARD_OBJECT_CONSTRUCTORS);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(input,n.getType(),precedence,INVALID_REGULAR_EXPRESSION_FLAGS);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n.clone(),precedence);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Preconditions.checkArgument(n.getType()==Token.NAME||n.getFirstChild()==n);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Preconditions.checkArgument(n.getType()==Token.NAME||precedence==0);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Preconditions.checkArgument(n.getType()==Token.NAME||n.getType()==Token.VAR);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(previousence,INVALID_REGULAR_EXPRESSION_FLAGS,precedence);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Preconditions.checkState(isLowerPrecedenceInExpression(n),precedence<DONT_TRAVERSE_FUNCTIONS_PREDICATE);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(8)==
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n.getType(),precedence,STANDARD_OBJECT_CONSTRUCTORS_PREDICATE);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n.input,precedence);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n.cloneTree(),n.type);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n,precedence,STANDARD_OBJECT_CONSTRUCTORS_PREDICATE);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n,precedence,STANDARD_OBJECT_CONSTRUCTORS_EXPRESSION_FLAGS);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n,n.removeFirstChild());
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n,or_PRECEDENCE,precedence);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicateinput=n.removeFirstChild();
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n.getType(),AND_PRECEDENCE);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(5);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n,n.getNext()){
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n,n.getString());
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicates.<Node>isLowerPrecedencePredicate=newPredicate<Node>(n,precedence);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n,n.getInput());
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n,precedence*precedence);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicates.checkState(n.getType()==Token.REGEXP||n.getType()==Token.FUNCTION);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicates.checkState(n.getType()==Token.REGEXP||n.getType()==Token.BLOCK);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Preconditions.checkArgument(n.getType()==Token.EXPR_RESULT||precedence==Integer.MAX_VALUE);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Preconditions.checkArgument(n.getType()==Token.EXPR_RESULT||n.getType()==Token.VAR);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n.getType(),precedence,OR_PRECEDENCE,complementOperator);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n,precedence,INVALID_REGULAR_EXPRESSION_FLAGS,n);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Nodeinput=n.cloneTree();
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n.getType(),precedence,INVALID_REGULAR_EXPRESSION_FLAGS,DEFAULT_OBJECT_CONSTRUCTORS);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n.getType(),precedence,INVALID_REGULAR_EXPRESSION_FLAGS,NOT_SAFE_TO_FOLD_WITHOUT_ARGS);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n,n.getLastChild()){
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Predicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(n.initialization);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630finalPredicate<Node>isLowerPrecedencePredicate=newPredicate<Node>(previousence,precedence);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Preconditions.checkState(n.getType()==Token.NAME||n.getFirstChild()==n);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Preconditions.checkState(n.getType()==Token.NAME||precedence==Integer.MAX_VALUE);
projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java630Preconditions.checkState(n.getType()==Token.NAME||precedence==0);
