bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  INVALID_REGULAR_EXPRESSION_FLAGS,  precedence);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  INVALID_REGULAR_EXPRESSION_FLAGS,  precedence);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  INVALID_REGULAR_EXPRESSION_FLAGS,  precedence);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n,    precedence,    INVALID_REGULAR_EXPRESSION_FLAGS);    	non-compiled	[CE]  ')'  expected	23	None	replace
2	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS,  STANDARD_OBJECT_CONSTRUCTORS);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS,  STANDARD_OBJECT_CONSTRUCTORS);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS,  STANDARD_OBJECT_CONSTRUCTORS);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n,    precedence,    INVALID_REGULAR_EXPRESSION_FLAGS);    	non-compiled	[CE]  ')'  expected	23	None	replace
3	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n,    precedence,    INVALID_REGULAR_EXPRESSION_FLAGS);    	non-compiled	[CE]  ')'  expected	23	None	replace
4	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  precedence,  AND_PRECEDENCE);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  precedence,  AND_PRECEDENCE);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  precedence,  AND_PRECEDENCE);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n,    precedence,    INVALID_REGULAR_EXPRESSION_FLAGS);    	non-compiled	[CE]  ')'  expected	23	None	replace
5	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS,  REGEXP_FLAGS_RE);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS,  REGEXP_FLAGS_RE);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS,  REGEXP_FLAGS_RE);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n,    precedence,    INVALID_REGULAR_EXPRESSION_FLAGS);    	non-compiled	[CE]  ')'  expected	23	None	replace
6	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS,  OR_PRECEDENCE);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS,  OR_PRECEDENCE);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS,  OR_PRECEDENCE);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n,    precedence,    INVALID_REGULAR_EXPRESSION_FLAGS);    	non-compiled	[CE]  ')'  expected	23	None	replace
7	[BUG]  [BUGGY]  Predicates.checkState(n.getType()!=  Token.EXPR_RESULT);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicates.checkState(n.getType()!=  Token.EXPR_RESULT);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicates.checkState(n.getType()!=  Token.EXPR_RESULT);	  Predicates.checkState(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  ')'  expected	35	None	replace
8	[BUG]  [BUGGY]  Predicates.checkState(n.getType()  ==  Token.EXPR_RESULT,  precedence);  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicates.checkState(n.getType()  ==  Token.EXPR_RESULT,  precedence);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicates.checkState(n.getType()  ==  Token.EXPR_RESULT,  precedence);	  Predicates.checkState(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  ')'  expected	35	None	replace
9	[BUG]  [BUGGY]  Predicates.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  precedence  ==  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicates.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  precedence  ==  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicates.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  precedence  ==  INVALID_REGULAR_EXPRESSION_FLAGS);	  Predicates.checkState(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  ')'  expected	35	None	replace
10	[BUG]  [BUGGY]  Predicates.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.EXPR_RESULT);  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicates.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicates.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.EXPR_RESULT);	  Predicates.checkState(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  ')'  expected	35	None	replace
11	[BUG]  [BUGGY]  Predicates.checkState(n.getType()  ==  Token.EXPR_RESULT,  isLowerPrecedenceInExpression);  [CE]  ')'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicates.checkState(n.getType()  ==  Token.EXPR_RESULT,  isLowerPrecedenceInExpression);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicates.checkState(n.getType()  ==  Token.EXPR_RESULT,  isLowerPrecedenceInExpression);	  Predicates.checkState(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  ')'  expected	35	None	replace
12	[BUG]  [BUGGY]  Predicates.checkState(n.getType()  ==  Token.EXPR_RESULT,  n.getString());  [CE]  ')'  expected  [FE]                                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicates.checkState(n.getType()  ==  Token.EXPR_RESULT,  n.getString());  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicates.checkState(n.getType()  ==  Token.EXPR_RESULT,  n.getString());	  Predicates.checkState(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  ')'  expected	35	None	replace
13	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.REGEXP,  precedence);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.REGEXP,  precedence);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.REGEXP,  precedence);	  Preconditions.checkArgument(n.getType()    ==    Token.REGEXP);    	non-compiled	[CE]  ')'  expected	58	None	replace
14	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.REGEXP);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.REGEXP);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Preconditions.checkArgument(n.getType()!=  Token.REGEXP);	  Preconditions.checkArgument(n.getType()    ==    Token.REGEXP);    	non-compiled	[CE]  ')'  expected	58	None	replace
15	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.REGEXP  ||  n.getType()  ==  Token.NAME);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.REGEXP  ||  n.getType()  ==  Token.NAME);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.REGEXP  ||  n.getType()  ==  Token.NAME);	  Preconditions.checkArgument(n.getType()    ==    Token.REGEXP);    	non-compiled	[CE]  ')'  expected	58	None	replace
16	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.REGEXP  ||  n.getType()  ==  Token.FUNCTION);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.REGEXP  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.REGEXP  ||  n.getType()  ==  Token.FUNCTION);	  Preconditions.checkArgument(n.getType()    ==    Token.REGEXP);    	non-compiled	[CE]  ')'  expected	58	None	replace
17	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.REGEXP  ||  n.getType()  ==  Token.GETPROP);  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.REGEXP  ||  n.getType()  ==  Token.GETPROP);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.REGEXP  ||  n.getType()  ==  Token.GETPROP);	  Preconditions.checkArgument(n.getType()    ==    Token.REGEXP);    	non-compiled	[CE]  ')'  expected	58	None	replace
18	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getNext(),  precedence)  {  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getNext(),  precedence)  {  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getNext(),  precedence)  {	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n.getNext())    {    	non-compiled	[CE]  ')'  expected	6	None	replace
19	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getLastChild())  {  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getLastChild())  {  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getLastChild())  {	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n.getNext())    {    	non-compiled	[CE]  ')'  expected	6	None	replace
20	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getLineno())  {  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getLineno())  {  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getLineno())  {	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n.getNext())    {    	non-compiled	[CE]  ')'  expected	6	None	replace
21	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.EXPR_RESULT);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.EXPR_RESULT);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Preconditions.checkState(n.getType()!=  Token.EXPR_RESULT);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  ')'  expected	34	None	replace
22	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  precedence);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  precedence);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  precedence);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  ')'  expected	34	None	replace
23	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.EXPR_RESULT);  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  ')'  expected	34	None	replace
24	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.FUNCTION);  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  ')'  expected	34	None	replace
25	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  precedence  ==  Integer.MAX_VALUE);  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  precedence  ==  Integer.MAX_VALUE);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  precedence  ==  Integer.MAX_VALUE);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  ')'  expected	34	None	replace
26	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.NAME);  [CE]  ')'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.NAME);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.NAME);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  ')'  expected	34	None	replace
27	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getString(),  precedence);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getString(),  precedence);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getString(),  precedence);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n.getString());    	non-compiled	[CE]  ')'  expected	41	None	replace
28	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getString()  +  1);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getString()  +  1);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getString()  +  1);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n.getString());    	non-compiled	[CE]  ')'  expected	41	None	replace
29	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getLineno());  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getLineno());  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getLineno());	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n.getString());    	non-compiled	[CE]  ')'  expected	41	None	replace
30	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getInput());  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getInput());  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getInput());	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n.getString());    	non-compiled	[CE]  ')'  expected	41	None	replace
31	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getLastChild(),  precedence);  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getLastChild(),  precedence);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getLastChild(),  precedence);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n.getLastChild());    	non-compiled	[CE]  ')'  expected	17	None	replace
32	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  n.getLastChild());  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  n.getLastChild());  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  n.getLastChild());	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n.getLastChild());    	non-compiled	[CE]  ')'  expected	17	None	replace
33	[BUG]  [BUGGY]  final  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getLastChild());  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  final  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getLastChild());  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	final  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getLastChild());	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n.getLastChild());    	non-compiled	[CE]  ')'  expected	17	None	replace
34	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.length,  precedence);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.length,  precedence);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.length,  precedence);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n.length);    	non-compiled	[CE]  ')'  expected	45	None	replace
35	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.length  +  1);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.length  +  1);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.length  +  1);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n.length);    	non-compiled	[CE]  ')'  expected	45	None	replace
36	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.length  -  1);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.length  -  1);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.length  -  1);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n.length);    	non-compiled	[CE]  ')'  expected	45	None	replace
37	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.length  -  precedence);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.length  -  precedence);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.length  -  precedence);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n.length);    	non-compiled	[CE]  ')'  expected	45	None	replace
38	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.length  -  1,  n.length);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.length  -  1,  n.length);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.length  -  1,  n.length);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n.length);    	non-compiled	[CE]  ')'  expected	45	None	replace
39	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.length  -  1,  precedence);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.length  -  1,  precedence);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.length  -  1,  precedence);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n.length);    	non-compiled	[CE]  ')'  expected	45	None	replace
40	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.REGEXP,  precedence);  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.REGEXP,  precedence);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Preconditions.checkState(n.getType()  ==  Token.REGEXP,  precedence);	  Preconditions.checkState(n.getType()    ==    Token.REGEXP);    	non-compiled	[CE]  ')'  expected	37	None	replace
41	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.REGEXP);  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.REGEXP);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Preconditions.checkState(n.getType()!=  Token.REGEXP);	  Preconditions.checkState(n.getType()    ==    Token.REGEXP);    	non-compiled	[CE]  ')'  expected	37	None	replace
42	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.REGEXP  ||  n.getType()  ==  Token.NAME);  [CE]  ')'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.REGEXP  ||  n.getType()  ==  Token.NAME);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Preconditions.checkState(n.getType()  ==  Token.REGEXP  ||  n.getType()  ==  Token.NAME);	  Preconditions.checkState(n.getType()    ==    Token.REGEXP);    	non-compiled	[CE]  ')'  expected	37	None	replace
43	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.REGEXP  ||  n.getType()  ==  Token.EXPR_RESULT);  [CE]  ')'  expected  [FE]                                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.REGEXP  ||  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Preconditions.checkState(n.getType()  ==  Token.REGEXP  ||  n.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(n.getType()    ==    Token.REGEXP);    	non-compiled	[CE]  ')'  expected	37	None	replace
44	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.REGEXP  ||  n.getType()  ==  Token.FUNCTION);  [CE]  ')'  expected  [FE]                                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.REGEXP  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Preconditions.checkState(n.getType()  ==  Token.REGEXP  ||  n.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n.getType()    ==    Token.REGEXP);    	non-compiled	[CE]  ')'  expected	37	None	replace
45	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.REGEXP_FLAGS);  [CE]  ')'  expected  [FE]                                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.REGEXP_FLAGS);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Preconditions.checkState(n.getType()  ==  Token.REGEXP_FLAGS);	  Preconditions.checkState(n.getType()    ==    Token.REGEXP);    	non-compiled	[CE]  ')'  expected	37	None	replace
46	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType()  +  precedence);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType()  +  precedence);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType()  +  precedence);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n    +    precedence);    	non-compiled	[CE]  ')'  expected	44	None	replace
47	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n  +  1);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n  +  1);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n  +  1);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n    +    precedence);    	non-compiled	[CE]  ')'  expected	44	None	replace
48	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.length  +  precedence);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.length  +  precedence);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.length  +  precedence);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n    +    precedence);    	non-compiled	[CE]  ')'  expected	44	None	replace
49	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.intValue()  +  precedence);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.intValue()  +  precedence);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.intValue()  +  precedence);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n    +    precedence);    	non-compiled	[CE]  ')'  expected	44	None	replace
50	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n  +  1,  precedence);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n  +  1,  precedence);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n  +  1,  precedence);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n    +    precedence);    	non-compiled	[CE]  ')'  expected	44	None	replace
51	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(2);  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(2);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(2);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(2)    {    	non-compiled	[CE]  ')'  expected	30	None	replace
52	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  precedence,  STANDARD_OBJECT_CONSTRUCTORS,  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  precedence,  STANDARD_OBJECT_CONSTRUCTORS,  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  precedence,  STANDARD_OBJECT_CONSTRUCTORS,  INVALID_REGULAR_EXPRESSION_FLAGS);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n.getType(),    precedence,    STANDARD_OBJECT_CONSTRUCTORS);    	non-compiled	[CE]  ')'  expected	14	None	replace
53	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  precedence,  STANDARD_OBJECT_CONSTRUCTORS,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  precedence,  STANDARD_OBJECT_CONSTRUCTORS,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  precedence,  STANDARD_OBJECT_CONSTRUCTORS,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n.getType(),    precedence,    STANDARD_OBJECT_CONSTRUCTORS);    	non-compiled	[CE]  ')'  expected	14	None	replace
54	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  precedence,  AND_PRECEDENCE);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  precedence,  AND_PRECEDENCE);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  precedence,  AND_PRECEDENCE);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n.getType(),    precedence,    STANDARD_OBJECT_CONSTRUCTORS);    	non-compiled	[CE]  ')'  expected	14	None	replace
55	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  precedence,  STANDARD_OBJECT_CONSTRUCTORS,  complementOperator);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  precedence,  STANDARD_OBJECT_CONSTRUCTORS,  complementOperator);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  precedence,  STANDARD_OBJECT_CONSTRUCTORS,  complementOperator);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n.getType(),    precedence,    STANDARD_OBJECT_CONSTRUCTORS);    	non-compiled	[CE]  ')'  expected	14	None	replace
56	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS,  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS,  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS,  INVALID_REGULAR_EXPRESSION_FLAGS);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n,    precedence,    STANDARD_OBJECT_CONSTRUCTORS);    	non-compiled	[CE]  ')'  expected	50	None	replace
57	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n,    precedence,    STANDARD_OBJECT_CONSTRUCTORS);    	non-compiled	[CE]  ')'  expected	50	None	replace
58	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS,  complementOperator);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS,  complementOperator);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS,  complementOperator);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n,    precedence,    STANDARD_OBJECT_CONSTRUCTORS);    	non-compiled	[CE]  ')'  expected	50	None	replace
59	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  precedence,  PROPERTY);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  precedence,  PROPERTY);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  precedence,  PROPERTY);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n,    precedence,    STANDARD_OBJECT_CONSTRUCTORS);    	non-compiled	[CE]  ')'  expected	50	None	replace
60	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  AND_PRECEDENCE,  complementOperator);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  AND_PRECEDENCE,  complementOperator);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  AND_PRECEDENCE,  complementOperator);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n.getType(),    precedence,    complementOperator);    	non-compiled	[CE]  ')'  expected	15	None	replace
61	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  AND_PRECEDENCE,  precedence);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  AND_PRECEDENCE,  precedence);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  AND_PRECEDENCE,  precedence);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n.getType(),    precedence,    complementOperator);    	non-compiled	[CE]  ')'  expected	15	None	replace
62	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  OR_PRECEDENCE,  precedence);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  OR_PRECEDENCE,  precedence);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  OR_PRECEDENCE,  precedence);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n.getType(),    precedence,    complementOperator);    	non-compiled	[CE]  ')'  expected	15	None	replace
63	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  precedence,  AND_PRECEDENCE,  complementOperator);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  precedence,  AND_PRECEDENCE,  complementOperator);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  precedence,  AND_PRECEDENCE,  complementOperator);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n.getType(),    precedence,    complementOperator);    	non-compiled	[CE]  ')'  expected	15	None	replace
64	[BUG]  [BUGGY]  Node  input  =  n.getLastChild();  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Node  input  =  n.getLastChild();  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Node  input  =  n.getLastChild();	  Node    input    =    n.getFirstChild();    	non-compiled	[CE]  ')'  expected	33	None	replace
65	[BUG]  [BUGGY]  Node  input  =  n.getNext();  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Node  input  =  n.getNext();  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Node  input  =  n.getNext();	  Node    input    =    n.getFirstChild();    	non-compiled	[CE]  ')'  expected	33	None	replace
66	[BUG]  [BUGGY]  Node  input  =  n.getAncestor(1);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Node  input  =  n.getAncestor(1);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Node  input  =  n.getAncestor(1);	  Node    input    =    n.getFirstChild();    	non-compiled	[CE]  ')'  expected	33	None	replace
67	[BUG]  [BUGGY]  Node  input  =  n.getAncestor(2);  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Node  input  =  n.getAncestor(2);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Node  input  =  n.getAncestor(2);	  Node    input    =    n.getFirstChild();    	non-compiled	[CE]  ')'  expected	33	None	replace
68	[BUG]  [BUGGY]  Node  input  =  n.getParent();  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Node  input  =  n.getParent();  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Node  input  =  n.getParent();	  Node    input    =    n.getFirstChild();    	non-compiled	[CE]  ')'  expected	33	None	replace
69	[BUG]  [BUGGY]  Node  input  =  n.getInput();  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Node  input  =  n.getInput();  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Node  input  =  n.getInput();	  Node    input    =    n.getFirstChild();    	non-compiled	[CE]  ')'  expected	33	None	replace
70	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  input.getType(),  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  input.getType(),  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  input.getType(),  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n,    input.getType(),    precedence);    	non-compiled	[CE]  ')'  expected	55	None	replace
71	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(input,  input.getType(),  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(input,  input.getType(),  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(input,  input.getType(),  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n,    input.getType(),    precedence);    	non-compiled	[CE]  ')'  expected	55	None	replace
72	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(input,  n.getType(),  precedence);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(input,  n.getType(),  precedence);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(input,  n.getType(),  precedence);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n,    input.getType(),    precedence);    	non-compiled	[CE]  ')'  expected	55	None	replace
73	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(input.getType(),  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(input.getType(),  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(input.getType(),  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n,    input.getType(),    precedence);    	non-compiled	[CE]  ')'  expected	55	None	replace
74	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  input.getType(),  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  input.getType(),  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  input.getType(),  INVALID_REGULAR_EXPRESSION_FLAGS);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n,    input.getType(),    precedence);    	non-compiled	[CE]  ')'  expected	55	None	replace
75	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(input,  input.getType(),  precedence);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(input,  input.getType(),  precedence);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(input,  input.getType(),  precedence);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n,    input.getType(),    precedence);    	non-compiled	[CE]  ')'  expected	55	None	replace
76	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  input.getType(),  precedence,  complementOperator);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  input.getType(),  precedence,  complementOperator);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  input.getType(),  precedence,  complementOperator);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n,    input.getType(),    precedence);    	non-compiled	[CE]  ')'  expected	55	None	replace
77	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(previousence,  INVALID_REGULAR_EXPRESSION_FLAGS,  STANDARD_OBJECT_CONSTRUCTORS);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(previousence,  INVALID_REGULAR_EXPRESSION_FLAGS,  STANDARD_OBJECT_CONSTRUCTORS);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(previousence,  INVALID_REGULAR_EXPRESSION_FLAGS,  STANDARD_OBJECT_CONSTRUCTORS);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(previousence,    INVALID_REGULAR_EXPRESSION_FLAGS);    	non-compiled	[CE]  ')'  expected	46	None	replace
78	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(previousence,  INVALID_REGULAR_EXPRESSION_FLAGS,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(previousence,  INVALID_REGULAR_EXPRESSION_FLAGS,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(previousence,  INVALID_REGULAR_EXPRESSION_FLAGS,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(previousence,    INVALID_REGULAR_EXPRESSION_FLAGS);    	non-compiled	[CE]  ')'  expected	46	None	replace
79	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(previousence,  INVALID_REGULAR_EXPRESSION_FLAGS,  n.getType());  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(previousence,  INVALID_REGULAR_EXPRESSION_FLAGS,  n.getType());  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(previousence,  INVALID_REGULAR_EXPRESSION_FLAGS,  n.getType());	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(previousence,    INVALID_REGULAR_EXPRESSION_FLAGS);    	non-compiled	[CE]  ')'  expected	46	None	replace
80	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(previousence,  INVALID_REGULAR_EXPRESSION_FLAGS,  REGEXP_FLAGS_RE);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(previousence,  INVALID_REGULAR_EXPRESSION_FLAGS,  REGEXP_FLAGS_RE);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(previousence,  INVALID_REGULAR_EXPRESSION_FLAGS,  REGEXP_FLAGS_RE);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(previousence,    INVALID_REGULAR_EXPRESSION_FLAGS);    	non-compiled	[CE]  ')'  expected	46	None	replace
81	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(previousence,  INVALID_REGULAR_EXPRESSION_FLAGS,  n);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(previousence,  INVALID_REGULAR_EXPRESSION_FLAGS,  n);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(previousence,  INVALID_REGULAR_EXPRESSION_FLAGS,  n);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(previousence,    INVALID_REGULAR_EXPRESSION_FLAGS);    	non-compiled	[CE]  ')'  expected	46	None	replace
82	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.previousence,  precedence);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.previousence,  precedence);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.previousence,  precedence);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n.previousence);    	non-compiled	[CE]  ')'  expected	9	None	replace
83	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.previousence  +  1);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.previousence  +  1);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.previousence  +  1);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n.previousence);    	non-compiled	[CE]  ')'  expected	9	None	replace
84	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.previousence,  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.previousence,  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.previousence,  INVALID_REGULAR_EXPRESSION_FLAGS);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n.previousence);    	non-compiled	[CE]  ')'  expected	9	None	replace
85	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.previousence  -  1);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.previousence  -  1);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.previousence  -  1);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n.previousence);    	non-compiled	[CE]  ')'  expected	9	None	replace
86	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(input,  precedence);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(input,  precedence);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(input,  precedence);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(input);    	non-compiled	[CE]  ')'  expected	48	None	replace
87	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getFirstChild(),  input);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getFirstChild(),  input);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getFirstChild(),  input);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(input);    	non-compiled	[CE]  ')'  expected	48	None	replace
88	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getString(),  precedence)  {  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getString(),  precedence)  {  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getString(),  precedence)  {	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n.getString())    {    	non-compiled	[CE]  ')'  expected	5	None	replace
89	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getInput())  {  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getInput())  {  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getInput())  {	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n.getString())    {    	non-compiled	[CE]  ')'  expected	5	None	replace
90	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getString()  +  1)  {  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getString()  +  1)  {  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getString()  +  1)  {	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n.getString())    {    	non-compiled	[CE]  ')'  expected	5	None	replace
91	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.removeFirstChild(),  precedence);  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.removeFirstChild(),  precedence);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.removeFirstChild(),  precedence);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n.removeFirstChild());    	non-compiled	[CE]  ')'  expected	57	None	replace
92	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.removeLastChild());  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.removeLastChild());  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.removeLastChild());	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n.removeFirstChild());    	non-compiled	[CE]  ')'  expected	57	None	replace
93	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getParent(),  precedence)  {  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getParent(),  precedence)  {  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getParent(),  precedence)  {	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n.getParent())    {    	non-compiled	[CE]  ')'  expected	3	None	replace
94	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  n.getParent())  {  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  n.getParent())  {  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  n.getParent())  {	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n.getParent())    {    	non-compiled	[CE]  ')'  expected	3	None	replace
95	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE,  precedence);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE,  precedence);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE,  precedence);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	28	None	replace
96	[BUG]  [BUGGY]  final  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  final  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	final  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	28	None	replace
97	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  DONT_TRAVERSE_FUNCTIONS_PREDICATE);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	28	None	replace
98	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getFirstChild(),  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getFirstChild(),  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getFirstChild(),  DONT_TRAVERSE_FUNCTIONS_PREDICATE);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	28	None	replace
99	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  precedence);  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  precedence);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  precedence);	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  ')'  expected	36	None	replace
100	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  INVALID_REGULAR_EXPRESSION_FLAGS);	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  ')'  expected	36	None	replace
101	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  isLowerPrecedenceInExpression);  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  isLowerPrecedenceInExpression);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  isLowerPrecedenceInExpression);	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  ')'  expected	36	None	replace
102	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME);  [CE]  ')'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Preconditions.checkState(n.getType()!=  Token.NAME);	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  ')'  expected	36	None	replace
103	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.EXPR_RESULT);  [CE]  ')'  expected  [FE]                                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  ')'  expected	36	None	replace
104	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.FUNCTION);  [CE]  ')'  expected  [FE]                                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  ')'  expected	36	None	replace
105	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS  -  1);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS  -  1);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS  -  1);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n,    precedence    -    1);    	non-compiled	[CE]  ')'  expected	49	None	replace
106	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  precedence  -  1,  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  precedence  -  1,  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  precedence  -  1,  INVALID_REGULAR_EXPRESSION_FLAGS);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n,    precedence    -    1);    	non-compiled	[CE]  ')'  expected	49	None	replace
107	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  precedence.getType());  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  precedence.getType());  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  precedence.getType());	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n,    n.getType());    	non-compiled	[CE]  ')'  expected	40	None	replace
108	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  input.getType());  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  input.getType());  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  input.getType());	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n,    n.getType());    	non-compiled	[CE]  ')'  expected	40	None	replace
109	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getFirstChild(),  n.getType());  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getFirstChild(),  n.getType());  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getFirstChild(),  n.getType());	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n,    n.getType());    	non-compiled	[CE]  ')'  expected	40	None	replace
110	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  n.getChildCount());  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  n.getChildCount());  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  n.getChildCount());	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n,    n.getType());    	non-compiled	[CE]  ')'  expected	40	None	replace
111	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  n.getFirstChild(),  precedence);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  n.getFirstChild(),  precedence);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  n.getFirstChild(),  precedence);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n,    n.getFirstChild());    	non-compiled	[CE]  ')'  expected	20	None	replace
112	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  n.getNext());  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  n.getNext());  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  n.getNext());	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n,    n.getFirstChild());    	non-compiled	[CE]  ')'  expected	20	None	replace
113	[BUG]  [BUGGY]  final  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(previousence,  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  final  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(previousence,  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	final  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(previousence,  INVALID_REGULAR_EXPRESSION_FLAGS);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(previousence,    precedence);    	non-compiled	[CE]  ')'  expected	60	None	replace
114	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(previousence,  AND_PRECEDENCE);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(previousence,  AND_PRECEDENCE);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(previousence,  AND_PRECEDENCE);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(previousence,    precedence);    	non-compiled	[CE]  ')'  expected	60	None	replace
115	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(previousence,  n.getType());  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(previousence,  n.getType());  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(previousence,  n.getType());	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(previousence,    precedence);    	non-compiled	[CE]  ')'  expected	60	None	replace
116	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(5)  {  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(5)  {  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(5)  {	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(4)    {    	non-compiled	[CE]  ')'  expected	53	None	replace
117	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(6)  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(6)  {  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(6)  {	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(4)    {    	non-compiled	[CE]  ')'  expected	53	None	replace
118	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  OR_PRECEDENCE,  precedence);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  OR_PRECEDENCE,  precedence);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  OR_PRECEDENCE,  precedence);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n,    OR_PRECEDENCE);    	non-compiled	[CE]  ')'  expected	26	None	replace
119	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  OR_PRECEDENCE,  complementOperator);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  OR_PRECEDENCE,  complementOperator);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  OR_PRECEDENCE,  complementOperator);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n,    OR_PRECEDENCE);    	non-compiled	[CE]  ')'  expected	26	None	replace
120	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  OR_PRECEDENCE,  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  OR_PRECEDENCE,  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  OR_PRECEDENCE,  INVALID_REGULAR_EXPRESSION_FLAGS);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n,    OR_PRECEDENCE);    	non-compiled	[CE]  ')'  expected	26	None	replace
121	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  OR_PRECEDENCE,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  OR_PRECEDENCE,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  OR_PRECEDENCE,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n,    OR_PRECEDENCE);    	non-compiled	[CE]  ')'  expected	26	None	replace
122	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getParent(),  precedence);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getParent(),  precedence);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getParent(),  precedence);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n.getParent());    	non-compiled	[CE]  ')'  expected	39	None	replace
123	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  n.getParent());  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  n.getParent());  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  n.getParent());	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n.getParent());    	non-compiled	[CE]  ')'  expected	39	None	replace
124	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.EXPR_RESULT);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.EXPR_RESULT);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Preconditions.checkArgument(n.getType()!=  Token.EXPR_RESULT);	  Preconditions.checkArgument(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  ')'  expected	51	None	replace
125	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT,  precedence);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT,  precedence);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT,  precedence);	  Preconditions.checkArgument(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  ')'  expected	51	None	replace
126	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.EXPR_RESULT);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkArgument(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  ')'  expected	51	None	replace
127	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.FUNCTION);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.FUNCTION);	  Preconditions.checkArgument(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  ')'  expected	51	None	replace
128	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT,  n.getString());  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT,  n.getString());  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT,  n.getString());	  Preconditions.checkArgument(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  ')'  expected	51	None	replace
129	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME,  precedence);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME,  precedence);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.NAME,  precedence);	  Preconditions.checkArgument(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  ')'  expected	52	None	replace
130	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.NAME);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.NAME);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Preconditions.checkArgument(n.getType()!=  Token.NAME);	  Preconditions.checkArgument(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  ')'  expected	52	None	replace
131	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME,  n.getString());  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME,  n.getString());  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.NAME,  n.getString());	  Preconditions.checkArgument(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  ')'  expected	52	None	replace
132	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME,  isLowerPrecedenceInExpression);  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME,  isLowerPrecedenceInExpression);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.NAME,  isLowerPrecedenceInExpression);	  Preconditions.checkArgument(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  ')'  expected	52	None	replace
133	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME,  n.getFirstChild());  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME,  n.getFirstChild());  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.NAME,  n.getFirstChild());	  Preconditions.checkArgument(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  ')'  expected	52	None	replace
134	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(8);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(8);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(8);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(4);    	non-compiled	[CE]  ')'  expected	62	None	replace
135	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  precedence  +  2);  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  precedence  +  2);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  precedence  +  2);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n,    precedence    +    1);    	non-compiled	[CE]  ')'  expected	29	None	replace
136	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  precedence  +  3);  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  precedence  +  3);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  precedence  +  3);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n,    precedence    +    1);    	non-compiled	[CE]  ')'  expected	29	None	replace
137	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  precedence  *  1);  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  precedence  *  1);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  precedence  *  1);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n,    precedence    +    1);    	non-compiled	[CE]  ')'  expected	29	None	replace
138	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  precedence  +  4);  [CE]  ')'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  precedence  +  4);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  precedence  +  4);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n,    precedence    +    1);    	non-compiled	[CE]  ')'  expected	29	None	replace
139	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  n.getType(),  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  n.getType(),  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  n.getType(),  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n,    n.getType(),    precedence);    	non-compiled	[CE]  ')'  expected	56	None	replace
140	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  n.getType(),  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  n.getType(),  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  n.getType(),  INVALID_REGULAR_EXPRESSION_FLAGS);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n,    n.getType(),    precedence);    	non-compiled	[CE]  ')'  expected	56	None	replace
141	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  n.getType(),  precedence,  STANDARD_OBJECT_CONSTRUCTORS);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  n.getType(),  precedence,  STANDARD_OBJECT_CONSTRUCTORS);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  n.getType(),  precedence,  STANDARD_OBJECT_CONSTRUCTORS);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n,    n.getType(),    precedence);    	non-compiled	[CE]  ')'  expected	56	None	replace
142	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  n.getType(),  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  n.getType(),  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  n.getType(),  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n,    n.getType(),    precedence);    	non-compiled	[CE]  ')'  expected	56	None	replace
143	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  n.getType(),  precedence,  complementOperator);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  n.getType(),  precedence,  complementOperator);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  n.getType(),  precedence,  complementOperator);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n,    n.getType(),    precedence);    	non-compiled	[CE]  ')'  expected	56	None	replace
144	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  precedence.getType(),  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  precedence.getType(),  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  precedence.getType(),  INVALID_REGULAR_EXPRESSION_FLAGS);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n,    n.getType(),    precedence);    	non-compiled	[CE]  ')'  expected	56	None	replace
145	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(previousence  +  2);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(previousence  +  2);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(previousence  +  2);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(previousence    +    1);    	non-compiled	[CE]  ')'  expected	47	None	replace
146	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(previousence,  precedence  +  1);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(previousence,  precedence  +  1);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(previousence,  precedence  +  1);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(previousence    +    1);    	non-compiled	[CE]  ')'  expected	47	None	replace
147	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getFirstChild(),  precedence)  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getFirstChild(),  precedence)  {  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getFirstChild(),  precedence)  {	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n.getFirstChild())    {    	non-compiled	[CE]  ')'  expected	2	None	replace
148	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS,  STANDARD_OBJECT_CONSTRUCTORS);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS,  STANDARD_OBJECT_CONSTRUCTORS);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS,  STANDARD_OBJECT_CONSTRUCTORS);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n.getType(),    precedence,    INVALID_REGULAR_EXPRESSION_FLAGS);    	non-compiled	[CE]  ')'  expected	11	None	replace
149	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n.getType(),    precedence,    INVALID_REGULAR_EXPRESSION_FLAGS);    	non-compiled	[CE]  ')'  expected	11	None	replace
150	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS,  OR_PRECEDENCE);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS,  OR_PRECEDENCE);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS,  OR_PRECEDENCE);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n.getType(),    precedence,    INVALID_REGULAR_EXPRESSION_FLAGS);    	non-compiled	[CE]  ')'  expected	11	None	replace
151	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS,  REGEXP_FLAGS_RE);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS,  REGEXP_FLAGS_RE);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS,  REGEXP_FLAGS_RE);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n.getType(),    precedence,    INVALID_REGULAR_EXPRESSION_FLAGS);    	non-compiled	[CE]  ')'  expected	11	None	replace
152	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getChildCount()  -  1);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getChildCount()  -  1);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getChildCount()  -  1);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n.getChildCount());    	non-compiled	[CE]  ')'  expected	19	None	replace
153	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getChildCount()  +  1);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getChildCount()  +  1);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getChildCount()  +  1);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n.getChildCount());    	non-compiled	[CE]  ')'  expected	19	None	replace
154	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getChildCount()  -  2);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getChildCount()  -  2);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getChildCount()  -  2);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n.getChildCount());    	non-compiled	[CE]  ')'  expected	19	None	replace
155	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.cloneTree(),  precedence);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.cloneTree(),  precedence);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.cloneTree(),  precedence);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n.cloneTree());    	non-compiled	[CE]  ')'  expected	21	None	replace
156	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  n.cloneTree());  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  n.cloneTree());  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  n.cloneTree());	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n.cloneTree());    	non-compiled	[CE]  ')'  expected	21	None	replace
157	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  OR_PRECEDENCE,  complementOperator);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  OR_PRECEDENCE,  complementOperator);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  OR_PRECEDENCE,  complementOperator);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n.getType(),    precedence,    OR_PRECEDENCE);    	non-compiled	[CE]  ')'  expected	16	None	replace
158	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  precedence,  OR_PRECEDENCE,  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  precedence,  OR_PRECEDENCE,  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  precedence,  OR_PRECEDENCE,  INVALID_REGULAR_EXPRESSION_FLAGS);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n.getType(),    precedence,    OR_PRECEDENCE);    	non-compiled	[CE]  ')'  expected	16	None	replace
159	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  precedence,  OR_PRECEDENCE,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  precedence,  OR_PRECEDENCE,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  precedence,  OR_PRECEDENCE,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n.getType(),    precedence,    OR_PRECEDENCE);    	non-compiled	[CE]  ')'  expected	16	None	replace
160	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  precedence,  OR_PRECEDENCE,  STANDARD_OBJECT_CONSTRUCTORS);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  precedence,  OR_PRECEDENCE,  STANDARD_OBJECT_CONSTRUCTORS);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  precedence,  OR_PRECEDENCE,  STANDARD_OBJECT_CONSTRUCTORS);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n.getType(),    precedence,    OR_PRECEDENCE);    	non-compiled	[CE]  ')'  expected	16	None	replace
161	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(7)  {  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(7)  {  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(7)  {	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(8)    {    	non-compiled	[CE]  ')'  expected	61	None	replace
162	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(),  n,  precedence;  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(),  n,  precedence;  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(),  n,  precedence;	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(),    precedence;    	non-compiled	[CE]  ')'  expected	43	None	replace
163	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(),  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS;  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(),  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS;  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(),  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS;	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(),    precedence;    	non-compiled	[CE]  ')'  expected	43	None	replace
164	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(),  INVALID_REGULAR_EXPRESSION_FLAGS;  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(),  INVALID_REGULAR_EXPRESSION_FLAGS;  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(),  INVALID_REGULAR_EXPRESSION_FLAGS;	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(),    precedence;    	non-compiled	[CE]  ')'  expected	43	None	replace
165	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(),  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE;  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(),  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE;  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(),  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE;	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(),    precedence;    	non-compiled	[CE]  ')'  expected	43	None	replace
166	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(),  precedence  +  1;  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(),  precedence  +  1;  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(),  precedence  +  1;	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(),    precedence;    	non-compiled	[CE]  ')'  expected	43	None	replace
167	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(),  DONT_TRAVERSE_FUNCTIONS_PREDICATE;  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(),  DONT_TRAVERSE_FUNCTIONS_PREDICATE;  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(),  DONT_TRAVERSE_FUNCTIONS_PREDICATE;	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(),    precedence;    	non-compiled	[CE]  ')'  expected	43	None	replace
168	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(),  AND_PRECEDENCE;  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(),  AND_PRECEDENCE;  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(),  AND_PRECEDENCE;	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(),    precedence;    	non-compiled	[CE]  ')'  expected	43	None	replace
169	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE,  complementOperator);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE,  complementOperator);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE,  complementOperator);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	27	None	replace
170	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE,  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE,  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE,  INVALID_REGULAR_EXPRESSION_FLAGS);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	27	None	replace
171	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE,  STANDARD_OBJECT_CONSTRUCTORS);  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE,  STANDARD_OBJECT_CONSTRUCTORS);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE,  STANDARD_OBJECT_CONSTRUCTORS);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	27	None	replace
172	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  precedence,  OR_PRECEDENCE);  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  precedence,  OR_PRECEDENCE);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  precedence,  OR_PRECEDENCE);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	27	None	replace
173	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  precedence  +  2);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  precedence  +  2);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  precedence  +  2);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n.getType(),    precedence    +    1);    	non-compiled	[CE]  ')'  expected	13	None	replace
174	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  precedence  +  3);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  precedence  +  3);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  precedence  +  3);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n.getType(),    precedence    +    1);    	non-compiled	[CE]  ')'  expected	13	None	replace
175	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  precedence  *  precedence  +  1);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  precedence  *  precedence  +  1);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  precedence  *  precedence  +  1);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n.getType(),    precedence    +    1);    	non-compiled	[CE]  ')'  expected	13	None	replace
176	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  precedence  +  4);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  precedence  +  4);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  precedence  +  4);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n.getType(),    precedence    +    1);    	non-compiled	[CE]  ')'  expected	13	None	replace
177	[BUG]  [BUGGY]  final  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  precedence  +  1);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  final  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  precedence  +  1);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	final  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  precedence  +  1);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n.getType(),    precedence    +    1);    	non-compiled	[CE]  ')'  expected	13	None	replace
178	[BUG]  [BUGGY]  Predicate  input  =  n.getLastChild();  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  input  =  n.getLastChild();  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  input  =  n.getLastChild();	  Predicate    input    =    n.getFirstChild();    	non-compiled	[CE]  ')'  expected	32	None	replace
179	[BUG]  [BUGGY]  Predicate  input  =  n.getNext();  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  input  =  n.getNext();  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  input  =  n.getNext();	  Predicate    input    =    n.getFirstChild();    	non-compiled	[CE]  ')'  expected	32	None	replace
180	[BUG]  [BUGGY]  Predicate  input  =  n.getAncestor(1);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  input  =  n.getAncestor(1);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  input  =  n.getAncestor(1);	  Predicate    input    =    n.getFirstChild();    	non-compiled	[CE]  ')'  expected	32	None	replace
181	[BUG]  [BUGGY]  Predicate  input  =  n.getInitialValue();  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  input  =  n.getInitialValue();  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  input  =  n.getInitialValue();	  Predicate    input    =    n.getFirstChild();    	non-compiled	[CE]  ')'  expected	32	None	replace
182	[BUG]  [BUGGY]  Predicate  input  =  n.getInput();  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  input  =  n.getInput();  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  input  =  n.getInput();	  Predicate    input    =    n.getFirstChild();    	non-compiled	[CE]  ')'  expected	32	None	replace
183	[BUG]  [BUGGY]  Predicate  input  =  n.getParent();  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  input  =  n.getParent();  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  input  =  n.getParent();	  Predicate    input    =    n.getFirstChild();    	non-compiled	[CE]  ')'  expected	32	None	replace
184	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE,  complementOperator);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE,  complementOperator);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE,  complementOperator);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n.getType(),    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	12	None	replace
185	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE,  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE,  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE,  INVALID_REGULAR_EXPRESSION_FLAGS);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n.getType(),    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	12	None	replace
186	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE,  STANDARD_OBJECT_CONSTRUCTORS);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE,  STANDARD_OBJECT_CONSTRUCTORS);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE,  STANDARD_OBJECT_CONSTRUCTORS);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n.getType(),    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	12	None	replace
187	[BUG]  [BUGGY]  Predicates.checkState(n.getType()  ==  Token.REGEXP,  precedence);  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicates.checkState(n.getType()  ==  Token.REGEXP,  precedence);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicates.checkState(n.getType()  ==  Token.REGEXP,  precedence);	  Predicates.checkState(n.getType()    ==    Token.REGEXP);    	non-compiled	[CE]  ')'  expected	38	None	replace
188	[BUG]  [BUGGY]  Predicates.checkState(n.getType()!=  Token.REGEXP);  [CE]  ')'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicates.checkState(n.getType()!=  Token.REGEXP);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicates.checkState(n.getType()!=  Token.REGEXP);	  Predicates.checkState(n.getType()    ==    Token.REGEXP);    	non-compiled	[CE]  ')'  expected	38	None	replace
189	[BUG]  [BUGGY]  Predicates.checkState(n.getType()  ==  Token.REGEXP  &&  isLowerPrecedenceInExpression(n,  precedence));  [CE]  ')'  expected  [FE]                                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicates.checkState(n.getType()  ==  Token.REGEXP  &&  isLowerPrecedenceInExpression(n,  precedence));  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicates.checkState(n.getType()  ==  Token.REGEXP  &&  isLowerPrecedenceInExpression(n,  precedence));	  Predicates.checkState(n.getType()    ==    Token.REGEXP);    	non-compiled	[CE]  ')'  expected	38	None	replace
190	[BUG]  [BUGGY]  Predicates.checkState(n.getType()  ==  Token.REGEXP,  n.getString());  [CE]  ')'  expected  [FE]                                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicates.checkState(n.getType()  ==  Token.REGEXP,  n.getString());  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicates.checkState(n.getType()  ==  Token.REGEXP,  n.getString());	  Predicates.checkState(n.getType()    ==    Token.REGEXP);    	non-compiled	[CE]  ')'  expected	38	None	replace
191	[BUG]  [BUGGY]  Predicates.checkState(n.getType()  ==  Token.REGEXP,  n.getFirstChild());  [CE]  ')'  expected  [FE]                                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicates.checkState(n.getType()  ==  Token.REGEXP,  n.getFirstChild());  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicates.checkState(n.getType()  ==  Token.REGEXP,  n.getFirstChild());	  Predicates.checkState(n.getType()    ==    Token.REGEXP);    	non-compiled	[CE]  ')'  expected	38	None	replace
192	[BUG]  [BUGGY]  Predicates.checkState(n.getType()  ==  Token.REGEXP  ||  n.getType()  ==  Token.NAME);  [CE]  ')'  expected  [FE]                                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicates.checkState(n.getType()  ==  Token.REGEXP  ||  n.getType()  ==  Token.NAME);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicates.checkState(n.getType()  ==  Token.REGEXP  ||  n.getType()  ==  Token.NAME);	  Predicates.checkState(n.getType()    ==    Token.REGEXP);    	non-compiled	[CE]  ')'  expected	38	None	replace
193	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getChildCount()  -  1)  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getChildCount()  -  1)  {  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getChildCount()  -  1)  {	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n.getChildCount())    {    	non-compiled	[CE]  ')'  expected	63	None	replace
194	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getChildCount()  +  1)  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getChildCount()  +  1)  {  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getChildCount()  +  1)  {	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n.getChildCount())    {    	non-compiled	[CE]  ')'  expected	63	None	replace
195	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.type,  precedence);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.type,  precedence);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.type,  precedence);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n.type);    	non-compiled	[CE]  ')'  expected	64	None	replace
196	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  n.type);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  n.type);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  n.type);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n.type);    	non-compiled	[CE]  ')'  expected	64	None	replace
197	[BUG]  [BUGGY]  Preconditions.checkState(isLowerPrecedenceInExpression(n,  precedence));  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Preconditions.checkState(isLowerPrecedenceInExpression(n,  precedence));  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Preconditions.checkState(isLowerPrecedenceInExpression(n,  precedence));	  Preconditions.checkState(isLowerPrecedenceInExpression(n));    	non-compiled	[CE]  ')'  expected	59	None	replace
198	[BUG]  [BUGGY]  Preconditions.checkState(isLowerPrecedenceInExpression(n)||  isLowerPrecedenceInExpression(n));  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Preconditions.checkState(isLowerPrecedenceInExpression(n)||  isLowerPrecedenceInExpression(n));  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Preconditions.checkState(isLowerPrecedenceInExpression(n)||  isLowerPrecedenceInExpression(n));	  Preconditions.checkState(isLowerPrecedenceInExpression(n));    	non-compiled	[CE]  ')'  expected	59	None	replace
199	[BUG]  [BUGGY]  Preconditions.checkState(!isLowerPrecedenceInExpression(n));  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Preconditions.checkState(!isLowerPrecedenceInExpression(n));  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Preconditions.checkState(!isLowerPrecedenceInExpression(n));	  Preconditions.checkState(isLowerPrecedenceInExpression(n));    	non-compiled	[CE]  ')'  expected	59	None	replace
200	[BUG]  [BUGGY]  Preconditions.checkState(isLowerPrecedenceInExpression(n),  precedence);  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Preconditions.checkState(isLowerPrecedenceInExpression(n),  precedence);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Preconditions.checkState(isLowerPrecedenceInExpression(n),  precedence);	  Preconditions.checkState(isLowerPrecedenceInExpression(n));    	non-compiled	[CE]  ')'  expected	59	None	replace
201	[BUG]  [BUGGY]  Preconditions.checkState(isLowerPrecedenceInExpression(n)&&  isLowerPrecedenceInExpression(n));  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Preconditions.checkState(isLowerPrecedenceInExpression(n)&&  isLowerPrecedenceInExpression(n));  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Preconditions.checkState(isLowerPrecedenceInExpression(n)&&  isLowerPrecedenceInExpression(n));	  Preconditions.checkState(isLowerPrecedenceInExpression(n));    	non-compiled	[CE]  ')'  expected	59	None	replace
202	[BUG]  [BUGGY]  Preconditions.checkArgument(isLowerPrecedenceInExpression(n));  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Preconditions.checkArgument(isLowerPrecedenceInExpression(n));  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Preconditions.checkArgument(isLowerPrecedenceInExpression(n));	  Preconditions.checkState(isLowerPrecedenceInExpression(n));    	non-compiled	[CE]  ')'  expected	59	None	replace
203	[BUG]  [BUGGY]  final  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(previousence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  final  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(previousence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	final  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(previousence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(previousence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	8	None	replace
204	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(previousence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE,  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(previousence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE,  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(previousence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE,  INVALID_REGULAR_EXPRESSION_FLAGS);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(previousence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	8	None	replace
205	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(previousence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE,  complementOperator);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(previousence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE,  complementOperator);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(previousence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE,  complementOperator);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(previousence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	8	None	replace
206	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(previousence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE,  n.getType());  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(previousence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE,  n.getType());  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(previousence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE,  n.getType());	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(previousence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	8	None	replace
207	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(previousence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE,  STANDARD_OBJECT_CONSTRUCTORS);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(previousence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE,  STANDARD_OBJECT_CONSTRUCTORS);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(previousence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE,  STANDARD_OBJECT_CONSTRUCTORS);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(previousence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	8	None	replace
208	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getNext(),  precedence);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getNext(),  precedence);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getNext(),  precedence);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n.getNext());    	non-compiled	[CE]  ')'  expected	18	None	replace
209	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  n.getType(),  precedence)  {  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  n.getType(),  precedence)  {  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  n.getType(),  precedence)  {	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n,    n.getType())    {    	non-compiled	[CE]  ')'  expected	4	None	replace
210	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  n.getFirstChild())  {  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  n.getFirstChild())  {  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  n.getFirstChild())  {	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n,    n.getType())    {    	non-compiled	[CE]  ')'  expected	4	None	replace
211	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  input.getType())  {  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  input.getType())  {  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  input.getType())  {	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n,    n.getType())    {    	non-compiled	[CE]  ')'  expected	4	None	replace
212	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  precedence.getType())  {  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  precedence.getType())  {  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  precedence.getType())  {	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n,    n.getType())    {    	non-compiled	[CE]  ')'  expected	4	None	replace
213	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  n.getString())  {  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  n.getString())  {  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  n.getString())  {	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n,    n.getType())    {    	non-compiled	[CE]  ')'  expected	4	None	replace
214	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  INVALID_REGULAR_EXPRESSION_FLAGS,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  INVALID_REGULAR_EXPRESSION_FLAGS,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  INVALID_REGULAR_EXPRESSION_FLAGS,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n,    INVALID_REGULAR_EXPRESSION_FLAGS);    	non-compiled	[CE]  ')'  expected	24	None	replace
215	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  INVALID_REGULAR_EXPRESSION_FLAGS,  STANDARD_OBJECT_CONSTRUCTORS);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  INVALID_REGULAR_EXPRESSION_FLAGS,  STANDARD_OBJECT_CONSTRUCTORS);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  INVALID_REGULAR_EXPRESSION_FLAGS,  STANDARD_OBJECT_CONSTRUCTORS);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n,    INVALID_REGULAR_EXPRESSION_FLAGS);    	non-compiled	[CE]  ')'  expected	24	None	replace
216	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  AND_PRECEDENCE,  precedence);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  AND_PRECEDENCE,  precedence);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  AND_PRECEDENCE,  precedence);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n,    AND_PRECEDENCE);    	non-compiled	[CE]  ')'  expected	25	None	replace
217	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  AND_PRECEDENCE,  complementOperator);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  AND_PRECEDENCE,  complementOperator);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  AND_PRECEDENCE,  complementOperator);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n,    AND_PRECEDENCE);    	non-compiled	[CE]  ')'  expected	25	None	replace
218	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  STANDARD_OBJECT_EXPRESSION_FLAGS);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  STANDARD_OBJECT_EXPRESSION_FLAGS);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  STANDARD_OBJECT_EXPRESSION_FLAGS);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n,    AND_PRECEDENCE);    	non-compiled	[CE]  ')'  expected	25	None	replace
219	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getFirstChild(),  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getFirstChild(),  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getFirstChild(),  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n.getFirstChild(),    precedence);    	non-compiled	[CE]  ')'  expected	10	None	replace
220	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getFirstChild(),  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getFirstChild(),  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getFirstChild(),  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n.getFirstChild(),    precedence);    	non-compiled	[CE]  ')'  expected	10	None	replace
221	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getFirstChild(),  precedence,  complementOperator);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getFirstChild(),  precedence,  complementOperator);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getFirstChild(),  precedence,  complementOperator);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n.getFirstChild(),    precedence);    	non-compiled	[CE]  ')'  expected	10	None	replace
222	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getFirstChild(),  precedence,  STANDARD_OBJECT_CONSTRUCTORS);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getFirstChild(),  precedence,  STANDARD_OBJECT_CONSTRUCTORS);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getFirstChild(),  precedence,  STANDARD_OBJECT_CONSTRUCTORS);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n.getFirstChild(),    precedence);    	non-compiled	[CE]  ')'  expected	10	None	replace
223	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getFirstChild(),  precedence  +  1);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getFirstChild(),  precedence  +  1);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getFirstChild(),  precedence  +  1);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n.getFirstChild(),    precedence);    	non-compiled	[CE]  ')'  expected	10	None	replace
224	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS)  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS)  {  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS)  {	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n.getType(),    precedence)    {    	non-compiled	[CE]  ')'  expected	1	None	replace
225	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n.getType(),    precedence)    {    	non-compiled	[CE]  ')'  expected	1	None	replace
226	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  precedence,  STANDARD_OBJECT_CONSTRUCTORS)  {  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  precedence,  STANDARD_OBJECT_CONSTRUCTORS)  {  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  precedence,  STANDARD_OBJECT_CONSTRUCTORS)  {	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n.getType(),    precedence)    {    	non-compiled	[CE]  ')'  expected	1	None	replace
227	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  precedence,  false)  {  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  precedence,  false)  {  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  precedence,  false)  {	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n.getType(),    precedence)    {    	non-compiled	[CE]  ')'  expected	1	None	replace
228	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  precedence,  predicence)  {  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  precedence,  predicence)  {  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  precedence,  predicence)  {	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n.getType(),    precedence)    {    	non-compiled	[CE]  ')'  expected	1	None	replace
229	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(3);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(3);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(3);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(3)    {    	non-compiled	[CE]  ')'  expected	54	None	replace
230	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS)  {  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS)  {  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS)  {	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n,    precedence)    {    	non-compiled	[CE]  ')'  expected	7	None	replace
231	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  INVALID_REGULAR_EXPRESSION_FLAGS)  {  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  INVALID_REGULAR_EXPRESSION_FLAGS)  {  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  INVALID_REGULAR_EXPRESSION_FLAGS)  {	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n,    precedence)    {    	non-compiled	[CE]  ')'  expected	7	None	replace
232	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  OR_PRECEDENCE)  {  [CE]  ')'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  OR_PRECEDENCE)  {  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  OR_PRECEDENCE)  {	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n,    precedence)    {    	non-compiled	[CE]  ')'  expected	7	None	replace
233	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  [CE]  ')'  expected  [FE]                                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  precedence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE)  {	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n,    precedence)    {    	non-compiled	[CE]  ')'  expected	7	None	replace
234	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  AND_PRECEDENCE)  {  [CE]  ')'  expected  [FE]                                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  AND_PRECEDENCE)  {  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  AND_PRECEDENCE)  {	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n,    precedence)    {    	non-compiled	[CE]  ')'  expected	7	None	replace
235	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS)  {  [CE]  ')'  expected  [FE]                                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS)  {  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS)  {	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n,    precedence)    {    	non-compiled	[CE]  ')'  expected	7	None	replace
236	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  precedence,  STANDARD_OBJECT_EXPRESSION_FLAGS)  {  [CE]  ')'  expected  [FE]                                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  precedence,  STANDARD_OBJECT_EXPRESSION_FLAGS)  {  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  precedence,  STANDARD_OBJECT_EXPRESSION_FLAGS)  {	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n,    precedence)    {    	non-compiled	[CE]  ')'  expected	7	None	replace
237	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  STANDARD_OBJECT_CONSTRUCTORS);  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  STANDARD_OBJECT_CONSTRUCTORS);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  STANDARD_OBJECT_CONSTRUCTORS);	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  ')'  expected	36	None	replace
238	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.GETPROP);  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.GETPROP);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.GETPROP);	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  ')'  expected	36	None	replace
239	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  INVALID_REGULAR_EXPRESSION);  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  INVALID_REGULAR_EXPRESSION);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  INVALID_REGULAR_EXPRESSION);	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  ')'  expected	36	None	replace
240	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(previousence,  STANDARD_OBJECT_CONSTRUCTORS);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(previousence,  STANDARD_OBJECT_CONSTRUCTORS);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(previousence,  STANDARD_OBJECT_CONSTRUCTORS);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(previousence,    INVALID_REGULAR_EXPRESSION_FLAGS);    	non-compiled	[CE]  ')'  expected	46	None	replace
241	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.EXPR_RESULT);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkArgument(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  ')'  expected	52	None	replace
242	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.GETPROP);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.GETPROP);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.GETPROP);	  Preconditions.checkArgument(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  ')'  expected	52	None	replace
243	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.NAME,  precedence);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.NAME,  precedence);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Preconditions.checkArgument(n.getType()!=  Token.NAME,  precedence);	  Preconditions.checkArgument(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  ')'  expected	52	None	replace
244	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  n.getType()  -  precedence);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  n.getType()  -  precedence);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  n.getType()  -  precedence);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n,    n.getType());    	non-compiled	[CE]  ')'  expected	40	None	replace
245	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  n.getType()  -  1);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  n.getType()  -  1);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  n.getType()  -  1);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n,    n.getType());    	non-compiled	[CE]  ')'  expected	40	None	replace
246	[BUG]  [BUGGY]  Node  input  =  n.removeFirstChild();  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Node  input  =  n.removeFirstChild();  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Node  input  =  n.removeFirstChild();	  Node    input    =    n.getFirstChild();    	non-compiled	[CE]  ')'  expected	33	None	replace
247	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(previousence,  n);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(previousence,  n);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(previousence,  n);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(previousence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	8	None	replace
248	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(previousence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE,  precedence);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(previousence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE,  precedence);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(previousence,  DONT_TRAVERSE_FUNCTIONS_PREDICATE,  precedence);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(previousence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	8	None	replace
249	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  AND_PRECEDENCE,  OR_PRECEDENCE);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  AND_PRECEDENCE,  OR_PRECEDENCE);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  AND_PRECEDENCE,  OR_PRECEDENCE);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n.getType(),    precedence,    OR_PRECEDENCE);    	non-compiled	[CE]  ')'  expected	16	None	replace
250	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  precedence  ==  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  precedence  ==  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  precedence  ==  INVALID_REGULAR_EXPRESSION_FLAGS);	  Preconditions.checkArgument(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  ')'  expected	51	None	replace
251	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  precedence  ==  0);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  precedence  ==  0);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  precedence  ==  0);	  Preconditions.checkArgument(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  ')'  expected	51	None	replace
252	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  precedence  ==  Integer.MIN_VALUE);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  precedence  ==  Integer.MIN_VALUE);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  precedence  ==  Integer.MIN_VALUE);	  Preconditions.checkArgument(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  ')'  expected	51	None	replace
253	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(7);  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(7);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(7);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(8)    {    	non-compiled	[CE]  ')'  expected	61	None	replace
254	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  precedence  +  1)  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  precedence  +  1)  {  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  precedence  +  1)  {	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n.getType(),    precedence)    {    	non-compiled	[CE]  ')'  expected	1	None	replace
255	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  AND_PRECEDENCE,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  AND_PRECEDENCE,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  AND_PRECEDENCE,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	27	None	replace
256	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  precedence  -  1,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  precedence  -  1,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  precedence  -  1,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	27	None	replace
257	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  precedence,  STANDARD_OBJECT_EXPRESSION_FLAGS);  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  precedence,  STANDARD_OBJECT_EXPRESSION_FLAGS);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  precedence,  STANDARD_OBJECT_EXPRESSION_FLAGS);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	27	None	replace
258	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n  +  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n  +  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n  +  INVALID_REGULAR_EXPRESSION_FLAGS);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n    +    precedence);    	non-compiled	[CE]  ')'  expected	44	None	replace
259	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.previousence  +  precedence);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.previousence  +  precedence);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.previousence  +  precedence);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n    +    precedence);    	non-compiled	[CE]  ')'  expected	44	None	replace
260	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n  +  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n  +  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n  +  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n    +    precedence);    	non-compiled	[CE]  ')'  expected	44	None	replace
261	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  STANDARD_OBJECT_CONSTRUCTORS);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  STANDARD_OBJECT_CONSTRUCTORS);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  STANDARD_OBJECT_CONSTRUCTORS);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n,    INVALID_REGULAR_EXPRESSION_FLAGS);    	non-compiled	[CE]  ')'  expected	24	None	replace
262	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  REGEXP_FLAGS_RE);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  REGEXP_FLAGS_RE);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  REGEXP_FLAGS_RE);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n,    INVALID_REGULAR_EXPRESSION_FLAGS);    	non-compiled	[CE]  ')'  expected	24	None	replace
263	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  INVALID_REGULAR_EXPRESSION_FLAGS  +  precedence);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  INVALID_REGULAR_EXPRESSION_FLAGS  +  precedence);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  INVALID_REGULAR_EXPRESSION_FLAGS  +  precedence);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n,    INVALID_REGULAR_EXPRESSION_FLAGS);    	non-compiled	[CE]  ')'  expected	24	None	replace
264	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(),  n;  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(),  n;  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(),  n;	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(),    precedence;    	non-compiled	[CE]  ')'  expected	43	None	replace
265	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(previousence)  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(previousence)  {  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(previousence)  {	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(0)    {    	non-compiled	[CE]  ')'  expected	31	None	replace
266	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getNext()  +  precedence);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getNext()  +  precedence);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getNext()  +  precedence);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n.getNext());    	non-compiled	[CE]  ')'  expected	18	None	replace
267	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(previousence  +  1,  precedence);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(previousence  +  1,  precedence);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(previousence  +  1,  precedence);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(previousence    +    1);    	non-compiled	[CE]  ')'  expected	47	None	replace
268	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(input,  input.getType(),  precedence  +  1);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(input,  input.getType(),  precedence  +  1);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(input,  input.getType(),  precedence  +  1);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n,    input.getType(),    precedence);    	non-compiled	[CE]  ')'  expected	55	None	replace
269	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  input.getType(),  precedence  +  1);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  input.getType(),  precedence  +  1);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  input.getType(),  precedence  +  1);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n,    input.getType(),    precedence);    	non-compiled	[CE]  ')'  expected	55	None	replace
270	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  precedence  +  1,  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  precedence  +  1,  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  precedence  +  1,  INVALID_REGULAR_EXPRESSION_FLAGS);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n,    precedence    +    1);    	non-compiled	[CE]  ')'  expected	29	None	replace
271	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  n.getChildCount())  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  n.getChildCount())  {  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  n.getChildCount())  {	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n.getChildCount())    {    	non-compiled	[CE]  ')'  expected	63	None	replace
272	[BUG]  [BUGGY]  Predicates.checkState(n.getType()  ==  Token.REGEXP_FLAGS);  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicates.checkState(n.getType()  ==  Token.REGEXP_FLAGS);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicates.checkState(n.getType()  ==  Token.REGEXP_FLAGS);	  Predicates.checkState(n.getType()    ==    Token.REGEXP);    	non-compiled	[CE]  ')'  expected	38	None	replace
273	[BUG]  [BUGGY]  Predicates.checkState(n.getType()  ==  Token.GETPROP);  [CE]  ')'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicates.checkState(n.getType()  ==  Token.GETPROP);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicates.checkState(n.getType()  ==  Token.GETPROP);	  Predicates.checkState(n.getType()    ==    Token.REGEXP);    	non-compiled	[CE]  ')'  expected	38	None	replace
274	[BUG]  [BUGGY]  Predicates.checkState(n.getType()  ==  Token.NAME);  [CE]  ')'  expected  [FE]                                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicates.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicates.checkState(n.getType()  ==  Token.NAME);	  Predicates.checkState(n.getType()    ==    Token.REGEXP);    	non-compiled	[CE]  ')'  expected	38	None	replace
275	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  precedence  +  1,  STANDARD_OBJECT_CONSTRUCTORS);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  precedence  +  1,  STANDARD_OBJECT_CONSTRUCTORS);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  precedence  +  1,  STANDARD_OBJECT_CONSTRUCTORS);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n.getType(),    precedence,    STANDARD_OBJECT_CONSTRUCTORS);    	non-compiled	[CE]  ')'  expected	14	None	replace
276	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  precedence,  PROPERTY);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  precedence,  PROPERTY);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  precedence,  PROPERTY);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n.getType(),    precedence,    STANDARD_OBJECT_CONSTRUCTORS);    	non-compiled	[CE]  ')'  expected	14	None	replace
277	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getFirstChild(),  n.getLastChild());  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getFirstChild(),  n.getLastChild());  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getFirstChild(),  n.getLastChild());	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n,    n.getFirstChild());    	non-compiled	[CE]  ')'  expected	20	None	replace
278	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  precedence,  STANDARD_OBJECT_EXPRESSION_FLAGS);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  precedence,  STANDARD_OBJECT_EXPRESSION_FLAGS);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  precedence,  STANDARD_OBJECT_EXPRESSION_FLAGS);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n.getType(),    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	12	None	replace
279	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  precedence,  INVALID_REGULAR_EXPRESSION_PREDICATE);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  precedence,  INVALID_REGULAR_EXPRESSION_PREDICATE);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  precedence,  INVALID_REGULAR_EXPRESSION_PREDICATE);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n.getType(),    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	12	None	replace
280	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  AND_PRECEDENCE,  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  AND_PRECEDENCE,  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  AND_PRECEDENCE,  INVALID_REGULAR_EXPRESSION_FLAGS);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n,    precedence,    INVALID_REGULAR_EXPRESSION_FLAGS);    	non-compiled	[CE]  ')'  expected	23	None	replace
281	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  precedence,  NOT_SAFE_TO_FOLD_WITHOUT_ARGS);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  precedence,  NOT_SAFE_TO_FOLD_WITHOUT_ARGS);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  precedence,  NOT_SAFE_TO_FOLD_WITHOUT_ARGS);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n,    precedence,    INVALID_REGULAR_EXPRESSION_FLAGS);    	non-compiled	[CE]  ')'  expected	23	None	replace
282	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS,  AND_PRECEDENCE);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS,  AND_PRECEDENCE);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS,  AND_PRECEDENCE);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n.getType(),    precedence,    INVALID_REGULAR_EXPRESSION_FLAGS);    	non-compiled	[CE]  ')'  expected	11	None	replace
283	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  precedence,  NOT_SAFE_TO_FOLD_WITHOUT_ARGS);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  precedence,  NOT_SAFE_TO_FOLD_WITHOUT_ARGS);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  precedence,  NOT_SAFE_TO_FOLD_WITHOUT_ARGS);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n.getType(),    precedence,    INVALID_REGULAR_EXPRESSION_FLAGS);    	non-compiled	[CE]  ')'  expected	11	None	replace
284	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  n.getType(),  precedence  +  1);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  n.getType(),  precedence  +  1);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  n.getType(),  precedence  +  1);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n,    n.getType(),    precedence);    	non-compiled	[CE]  ')'  expected	56	None	replace
285	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  precedence.getType(),  n);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  precedence.getType(),  n);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  precedence.getType(),  n);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n,    n.getType(),    precedence);    	non-compiled	[CE]  ')'  expected	56	None	replace
286	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  n.getType(),  precedence,  OR_PRECEDENCE);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  n.getType(),  precedence,  OR_PRECEDENCE);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  n.getType(),  precedence,  OR_PRECEDENCE);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n,    n.getType(),    precedence);    	non-compiled	[CE]  ')'  expected	56	None	replace
287	[BUG]  [BUGGY]  Predicates.checkState(n.getType()  ==  Token.EXPR_RESULT,  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicates.checkState(n.getType()  ==  Token.EXPR_RESULT,  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicates.checkState(n.getType()  ==  Token.EXPR_RESULT,  INVALID_REGULAR_EXPRESSION_FLAGS);	  Predicates.checkState(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  ')'  expected	35	None	replace
288	[BUG]  [BUGGY]  Predicates.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  precedence  ==  Integer.MAX_VALUE);  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicates.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  precedence  ==  Integer.MAX_VALUE);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicates.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  precedence  ==  Integer.MAX_VALUE);	  Predicates.checkState(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  ')'  expected	35	None	replace
289	[BUG]  [BUGGY]  Predicates.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  precedence  ==  Integer.MIN_VALUE);  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicates.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  precedence  ==  Integer.MIN_VALUE);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicates.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  precedence  ==  Integer.MIN_VALUE);	  Predicates.checkState(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  ')'  expected	35	None	replace
290	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  precedence.cloneTree());  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  precedence.cloneTree());  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  precedence.cloneTree());	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n.cloneTree());    	non-compiled	[CE]  ')'  expected	21	None	replace
291	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.REGEXP_FLAGS);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.REGEXP_FLAGS);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.REGEXP_FLAGS);	  Preconditions.checkArgument(n.getType()    ==    Token.REGEXP);    	non-compiled	[CE]  ')'  expected	58	None	replace
292	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.GETPROP);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.GETPROP);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.GETPROP);	  Preconditions.checkArgument(n.getType()    ==    Token.REGEXP);    	non-compiled	[CE]  ')'  expected	58	None	replace
293	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  n.getType()  -  1)  {  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  n.getType()  -  1)  {  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  n.getType()  -  1)  {	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n,    n.getType())    {    	non-compiled	[CE]  ')'  expected	4	None	replace
294	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  AND_PRECEDENCE,  STANDARD_OBJECT_CONSTRUCTORS);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  AND_PRECEDENCE,  STANDARD_OBJECT_CONSTRUCTORS);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  AND_PRECEDENCE,  STANDARD_OBJECT_CONSTRUCTORS);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n,    precedence,    STANDARD_OBJECT_CONSTRUCTORS);    	non-compiled	[CE]  ')'  expected	50	None	replace
295	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  precedence  -  1,  STANDARD_OBJECT_CONSTRUCTORS);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  precedence  -  1,  STANDARD_OBJECT_CONSTRUCTORS);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  precedence  -  1,  STANDARD_OBJECT_CONSTRUCTORS);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n,    precedence,    STANDARD_OBJECT_CONSTRUCTORS);    	non-compiled	[CE]  ')'  expected	50	None	replace
296	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  precedence  -  1  +  1);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  precedence  -  1  +  1);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  precedence  -  1  +  1);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n,    precedence    -    1);    	non-compiled	[CE]  ')'  expected	49	None	replace
297	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  precedence  -  2);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  precedence  -  2);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  precedence  -  2);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n,    precedence    -    1);    	non-compiled	[CE]  ')'  expected	49	None	replace
298	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  precedence  *  precedence  -  1);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  precedence  *  precedence  -  1);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  precedence  *  precedence  -  1);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n,    precedence    -    1);    	non-compiled	[CE]  ')'  expected	49	None	replace
299	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  precedence  +  1,  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  precedence  +  1,  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  precedence  +  1,  INVALID_REGULAR_EXPRESSION_FLAGS);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n.getType(),    precedence    +    1);    	non-compiled	[CE]  ')'  expected	13	None	replace
300	[BUG]  [BUGGY]  Predicate  input  =  n.getPreviousChild();  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  input  =  n.getPreviousChild();  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  input  =  n.getPreviousChild();	  Predicate    input    =    n.getFirstChild();    	non-compiled	[CE]  ')'  expected	32	None	replace
301	[BUG]  [BUGGY]  Predicate  input  =  n.getAncestor(2);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  input  =  n.getAncestor(2);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  input  =  n.getAncestor(2);	  Predicate    input    =    n.getFirstChild();    	non-compiled	[CE]  ')'  expected	32	None	replace
302	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  precedence  -  1)  {  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  precedence  -  1)  {  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  precedence  -  1)  {	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n,    precedence)    {    	non-compiled	[CE]  ')'  expected	7	None	replace
303	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  precedence  +  1)  {  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  precedence  +  1)  {  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  precedence  +  1)  {	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n,    precedence)    {    	non-compiled	[CE]  ')'  expected	7	None	replace
304	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(input,  AND_PRECEDENCE);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(input,  AND_PRECEDENCE);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(input,  AND_PRECEDENCE);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n,    AND_PRECEDENCE);    	non-compiled	[CE]  ')'  expected	25	None	replace
305	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getFirstChild(),  AND_PRECEDENCE);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getFirstChild(),  AND_PRECEDENCE);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getFirstChild(),  AND_PRECEDENCE);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n,    AND_PRECEDENCE);    	non-compiled	[CE]  ')'  expected	25	None	replace
306	[BUG]  [BUGGY]  Preconditions.checkState(isLowerPrecedenceInExpression(n)||  precedence  ==  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Preconditions.checkState(isLowerPrecedenceInExpression(n)||  precedence  ==  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Preconditions.checkState(isLowerPrecedenceInExpression(n)||  precedence  ==  INVALID_REGULAR_EXPRESSION_FLAGS);	  Preconditions.checkState(isLowerPrecedenceInExpression(n));    	non-compiled	[CE]  ')'  expected	59	None	replace
307	[BUG]  [BUGGY]  Preconditions.checkState(isLowerPrecedenceInExpression(n)||  precedence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Preconditions.checkState(isLowerPrecedenceInExpression(n)||  precedence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Preconditions.checkState(isLowerPrecedenceInExpression(n)||  precedence  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE);	  Preconditions.checkState(isLowerPrecedenceInExpression(n));    	non-compiled	[CE]  ')'  expected	59	None	replace
308	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.REGEXP  ||  n.getType()  ==  Token.GETPROP);  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.REGEXP  ||  n.getType()  ==  Token.GETPROP);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Preconditions.checkState(n.getType()  ==  Token.REGEXP  ||  n.getType()  ==  Token.GETPROP);	  Preconditions.checkState(n.getType()    ==    Token.REGEXP);    	non-compiled	[CE]  ')'  expected	37	None	replace
309	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP);  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Preconditions.checkState(n.getType()  ==  Token.GETPROP);	  Preconditions.checkState(n.getType()    ==    Token.REGEXP);    	non-compiled	[CE]  ')'  expected	37	None	replace
310	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.type  &  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.type  &  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.type  &  DONT_TRAVERSE_FUNCTIONS_PREDICATE);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n.type);    	non-compiled	[CE]  ')'  expected	64	None	replace
311	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.type  -  1);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.type  -  1);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.type  -  1);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n.type);    	non-compiled	[CE]  ')'  expected	64	None	replace
312	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  INVALID_REGULAR_EXPRESSION_FLAGS);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  ')'  expected	34	None	replace
313	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  precedence  ==  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  precedence  ==  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  precedence  ==  INVALID_REGULAR_EXPRESSION_FLAGS);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  ')'  expected	34	None	replace
314	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  precedence  ==  Integer.MIN_VALUE);  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  precedence  ==  Integer.MIN_VALUE);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  precedence  ==  Integer.MIN_VALUE);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  ')'  expected	34	None	replace
315	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  precedence  ==  0);  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  precedence  ==  0);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  precedence  ==  0);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  ')'  expected	34	None	replace
316	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  INVALID_REGULAR_EXPRESSION_FLAGS,  precedence);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  INVALID_REGULAR_EXPRESSION_FLAGS,  precedence);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  INVALID_REGULAR_EXPRESSION_FLAGS,  precedence);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n.getType(),    precedence,    complementOperator);    	non-compiled	[CE]  ')'  expected	15	None	replace
317	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  input);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  input);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  input);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(input);    	non-compiled	[CE]  ')'  expected	48	None	replace
318	[BUG]  [BUGGY]  Predicates.  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getFirstChild());  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicates.  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getFirstChild());  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicates.  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getFirstChild());	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n.getLastChild());    	non-compiled	[CE]  ')'  expected	17	None	replace
319	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getString(),  predicate)  {  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getString(),  predicate)  {  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getString(),  predicate)  {	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n.getString())    {    	non-compiled	[CE]  ')'  expected	5	None	replace
320	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(previousence  +  n);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(previousence  +  n);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(previousence  +  n);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n    +    precedence);    	non-compiled	[CE]  ')'  expected	44	None	replace
321	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.REGEXP  ||  n.getType()  ==  Token.EXPR_RESULT);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.REGEXP  ||  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.REGEXP  ||  n.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkArgument(n.getType()    ==    Token.REGEXP);    	non-compiled	[CE]  ')'  expected	58	None	replace
322	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.length  +  1,  precedence);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.length  +  1,  precedence);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.length  +  1,  precedence);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n.length);    	non-compiled	[CE]  ')'  expected	45	None	replace
323	[BUG]  [BUGGY]  Predicates.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  precedence  ==  0);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicates.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  precedence  ==  0);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicates.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  precedence  ==  0);	  Predicates.checkState(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  ')'  expected	35	None	replace
324	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  precedence,  STANDARD_OBJECT_CONSTRUCTORS,  ImmutableSet);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  precedence,  STANDARD_OBJECT_CONSTRUCTORS,  ImmutableSet);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  precedence,  STANDARD_OBJECT_CONSTRUCTORS,  ImmutableSet);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n.getType(),    precedence,    STANDARD_OBJECT_CONSTRUCTORS);    	non-compiled	[CE]  ')'  expected	14	None	replace
325	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(),  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(),  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(),  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(),    precedence;    	non-compiled	[CE]  ')'  expected	43	None	replace
326	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  input.getFirstChild(),  precedence);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  input.getFirstChild(),  precedence);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  input.getFirstChild(),  precedence);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n,    input.getType(),    precedence);    	non-compiled	[CE]  ')'  expected	55	None	replace
327	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  input.getType(),  precedence,  STANDARD_OBJECT_CONSTRUCTORS);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  input.getType(),  precedence,  STANDARD_OBJECT_CONSTRUCTORS);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  input.getType(),  precedence,  STANDARD_OBJECT_CONSTRUCTORS);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n,    input.getType(),    precedence);    	non-compiled	[CE]  ')'  expected	55	None	replace
328	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(input,  n.getType(),  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(input,  n.getType(),  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(input,  n.getType(),  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n,    input.getType(),    precedence);    	non-compiled	[CE]  ')'  expected	55	None	replace
329	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.clone(),  precedence);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.clone(),  precedence);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.clone(),  precedence);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n.cloneTree());    	non-compiled	[CE]  ')'  expected	21	None	replace
330	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  ||  n.getFirstChild()  ==  n);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  ||  n.getFirstChild()  ==  n);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.NAME  ||  n.getFirstChild()  ==  n);	  Preconditions.checkArgument(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  ')'  expected	52	None	replace
331	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  ||  precedence  ==  0);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  ||  precedence  ==  0);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.NAME  ||  precedence  ==  0);	  Preconditions.checkArgument(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  ')'  expected	52	None	replace
332	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.VAR);	  Preconditions.checkArgument(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  ')'  expected	52	None	replace
333	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(previousence,  INVALID_REGULAR_EXPRESSION_FLAGS,  precedence);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(previousence,  INVALID_REGULAR_EXPRESSION_FLAGS,  precedence);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(previousence,  INVALID_REGULAR_EXPRESSION_FLAGS,  precedence);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(previousence,    INVALID_REGULAR_EXPRESSION_FLAGS);    	non-compiled	[CE]  ')'  expected	46	None	replace
334	[BUG]  [BUGGY]  Preconditions.checkState(isLowerPrecedenceInExpression(n),  precedence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Preconditions.checkState(isLowerPrecedenceInExpression(n),  precedence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Preconditions.checkState(isLowerPrecedenceInExpression(n),  precedence  <  DONT_TRAVERSE_FUNCTIONS_PREDICATE);	  Preconditions.checkState(isLowerPrecedenceInExpression(n));    	non-compiled	[CE]  ')'  expected	59	None	replace
335	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(8)  ==  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(8)  ==  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(8)  ==	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(8)    {    	non-compiled	[CE]  ')'  expected	61	None	replace
336	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  precedence,  STANDARD_OBJECT_CONSTRUCTORS_PREDICATE);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  precedence,  STANDARD_OBJECT_CONSTRUCTORS_PREDICATE);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  precedence,  STANDARD_OBJECT_CONSTRUCTORS_PREDICATE);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n.getType(),    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	12	None	replace
337	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.input,  precedence);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.input,  precedence);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.input,  precedence);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n.type);    	non-compiled	[CE]  ')'  expected	64	None	replace
338	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.cloneTree(),  n.type);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.cloneTree(),  n.type);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.cloneTree(),  n.type);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n.type);    	non-compiled	[CE]  ')'  expected	64	None	replace
339	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS_PREDICATE);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS_PREDICATE);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS_PREDICATE);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	27	None	replace
340	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS_EXPRESSION_FLAGS);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS_EXPRESSION_FLAGS);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  precedence,  STANDARD_OBJECT_CONSTRUCTORS_EXPRESSION_FLAGS);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n,    precedence,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	27	None	replace
341	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  n.removeFirstChild());  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  n.removeFirstChild());  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  n.removeFirstChild());	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n,    n.getFirstChild());    	non-compiled	[CE]  ')'  expected	20	None	replace
342	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  or_PRECEDENCE,  precedence);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  or_PRECEDENCE,  precedence);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  or_PRECEDENCE,  precedence);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n,    OR_PRECEDENCE);    	non-compiled	[CE]  ')'  expected	26	None	replace
343	[BUG]  [BUGGY]  Predicate  input  =  n.removeFirstChild();  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  input  =  n.removeFirstChild();  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  input  =  n.removeFirstChild();	  Predicate    input    =    n.getFirstChild();    	non-compiled	[CE]  ')'  expected	32	None	replace
344	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  AND_PRECEDENCE);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  AND_PRECEDENCE);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  AND_PRECEDENCE);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n,    AND_PRECEDENCE);    	non-compiled	[CE]  ')'  expected	25	None	replace
345	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(5);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(5);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(5);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(4);    	non-compiled	[CE]  ')'  expected	62	None	replace
346	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  n.getNext())  {  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  n.getNext())  {  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  n.getNext())  {	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n.getNext())    {    	non-compiled	[CE]  ')'  expected	6	None	replace
347	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  n.getString());  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  n.getString());  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  n.getString());	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n.getString());    	non-compiled	[CE]  ')'  expected	41	None	replace
348	[BUG]  [BUGGY]  Predicates.  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  precedence);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicates.  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  precedence);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicates.  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  precedence);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n,    DONT_TRAVERSE_FUNCTIONS_PREDICATE);    	non-compiled	[CE]  ')'  expected	28	None	replace
349	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  n.getInput());  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  n.getInput());  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  n.getInput());	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n,    n.getType());    	non-compiled	[CE]  ')'  expected	40	None	replace
350	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  precedence  *  precedence);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  precedence  *  precedence);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  precedence  *  precedence);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n,    precedence    -    1);    	non-compiled	[CE]  ')'  expected	49	None	replace
351	[BUG]  [BUGGY]  Predicates.checkState(n.getType()  ==  Token.REGEXP  ||  n.getType()  ==  Token.FUNCTION);  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicates.checkState(n.getType()  ==  Token.REGEXP  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicates.checkState(n.getType()  ==  Token.REGEXP  ||  n.getType()  ==  Token.FUNCTION);	  Predicates.checkState(n.getType()    ==    Token.REGEXP);    	non-compiled	[CE]  ')'  expected	38	None	replace
352	[BUG]  [BUGGY]  Predicates.checkState(n.getType()  ==  Token.REGEXP  ||  n.getType()  ==  Token.BLOCK);  [CE]  ')'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicates.checkState(n.getType()  ==  Token.REGEXP  ||  n.getType()  ==  Token.BLOCK);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicates.checkState(n.getType()  ==  Token.REGEXP  ||  n.getType()  ==  Token.BLOCK);	  Predicates.checkState(n.getType()    ==    Token.REGEXP);    	non-compiled	[CE]  ')'  expected	38	None	replace
353	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  precedence  ==  Integer.MAX_VALUE);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  precedence  ==  Integer.MAX_VALUE);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  precedence  ==  Integer.MAX_VALUE);	  Preconditions.checkArgument(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  ')'  expected	51	None	replace
354	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.VAR);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.VAR);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.VAR);	  Preconditions.checkArgument(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  ')'  expected	51	None	replace
355	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  precedence,  OR_PRECEDENCE,  complementOperator);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  precedence,  OR_PRECEDENCE,  complementOperator);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  precedence,  OR_PRECEDENCE,  complementOperator);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n.getType(),    precedence,    OR_PRECEDENCE);    	non-compiled	[CE]  ')'  expected	16	None	replace
356	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS,  n);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS,  n);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS,  n);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n,    precedence,    INVALID_REGULAR_EXPRESSION_FLAGS);    	non-compiled	[CE]  ')'  expected	23	None	replace
357	[BUG]  [BUGGY]  Node  input  =  n.cloneTree();  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Node  input  =  n.cloneTree();  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Node  input  =  n.cloneTree();	  Node    input    =    n.getFirstChild();    	non-compiled	[CE]  ')'  expected	33	None	replace
358	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS,  DEFAULT_OBJECT_CONSTRUCTORS);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS,  DEFAULT_OBJECT_CONSTRUCTORS);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS,  DEFAULT_OBJECT_CONSTRUCTORS);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n.getType(),    precedence,    INVALID_REGULAR_EXPRESSION_FLAGS);    	non-compiled	[CE]  ')'  expected	11	None	replace
359	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS,  NOT_SAFE_TO_FOLD_WITHOUT_ARGS);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS,  NOT_SAFE_TO_FOLD_WITHOUT_ARGS);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.getType(),  precedence,  INVALID_REGULAR_EXPRESSION_FLAGS,  NOT_SAFE_TO_FOLD_WITHOUT_ARGS);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n.getType(),    precedence,    INVALID_REGULAR_EXPRESSION_FLAGS);    	non-compiled	[CE]  ')'  expected	11	None	replace
360	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  n.getLastChild())  {  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  n.getLastChild())  {  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n,  n.getLastChild())  {	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n,    n.getType())    {    	non-compiled	[CE]  ')'  expected	4	None	replace
361	[BUG]  [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.initialization);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.initialization);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(n.initialization);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(n.previousence);    	non-compiled	[CE]  ')'  expected	9	None	replace
362	[BUG]  [BUGGY]  final  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(previousence,  precedence);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  final  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(previousence,  precedence);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	final  Predicate  <  Node>  isLowerPrecedencePredicate  =  new  Predicate  <  Node>(previousence,  precedence);	  Predicate    <    Node>    isLowerPrecedencePredicate    =    new    Predicate    <    Node>(previousence,    precedence);    	non-compiled	[CE]  ')'  expected	60	None	replace
363	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getFirstChild()  ==  n);  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getFirstChild()  ==  n);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getFirstChild()  ==  n);	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  ')'  expected	36	None	replace
364	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  precedence  ==  Integer.MAX_VALUE);  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  precedence  ==  Integer.MAX_VALUE);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  precedence  ==  Integer.MAX_VALUE);	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  ')'  expected	36	None	replace
365	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  precedence  ==  0);  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  boolean  isLowerPrecedenceInExpression(Node  n,  final  int  precedence)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  precedence  ==  0);  [BUGGY]      @Override  public  boolean  apply(Node  input)  {  return  NodeUtil.precedence(input.getType())  <  precedence;  }  };  return  NodeUtil.has(n,  isLowerPrecedencePredicate,  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  isLowerPrecedenceInExpression  [RETURN_TYPE]  boolean  Node  n  final  int  precedence  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  input  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  precedence  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	630	630	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  precedence  ==  0);	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  ')'  expected	36	None	replace
