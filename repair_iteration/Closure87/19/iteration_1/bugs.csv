bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  n.getFirstChild();  [CE]  [FE]    AssertionFailedError  [CONTEXT]  replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }  [BUGGY]  return  n.getFirstChild();  [BUGGY]  }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  n.getFirstChild();	return  n;  	non-compiled	[CE]  	37	None	replace
2	[BUG]  [BUGGY]  return  n.getLastChild();  [CE]  [FE]      AssertionFailedError  [CONTEXT]  replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }  [BUGGY]  return  n.getLastChild();  [BUGGY]  }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  n.getLastChild();	return  n;  	non-compiled	[CE]  	37	None	replace
3	[BUG]  [BUGGY]  return  parent;  [CE]  [FE]        AssertionFailedError  [CONTEXT]  replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }  [BUGGY]  return  parent;  [BUGGY]  }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  parent;	return  n;  	non-compiled	[CE]  	37	None	replace
4	[BUG]  [BUGGY]  return  n.cloneTree();  [CE]  [FE]          AssertionFailedError  [CONTEXT]  replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }  [BUGGY]  return  n.cloneTree();  [BUGGY]  }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  n.cloneTree();	return  n;  	non-compiled	[CE]  	37	None	replace
5	[BUG]  [BUGGY]  return  n.removeFirstChild();  [CE]  [FE]            AssertionFailedError  [CONTEXT]  replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }  [BUGGY]  return  n.removeFirstChild();  [BUGGY]  }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  n.removeFirstChild();	return  n;  	non-compiled	[CE]  	37	None	replace
6	[BUG]  [BUGGY]  return  n.getNext();  [CE]  [FE]              AssertionFailedError  [CONTEXT]  replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }  [BUGGY]  return  n.getNext();  [BUGGY]  }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  n.getNext();	return  n;  	non-compiled	[CE]  	37	None	replace
7	[BUG]  [BUGGY]  return  replacement;  [CE]  [FE]                AssertionFailedError  [CONTEXT]  replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }  [BUGGY]  return  replacement;  [BUGGY]  }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  replacement;	return  n;  	non-compiled	[CE]  	37	None	replace
8	[BUG]  [BUGGY]    [CE]  [FE]                  AssertionFailedError  [CONTEXT]  replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }  [BUGGY]    [BUGGY]  }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	  	return  n;  	non-compiled	[CE]  	37	None	replace
9	[BUG]  [BUGGY]  return  n.removeChild(parent);  [CE]  [FE]    AssertionFailedError  [CONTEXT]  replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }  [BUGGY]  return  n.removeChild(parent);  [BUGGY]  }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  n.removeChild(parent);	return  n;  	non-compiled	[CE]  	37	None	replace
10	[BUG]  [BUGGY]  return  n.removeChild(right);  [CE]  [FE]    AssertionFailedError  [CONTEXT]  replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }  [BUGGY]  return  n.removeChild(right);  [BUGGY]  }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  n.removeChild(right);	return  n;  	non-compiled	[CE]  	37	None	replace
