bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getLastChild()  :  n.getNext();  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }    [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getLastChild()  :  n.getNext();  [BUGGY]    }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  n.getType()  ==  Token.NAME?  n.getLastChild()  :  n.getNext();	  return    n.getNext();    	non-compiled	[CE]  	6	None	replace
2	[BUG]  [BUGGY]  return  n.getType()  ==  Token.CALL?  n.getNext()  :  Node.newString(Token.NAME);  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }    [BUGGY]  return  n.getType()  ==  Token.CALL?  n.getNext()  :  Node.newString(Token.NAME);  [BUGGY]    }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  n.getType()  ==  Token.CALL?  n.getNext()  :  Node.newString(Token.NAME);	  return    n.getNext();    	non-compiled	[CE]  	6	None	replace
3	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getFirstChild()  :  n.getNext();  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }    [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getFirstChild()  :  n.getNext();  [BUGGY]    }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  n.getType()  ==  Token.NAME?  n.getFirstChild()  :  n.getNext();	  return    n.getNext();    	non-compiled	[CE]  	6	None	replace
4	[BUG]  [BUGGY]  return  n.getParent();  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }    [BUGGY]  return  n.getParent();  [BUGGY]    }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  n.getParent();	  return    n.getNext();    	non-compiled	[CE]  	6	None	replace
5	[BUG]  [BUGGY]  return  n.removeChild(left);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }    [BUGGY]  return  n.removeChild(left);  [BUGGY]    }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  n.removeChild(left);	  return    n.removeChild(right);    	non-compiled	[CE]  	10	None	replace
6	[BUG]  [BUGGY]  parent.replaceChild(n,  replacement);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }    [BUGGY]  parent.replaceChild(n,  replacement);  [BUGGY]    }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	parent.replaceChild(n,  replacement);	  return    n.removeChild(right);    	non-compiled	[CE]  	10	None	replace
7	[BUG]  [BUGGY]  return  n.removeChild(leftParent);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }    [BUGGY]  return  n.removeChild(leftParent);  [BUGGY]    }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  n.removeChild(leftParent);	  return    n.removeChild(right);    	non-compiled	[CE]  	10	None	replace
8	[BUG]  [BUGGY]  return  trueNode;  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }    [BUGGY]  return  trueNode;  [BUGGY]    }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  trueNode;	  return    replacement;    	non-compiled	[CE]  	7	None	replace
9	[BUG]  [BUGGY]  return  result;  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }    [BUGGY]  return  result;  [BUGGY]    }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  result;	  return    replacement;    	non-compiled	[CE]  	7	None	replace
10	[BUG]  [BUGGY]  return  parent.cloneTree();  [CE]  [FE]              AssertionFailedError    [CONTEXT]    replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }    [BUGGY]  return  parent.cloneTree();  [BUGGY]    }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  parent.cloneTree();	  return    n.cloneTree();    	non-compiled	[CE]  	4	None	replace
11	[BUG]  [BUGGY]  return  n.clone();  [CE]  [FE]                AssertionFailedError    [CONTEXT]    replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }    [BUGGY]  return  n.clone();  [BUGGY]    }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  n.clone();	  return    n.cloneTree();    	non-compiled	[CE]  	4	None	replace
12	[BUG]  [BUGGY]  return  n.cloneChildren();  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }    [BUGGY]  return  n.cloneChildren();  [BUGGY]    }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  n.cloneChildren();	  return    n.cloneTree();    	non-compiled	[CE]  	4	None	replace
13	[BUG]  [BUGGY]  return  right.cloneTree();  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }    [BUGGY]  return  right.cloneTree();  [BUGGY]    }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  right.cloneTree();	  return    n.cloneTree();    	non-compiled	[CE]  	4	None	replace
14	[BUG]  [BUGGY]  return  parent.getLastChild();  [CE]  [FE]          AssertionFailedError    [CONTEXT]    replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }    [BUGGY]  return  parent.getLastChild();  [BUGGY]    }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  parent.getLastChild();	  return    n.getLastChild();    	non-compiled	[CE]  	2	None	replace
15	[BUG]  [BUGGY]  return  n.getLastChild().getNext();  [CE]  [FE]            AssertionFailedError    [CONTEXT]    replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }    [BUGGY]  return  n.getLastChild().getNext();  [BUGGY]    }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  n.getLastChild().getNext();	  return    n.getLastChild();    	non-compiled	[CE]  	2	None	replace
16	[BUG]  [BUGGY]  return  n.getLastChild()  +  1;  [CE]  [FE]              AssertionFailedError    [CONTEXT]    replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }    [BUGGY]  return  n.getLastChild()  +  1;  [BUGGY]    }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  n.getLastChild()  +  1;	  return    n.getLastChild();    	non-compiled	[CE]  	2	None	replace
17	[BUG]  [BUGGY]  return  n.removeLastChild();  [CE]  [FE]                AssertionFailedError    [CONTEXT]    replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }    [BUGGY]  return  n.removeLastChild();  [BUGGY]    }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  n.removeLastChild();	  return    n.removeFirstChild();    	non-compiled	[CE]  	5	None	replace
18	[BUG]  [BUGGY]  return  parent.removeFirstChild();  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }    [BUGGY]  return  parent.removeFirstChild();  [BUGGY]    }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  parent.removeFirstChild();	  return    n.removeFirstChild();    	non-compiled	[CE]  	5	None	replace
19	[BUG]  [BUGGY]  removeChild(n.getLastChild());  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }    [BUGGY]  removeChild(n.getLastChild());  [BUGGY]    }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	removeChild(n.getLastChild());	  return    n.removeFirstChild();    	non-compiled	[CE]  	5	None	replace
20	[BUG]  [BUGGY]  removeChild(n.getFirstChild());  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }    [BUGGY]  removeChild(n.getFirstChild());  [BUGGY]    }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	removeChild(n.getFirstChild());	  return    n.removeFirstChild();    	non-compiled	[CE]  	5	None	replace
21	[BUG]  [BUGGY]  return  leftParent;  [CE]  [FE]            AssertionFailedError    [CONTEXT]    replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }    [BUGGY]  return  leftParent;  [BUGGY]    }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  leftParent;	  return    parent;    	non-compiled	[CE]  	3	None	replace
22	[BUG]  [BUGGY]  return  condition;  [CE]  [FE]              AssertionFailedError    [CONTEXT]    replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }    [BUGGY]  return  condition;  [BUGGY]    }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  condition;	  return    parent;    	non-compiled	[CE]  	3	None	replace
23	[BUG]  [BUGGY]  return  left;  [CE]  [FE]                AssertionFailedError    [CONTEXT]    replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }    [BUGGY]  return  left;  [BUGGY]    }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  left;	  return    parent;    	non-compiled	[CE]  	3	None	replace
24	[BUG]  [BUGGY]  return  right;  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }    [BUGGY]  return  right;  [BUGGY]    }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  right;	  return    parent;    	non-compiled	[CE]  	3	None	replace
25	[BUG]  [BUGGY]  return  parent.getFirstChild();  [CE]  [FE]        AssertionFailedError    [CONTEXT]    replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }    [BUGGY]  return  parent.getFirstChild();  [BUGGY]    }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  parent.getFirstChild();	  return    n.getFirstChild();    	non-compiled	[CE]  	1	None	replace
26	[BUG]  [BUGGY]  return  condition.getLastChild();  [CE]  [FE]          AssertionFailedError    [CONTEXT]    replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }    [BUGGY]  return  condition.getLastChild();  [BUGGY]    }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  condition.getLastChild();	  return    n.getFirstChild();    	non-compiled	[CE]  	1	None	replace
27	[BUG]  [BUGGY]  return  condition.getFirstChild();  [CE]  [FE]            AssertionFailedError    [CONTEXT]    replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }    [BUGGY]  return  condition.getFirstChild();  [BUGGY]    }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  condition.getFirstChild();	  return    n.getFirstChild();    	non-compiled	[CE]  	1	None	replace
28	[BUG]  [BUGGY]  Node  rightParent  =  n.getLastChild();  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }    [BUGGY]  Node  rightParent  =  n.getLastChild();  [BUGGY]    }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	Node  rightParent  =  n.getLastChild();	      	non-compiled	[CE]  	8	None	replace
29	[BUG]  [BUGGY]  Node  right  =  n.getLastChild();  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }    [BUGGY]  Node  right  =  n.getLastChild();  [BUGGY]    }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	Node  right  =  n.getLastChild();	      	non-compiled	[CE]  	8	None	replace
30	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [CE]  [FE]                          AssertionFailedError    [CONTEXT]    replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]    }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	      	non-compiled	[CE]  	8	None	replace
31	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  [CE]  [FE]                            AssertionFailedError    [CONTEXT]    replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]    }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME);	      	non-compiled	[CE]  	8	None	replace
32	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  break;  [CE]  [FE]                              AssertionFailedError    [CONTEXT]    replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  break;  [BUGGY]    }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  break;	      	non-compiled	[CE]  	8	None	replace
33	[BUG]  [BUGGY]  n.removeChild(leftParent);  break;  [CE]  [FE]                                AssertionFailedError    [CONTEXT]    replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }    [BUGGY]  n.removeChild(leftParent);  break;  [BUGGY]    }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	n.removeChild(leftParent);  break;	      	non-compiled	[CE]  	8	None	replace
34	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this);  [CE]  [FE]                                  AssertionFailedError    [CONTEXT]    replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }    [BUGGY]  NodeTraversal.traverse(compiler,  n,  this);  [BUGGY]    }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	NodeTraversal.traverse(compiler,  n,  this);	      	non-compiled	[CE]  	8	None	replace
35	[BUG]  [BUGGY]  parent.removeChild(n);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }    [BUGGY]  parent.removeChild(n);  [BUGGY]    }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	parent.removeChild(n);	  return    n.removeChild(parent);    	non-compiled	[CE]  	9	None	replace
36	[BUG]  [BUGGY]  return  parent.removeChild(n);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }    [BUGGY]  return  parent.removeChild(n);  [BUGGY]    }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  parent.removeChild(n);	  return    n.removeChild(parent);    	non-compiled	[CE]  	9	None	replace
37	[BUG]  [BUGGY]  return  n.cloneNode();  [CE]  [FE]              AssertionFailedError    [CONTEXT]    replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }    [BUGGY]  return  n.cloneNode();  [BUGGY]    }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  n.cloneNode();	  return    n.cloneTree();    	non-compiled	[CE]  	4	None	replace
38	[BUG]  [BUGGY]  return  leftParent.getLastChild();  [CE]  [FE]          AssertionFailedError    [CONTEXT]    replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }    [BUGGY]  return  leftParent.getLastChild();  [BUGGY]    }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  leftParent.getLastChild();	  return    n.getLastChild();    	non-compiled	[CE]  	2	None	replace
39	[BUG]  [BUGGY]  return  n.getLastChild().getFirstChild();  [CE]  [FE]            AssertionFailedError    [CONTEXT]    replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }    [BUGGY]  return  n.getLastChild().getFirstChild();  [BUGGY]    }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  n.getLastChild().getFirstChild();	  return    n.getLastChild();    	non-compiled	[CE]  	2	None	replace
40	[BUG]  [BUGGY]  return  n.getFirstChild().removeChild(right);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }    [BUGGY]  return  n.getFirstChild().removeChild(right);  [BUGGY]    }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  n.getFirstChild().removeChild(right);	  return    n.removeChild(right);    	non-compiled	[CE]  	10	None	replace
41	[BUG]  [BUGGY]  return  n.getFirstChild().removeChild(parent);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }    [BUGGY]  return  n.getFirstChild().removeChild(parent);  [BUGGY]    }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  n.getFirstChild().removeChild(parent);	  return    n.removeChild(right);    	non-compiled	[CE]  	10	None	replace
42	[BUG]  [BUGGY]  return  n.getFirstChild().removeChild(left);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }    [BUGGY]  return  n.getFirstChild().removeChild(left);  [BUGGY]    }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  n.getFirstChild().removeChild(left);	  return    n.removeChild(right);    	non-compiled	[CE]  	10	None	replace
43	[BUG]  [BUGGY]  return  parent.getNext();  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }    [BUGGY]  return  parent.getNext();  [BUGGY]    }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  parent.getNext();	  return    n.getNext();    	non-compiled	[CE]  	6	None	replace
44	[BUG]  [BUGGY]  return  n.getPrevious();  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }    [BUGGY]  return  n.getPrevious();  [BUGGY]    }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  n.getPrevious();	  return    n.getNext();    	non-compiled	[CE]  	6	None	replace
45	[BUG]  [BUGGY]  return  leftParent.getNext();  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }    [BUGGY]  return  leftParent.getNext();  [BUGGY]    }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  leftParent.getNext();	  return    n.getNext();    	non-compiled	[CE]  	6	None	replace
46	[BUG]  [BUGGY]  return  falseNode;  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }    [BUGGY]  return  falseNode;  [BUGGY]    }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  falseNode;	  return    replacement;    	non-compiled	[CE]  	7	None	replace
47	[BUG]  [BUGGY]  return  n.detachChildren();  [CE]  [FE]                AssertionFailedError    [CONTEXT]    replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }    [BUGGY]  return  n.detachChildren();  [BUGGY]    }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  n.detachChildren();	  return    n.removeFirstChild();    	non-compiled	[CE]  	5	None	replace
48	[BUG]  [BUGGY]  return  n.removeFirstChild()  +  1;  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }    [BUGGY]  return  n.removeFirstChild()  +  1;  [BUGGY]    }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  n.removeFirstChild()  +  1;	  return    n.removeFirstChild();    	non-compiled	[CE]  	5	None	replace
49	[BUG]  [BUGGY]  return  n.getFirstChild().getNext();  [CE]  [FE]        AssertionFailedError    [CONTEXT]    replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }    [BUGGY]  return  n.getFirstChild().getNext();  [BUGGY]    }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  n.getFirstChild().getNext();	  return    n.getFirstChild();    	non-compiled	[CE]  	1	None	replace
50	[BUG]  [BUGGY]  return  n.getFirstChild().getLastChild();  [CE]  [FE]          AssertionFailedError    [CONTEXT]    replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }    [BUGGY]  return  n.getFirstChild().getLastChild();  [BUGGY]    }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  n.getFirstChild().getLastChild();	  return    n.getFirstChild();    	non-compiled	[CE]  	1	None	replace
51	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  FoldArrayAction());  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }    [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  FoldArrayAction());  [BUGGY]    }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	NodeTraversal.traverse(compiler,  n,  new  FoldArrayAction());	      	non-compiled	[CE]  	8	None	replace
52	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  condition,  new  FoldArrayAction());  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }    [BUGGY]  NodeTraversal.traverse(compiler,  condition,  new  FoldArrayAction());  [BUGGY]    }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	NodeTraversal.traverse(compiler,  condition,  new  FoldArrayAction());	      	non-compiled	[CE]  	8	None	replace
53	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  FoldArrayAction());  break;  [CE]  [FE]                          AssertionFailedError    [CONTEXT]    replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }    [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  FoldArrayAction());  break;  [BUGGY]    }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	NodeTraversal.traverse(compiler,  n,  new  FoldArrayAction());  break;	      	non-compiled	[CE]  	8	None	replace
54	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  condition,  new  FoldArrayAction());  break;  [CE]  [FE]                            AssertionFailedError    [CONTEXT]    replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }    [BUGGY]  NodeTraversal.traverse(compiler,  condition,  new  FoldArrayAction());  break;  [BUGGY]    }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	NodeTraversal.traverse(compiler,  condition,  new  FoldArrayAction());  break;	      	non-compiled	[CE]  	8	None	replace
55	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this);  break;  [CE]  [FE]                              AssertionFailedError    [CONTEXT]    replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }    [BUGGY]  NodeTraversal.traverse(compiler,  n,  this);  break;  [BUGGY]    }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	NodeTraversal.traverse(compiler,  n,  this);  break;	      	non-compiled	[CE]  	8	None	replace
56	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  condition);  break;  [CE]  [FE]                                AssertionFailedError    [CONTEXT]    replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }    [BUGGY]  NodeTraversal.traverse(compiler,  n,  condition);  break;  [BUGGY]    }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	NodeTraversal.traverse(compiler,  n,  condition);  break;	      	non-compiled	[CE]  	8	None	replace
57	[BUG]  [BUGGY]  n.removeChild(right);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }    [BUGGY]  n.removeChild(right);  [BUGGY]    }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	n.removeChild(right);	  return    n.getFirstChild();    	non-compiled	[CE]  	1	None	replace
58	[BUG]  [BUGGY]  return  parent.replaceChild(n,  replacement);  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }    [BUGGY]  return  parent.replaceChild(n,  replacement);  [BUGGY]    }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  parent.replaceChild(n,  replacement);	  return    replacement;    	non-compiled	[CE]  	7	None	replace
59	[BUG]  [BUGGY]  return  parent.replaceChild(n,  newRoot);  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }    [BUGGY]  return  parent.replaceChild(n,  newRoot);  [BUGGY]    }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  parent.replaceChild(n,  newRoot);	  return    replacement;    	non-compiled	[CE]  	7	None	replace
60	[BUG]  [BUGGY]  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }    [BUGGY]  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  [BUGGY]    }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();	      	non-compiled	[CE]  	8	None	replace
61	[BUG]  [BUGGY]  n.detachChildren();  parent.replaceChild(n,  replacement);  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }    [BUGGY]  n.detachChildren();  parent.replaceChild(n,  replacement);  [BUGGY]    }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	n.detachChildren();  parent.replaceChild(n,  replacement);	      	non-compiled	[CE]  	8	None	replace
62	[BUG]  [BUGGY]  n.detachChildren();  parent.replaceChild(n,  newRoot);  [CE]  [FE]                          AssertionFailedError    [CONTEXT]    replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }    [BUGGY]  n.detachChildren();  parent.replaceChild(n,  newRoot);  [BUGGY]    }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	n.detachChildren();  parent.replaceChild(n,  newRoot);	      	non-compiled	[CE]  	8	None	replace
63	[BUG]  [BUGGY]  n.detachChildren();  parent.replaceChild(n,  replace);  reportCodeChange();  [CE]  [FE]                            AssertionFailedError    [CONTEXT]    replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }    [BUGGY]  n.detachChildren();  parent.replaceChild(n,  replace);  reportCodeChange();  [BUGGY]    }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	n.detachChildren();  parent.replaceChild(n,  replace);  reportCodeChange();	      	non-compiled	[CE]  	8	None	replace
64	[BUG]  [BUGGY]  n.removeChild(right);  break;  [CE]  [FE]                              AssertionFailedError    [CONTEXT]    replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }    [BUGGY]  n.removeChild(right);  break;  [BUGGY]    }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	n.removeChild(right);  break;	      	non-compiled	[CE]  	8	None	replace
65	[BUG]  [BUGGY]  return  right.getNext();  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }    [BUGGY]  return  right.getNext();  [BUGGY]    }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  right.getNext();	  return    n.getNext();    	non-compiled	[CE]  	6	None	replace
