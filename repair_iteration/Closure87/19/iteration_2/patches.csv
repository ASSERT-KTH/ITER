bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  n.removeChild(left);  break;  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  n.removeChild(left);  break;  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	n.removeChild(left);  break;	  n.removeChild(leftParent);    break;    	non-compiled	[CE]  	33	None	replace
2	[BUG]  [BUGGY]  n.removeChild(leftNode);  break;  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  n.removeChild(leftNode);  break;  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	n.removeChild(leftNode);  break;	  n.removeChild(leftParent);    break;    	non-compiled	[CE]  	33	None	replace
3	[BUG]  [BUGGY]  n.removeChild(left,  replacement);  break;  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  n.removeChild(left,  replacement);  break;  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	n.removeChild(left,  replacement);  break;	  n.removeChild(leftParent);    break;    	non-compiled	[CE]  	33	None	replace
4	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  trueNode,  new  FoldArrayAction());  break;  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  trueNode,  new  FoldArrayAction());  break;  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	NodeTraversal.traverse(compiler,  trueNode,  new  FoldArrayAction());  break;	  NodeTraversal.traverse(compiler,    condition,    new    FoldArrayAction());    break;    	non-compiled	[CE]  	54	None	replace
5	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  falseNode,  new  FoldArrayAction());  break;  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  falseNode,  new  FoldArrayAction());  break;  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	NodeTraversal.traverse(compiler,  falseNode,  new  FoldArrayAction());  break;	  NodeTraversal.traverse(compiler,    condition,    new    FoldArrayAction());    break;    	non-compiled	[CE]  	54	None	replace
6	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  FoldArrayAction());  break;  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  FoldArrayAction());  break;  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	NodeTraversal.traverse(compiler,  node,  new  FoldArrayAction());  break;	  NodeTraversal.traverse(compiler,    condition,    new    FoldArrayAction());    break;    	non-compiled	[CE]  	54	None	replace
7	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  new  FoldArrayAction());  break;  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  new  FoldArrayAction());  break;  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	NodeTraversal.traverse(compiler,  parent,  new  FoldArrayAction());  break;	  NodeTraversal.traverse(compiler,    condition,    new    FoldArrayAction());    break;    	non-compiled	[CE]  	54	None	replace
8	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  right,  new  FoldArrayAction());  break;  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  right,  new  FoldArrayAction());  break;  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	NodeTraversal.traverse(compiler,  right,  new  FoldArrayAction());  break;	  NodeTraversal.traverse(compiler,    condition,    new    FoldArrayAction());    break;    	non-compiled	[CE]  	54	None	replace
9	[BUG]  [BUGGY]  replaceChild(n,  condition.getLastChild());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  replaceChild(n,  condition.getLastChild());  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	replaceChild(n,  condition.getLastChild());	  return    condition.getFirstChild();    	non-compiled	[CE]  	27	None	replace
10	[BUG]  [BUGGY]  replaceChild(n,  condition.getFirstChild());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  replaceChild(n,  condition.getFirstChild());  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	replaceChild(n,  condition.getFirstChild());	  return    condition.getFirstChild();    	non-compiled	[CE]  	27	None	replace
11	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent);  break;  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent);  break;  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	NodeTraversal.traverse(compiler,  n,  parent);  break;	  NodeTraversal.traverse(compiler,    n,    condition);    break;    	non-compiled	[CE]  	56	None	replace
12	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  trueNode,  condition);  break;  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  trueNode,  condition);  break;  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	NodeTraversal.traverse(compiler,  trueNode,  condition);  break;	  NodeTraversal.traverse(compiler,    n,    condition);    break;    	non-compiled	[CE]  	56	None	replace
13	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  trueNode);  break;  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  trueNode);  break;  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	NodeTraversal.traverse(compiler,  n,  trueNode);  break;	  NodeTraversal.traverse(compiler,    n,    condition);    break;    	non-compiled	[CE]  	56	None	replace
14	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  result);  break;  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  result);  break;  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	NodeTraversal.traverse(compiler,  n,  result);  break;	  NodeTraversal.traverse(compiler,    n,    condition);    break;    	non-compiled	[CE]  	56	None	replace
15	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  falseNode);  break;  [CE]  [FE]                                            AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  falseNode);  break;  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	NodeTraversal.traverse(compiler,  n,  falseNode);  break;	  NodeTraversal.traverse(compiler,    n,    condition);    break;    	non-compiled	[CE]  	56	None	replace
16	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  condition);  break;  [CE]  [FE]                                              AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  condition);  break;  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  condition);  break;	  NodeTraversal.traverse(compiler,    n,    condition);    break;    	non-compiled	[CE]  	56	None	replace
17	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  newRoot,  condition);  break;  [CE]  [FE]                                                AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  newRoot,  condition);  break;  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	NodeTraversal.traverse(compiler,  n,  newRoot,  condition);  break;	  NodeTraversal.traverse(compiler,    n,    condition);    break;    	non-compiled	[CE]  	56	None	replace
18	[BUG]  [BUGGY]  return  rightParent.getNext();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  rightParent.getNext();  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  rightParent.getNext();	  return    parent.getNext();    	non-compiled	[CE]  	43	None	replace
19	[BUG]  [BUGGY]  return  node.getNext();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  node.getNext();  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  node.getNext();	  return    parent.getNext();    	non-compiled	[CE]  	43	None	replace
20	[BUG]  [BUGGY]  return  left.getNext();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  left.getNext();  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  left.getNext();	  return    parent.getNext();    	non-compiled	[CE]  	43	None	replace
21	[BUG]  [BUGGY]  n.detachChildren();  parent.replaceChild(n,  right);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  n.detachChildren();  parent.replaceChild(n,  right);  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	n.detachChildren();  parent.replaceChild(n,  right);	  n.detachChildren();    parent.replaceChild(n,    replacement);    	non-compiled	[CE]  	61	None	replace
22	[BUG]  [BUGGY]  n.detachChildren();  parent.replaceChild(n,  condition);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  n.detachChildren();  parent.replaceChild(n,  condition);  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	n.detachChildren();  parent.replaceChild(n,  condition);	  n.detachChildren();    parent.replaceChild(n,    replacement);    	non-compiled	[CE]  	61	None	replace
23	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  condition);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  condition);  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	NodeTraversal.traverse(compiler,  n,  this,  condition);	  NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  	34	None	replace
24	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  null);  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  null);  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	NodeTraversal.traverse(compiler,  n,  null);	  NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  	34	None	replace
25	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	NodeTraversal.traverse(compiler,  n,  INVALID_REGULAR_EXPRESSION_FLAGS);	  NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  	34	None	replace
26	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  falseNode);  [CE]  [FE]                                            AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  falseNode);  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	NodeTraversal.traverse(compiler,  n,  falseNode);	  NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  	34	None	replace
27	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent);  [CE]  [FE]                                              AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent);  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	NodeTraversal.traverse(compiler,  n,  parent);	  NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  	34	None	replace
28	[BUG]  [BUGGY]  Traversal.traverse(compiler,  n,  this);  [CE]  [FE]                                                AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  Traversal.traverse(compiler,  n,  this);  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	Traversal.traverse(compiler,  n,  this);	  NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  	34	None	replace
29	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  condition);  break;  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  condition);  break;  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	NodeTraversal.traverse(compiler,  n,  this,  condition);  break;	  NodeTraversal.traverse(compiler,    n,    this);    break;    	non-compiled	[CE]  	55	None	replace
30	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  trueNode);  break;  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  trueNode);  break;  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	NodeTraversal.traverse(compiler,  n,  this,  trueNode);  break;	  NodeTraversal.traverse(compiler,    n,    this);    break;    	non-compiled	[CE]  	55	None	replace
31	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  null);  break;  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  null);  break;  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	NodeTraversal.traverse(compiler,  n,  null);  break;	  NodeTraversal.traverse(compiler,    n,    this);    break;    	non-compiled	[CE]  	55	None	replace
32	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  right);  break;  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  right);  break;  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	NodeTraversal.traverse(compiler,  n,  this,  right);  break;	  NodeTraversal.traverse(compiler,    n,    this);    break;    	non-compiled	[CE]  	55	None	replace
33	[BUG]  [BUGGY]  Context.traverse(compiler,  n,  this);  break;  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  Context.traverse(compiler,  n,  this);  break;  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	Context.traverse(compiler,  n,  this);  break;	  NodeTraversal.traverse(compiler,    n,    this);    break;    	non-compiled	[CE]  	55	None	replace
34	[BUG]  [BUGGY]  n.removeChild(parent);  break;  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  n.removeChild(parent);  break;  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	n.removeChild(parent);  break;	  n.removeChild(right);    break;    	non-compiled	[CE]  	64	None	replace
35	[BUG]  [BUGGY]  n.removeChild(right,  replacement);  break;  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  n.removeChild(right,  replacement);  break;  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	n.removeChild(right,  replacement);  break;	  n.removeChild(right);    break;    	non-compiled	[CE]  	64	None	replace
36	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  condition);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  condition);  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  condition);	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  	31	None	replace
37	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getFirstChild());  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getFirstChild());  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getFirstChild());	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  	31	None	replace
38	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  trueNode);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  trueNode);  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  trueNode);	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  	31	None	replace
39	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME);  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	Preconditions.checkState(n.getType()!=  Token.NAME);	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  	31	None	replace
40	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getString());  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getString());  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getString());	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  	31	None	replace
41	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.NAME);  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	Preconditions.checkState(parent.getType()  ==  Token.NAME);	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  	31	None	replace
42	[BUG]  [BUGGY]  return  n.getLastChild().removeChild(left);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  n.getLastChild().removeChild(left);  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  n.getLastChild().removeChild(left);	  return    n.getFirstChild().removeChild(left);    	non-compiled	[CE]  	42	None	replace
43	[BUG]  [BUGGY]  return  n.getLastChild().removeChild(right);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  n.getLastChild().removeChild(right);  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  n.getLastChild().removeChild(right);	  return    n.getFirstChild().removeChild(left);    	non-compiled	[CE]  	42	None	replace
44	[BUG]  [BUGGY]  return  leftParent.getFirstChild().removeChild(left);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  leftParent.getFirstChild().removeChild(left);  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  leftParent.getFirstChild().removeChild(left);	  return    n.getFirstChild().removeChild(left);    	non-compiled	[CE]  	42	None	replace
45	[BUG]  [BUGGY]  return  left.getFirstChild().removeChild(left);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  left.getFirstChild().removeChild(left);  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  left.getFirstChild().removeChild(left);	  return    n.getFirstChild().removeChild(left);    	non-compiled	[CE]  	42	None	replace
46	[BUG]  [BUGGY]  return  n.getFirstChild().getNext().removeChild(left);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  n.getFirstChild().getNext().removeChild(left);  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  n.getFirstChild().getNext().removeChild(left);	  return    n.getFirstChild().removeChild(left);    	non-compiled	[CE]  	42	None	replace
47	[BUG]  [BUGGY]  return  n.getFirstChild().removeChild(left,  condition);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  n.getFirstChild().removeChild(left,  condition);  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  n.getFirstChild().removeChild(left,  condition);	  return    n.getFirstChild().removeChild(left);    	non-compiled	[CE]  	42	None	replace
48	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  trueNode,  new  FoldArrayAction());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  trueNode,  new  FoldArrayAction());  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	NodeTraversal.traverse(compiler,  trueNode,  new  FoldArrayAction());	  NodeTraversal.traverse(compiler,    condition,    new    FoldArrayAction());    	non-compiled	[CE]  	52	None	replace
49	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  falseNode,  new  FoldArrayAction());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  falseNode,  new  FoldArrayAction());  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	NodeTraversal.traverse(compiler,  falseNode,  new  FoldArrayAction());	  NodeTraversal.traverse(compiler,    condition,    new    FoldArrayAction());    	non-compiled	[CE]  	52	None	replace
50	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  new  FoldArrayAction());  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  new  FoldArrayAction());  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	NodeTraversal.traverse(compiler,  parent,  new  FoldArrayAction());	  NodeTraversal.traverse(compiler,    condition,    new    FoldArrayAction());    	non-compiled	[CE]  	52	None	replace
51	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  right,  new  FoldArrayAction());  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  right,  new  FoldArrayAction());  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	NodeTraversal.traverse(compiler,  right,  new  FoldArrayAction());	  NodeTraversal.traverse(compiler,    condition,    new    FoldArrayAction());    	non-compiled	[CE]  	52	None	replace
52	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  FoldArrayAction(),  condition);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  new  FoldArrayAction(),  condition);  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	NodeTraversal.traverse(compiler,  new  FoldArrayAction(),  condition);	  NodeTraversal.traverse(compiler,    condition,    new    FoldArrayAction());    	non-compiled	[CE]  	52	None	replace
53	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  FoldArrayAction());  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  node,  new  FoldArrayAction());  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	NodeTraversal.traverse(compiler,  node,  new  FoldArrayAction());	  NodeTraversal.traverse(compiler,    condition,    new    FoldArrayAction());    	non-compiled	[CE]  	52	None	replace
54	[BUG]  [BUGGY]  return  rval;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  rval;  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  rval;	  return    result;    	non-compiled	[CE]  	9	None	replace
55	[BUG]  [BUGGY]  return  leftParent.getFirstChild();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  leftParent.getFirstChild();  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  leftParent.getFirstChild();	  return    leftParent.getNext();    	non-compiled	[CE]  	45	None	replace
56	[BUG]  [BUGGY]  return  leftParent.getNext(),  trueNode;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  leftParent.getNext(),  trueNode;  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  leftParent.getNext(),  trueNode;	  return    leftParent.getNext();    	non-compiled	[CE]  	45	None	replace
57	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.FUNCTION);  break;  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.FUNCTION);  break;  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	Preconditions.checkState(n.getType()!=  Token.FUNCTION);  break;	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    break;    	non-compiled	[CE]  	32	None	replace
58	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION,  condition);  break;  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION,  condition);  break;  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION,  condition);  break;	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    break;    	non-compiled	[CE]  	32	None	replace
59	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION,  n.getFirstChild());  break;  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION,  n.getFirstChild());  break;  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION,  n.getFirstChild());  break;	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    break;    	non-compiled	[CE]  	32	None	replace
60	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  break;  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  break;  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  break;	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    break;    	non-compiled	[CE]  	32	None	replace
61	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT);  break;  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT);  break;  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT);  break;	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    break;    	non-compiled	[CE]  	32	None	replace
62	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION,  trueNode);  break;  [CE]  [FE]                                            AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION,  trueNode);  break;  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION,  trueNode);  break;	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    break;    	non-compiled	[CE]  	32	None	replace
63	[BUG]  [BUGGY]  return  trueNode.cloneTree();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  trueNode.cloneTree();  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  trueNode.cloneTree();	  return    trueNode;    	non-compiled	[CE]  	8	None	replace
64	[BUG]  [BUGGY]  return  trueNode  &&  falseNode.getType()  ==  Token.EXPR_RESULT;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  trueNode  &&  falseNode.getType()  ==  Token.EXPR_RESULT;  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  trueNode  &&  falseNode.getType()  ==  Token.EXPR_RESULT;	  return    trueNode;    	non-compiled	[CE]  	8	None	replace
65	[BUG]  [BUGGY]  return  trueNode  &&  falseNode.getType()  ==  Token.FUNCTION;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  trueNode  &&  falseNode.getType()  ==  Token.FUNCTION;  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  trueNode  &&  falseNode.getType()  ==  Token.FUNCTION;	  return    trueNode;    	non-compiled	[CE]  	8	None	replace
66	[BUG]  [BUGGY]  return  trueNode.getType()  ==  Token.FUNCTION?  trueNode  :  falseNode;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  trueNode.getType()  ==  Token.FUNCTION?  trueNode  :  falseNode;  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  trueNode.getType()  ==  Token.FUNCTION?  trueNode  :  falseNode;	  return    trueNode;    	non-compiled	[CE]  	8	None	replace
67	[BUG]  [BUGGY]  return  trueNode.getNext();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  trueNode.getNext();  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  trueNode.getNext();	  return    trueNode;    	non-compiled	[CE]  	8	None	replace
68	[BUG]  [BUGGY]  return  trueNode.getType()  ==  Token.NAME?  trueNode  :  falseNode;  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  trueNode.getType()  ==  Token.NAME?  trueNode  :  falseNode;  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  trueNode.getType()  ==  Token.NAME?  trueNode  :  falseNode;	  return    trueNode;    	non-compiled	[CE]  	8	None	replace
69	[BUG]  [BUGGY]  return  leftParent.cloneTree();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  leftParent.cloneTree();  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  leftParent.cloneTree();	  return    leftParent;    	non-compiled	[CE]  	21	None	replace
70	[BUG]  [BUGGY]  return  leftParent.replaceChild(n,  replacement);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  leftParent.replaceChild(n,  replacement);  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  leftParent.replaceChild(n,  replacement);	  return    leftParent;    	non-compiled	[CE]  	21	None	replace
71	[BUG]  [BUGGY]  return  leftParent  &&  parent.getType()  ==  Token.FUNCTION;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  leftParent  &&  parent.getType()  ==  Token.FUNCTION;  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  leftParent  &&  parent.getType()  ==  Token.FUNCTION;	  return    leftParent;    	non-compiled	[CE]  	21	None	replace
72	[BUG]  [BUGGY]  return  leftParent  ||  parent.getType()  ==  Token.FUNCTION;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  leftParent  ||  parent.getType()  ==  Token.FUNCTION;  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  leftParent  ||  parent.getType()  ==  Token.FUNCTION;	  return    leftParent;    	non-compiled	[CE]  	21	None	replace
73	[BUG]  [BUGGY]  return  leftParent?  trueNode  :  falseNode;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  leftParent?  trueNode  :  falseNode;  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  leftParent?  trueNode  :  falseNode;	  return    leftParent;    	non-compiled	[CE]  	21	None	replace
74	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getFirstChild()  :  n.getLastChild();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getFirstChild()  :  n.getLastChild();  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  n.getType()  ==  Token.NAME?  n.getFirstChild()  :  n.getLastChild();	  return    n.getType()    ==    Token.NAME?    n.getFirstChild()    :    n.getNext();    	non-compiled	[CE]  	3	None	replace
75	[BUG]  [BUGGY]  return  n.getType()!=  Token.NAME?  n.getFirstChild()  :  n.getNext();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  n.getType()!=  Token.NAME?  n.getFirstChild()  :  n.getNext();  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  n.getType()!=  Token.NAME?  n.getFirstChild()  :  n.getNext();	  return    n.getType()    ==    Token.NAME?    n.getFirstChild()    :    n.getNext();    	non-compiled	[CE]  	3	None	replace
76	[BUG]  [BUGGY]  return  condition.getType()  ==  Token.NAME?  n.getFirstChild()  :  n.getNext();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  condition.getType()  ==  Token.NAME?  n.getFirstChild()  :  n.getNext();  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  condition.getType()  ==  Token.NAME?  n.getFirstChild()  :  n.getNext();	  return    n.getType()    ==    Token.NAME?    n.getFirstChild()    :    n.getNext();    	non-compiled	[CE]  	3	None	replace
77	[BUG]  [BUGGY]  return  parent.detachChildren();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  parent.detachChildren();  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  parent.detachChildren();	  return    n.detachChildren();    	non-compiled	[CE]  	47	None	replace
78	[BUG]  [BUGGY]  return  leftParent.removeFirstChild();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  leftParent.removeFirstChild();  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  leftParent.removeFirstChild();	  return    parent.removeFirstChild();    	non-compiled	[CE]  	18	None	replace
79	[BUG]  [BUGGY]  return  right.removeFirstChild();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  right.removeFirstChild();  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  right.removeFirstChild();	  return    parent.removeFirstChild();    	non-compiled	[CE]  	18	None	replace
80	[BUG]  [BUGGY]  return  node.removeFirstChild();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  node.removeFirstChild();  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  node.removeFirstChild();	  return    parent.removeFirstChild();    	non-compiled	[CE]  	18	None	replace
81	[BUG]  [BUGGY]  removeChild(parent.getLastChild());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  removeChild(parent.getLastChild());  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	removeChild(parent.getLastChild());	  removeChild(n.getLastChild());    	non-compiled	[CE]  	19	None	replace
82	[BUG]  [BUGGY]  removeChild(n.getLastChild(),  condition);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  removeChild(n.getLastChild(),  condition);  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	removeChild(n.getLastChild(),  condition);	  removeChild(n.getLastChild());    	non-compiled	[CE]  	19	None	replace
83	[BUG]  [BUGGY]  parent.removeChild(n.getLastChild());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  parent.removeChild(n.getLastChild());  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	parent.removeChild(n.getLastChild());	  removeChild(n.getLastChild());    	non-compiled	[CE]  	19	None	replace
84	[BUG]  [BUGGY]  Preconditions.checkState(n.getFirstChild()!=  n);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  Preconditions.checkState(n.getFirstChild()!=  n);  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	Preconditions.checkState(n.getFirstChild()!=  n);	  removeChild(n.getLastChild());    	non-compiled	[CE]  	19	None	replace
85	[BUG]  [BUGGY]  return  n.getLastChild().getLastChild();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  n.getLastChild().getLastChild();  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  n.getLastChild().getLastChild();	  return    n.getLastChild().getFirstChild();    	non-compiled	[CE]  	39	None	replace
86	[BUG]  [BUGGY]  return  parent.getLastChild().getFirstChild();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  parent.getLastChild().getFirstChild();  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  parent.getLastChild().getFirstChild();	  return    n.getLastChild().getFirstChild();    	non-compiled	[CE]  	39	None	replace
87	[BUG]  [BUGGY]  return  right.getLastChild().getFirstChild();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  right.getLastChild().getFirstChild();  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  right.getLastChild().getFirstChild();	  return    n.getLastChild().getFirstChild();    	non-compiled	[CE]  	39	None	replace
88	[BUG]  [BUGGY]  return  n.getLastChild().getString();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  n.getLastChild().getString();  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  n.getLastChild().getString();	  return    n.getLastChild().getFirstChild();    	non-compiled	[CE]  	39	None	replace
89	[BUG]  [BUGGY]  Node  right  =  n.getFirstChild();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  Node  right  =  n.getFirstChild();  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	Node  right  =  n.getFirstChild();	  Node    right    =    n.getLastChild();    	non-compiled	[CE]  	29	None	replace
90	[BUG]  [BUGGY]  Node  rightParent  =  n.getFirstChild();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  Node  rightParent  =  n.getFirstChild();  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	Node  rightParent  =  n.getFirstChild();	  Node    right    =    n.getLastChild();    	non-compiled	[CE]  	29	None	replace
91	[BUG]  [BUGGY]  Node  right  =  parent.getLastChild();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  Node  right  =  parent.getLastChild();  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	Node  right  =  parent.getLastChild();	  Node    right    =    n.getLastChild();    	non-compiled	[CE]  	29	None	replace
92	[BUG]  [BUGGY]  Node  right  =  leftParent.getLastChild();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  Node  right  =  leftParent.getLastChild();  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	Node  right  =  leftParent.getLastChild();	  Node    right    =    n.getLastChild();    	non-compiled	[CE]  	29	None	replace
93	[BUG]  [BUGGY]  Node  right  =  parent.getFirstChild();  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  Node  right  =  parent.getFirstChild();  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	Node  right  =  parent.getFirstChild();	  Node    right    =    n.getLastChild();    	non-compiled	[CE]  	29	None	replace
94	[BUG]  [BUGGY]  return  condition.getType()  ==  Token.FUNCTION?  trueNode  :  Integer.toString(n.getFirstChild().getLastChild());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  condition.getType()  ==  Token.FUNCTION?  trueNode  :  Integer.toString(n.getFirstChild().getLastChild());  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  condition.getType()  ==  Token.FUNCTION?  trueNode  :  Integer.toString(n.getFirstChild().getLastChild());	  return    condition;    	non-compiled	[CE]  	22	None	replace
95	[BUG]  [BUGGY]  return  condition.cloneTree();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  condition.cloneTree();  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  condition.cloneTree();	  return    condition;    	non-compiled	[CE]  	22	None	replace
96	[BUG]  [BUGGY]  return  condition.getType()  ==  Token.FUNCTION?  trueNode  :  Node.newString(Token.NAME,  n.getFirstChild().getLastChild()));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  condition.getType()  ==  Token.FUNCTION?  trueNode  :  Node.newString(Token.NAME,  n.getFirstChild().getLastChild()));  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  condition.getType()  ==  Token.FUNCTION?  trueNode  :  Node.newString(Token.NAME,  n.getFirstChild().getLastChild()));	  return    condition;    	non-compiled	[CE]  	22	None	replace
97	[BUG]  [BUGGY]  return  condition.getType()  ==  Token.FUNCTION?  trueNode  :  Integer.toString(n.getLastChild());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  condition.getType()  ==  Token.FUNCTION?  trueNode  :  Integer.toString(n.getLastChild());  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  condition.getType()  ==  Token.FUNCTION?  trueNode  :  Integer.toString(n.getLastChild());	  return    condition;    	non-compiled	[CE]  	22	None	replace
98	[BUG]  [BUGGY]  return  condition.restrictByNotNullOrUndefined();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  condition.restrictByNotNullOrUndefined();  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  condition.restrictByNotNullOrUndefined();	  return    condition;    	non-compiled	[CE]  	22	None	replace
99	[BUG]  [BUGGY]  return  condition.getType()  ==  Token.FUNCTION?  trueNode  :  Integer.toString(n.getFirstChild().getNext());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  condition.getType()  ==  Token.FUNCTION?  trueNode  :  Integer.toString(n.getFirstChild().getNext());  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  condition.getType()  ==  Token.FUNCTION?  trueNode  :  Integer.toString(n.getFirstChild().getNext());	  return    condition;    	non-compiled	[CE]  	22	None	replace
100	[BUG]  [BUGGY]  return  right.getFirstChild().getNext();  [CE]  [FE]            AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  right.getFirstChild().getNext();  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  right.getFirstChild().getNext();	  return    n.getFirstChild().getNext();    	non-compiled	[CE]  	49	None	replace
101	[BUG]  [BUGGY]  return  parent.getFirstChild().getNext();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  parent.getFirstChild().getNext();  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  parent.getFirstChild().getNext();	  return    n.getFirstChild().getNext();    	non-compiled	[CE]  	49	None	replace
102	[BUG]  [BUGGY]  return  n.getFirstChild().getParent();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  n.getFirstChild().getParent();  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  n.getFirstChild().getParent();	  return    n.getFirstChild().getNext();    	non-compiled	[CE]  	49	None	replace
103	[BUG]  [BUGGY]  return  leftParent.removeChild(right);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  leftParent.removeChild(right);  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  leftParent.removeChild(right);	  return    n.removeChild(leftParent);    	non-compiled	[CE]  	7	None	replace
104	[BUG]  [BUGGY]  parent.replaceChild(n,  leftParent);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  parent.replaceChild(n,  leftParent);  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	parent.replaceChild(n,  leftParent);	  return    n.removeChild(leftParent);    	non-compiled	[CE]  	7	None	replace
105	[BUG]  [BUGGY]  return  leftParent.removeChild(left);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  leftParent.removeChild(left);  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  leftParent.removeChild(left);	  return    n.removeChild(leftParent);    	non-compiled	[CE]  	7	None	replace
106	[BUG]  [BUGGY]  return  leftParent.removeChild(parent);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  leftParent.removeChild(parent);  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  leftParent.removeChild(parent);	  return    n.removeChild(leftParent);    	non-compiled	[CE]  	7	None	replace
107	[BUG]  [BUGGY]  parent.replaceChild(n,  condition);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  parent.replaceChild(n,  condition);  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	parent.replaceChild(n,  condition);	  parent.removeChild(n);    	non-compiled	[CE]  	35	None	replace
108	[BUG]  [BUGGY]  parent.replaceChild(n,  replace);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  parent.replaceChild(n,  replace);  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	parent.replaceChild(n,  replace);	  parent.removeChild(n);    	non-compiled	[CE]  	35	None	replace
109	[BUG]  [BUGGY]  return  n.getType()  ==  Token.CALL?  n.getFirstChild().getNext()  :  Node.newString(Token.NAME);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  n.getType()  ==  Token.CALL?  n.getFirstChild().getNext()  :  Node.newString(Token.NAME);  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  n.getType()  ==  Token.CALL?  n.getFirstChild().getNext()  :  Node.newString(Token.NAME);	  return    n.getType()    ==    Token.CALL?    n.getNext()    :    Node.newString(Token.NAME);    	non-compiled	[CE]  	2	None	replace
110	[BUG]  [BUGGY]  return  n.getType()  ==  Token.CALL?  n.getNext()  :  Node.newString(Token.NAME,  condition);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  n.getType()  ==  Token.CALL?  n.getNext()  :  Node.newString(Token.NAME,  condition);  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  n.getType()  ==  Token.CALL?  n.getNext()  :  Node.newString(Token.NAME,  condition);	  return    n.getType()    ==    Token.CALL?    n.getNext()    :    Node.newString(Token.NAME);    	non-compiled	[CE]  	2	None	replace
111	[BUG]  [BUGGY]  return  n.getType()  ==  Token.CALL?  n.getString()  :  Node.newString(Token.NAME);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  n.getType()  ==  Token.CALL?  n.getString()  :  Node.newString(Token.NAME);  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  n.getType()  ==  Token.CALL?  n.getString()  :  Node.newString(Token.NAME);	  return    n.getType()    ==    Token.CALL?    n.getNext()    :    Node.newString(Token.NAME);    	non-compiled	[CE]  	2	None	replace
112	[BUG]  [BUGGY]  return  n.getType()  ==  Token.CALL?  n.getLastChild()  :  Node.newString(Token.NAME);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  n.getType()  ==  Token.CALL?  n.getLastChild()  :  Node.newString(Token.NAME);  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  n.getType()  ==  Token.CALL?  n.getLastChild()  :  Node.newString(Token.NAME);	  return    n.getType()    ==    Token.CALL?    n.getNext()    :    Node.newString(Token.NAME);    	non-compiled	[CE]  	2	None	replace
113	[BUG]  [BUGGY]  return  n.getType()  ==  Token.CALL?  n.getNext()  :  Node.newString(Token.NAME,  trueNode);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  n.getType()  ==  Token.CALL?  n.getNext()  :  Node.newString(Token.NAME,  trueNode);  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  n.getType()  ==  Token.CALL?  n.getNext()  :  Node.newString(Token.NAME,  trueNode);	  return    n.getType()    ==    Token.CALL?    n.getNext()    :    Node.newString(Token.NAME);    	non-compiled	[CE]  	2	None	replace
114	[BUG]  [BUGGY]  return  n.getType()  ==  Token.CALL?  n.getParent()  :  Node.newString(Token.NAME);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  n.getType()  ==  Token.CALL?  n.getParent()  :  Node.newString(Token.NAME);  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  n.getType()  ==  Token.CALL?  n.getParent()  :  Node.newString(Token.NAME);	  return    n.getType()    ==    Token.CALL?    n.getNext()    :    Node.newString(Token.NAME);    	non-compiled	[CE]  	2	None	replace
115	[BUG]  [BUGGY]  return  n.replaceChild(parent,  newRoot);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  n.replaceChild(parent,  newRoot);  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  n.replaceChild(parent,  newRoot);	  return    parent.replaceChild(n,    newRoot);    	non-compiled	[CE]  	59	None	replace
116	[BUG]  [BUGGY]  return  n.replaceChild(n,  newRoot);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  n.replaceChild(n,  newRoot);  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  n.replaceChild(n,  newRoot);	  return    parent.replaceChild(n,    newRoot);    	non-compiled	[CE]  	59	None	replace
117	[BUG]  [BUGGY]  return  leftParent.replaceChild(n,  newRoot);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  leftParent.replaceChild(n,  newRoot);  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  leftParent.replaceChild(n,  newRoot);	  return    parent.replaceChild(n,    newRoot);    	non-compiled	[CE]  	59	None	replace
118	[BUG]  [BUGGY]  return  rightParent.replaceChild(n,  newRoot);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  rightParent.replaceChild(n,  newRoot);  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  rightParent.replaceChild(n,  newRoot);	  return    parent.replaceChild(n,    newRoot);    	non-compiled	[CE]  	59	None	replace
119	[BUG]  [BUGGY]  return  parent.replaceChild(n,  leftParent);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  parent.replaceChild(n,  leftParent);  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  parent.replaceChild(n,  leftParent);	  return    parent.replaceChild(n,    newRoot);    	non-compiled	[CE]  	59	None	replace
120	[BUG]  [BUGGY]  return  n.replaceChild(n,  parent);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  n.replaceChild(n,  parent);  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  n.replaceChild(n,  parent);	  return    parent.replaceChild(n,    newRoot);    	non-compiled	[CE]  	59	None	replace
121	[BUG]  [BUGGY]  return  rightParent.cloneTree();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  rightParent.cloneTree();  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  rightParent.cloneTree();	  return    parent.cloneTree();    	non-compiled	[CE]  	10	None	replace
122	[BUG]  [BUGGY]  return  node.cloneTree();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  node.cloneTree();  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  node.cloneTree();	  return    parent.cloneTree();    	non-compiled	[CE]  	10	None	replace
123	[BUG]  [BUGGY]  return  left.cloneTree();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  left.cloneTree();  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  left.cloneTree();	  return    parent.cloneTree();    	non-compiled	[CE]  	10	None	replace
124	[BUG]  [BUGGY]  return  replacement.cloneTree();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  replacement.cloneTree();  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  replacement.cloneTree();	  return    right.cloneTree();    	non-compiled	[CE]  	13	None	replace
125	[BUG]  [BUGGY]  return  parent.clone();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  parent.clone();  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  parent.clone();	  return    n.clone();    	non-compiled	[CE]  	11	None	replace
126	[BUG]  [BUGGY]  return  leftParent.clone();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  leftParent.clone();  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  leftParent.clone();	  return    n.clone();    	non-compiled	[CE]  	11	None	replace
127	[BUG]  [BUGGY]  return  n.getFirstChild()  +  1;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  n.getFirstChild()  +  1;  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  n.getFirstChild()  +  1;	  return    n.getLastChild()    +    1;    	non-compiled	[CE]  	16	None	replace
128	[BUG]  [BUGGY]  return  parent.getLastChild()  +  1;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  parent.getLastChild()  +  1;  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  parent.getLastChild()  +  1;	  return    n.getLastChild()    +    1;    	non-compiled	[CE]  	16	None	replace
129	[BUG]  [BUGGY]  return  node.getLastChild()  +  1;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  node.getLastChild()  +  1;  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  node.getLastChild()  +  1;	  return    n.getLastChild()    +    1;    	non-compiled	[CE]  	16	None	replace
130	[BUG]  [BUGGY]  return  right.getLastChild()  +  1;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  right.getLastChild()  +  1;  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  right.getLastChild()  +  1;	  return    n.getLastChild()    +    1;    	non-compiled	[CE]  	16	None	replace
131	[BUG]  [BUGGY]  return  n.getfirstChild()  +  1;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  n.getfirstChild()  +  1;  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  n.getfirstChild()  +  1;	  return    n.getLastChild()    +    1;    	non-compiled	[CE]  	16	None	replace
132	[BUG]  [BUGGY]  if(trueNode!=  null)return  falseNode;  if(falseNode.getType()  ==  Token.FUNCTION)  {  return  trueNode;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  if(trueNode!=  null)return  falseNode;  if(falseNode.getType()  ==  Token.FUNCTION)  {  return  trueNode;  }  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	if(trueNode!=  null)return  falseNode;  if(falseNode.getType()  ==  Token.FUNCTION)  {  return  trueNode;  }	  return    falseNode;    	non-compiled	[CE]  	46	None	replace
133	[BUG]  [BUGGY]  if(trueNode!=  null)return  falseNode;  if(n.getType()  ==  Token.FUNCTION)  {  return  trueNode;  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  if(trueNode!=  null)return  falseNode;  if(n.getType()  ==  Token.FUNCTION)  {  return  trueNode;  }  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	if(trueNode!=  null)return  falseNode;  if(n.getType()  ==  Token.FUNCTION)  {  return  trueNode;  }	  return    falseNode;    	non-compiled	[CE]  	46	None	replace
134	[BUG]  [BUGGY]  if(trueNode!=  null)return  falseNode;  if(n.getType()  ==  Token.FUNCTION)  {  return  falseNode;  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  if(trueNode!=  null)return  falseNode;  if(n.getType()  ==  Token.FUNCTION)  {  return  falseNode;  }  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	if(trueNode!=  null)return  falseNode;  if(n.getType()  ==  Token.FUNCTION)  {  return  falseNode;  }	  return    falseNode;    	non-compiled	[CE]  	46	None	replace
135	[BUG]  [BUGGY]  if(trueNode!=  null)return  falseNode;  if(falseNode.getType()  ==  Token.FUNCTION)  {  return  falseNode;  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  if(trueNode!=  null)return  falseNode;  if(falseNode.getType()  ==  Token.FUNCTION)  {  return  falseNode;  }  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	if(trueNode!=  null)return  falseNode;  if(falseNode.getType()  ==  Token.FUNCTION)  {  return  falseNode;  }	  return    falseNode;    	non-compiled	[CE]  	46	None	replace
136	[BUG]  [BUGGY]  if(trueNode!=  null)return  falseNode;  if(n.getType()  ==  Token.STRING)  {  return  trueNode;  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  if(trueNode!=  null)return  falseNode;  if(n.getType()  ==  Token.STRING)  {  return  trueNode;  }  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	if(trueNode!=  null)return  falseNode;  if(n.getType()  ==  Token.STRING)  {  return  trueNode;  }	  return    falseNode;    	non-compiled	[CE]  	46	None	replace
137	[BUG]  [BUGGY]  if(trueNode!=  null)  {  return  falseNode;  }  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  if(trueNode!=  null)  {  return  falseNode;  }  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	if(trueNode!=  null)  {  return  falseNode;  }	  return    falseNode;    	non-compiled	[CE]  	46	None	replace
138	[BUG]  [BUGGY]  return  n.replaceChild(parent,  replacement);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  n.replaceChild(parent,  replacement);  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  n.replaceChild(parent,  replacement);	  return    parent.replaceChild(n,    replacement);    	non-compiled	[CE]  	58	None	replace
139	[BUG]  [BUGGY]  return  rightParent.replaceChild(n,  replacement);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  rightParent.replaceChild(n,  replacement);  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  rightParent.replaceChild(n,  replacement);	  return    parent.replaceChild(n,    replacement);    	non-compiled	[CE]  	58	None	replace
140	[BUG]  [BUGGY]  return  parent.replaceChild(n,  condition);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  parent.replaceChild(n,  condition);  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  parent.replaceChild(n,  condition);	  return    parent.replaceChild(n,    replacement);    	non-compiled	[CE]  	58	None	replace
141	[BUG]  [BUGGY]  return  right.replaceChild(n,  replacement);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  right.replaceChild(n,  replacement);  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  right.replaceChild(n,  replacement);	  return    parent.replaceChild(n,    replacement);    	non-compiled	[CE]  	58	None	replace
142	[BUG]  [BUGGY]  return  parent.replaceChild(n,  n);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  parent.replaceChild(n,  n);  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  parent.replaceChild(n,  n);	  return    parent.replaceChild(n,    replacement);    	non-compiled	[CE]  	58	None	replace
143	[BUG]  [BUGGY]  return  rightParent.getLastChild();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  rightParent.getLastChild();  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  rightParent.getLastChild();	  return    leftParent.getLastChild();    	non-compiled	[CE]  	38	None	replace
144	[BUG]  [BUGGY]  return  right.getLastChild();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  right.getLastChild();  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  right.getLastChild();	  return    leftParent.getLastChild();    	non-compiled	[CE]  	38	None	replace
145	[BUG]  [BUGGY]  return  node.getLastChild();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  node.getLastChild();  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  node.getLastChild();	  return    leftParent.getLastChild();    	non-compiled	[CE]  	38	None	replace
146	[BUG]  [BUGGY]  n.removeChild(left);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  n.removeChild(left);  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	n.removeChild(left);	  n.removeChild(right);    	non-compiled	[CE]  	57	None	replace
147	[BUG]  [BUGGY]  n.removeChild(parent);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  n.removeChild(parent);  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	n.removeChild(parent);	  n.removeChild(right);    	non-compiled	[CE]  	57	None	replace
148	[BUG]  [BUGGY]  n.removeChild(leftParent);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  n.removeChild(leftParent);  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	n.removeChild(leftParent);	  n.removeChild(right);    	non-compiled	[CE]  	57	None	replace
149	[BUG]  [BUGGY]  n.removeChild(right,  replacement);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  n.removeChild(right,  replacement);  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	n.removeChild(right,  replacement);	  n.removeChild(right);    	non-compiled	[CE]  	57	None	replace
150	[BUG]  [BUGGY]  n.removeChild(condition);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  n.removeChild(condition);  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	n.removeChild(condition);	  n.removeChild(right);    	non-compiled	[CE]  	57	None	replace
151	[BUG]  [BUGGY]  removeChild(n.getFirstChild(),  condition);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  removeChild(n.getFirstChild(),  condition);  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	removeChild(n.getFirstChild(),  condition);	  removeChild(n.getFirstChild());    	non-compiled	[CE]  	20	None	replace
152	[BUG]  [BUGGY]  removeChild(parent.getFirstChild());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  removeChild(parent.getFirstChild());  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	removeChild(parent.getFirstChild());	  removeChild(n.getFirstChild());    	non-compiled	[CE]  	20	None	replace
153	[BUG]  [BUGGY]  replaceChild(n.getLastChild());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  replaceChild(n.getLastChild());  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	replaceChild(n.getLastChild());	  removeChild(n.getFirstChild());    	non-compiled	[CE]  	20	None	replace
154	[BUG]  [BUGGY]  Node  rightParent  =  parent.getLastChild();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  Node  rightParent  =  parent.getLastChild();  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	Node  rightParent  =  parent.getLastChild();	  Node    rightParent    =    n.getLastChild();    	non-compiled	[CE]  	28	None	replace
155	[BUG]  [BUGGY]  Node  rightParent  =  left.getLastChild();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  Node  rightParent  =  left.getLastChild();  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	Node  rightParent  =  left.getLastChild();	  Node    rightParent    =    n.getLastChild();    	non-compiled	[CE]  	28	None	replace
156	[BUG]  [BUGGY]  Node  rightParent  =  node.getLastChild();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  Node  rightParent  =  node.getLastChild();  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	Node  rightParent  =  node.getLastChild();	  Node    rightParent    =    n.getLastChild();    	non-compiled	[CE]  	28	None	replace
157	[BUG]  [BUGGY]  Node  rightParent  =  parent.getFirstChild();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  Node  rightParent  =  parent.getFirstChild();  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	Node  rightParent  =  parent.getFirstChild();	  Node    rightParent    =    n.getLastChild();    	non-compiled	[CE]  	28	None	replace
158	[BUG]  [BUGGY]  Node  rightParent  =  left.getFirstChild();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  Node  rightParent  =  left.getFirstChild();  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	Node  rightParent  =  left.getFirstChild();	  Node    rightParent    =    n.getLastChild();    	non-compiled	[CE]  	28	None	replace
159	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  FoldArrayAction(),  condition);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  FoldArrayAction(),  condition);  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	NodeTraversal.traverse(compiler,  n,  new  FoldArrayAction(),  condition);	  NodeTraversal.traverse(compiler,    n,    new    FoldArrayAction());    	non-compiled	[CE]  	51	None	replace
160	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  FoldArrayAction());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  FoldArrayAction());  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  new  FoldArrayAction());	  NodeTraversal.traverse(compiler,    n,    new    FoldArrayAction());    	non-compiled	[CE]  	51	None	replace
161	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  falseNode,  new  FoldArrayAction());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  falseNode,  new  FoldArrayAction());  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	NodeTraversal.traverse(compiler,  n,  falseNode,  new  FoldArrayAction());	  NodeTraversal.traverse(compiler,    n,    new    FoldArrayAction());    	non-compiled	[CE]  	51	None	replace
162	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  reportCodeChange());  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  reportCodeChange());  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	NodeTraversal.traverse(compiler,  n,  reportCodeChange());	  NodeTraversal.traverse(compiler,    n,    new    FoldArrayAction());    	non-compiled	[CE]  	51	None	replace
163	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  trueNode,  new  FoldArrayAction());  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  trueNode,  new  FoldArrayAction());  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	NodeTraversal.traverse(compiler,  n,  trueNode,  new  FoldArrayAction());	  NodeTraversal.traverse(compiler,    n,    new    FoldArrayAction());    	non-compiled	[CE]  	51	None	replace
164	[BUG]  [BUGGY]  return  parent.getParent();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  parent.getParent();  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  parent.getParent();	  return    n.getParent();    	non-compiled	[CE]  	4	None	replace
165	[BUG]  [BUGGY]  return  leftParent.getParent();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  leftParent.getParent();  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  leftParent.getParent();	  return    n.getParent();    	non-compiled	[CE]  	4	None	replace
166	[BUG]  [BUGGY]  return  n.getType()  ==  Token.EXPR_RESULT;  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  n.getType()  ==  Token.EXPR_RESULT;  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  n.getType()  ==  Token.EXPR_RESULT;	  return    n.getParent();    	non-compiled	[CE]  	4	None	replace
167	[BUG]  [BUGGY]  return  parent.cloneChildren();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  parent.cloneChildren();  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  parent.cloneChildren();	  return    n.cloneChildren();    	non-compiled	[CE]  	12	None	replace
168	[BUG]  [BUGGY]  return  replacement.getNext();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  replacement.getNext();  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  replacement.getNext();	  return    right.getNext();    	non-compiled	[CE]  	65	None	replace
169	[BUG]  [BUGGY]  return  right.getNext()  &&  NodeUtil.isFunctionDeclaration(n);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  right.getNext()  &&  NodeUtil.isFunctionDeclaration(n);  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  right.getNext()  &&  NodeUtil.isFunctionDeclaration(n);	  return    right.getNext();    	non-compiled	[CE]  	65	None	replace
170	[BUG]  [BUGGY]  parent.replaceChild(n,  newRoot);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  parent.replaceChild(n,  newRoot);  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	parent.replaceChild(n,  newRoot);	  n.detachChildren();    parent.replaceChild(n,    newRoot);    	non-compiled	[CE]  	62	None	replace
171	[BUG]  [BUGGY]  n.detachChildren();  parent.replaceChild(n,  newRoot,  condition);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  n.detachChildren();  parent.replaceChild(n,  newRoot,  condition);  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	n.detachChildren();  parent.replaceChild(n,  newRoot,  condition);	  n.detachChildren();    parent.replaceChild(n,    newRoot);    	non-compiled	[CE]  	62	None	replace
172	[BUG]  [BUGGY]  parent.replaceChild(n,  replacement);  reportCodeChange();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  parent.replaceChild(n,  replacement);  reportCodeChange();  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	parent.replaceChild(n,  replacement);  reportCodeChange();	  n.detachChildren();    parent.replaceChild(n,    replacement);    reportCodeChange();    	non-compiled	[CE]  	60	None	replace
173	[BUG]  [BUGGY]  n.detachChildren();  parent.replaceChild(n,  right);  reportCodeChange();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  n.detachChildren();  parent.replaceChild(n,  right);  reportCodeChange();  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	n.detachChildren();  parent.replaceChild(n,  right);  reportCodeChange();	  n.detachChildren();    parent.replaceChild(n,    replacement);    reportCodeChange();    	non-compiled	[CE]  	60	None	replace
174	[BUG]  [BUGGY]  n.detachChildren();  parent.replaceChild(n,  condition);  reportCodeChange();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  n.detachChildren();  parent.replaceChild(n,  condition);  reportCodeChange();  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	n.detachChildren();  parent.replaceChild(n,  condition);  reportCodeChange();	  n.detachChildren();    parent.replaceChild(n,    replacement);    reportCodeChange();    	non-compiled	[CE]  	60	None	replace
175	[BUG]  [BUGGY]  n.detachChildren();  parent.replaceChild(n,  n);  reportCodeChange();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  n.detachChildren();  parent.replaceChild(n,  n);  reportCodeChange();  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	n.detachChildren();  parent.replaceChild(n,  n);  reportCodeChange();	  n.detachChildren();    parent.replaceChild(n,    replacement);    reportCodeChange();    	non-compiled	[CE]  	60	None	replace
176	[BUG]  [BUGGY]  n.detachChildren();  parent.replaceChild(n,  newRoot);  reportCodeChange();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  n.detachChildren();  parent.replaceChild(n,  newRoot);  reportCodeChange();  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	n.detachChildren();  parent.replaceChild(n,  newRoot);  reportCodeChange();	  n.detachChildren();    parent.replaceChild(n,    replacement);    reportCodeChange();    	non-compiled	[CE]  	60	None	replace
177	[BUG]  [BUGGY]  return  n.getType()  ==  Token.CALL  &&  n.getFirstChild().getType()  ==  Token.NAME  &&  n.getLastChild().getString().equals( "false ")||  n.getLastChild().getString().equals( "false  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  n.getType()  ==  Token.CALL  &&  n.getFirstChild().getType()  ==  Token.NAME  &&  n.getLastChild().getString().equals( "false ")||  n.getLastChild().getString().equals( "false  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  n.getType()  ==  Token.CALL  &&  n.getFirstChild().getType()  ==  Token.NAME  &&  n.getLastChild().getString().equals( "false ")||  n.getLastChild().getString().equals( "false	  return    right;    	non-compiled	[CE]  	24	None	replace
178	[BUG]  [BUGGY]  return  n.getType()  ==  Token.CALL  &&  n.getFirstChild().getType()  ==  Token.NAME  &&  n.getLastChild().getString().equals( "false ")||  n.getLastChil  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  n.getType()  ==  Token.CALL  &&  n.getFirstChild().getType()  ==  Token.NAME  &&  n.getLastChild().getString().equals( "false ")||  n.getLastChil  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  n.getType()  ==  Token.CALL  &&  n.getFirstChild().getType()  ==  Token.NAME  &&  n.getLastChild().getString().equals( "false ")||  n.getLastChil	  return    right;    	non-compiled	[CE]  	24	None	replace
179	[BUG]  [BUGGY]  return  n.getType()  ==  Token.CALL  &&  n.getFirstChild().getType()  ==  Token.NAME  &&  n.getLastChild().getString().equals( "false ")||  n.getLastChild().getString()  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  n.getType()  ==  Token.CALL  &&  n.getFirstChild().getType()  ==  Token.NAME  &&  n.getLastChild().getString().equals( "false ")||  n.getLastChild().getString()  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  n.getType()  ==  Token.CALL  &&  n.getFirstChild().getType()  ==  Token.NAME  &&  n.getLastChild().getString().equals( "false ")||  n.getLastChild().getString()	  return    right;    	non-compiled	[CE]  	24	None	replace
180	[BUG]  [BUGGY]  return  n.getType()  ==  Token.CALL  &&  n.getFirstChild().getType()  ==  Token.NAME  &&  n.getLastChild().getString().equals( "false ")||  n.getLastChild().getString().equals( "false ")  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  n.getType()  ==  Token.CALL  &&  n.getFirstChild().getType()  ==  Token.NAME  &&  n.getLastChild().getString().equals( "false ")||  n.getLastChild().getString().equals( "false ")  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  n.getType()  ==  Token.CALL  &&  n.getFirstChild().getType()  ==  Token.NAME  &&  n.getLastChild().getString().equals( "false ")||  n.getLastChild().getString().equals( "false ")	  return    right;    	non-compiled	[CE]  	24	None	replace
181	[BUG]  [BUGGY]  return  n.getType()  ==  Token.CALL  &&  n.getFirstChild().getType()  ==  Token.NAME  &&  n.getLastChild().getString().equals( "false ")||  n.getLastChild().getString().equals( "true ")  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  n.getType()  ==  Token.CALL  &&  n.getFirstChild().getType()  ==  Token.NAME  &&  n.getLastChild().getString().equals( "false ")||  n.getLastChild().getString().equals( "true ")  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  n.getType()  ==  Token.CALL  &&  n.getFirstChild().getType()  ==  Token.NAME  &&  n.getLastChild().getString().equals( "false ")||  n.getLastChild().getString().equals( "true ")	  return    right;    	non-compiled	[CE]  	24	None	replace
182	[BUG]  [BUGGY]  return  n.getType()  ==  Token.CALL  &&  n.getFirstChild().getType()  ==  Token.NAME  &&  n.getLastChild().getString().equals( "prototype "));  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  n.getType()  ==  Token.CALL  &&  n.getFirstChild().getType()  ==  Token.NAME  &&  n.getLastChild().getString().equals( "prototype "));  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  n.getType()  ==  Token.CALL  &&  n.getFirstChild().getType()  ==  Token.NAME  &&  n.getLastChild().getString().equals( "prototype "));	  return    right;    	non-compiled	[CE]  	24	None	replace
183	[BUG]  [BUGGY]  return  right.getFirstChild();  [CE]  [FE]            AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  right.getFirstChild();  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  right.getFirstChild();	  return    parent.getFirstChild();    	non-compiled	[CE]  	25	None	replace
184	[BUG]  [BUGGY]  replaceChild(n,  replacement);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  replaceChild(n,  replacement);  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	replaceChild(n,  replacement);	  return    parent.getFirstChild();    	non-compiled	[CE]  	25	None	replace
185	[BUG]  [BUGGY]  n.detachChildren();  parent.replaceChild(n,  replace);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  n.detachChildren();  parent.replaceChild(n,  replace);  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	n.detachChildren();  parent.replaceChild(n,  replace);	  n.detachChildren();    parent.replaceChild(n,    replace);    reportCodeChange();    	non-compiled	[CE]  	63	None	replace
186	[BUG]  [BUGGY]  return  parent.cloneNode();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  parent.cloneNode();  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  parent.cloneNode();	  return    n.cloneNode();    	non-compiled	[CE]  	37	None	replace
187	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.FUNCTION);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.FUNCTION);  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	Preconditions.checkState(n.getType()!=  Token.FUNCTION);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	30	None	replace
188	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION,  condition);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION,  condition);  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION,  condition);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	30	None	replace
189	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION,  n.getFirstChild());  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION,  n.getFirstChild());  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION,  n.getFirstChild());	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	30	None	replace
190	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	30	None	replace
191	[BUG]  [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	Preconditions.checkState(parent.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	30	None	replace
192	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION,  trueNode);  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION,  trueNode);  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION,  trueNode);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	30	None	replace
193	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  FoldArrayAction(),  condition);  break;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  FoldArrayAction(),  condition);  break;  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	NodeTraversal.traverse(compiler,  n,  new  FoldArrayAction(),  condition);  break;	  NodeTraversal.traverse(compiler,    n,    new    FoldArrayAction());    break;    	non-compiled	[CE]  	53	None	replace
194	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  FoldArrayAction());  break;  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  new  FoldArrayAction());  break;  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  new  FoldArrayAction());  break;	  NodeTraversal.traverse(compiler,    n,    new    FoldArrayAction());    break;    	non-compiled	[CE]  	53	None	replace
195	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  reportCodeChange());  break;  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  reportCodeChange());  break;  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	NodeTraversal.traverse(compiler,  n,  reportCodeChange());  break;	  NodeTraversal.traverse(compiler,    n,    new    FoldArrayAction());    break;    	non-compiled	[CE]  	53	None	replace
196	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  falseNode,  new  FoldArrayAction());  break;  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  falseNode,  new  FoldArrayAction());  break;  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	NodeTraversal.traverse(compiler,  n,  falseNode,  new  FoldArrayAction());  break;	  NodeTraversal.traverse(compiler,    n,    new    FoldArrayAction());    break;    	non-compiled	[CE]  	53	None	replace
197	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  new  FoldArrayAction());  break;  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  new  FoldArrayAction());  break;  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	NodeTraversal.traverse(compiler,  n,  this,  new  FoldArrayAction());  break;	  NodeTraversal.traverse(compiler,    n,    new    FoldArrayAction());    break;    	non-compiled	[CE]  	53	None	replace
198	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  FoldArrayAction(),  replacement);  break;  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  FoldArrayAction(),  replacement);  break;  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	NodeTraversal.traverse(compiler,  n,  new  FoldArrayAction(),  replacement);  break;	  NodeTraversal.traverse(compiler,    n,    new    FoldArrayAction());    break;    	non-compiled	[CE]  	53	None	replace
199	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getLastChild()  :  n.getFirstChild();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getLastChild()  :  n.getFirstChild();  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  n.getType()  ==  Token.NAME?  n.getLastChild()  :  n.getFirstChild();	  return    n.getType()    ==    Token.NAME?    n.getLastChild()    :    n.getNext();    	non-compiled	[CE]  	1	None	replace
200	[BUG]  [BUGGY]  return  parent.getType()  ==  Token.NAME?  n.getLastChild()  :  n.getNext();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  parent.getType()  ==  Token.NAME?  n.getLastChild()  :  n.getNext();  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  parent.getType()  ==  Token.NAME?  n.getLastChild()  :  n.getNext();	  return    n.getType()    ==    Token.NAME?    n.getLastChild()    :    n.getNext();    	non-compiled	[CE]  	1	None	replace
201	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getLastChild()  :  n.getParent();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getLastChild()  :  n.getParent();  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  n.getType()  ==  Token.NAME?  n.getLastChild()  :  n.getParent();	  return    n.getType()    ==    Token.NAME?    n.getLastChild()    :    n.getNext();    	non-compiled	[CE]  	1	None	replace
202	[BUG]  [BUGGY]  return  n.getFirstChild().getNext().removeChild(right);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  n.getFirstChild().getNext().removeChild(right);  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  n.getFirstChild().getNext().removeChild(right);	  return    n.getFirstChild().removeChild(right);    	non-compiled	[CE]  	40	None	replace
203	[BUG]  [BUGGY]  return  n.getLastChild().removeChild(leftParent);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  n.getLastChild().removeChild(leftParent);  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  n.getLastChild().removeChild(leftParent);	  return    n.getFirstChild().removeChild(right);    	non-compiled	[CE]  	40	None	replace
204	[BUG]  [BUGGY]  return  n.getLastChild().removeChild(parent);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  n.getLastChild().removeChild(parent);  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  n.getLastChild().removeChild(parent);	  return    n.getFirstChild().removeChild(right);    	non-compiled	[CE]  	40	None	replace
205	[BUG]  [BUGGY]  return  parent.getLastChild().getNext();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  parent.getLastChild().getNext();  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  parent.getLastChild().getNext();	  return    n.getLastChild().getNext();    	non-compiled	[CE]  	15	None	replace
206	[BUG]  [BUGGY]  return  n.getLastChild().getParent();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  n.getLastChild().getParent();  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  n.getLastChild().getParent();	  return    n.getLastChild().getNext();    	non-compiled	[CE]  	15	None	replace
207	[BUG]  [BUGGY]  return  right.getLastChild().getNext();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  right.getLastChild().getNext();  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  right.getLastChild().getNext();	  return    n.getLastChild().getNext();    	non-compiled	[CE]  	15	None	replace
208	[BUG]  [BUGGY]  return  n.getLastChild().getNext()  +  1;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  n.getLastChild().getNext()  +  1;  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  n.getLastChild().getNext()  +  1;	  return    n.getLastChild().getNext();    	non-compiled	[CE]  	15	None	replace
209	[BUG]  [BUGGY]  parent.replaceChild(n,  n);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  parent.replaceChild(n,  n);  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	parent.replaceChild(n,  n);	  parent.replaceChild(n,    replacement);    	non-compiled	[CE]  	6	None	replace
210	[BUG]  [BUGGY]  parent.replaceChild(n,  this);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  parent.replaceChild(n,  this);  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	parent.replaceChild(n,  this);	  parent.replaceChild(n,    replacement);    	non-compiled	[CE]  	6	None	replace
211	[BUG]  [BUGGY]  parent.replaceChild(n,  left);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  parent.replaceChild(n,  left);  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	parent.replaceChild(n,  left);	  return    n.removeChild(left);    	non-compiled	[CE]  	5	None	replace
212	[BUG]  [BUGGY]  return  left.removeChild(right);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  left.removeChild(right);  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  left.removeChild(right);	  return    n.removeChild(left);    	non-compiled	[CE]  	5	None	replace
213	[BUG]  [BUGGY]  return  parent.getFirstChild().getLastChild();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  parent.getFirstChild().getLastChild();  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  parent.getFirstChild().getLastChild();	  return    n.getFirstChild().getLastChild();    	non-compiled	[CE]  	50	None	replace
214	[BUG]  [BUGGY]  return  right.getFirstChild().getLastChild();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  right.getFirstChild().getLastChild();  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  right.getFirstChild().getLastChild();	  return    n.getFirstChild().getLastChild();    	non-compiled	[CE]  	50	None	replace
215	[BUG]  [BUGGY]  return  n.getFirstChild().getLastChild()  +  1;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  n.getFirstChild().getLastChild()  +  1;  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  n.getFirstChild().getLastChild()  +  1;	  return    n.getFirstChild().getLastChild();    	non-compiled	[CE]  	50	None	replace
216	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getFirstChild()  :  n.getPrevious();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getFirstChild()  :  n.getPrevious();  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  n.getType()  ==  Token.NAME?  n.getFirstChild()  :  n.getPrevious();	  return    n.getPrevious();    	non-compiled	[CE]  	44	None	replace
217	[BUG]  [BUGGY]  return  parent.getPrevious();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  parent.getPrevious();  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  parent.getPrevious();	  return    n.getPrevious();    	non-compiled	[CE]  	44	None	replace
218	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getNext()  :  Node.newString(Token.NAME);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getNext()  :  Node.newString(Token.NAME);  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  n.getType()  ==  Token.NAME?  n.getNext()  :  Node.newString(Token.NAME);	  return    n.getPrevious();    	non-compiled	[CE]  	44	None	replace
219	[BUG]  [BUGGY]  return  parent.removeFirstChild()  +  1;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  parent.removeFirstChild()  +  1;  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  parent.removeFirstChild()  +  1;	  return    n.removeFirstChild()    +    1;    	non-compiled	[CE]  	48	None	replace
220	[BUG]  [BUGGY]  return  n.removeLastChild()  +  1;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  n.removeLastChild()  +  1;  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  n.removeLastChild()  +  1;	  return    n.removeFirstChild()    +    1;    	non-compiled	[CE]  	48	None	replace
221	[BUG]  [BUGGY]  return  parent.getFirstChild().removeChild(n);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  parent.getFirstChild().removeChild(n);  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  parent.getFirstChild().removeChild(n);	  return    n.getFirstChild().removeChild(parent);    	non-compiled	[CE]  	41	None	replace
222	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  right);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  right);  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	NodeTraversal.traverse(compiler,  n,  this,  right);	  NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  	34	None	replace
223	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  condition,  left);  break;  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  condition,  left);  break;  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	NodeTraversal.traverse(compiler,  n,  condition,  left);  break;	  NodeTraversal.traverse(compiler,    n,    condition);    break;    	non-compiled	[CE]  	56	None	replace
224	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  condition,  right);  break;  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  condition,  right);  break;  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	NodeTraversal.traverse(compiler,  n,  condition,  right);  break;	  NodeTraversal.traverse(compiler,    n,    condition);    break;    	non-compiled	[CE]  	56	None	replace
225	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  condition,  leftParent);  break;  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  condition,  leftParent);  break;  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	NodeTraversal.traverse(compiler,  n,  condition,  leftParent);  break;	  NodeTraversal.traverse(compiler,    n,    condition);    break;    	non-compiled	[CE]  	56	None	replace
226	[BUG]  [BUGGY]  Preconditions.checkState(n.getFirstChild()!=  null);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  Preconditions.checkState(n.getFirstChild()!=  null);  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	Preconditions.checkState(n.getFirstChild()!=  null);	  removeChild(n.getFirstChild());    	non-compiled	[CE]  	20	None	replace
227	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  FoldArrayAction());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  new  FoldArrayAction());  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	NodeTraversal.traverse(compiler,  new  FoldArrayAction());	  NodeTraversal.traverse(compiler,    condition,    new    FoldArrayAction());    	non-compiled	[CE]  	52	None	replace
228	[BUG]  [BUGGY]  return  rightParent.removeFirstChild();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  rightParent.removeFirstChild();  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  rightParent.removeFirstChild();	  return    parent.removeFirstChild();    	non-compiled	[CE]  	18	None	replace
229	[BUG]  [BUGGY]  return  parent.replaceChild(n,  falseNode);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  parent.replaceChild(n,  falseNode);  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  parent.replaceChild(n,  falseNode);	  return    parent.removeFirstChild();    	non-compiled	[CE]  	18	None	replace
230	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  FoldArrayAction());  break;  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  new  FoldArrayAction());  break;  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	NodeTraversal.traverse(compiler,  new  FoldArrayAction());  break;	  NodeTraversal.traverse(compiler,    condition,    new    FoldArrayAction());    break;    	non-compiled	[CE]  	54	None	replace
231	[BUG]  [BUGGY]  return  leftParent.replaceChild(n,  falseNode);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  leftParent.replaceChild(n,  falseNode);  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  leftParent.replaceChild(n,  falseNode);	  return    leftParent;    	non-compiled	[CE]  	21	None	replace
232	[BUG]  [BUGGY]  Preconditions.checkState(n.getFirstChild()  ==  n);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  Preconditions.checkState(n.getFirstChild()  ==  n);  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	Preconditions.checkState(n.getFirstChild()  ==  n);	  removeChild(n.getLastChild());    	non-compiled	[CE]  	19	None	replace
233	[BUG]  [BUGGY]  replaceChild(n.getFirstChild());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  replaceChild(n.getFirstChild());  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	replaceChild(n.getFirstChild());	  removeChild(n.getLastChild());    	non-compiled	[CE]  	19	None	replace
234	[BUG]  [BUGGY]  return  n.getLestChild();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  n.getLestChild();  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  n.getLestChild();	  return    n.getLastChild()    +    1;    	non-compiled	[CE]  	16	None	replace
235	[BUG]  [BUGGY]  return  n.getPreviousChild()  +  1;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  n.getPreviousChild()  +  1;  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  n.getPreviousChild()  +  1;	  return    n.getLastChild()    +    1;    	non-compiled	[CE]  	16	None	replace
236	[BUG]  [BUGGY]  return  n.getlastChild();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  n.getlastChild();  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  n.getlastChild();	  return    n.getLastChild()    +    1;    	non-compiled	[CE]  	16	None	replace
237	[BUG]  [BUGGY]  n.detachChildren();  break;  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  n.detachChildren();  break;  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	n.detachChildren();  break;	  n.removeChild(right);    break;    	non-compiled	[CE]  	64	None	replace
238	[BUG]  [BUGGY]  return  left.removeChild(left);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  left.removeChild(left);  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  left.removeChild(left);	  return    n.removeChild(left);    	non-compiled	[CE]  	5	None	replace
239	[BUG]  [BUGGY]  return  leftParent.removeChild(n);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  leftParent.removeChild(n);  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  leftParent.removeChild(n);	  return    n.removeChild(left);    	non-compiled	[CE]  	5	None	replace
240	[BUG]  [BUGGY]  return  condition.getNext();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  condition.getNext();  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  condition.getNext();	  return    right.getNext();    	non-compiled	[CE]  	65	None	replace
241	[BUG]  [BUGGY]  return  condition  ==  null?  Node.newString(Token.NAME,  trueNode):  Node.newString(Token.NAME,  trueNode);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  condition  ==  null?  Node.newString(Token.NAME,  trueNode):  Node.newString(Token.NAME,  trueNode);  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  condition  ==  null?  Node.newString(Token.NAME,  trueNode):  Node.newString(Token.NAME,  trueNode);	  return    condition;    	non-compiled	[CE]  	22	None	replace
242	[BUG]  [BUGGY]  return  condition  ==  null?  falseNode  :  condition;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  condition  ==  null?  falseNode  :  condition;  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  condition  ==  null?  falseNode  :  condition;	  return    condition;    	non-compiled	[CE]  	22	None	replace
243	[BUG]  [BUGGY]  return  condition  ==  null?  Node.newString(Token.NAME,  trueNode):  Node.newString(Token.NAME,  trueNode,  falseNode);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  condition  ==  null?  Node.newString(Token.NAME,  trueNode):  Node.newString(Token.NAME,  trueNode,  falseNode);  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  condition  ==  null?  Node.newString(Token.NAME,  trueNode):  Node.newString(Token.NAME,  trueNode,  falseNode);	  return    condition;    	non-compiled	[CE]  	22	None	replace
244	[BUG]  [BUGGY]  return  condition  ==  null?  Node.newString(Token.NAME,  nameNode.getFirstChild()):  node;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  condition  ==  null?  Node.newString(Token.NAME,  nameNode.getFirstChild()):  node;  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  condition  ==  null?  Node.newString(Token.NAME,  nameNode.getFirstChild()):  node;	  return    condition;    	non-compiled	[CE]  	22	None	replace
245	[BUG]  [BUGGY]  return  condition  ==  null?  Node.newString(Token.NAME,  trueNode):  Node.newString(Token.NAME,  falseNode);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  condition  ==  null?  Node.newString(Token.NAME,  trueNode):  Node.newString(Token.NAME,  falseNode);  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  condition  ==  null?  Node.newString(Token.NAME,  trueNode):  Node.newString(Token.NAME,  falseNode);	  return    condition;    	non-compiled	[CE]  	22	None	replace
246	[BUG]  [BUGGY]  return  n.getType()  ==  Token.FUNCTION;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  n.getType()  ==  Token.FUNCTION;  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  n.getType()  ==  Token.FUNCTION;	  return    right;    	non-compiled	[CE]  	24	None	replace
247	[BUG]  [BUGGY]  return  n.removeChild(rightParent);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  n.removeChild(rightParent);  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  n.removeChild(rightParent);	  return    parent.replaceChild(n,    replacement);    	non-compiled	[CE]  	58	None	replace
248	[BUG]  [BUGGY]  Preconditions.checkState(right.getType()  ==  Token.FUNCTION);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  Preconditions.checkState(right.getType()  ==  Token.FUNCTION);  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	Preconditions.checkState(right.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	30	None	replace
249	[BUG]  [BUGGY]  Preconditions.checkState(leftParent.getType()  ==  Token.FUNCTION);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  Preconditions.checkState(leftParent.getType()  ==  Token.FUNCTION);  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	Preconditions.checkState(leftParent.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	30	None	replace
250	[BUG]  [BUGGY]  return  trueNode  ||  n.getType()  ==  Token.FUNCTION;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  trueNode  ||  n.getType()  ==  Token.FUNCTION;  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  trueNode  ||  n.getType()  ==  Token.FUNCTION;	  return    trueNode;    	non-compiled	[CE]  	8	None	replace
251	[BUG]  [BUGGY]  return  trueNode  &&  falseNode!=  null?  falseNode  :  falseNode;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  trueNode  &&  falseNode!=  null?  falseNode  :  falseNode;  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  trueNode  &&  falseNode!=  null?  falseNode  :  falseNode;	  return    trueNode;    	non-compiled	[CE]  	8	None	replace
252	[BUG]  [BUGGY]  return  trueNode.removeFirstChild();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  trueNode.removeFirstChild();  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  trueNode.removeFirstChild();	  return    trueNode;    	non-compiled	[CE]  	8	None	replace
253	[BUG]  [BUGGY]  return  n.getFirstChild().getFirstChild();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  n.getFirstChild().getFirstChild();  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  n.getFirstChild().getFirstChild();	  return    n.getFirstChild().getLastChild();    	non-compiled	[CE]  	50	None	replace
254	[BUG]  [BUGGY]  return  leftParent.getFirstChild().getLastChild();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  leftParent.getFirstChild().getLastChild();  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  leftParent.getFirstChild().getLastChild();	  return    n.getFirstChild().getLastChild();    	non-compiled	[CE]  	50	None	replace
255	[BUG]  [BUGGY]  return  n.replaceFirstChild();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  n.replaceFirstChild();  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  n.replaceFirstChild();	  return    n.removeFirstChild()    +    1;    	non-compiled	[CE]  	48	None	replace
256	[BUG]  [BUGGY]  return  leftParent.removeChild(leftParent);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  leftParent.removeChild(leftParent);  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  leftParent.removeChild(leftParent);	  return    n.removeChild(leftParent);    	non-compiled	[CE]  	7	None	replace
257	[BUG]  [BUGGY]  return  n.getFirstChild().removeChild(condition);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  n.getFirstChild().removeChild(condition);  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  n.getFirstChild().removeChild(condition);	  return    n.getFirstChild().removeChild(right);    	non-compiled	[CE]  	40	None	replace
258	[BUG]  [BUGGY]  parent.replaceChild(n,  falseNode);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  parent.replaceChild(n,  falseNode);  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	parent.replaceChild(n,  falseNode);	  parent.removeChild(n);    	non-compiled	[CE]  	35	None	replace
259	[BUG]  [BUGGY]  parent.removeChild(right);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  parent.removeChild(right);  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	parent.removeChild(right);	  parent.removeChild(n);    	non-compiled	[CE]  	35	None	replace
260	[BUG]  [BUGGY]  parent.removeChild(left);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  parent.removeChild(left);  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	parent.removeChild(left);	  parent.removeChild(n);    	non-compiled	[CE]  	35	None	replace
261	[BUG]  [BUGGY]  return  leftParent.getLastChild().getNext();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  leftParent.getLastChild().getNext();  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  leftParent.getLastChild().getNext();	  return    n.getLastChild().getNext();    	non-compiled	[CE]  	15	None	replace
262	[BUG]  [BUGGY]  return  n.getfirstChild().getNext();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  n.getfirstChild().getNext();  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  n.getfirstChild().getNext();	  return    n.getLastChild().getNext();    	non-compiled	[CE]  	15	None	replace
263	[BUG]  [BUGGY]  Preconditions.checkState(right.getType()  ==  Token.NAME);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  Preconditions.checkState(right.getType()  ==  Token.NAME);  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	Preconditions.checkState(right.getType()  ==  Token.NAME);	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  	31	None	replace
264	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n);  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  n);	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  	31	None	replace
265	[BUG]  [BUGGY]  return  n.getType()  ==  Token.CALL?  n.getNext()  :  Node.newString(Token.NAME,  right);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  n.getType()  ==  Token.CALL?  n.getNext()  :  Node.newString(Token.NAME,  right);  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  n.getType()  ==  Token.CALL?  n.getNext()  :  Node.newString(Token.NAME,  right);	  return    n.getType()    ==    Token.CALL?    n.getNext()    :    Node.newString(Token.NAME);    	non-compiled	[CE]  	2	None	replace
266	[BUG]  [BUGGY]  Preconditions.checkState(right.getType()  ==  Token.FUNCTION);  break;  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  Preconditions.checkState(right.getType()  ==  Token.FUNCTION);  break;  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	Preconditions.checkState(right.getType()  ==  Token.FUNCTION);  break;	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    break;    	non-compiled	[CE]  	32	None	replace
267	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EMPTY);  break;  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EMPTY);  break;  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	Preconditions.checkState(n.getType()  ==  Token.EMPTY);  break;	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    break;    	non-compiled	[CE]  	32	None	replace
268	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  break;  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  break;  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME);  break;	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    break;    	non-compiled	[CE]  	32	None	replace
269	[BUG]  [BUGGY]  n.detachChildren();  parent.replaceChild(n,  leftParent);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  n.detachChildren();  parent.replaceChild(n,  leftParent);  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	n.detachChildren();  parent.replaceChild(n,  leftParent);	  n.detachChildren();    parent.replaceChild(n,    replace);    reportCodeChange();    	non-compiled	[CE]  	63	None	replace
270	[BUG]  [BUGGY]  if(trueNode!=  null)return  falseNode;  if(falseNode!=  null)  {  return  falseNode;  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  if(trueNode!=  null)return  falseNode;  if(falseNode!=  null)  {  return  falseNode;  }  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	if(trueNode!=  null)return  falseNode;  if(falseNode!=  null)  {  return  falseNode;  }	  return    falseNode;    	non-compiled	[CE]  	46	None	replace
271	[BUG]  [BUGGY]  if(trueNode!=  null)return  falseNode;  if(falseNode!=  null)  {  return  trueNode;  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  if(trueNode!=  null)return  falseNode;  if(falseNode!=  null)  {  return  trueNode;  }  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	if(trueNode!=  null)return  falseNode;  if(falseNode!=  null)  {  return  trueNode;  }	  return    falseNode;    	non-compiled	[CE]  	46	None	replace
272	[BUG]  [BUGGY]  if(trueNode!=  null)return  falseNode;  if(n.getType()  ==  Token.NEW)  {  return  falseNode;  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  if(trueNode!=  null)return  falseNode;  if(n.getType()  ==  Token.NEW)  {  return  falseNode;  }  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	if(trueNode!=  null)return  falseNode;  if(n.getType()  ==  Token.NEW)  {  return  falseNode;  }	  return    falseNode;    	non-compiled	[CE]  	46	None	replace
273	[BUG]  [BUGGY]  return  n.cloneNode(trueNode);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  n.cloneNode(trueNode);  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  n.cloneNode(trueNode);	  return    n.cloneNode();    	non-compiled	[CE]  	37	None	replace
274	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  FoldArrayAction(),  right);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  FoldArrayAction(),  right);  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	NodeTraversal.traverse(compiler,  n,  new  FoldArrayAction(),  right);	  NodeTraversal.traverse(compiler,    n,    new    FoldArrayAction());    	non-compiled	[CE]  	51	None	replace
275	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  new  FoldArrayAction());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  new  FoldArrayAction());  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	NodeTraversal.traverse(compiler,  n,  this,  new  FoldArrayAction());	  NodeTraversal.traverse(compiler,    n,    new    FoldArrayAction());    	non-compiled	[CE]  	51	None	replace
276	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  FoldArrayAction(),  falseNode);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  FoldArrayAction(),  falseNode);  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	NodeTraversal.traverse(compiler,  n,  new  FoldArrayAction(),  falseNode);	  NodeTraversal.traverse(compiler,    n,    new    FoldArrayAction());    	non-compiled	[CE]  	51	None	replace
277	[BUG]  [BUGGY]  n.removeChild(oldNode);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  n.removeChild(oldNode);  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	n.removeChild(oldNode);	  n.removeChild(right);    	non-compiled	[CE]  	57	None	replace
278	[BUG]  [BUGGY]  return  leftParent.getLastChild().getFirstChild();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  leftParent.getLastChild().getFirstChild();  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  leftParent.getLastChild().getFirstChild();	  return    n.getLastChild().getFirstChild();    	non-compiled	[CE]  	39	None	replace
279	[BUG]  [BUGGY]  return  n.getfirstChild().getLastChild();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  n.getfirstChild().getLastChild();  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  n.getfirstChild().getLastChild();	  return    n.getLastChild().getFirstChild();    	non-compiled	[CE]  	39	None	replace
280	[BUG]  [BUGGY]  n.detachChildren();  parent.replaceChild(n,  falseNode);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  n.detachChildren();  parent.replaceChild(n,  falseNode);  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	n.detachChildren();  parent.replaceChild(n,  falseNode);	  n.detachChildren();    parent.replaceChild(n,    replacement);    reportCodeChange();    	non-compiled	[CE]  	60	None	replace
281	[BUG]  [BUGGY]  return  parent.removeLastChild();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  parent.removeLastChild();  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  parent.removeLastChild();	  return    n.removeLastChild();    	non-compiled	[CE]  	17	None	replace
282	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  FoldArrayAction(),  falseNode);  break;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  FoldArrayAction(),  falseNode);  break;  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	NodeTraversal.traverse(compiler,  n,  new  FoldArrayAction(),  falseNode);  break;	  NodeTraversal.traverse(compiler,    n,    new    FoldArrayAction());    break;    	non-compiled	[CE]  	53	None	replace
283	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  FoldArrayAction(),  right);  break;  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  FoldArrayAction(),  right);  break;  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	NodeTraversal.traverse(compiler,  n,  new  FoldArrayAction(),  right);  break;	  NodeTraversal.traverse(compiler,    n,    new    FoldArrayAction());    break;    	non-compiled	[CE]  	53	None	replace
284	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  FoldArrayAction(),  this);  break;  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  FoldArrayAction(),  this);  break;  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	NodeTraversal.traverse(compiler,  n,  new  FoldArrayAction(),  this);  break;	  NodeTraversal.traverse(compiler,    n,    new    FoldArrayAction());    break;    	non-compiled	[CE]  	53	None	replace
285	[BUG]  [BUGGY]  return  condition!=  null?  null  :  condition.getFirstChild();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  condition!=  null?  null  :  condition.getFirstChild();  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  condition!=  null?  null  :  condition.getFirstChild();	  return    condition.getFirstChild();    	non-compiled	[CE]  	27	None	replace
286	[BUG]  [BUGGY]  return  condition  ==  null?  null  :  condition.getFirstChild();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  condition  ==  null?  null  :  condition.getFirstChild();  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  condition  ==  null?  null  :  condition.getFirstChild();	  return    condition.getFirstChild();    	non-compiled	[CE]  	27	None	replace
287	[BUG]  [BUGGY]  return  right.getType()  ==  Token.NAME?  n.getFirstChild()  :  n.getNext();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  right.getType()  ==  Token.NAME?  n.getFirstChild()  :  n.getNext();  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  right.getType()  ==  Token.NAME?  n.getFirstChild()  :  n.getNext();	  return    n.getType()    ==    Token.NAME?    n.getLastChild()    :    n.getNext();    	non-compiled	[CE]  	1	None	replace
288	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  right.getLastChild()  :  n.getNext();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  n.getType()  ==  Token.NAME?  right.getLastChild()  :  n.getNext();  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  n.getType()  ==  Token.NAME?  right.getLastChild()  :  n.getNext();	  return    n.getType()    ==    Token.NAME?    n.getLastChild()    :    n.getNext();    	non-compiled	[CE]  	1	None	replace
289	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  newRoot);  break;  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  newRoot);  break;  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	NodeTraversal.traverse(compiler,  n,  newRoot);  break;	  NodeTraversal.traverse(compiler,    n,    this);    break;    	non-compiled	[CE]  	55	None	replace
290	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  left);  break;  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  left);  break;  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	NodeTraversal.traverse(compiler,  n,  this,  left);  break;	  NodeTraversal.traverse(compiler,    n,    this);    break;    	non-compiled	[CE]  	55	None	replace
291	[BUG]  [BUGGY]  return  n.replaceChild(left,  newRoot);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  n.replaceChild(left,  newRoot);  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  n.replaceChild(left,  newRoot);	  return    parent.replaceChild(n,    newRoot);    	non-compiled	[CE]  	59	None	replace
292	[BUG]  [BUGGY]  parent.replaceChild(n,  right);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  parent.replaceChild(n,  right);  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	parent.replaceChild(n,  right);	  parent.replaceChild(n,    replacement);    	non-compiled	[CE]  	6	None	replace
293	[BUG]  [BUGGY]  parent.removeChild(leftParent);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  parent.removeChild(leftParent);  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	parent.removeChild(leftParent);	  parent.replaceChild(n,    replacement);    	non-compiled	[CE]  	6	None	replace
294	[BUG]  [BUGGY]  return  n.getFirstChild().getNext()  +  1;  [CE]  [FE]            AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  n.getFirstChild().getNext()  +  1;  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  n.getFirstChild().getNext()  +  1;	  return    n.getFirstChild().getNext();    	non-compiled	[CE]  	49	None	replace
295	[BUG]  [BUGGY]  return  n.getFirstChild().removeChild(leftParent);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  n.getFirstChild().removeChild(leftParent);  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  n.getFirstChild().removeChild(leftParent);	  return    n.getFirstChild().removeChild(parent);    	non-compiled	[CE]  	41	None	replace
296	[BUG]  [BUGGY]  n.removeChild(first);  break;  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  n.removeChild(first);  break;  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	n.removeChild(first);  break;	  n.removeChild(leftParent);    break;    	non-compiled	[CE]  	33	None	replace
297	[BUG]  [BUGGY]  n.removeChild(left,  right);  break;  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  n.removeChild(left,  right);  break;  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	n.removeChild(left,  right);  break;	  n.removeChild(leftParent);    break;    	non-compiled	[CE]  	33	None	replace
298	[BUG]  [BUGGY]  n.detachChildren();  parent.replaceChild(n,  this);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  n.detachChildren();  parent.replaceChild(n,  this);  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	n.detachChildren();  parent.replaceChild(n,  this);	  n.detachChildren();    parent.replaceChild(n,    replacement);    	non-compiled	[CE]  	61	None	replace
299	[BUG]  [BUGGY]  return  n.getType()  ==  Token.CALL  &&  n.getNext()  :  Node.newString(Token.NAME);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  n.getType()  ==  Token.CALL  &&  n.getNext()  :  Node.newString(Token.NAME);  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  n.getType()  ==  Token.CALL  &&  n.getNext()  :  Node.newString(Token.NAME);	  return    n.getType()    ==    Token.CALL?    n.getNext()    :    Node.newString(Token.NAME);    	non-compiled	[CE]  	2	None	replace
300	[BUG]  [BUGGY]  return  n.getType()!=  Token.CALL?  n.getNext()  :  Node.newString(Token.NAME);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  n.getType()!=  Token.CALL?  n.getNext()  :  Node.newString(Token.NAME);  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  n.getType()!=  Token.CALL?  n.getNext()  :  Node.newString(Token.NAME);	  return    n.getType()    ==    Token.CALL?    n.getNext()    :    Node.newString(Token.NAME);    	non-compiled	[CE]  	2	None	replace
301	[BUG]  [BUGGY]  return  right.cloneNode();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  right.cloneNode();  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  right.cloneNode();	  return    n.cloneNode();    	non-compiled	[CE]  	37	None	replace
302	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	30	None	replace
303	[BUG]  [BUGGY]  return  replaceAll(right,  trueNode);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  replaceAll(right,  trueNode);  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  replaceAll(right,  trueNode);	  return    right;    	non-compiled	[CE]  	24	None	replace
304	[BUG]  [BUGGY]  return  replaceAll(right,  falseNode);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  replaceAll(right,  falseNode);  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  replaceAll(right,  falseNode);	  return    right;    	non-compiled	[CE]  	24	None	replace
305	[BUG]  [BUGGY]  return  replaceAll(left,  trueNode);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  replaceAll(left,  trueNode);  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  replaceAll(left,  trueNode);	  return    right;    	non-compiled	[CE]  	24	None	replace
306	[BUG]  [BUGGY]  return  replaceAll(left,  falseNode);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  replaceAll(left,  falseNode);  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  replaceAll(left,  falseNode);	  return    right;    	non-compiled	[CE]  	24	None	replace
307	[BUG]  [BUGGY]  return  replaceAll(parent,  falseNode);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  replaceAll(parent,  falseNode);  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  replaceAll(parent,  falseNode);	  return    right;    	non-compiled	[CE]  	24	None	replace
308	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME  &&  n.getLastChild().getNext();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  n.getType()  ==  Token.NAME  &&  n.getLastChild().getNext();  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  n.getType()  ==  Token.NAME  &&  n.getLastChild().getNext();	  return    n.getType()    ==    Token.NAME?    n.getLastChild()    :    n.getNext();    	non-compiled	[CE]  	1	None	replace
309	[BUG]  [BUGGY]  return  parent.getType()  ==  Token.NAME?  n.getFirstChild()  :  n.getNext();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  parent.getType()  ==  Token.NAME?  n.getFirstChild()  :  n.getNext();  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  parent.getType()  ==  Token.NAME?  n.getFirstChild()  :  n.getNext();	  return    n.getType()    ==    Token.NAME?    n.getLastChild()    :    n.getNext();    	non-compiled	[CE]  	1	None	replace
310	[BUG]  [BUGGY]  n.detachChildren();  [CE]  [FE]            AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  n.detachChildren();  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	n.detachChildren();	  n.removeChild(right);    	non-compiled	[CE]  	57	None	replace
311	[BUG]  [BUGGY]  return  right.clone();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  right.clone();  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  right.clone();	  return    n.clone();    	non-compiled	[CE]  	11	None	replace
312	[BUG]  [BUGGY]  return  trueNode!=  null?  falseNode  :  trueNode;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  trueNode!=  null?  falseNode  :  trueNode;  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  trueNode!=  null?  falseNode  :  trueNode;	  return    trueNode;    	non-compiled	[CE]  	8	None	replace
313	[BUG]  [BUGGY]  return  trueNode  ==  null?  falseNode  :  trueNode;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  trueNode  ==  null?  falseNode  :  trueNode;  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  trueNode  ==  null?  falseNode  :  trueNode;	  return    trueNode;    	non-compiled	[CE]  	8	None	replace
314	[BUG]  [BUGGY]  return  trueNode!=  null?  trueNode  :  falseNode;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  trueNode!=  null?  trueNode  :  falseNode;  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  trueNode!=  null?  trueNode  :  falseNode;	  return    trueNode;    	non-compiled	[CE]  	8	None	replace
315	[BUG]  [BUGGY]  return  trueNode  ==  null?  falseNode  :  falseNode;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  trueNode  ==  null?  falseNode  :  falseNode;  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  trueNode  ==  null?  falseNode  :  falseNode;	  return    trueNode;    	non-compiled	[CE]  	8	None	replace
316	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  replacement);  break;  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  replacement);  break;  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	NodeTraversal.traverse(compiler,  n,  this,  replacement);  break;	  NodeTraversal.traverse(compiler,    n,    this);    break;    	non-compiled	[CE]  	55	None	replace
317	[BUG]  [BUGGY]  return  parent.removeChild(leftParent);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  parent.removeChild(leftParent);  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  parent.removeChild(leftParent);	  return    n.removeChild(leftParent);    	non-compiled	[CE]  	7	None	replace
318	[BUG]  [BUGGY]  return  trueNode!=  null?  falseNode  :  falseNode;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  trueNode!=  null?  falseNode  :  falseNode;  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  trueNode!=  null?  falseNode  :  falseNode;	  return    falseNode;    	non-compiled	[CE]  	46	None	replace
319	[BUG]  [BUGGY]  return  trueNode!=  null  &&  falseNode.getType()  ==  Token.FUNCTION;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  trueNode!=  null  &&  falseNode.getType()  ==  Token.FUNCTION;  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  trueNode!=  null  &&  falseNode.getType()  ==  Token.FUNCTION;	  return    falseNode;    	non-compiled	[CE]  	46	None	replace
320	[BUG]  [BUGGY]  return  trueNode!=  null  &&  falseNode.getType()  ==  Token.EXPR_RESULT;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  trueNode!=  null  &&  falseNode.getType()  ==  Token.EXPR_RESULT;  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  trueNode!=  null  &&  falseNode.getType()  ==  Token.EXPR_RESULT;	  return    falseNode;    	non-compiled	[CE]  	46	None	replace
321	[BUG]  [BUGGY]  return  trueNode  >=  null?  falseNode  :  falseNode;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  trueNode  >=  null?  falseNode  :  falseNode;  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  trueNode  >=  null?  falseNode  :  falseNode;	  return    falseNode;    	non-compiled	[CE]  	46	None	replace
322	[BUG]  [BUGGY]  return  trueNode  >>  null?  falseNode  :  falseNode;  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  trueNode  >>  null?  falseNode  :  falseNode;  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  trueNode  >>  null?  falseNode  :  falseNode;	  return    falseNode;    	non-compiled	[CE]  	46	None	replace
323	[BUG]  [BUGGY]  return  n.getType()!=  Token.NAME?  n.getFirstChild()  :  n.getLastChild();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  n.getType()!=  Token.NAME?  n.getFirstChild()  :  n.getLastChild();  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  n.getType()!=  Token.NAME?  n.getFirstChild()  :  n.getLastChild();	  return    n.getType()    ==    Token.NAME?    n.getFirstChild()    :    n.getNext();    	non-compiled	[CE]  	3	None	replace
324	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getFirstChild()  :  n.getParent();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getFirstChild()  :  n.getParent();  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  n.getType()  ==  Token.NAME?  n.getFirstChild()  :  n.getParent();	  return    n.getType()    ==    Token.NAME?    n.getFirstChild()    :    n.getNext();    	non-compiled	[CE]  	3	None	replace
325	[BUG]  [BUGGY]  return  n.removeChild(right,  replacement);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  n.removeChild(right,  replacement);  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  n.removeChild(right,  replacement);	  return    parent.replaceChild(n,    replacement);    	non-compiled	[CE]  	58	None	replace
326	[BUG]  [BUGGY]  return  parent.replaceChild(n,  right);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  parent.replaceChild(n,  right);  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  parent.replaceChild(n,  right);	  return    parent.replaceChild(n,    replacement);    	non-compiled	[CE]  	58	None	replace
327	[BUG]  [BUGGY]  return  n.getFirstChild().removeChild(left,  left);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  n.getFirstChild().removeChild(left,  left);  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  n.getFirstChild().removeChild(left,  left);	  return    n.getFirstChild().removeChild(left);    	non-compiled	[CE]  	42	None	replace
328	[BUG]  [BUGGY]  return  n.getFirstChild().removeChild(left,  right);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  n.getFirstChild().removeChild(left,  right);  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  n.getFirstChild().removeChild(left,  right);	  return    n.getFirstChild().removeChild(left);    	non-compiled	[CE]  	42	None	replace
329	[BUG]  [BUGGY]  return  result!=  null  &&  parent.getType()  ==  Token.FUNCTION;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  result!=  null  &&  parent.getType()  ==  Token.FUNCTION;  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  result!=  null  &&  parent.getType()  ==  Token.FUNCTION;	  return    result;    	non-compiled	[CE]  	9	None	replace
330	[BUG]  [BUGGY]  return  result  ==  false;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  result  ==  false;  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  result  ==  false;	  return    result;    	non-compiled	[CE]  	9	None	replace
331	[BUG]  [BUGGY]  return  result!=  null  &&  result.equals(n.getString());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  result!=  null  &&  result.equals(n.getString());  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  result!=  null  &&  result.equals(n.getString());	  return    result;    	non-compiled	[CE]  	9	None	replace
332	[BUG]  [BUGGY]  return  result!=  null  &&  parent.getType()  ==  Token.VAR;  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  result!=  null  &&  parent.getType()  ==  Token.VAR;  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  result!=  null  &&  parent.getType()  ==  Token.VAR;	  return    result;    	non-compiled	[CE]  	9	None	replace
333	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.NAME);	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  	31	None	replace
334	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  leftParent,  new  FoldArrayAction());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  leftParent,  new  FoldArrayAction());  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	NodeTraversal.traverse(compiler,  leftParent,  new  FoldArrayAction());	  NodeTraversal.traverse(compiler,    condition,    new    FoldArrayAction());    	non-compiled	[CE]  	52	None	replace
335	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  FoldArrayAction());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  FoldArrayAction());  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	NodeTraversal.traverse(compiler,  root,  new  FoldArrayAction());	  NodeTraversal.traverse(compiler,    condition,    new    FoldArrayAction());    	non-compiled	[CE]  	52	None	replace
336	[BUG]  [BUGGY]  return  condition!=  null?  n.getFirstChild()  :  condition.getFirstChild();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  condition!=  null?  n.getFirstChild()  :  condition.getFirstChild();  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  condition!=  null?  n.getFirstChild()  :  condition.getFirstChild();	  return    condition.getFirstChild();    	non-compiled	[CE]  	27	None	replace
337	[BUG]  [BUGGY]  return  condition!=  null?  n.getLastChild()  :  condition.getFirstChild();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  condition!=  null?  n.getLastChild()  :  condition.getFirstChild();  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  condition!=  null?  n.getLastChild()  :  condition.getFirstChild();	  return    condition.getFirstChild();    	non-compiled	[CE]  	27	None	replace
338	[BUG]  [BUGGY]  return  condition!=  null?  parent.getFirstChild()  :  condition.getFirstChild();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  condition!=  null?  parent.getFirstChild()  :  condition.getFirstChild();  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  condition!=  null?  parent.getFirstChild()  :  condition.getFirstChild();	  return    condition.getFirstChild();    	non-compiled	[CE]  	27	None	replace
339	[BUG]  [BUGGY]  return  n.getfirstChild();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  n.getfirstChild();  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  n.getfirstChild();	  return    parent.getLastChild();    	non-compiled	[CE]  	14	None	replace
340	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  left);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  left);  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	NodeTraversal.traverse(compiler,  n,  this,  left);	  NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  	34	None	replace
341	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  newRoot);  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  newRoot);  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	NodeTraversal.traverse(compiler,  n,  newRoot);	  NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  	34	None	replace
342	[BUG]  [BUGGY]  return  n.getfirstChild().getFirstChild();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  n.getfirstChild().getFirstChild();  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  n.getfirstChild().getFirstChild();	  return    n.getLastChild().getFirstChild();    	non-compiled	[CE]  	39	None	replace
343	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  right,  condition);  break;  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  right,  condition);  break;  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	NodeTraversal.traverse(compiler,  n,  right,  condition);  break;	  NodeTraversal.traverse(compiler,    n,    condition);    break;    	non-compiled	[CE]  	56	None	replace
344	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  left,  condition);  break;  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  left,  condition);  break;  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	NodeTraversal.traverse(compiler,  n,  left,  condition);  break;	  NodeTraversal.traverse(compiler,    n,    condition);    break;    	non-compiled	[CE]  	56	None	replace
345	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  condition,  this);  break;  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  condition,  this);  break;  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	NodeTraversal.traverse(compiler,  n,  condition,  this);  break;	  NodeTraversal.traverse(compiler,    n,    condition);    break;    	non-compiled	[CE]  	56	None	replace
346	[BUG]  [BUGGY]  Node  right  =  n.removeFirstChild();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  Node  right  =  n.removeFirstChild();  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	Node  right  =  n.removeFirstChild();	  Node    right    =    n.getLastChild();    	non-compiled	[CE]  	29	None	replace
347	[BUG]  [BUGGY]  return  leftParent.replaceChild(parent,  replacement);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  leftParent.replaceChild(parent,  replacement);  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  leftParent.replaceChild(parent,  replacement);	  return    leftParent;    	non-compiled	[CE]  	21	None	replace
348	[BUG]  [BUGGY]  return  n.getNode();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  n.getNode();  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  n.getNode();	  return    n.getPrevious();    	non-compiled	[CE]  	44	None	replace
349	[BUG]  [BUGGY]  Node  rightParent  =  n.removeFirstChild();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  Node  rightParent  =  n.removeFirstChild();  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	Node  rightParent  =  n.removeFirstChild();	  Node    rightParent    =    n.getLastChild();    	non-compiled	[CE]  	28	None	replace
350	[BUG]  [BUGGY]  return  left.getFirstChild();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  left.getFirstChild();  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  left.getFirstChild();	  return    leftParent.getLastChild();    	non-compiled	[CE]  	38	None	replace
351	[BUG]  [BUGGY]  return  condition  ==  null?  STANDARD_OBJECT_CONSTRUCTORS  :  INVALID_REGULAR_EXPRESSION_FLAGS;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  condition  ==  null?  STANDARD_OBJECT_CONSTRUCTORS  :  INVALID_REGULAR_EXPRESSION_FLAGS;  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  condition  ==  null?  STANDARD_OBJECT_CONSTRUCTORS  :  INVALID_REGULAR_EXPRESSION_FLAGS;	  return    condition;    	non-compiled	[CE]  	22	None	replace
352	[BUG]  [BUGGY]  return  condition  ==  null?  INVALID_REGULAR_EXPRESSION_FLAGS  :  condition;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  condition  ==  null?  INVALID_REGULAR_EXPRESSION_FLAGS  :  condition;  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  condition  ==  null?  INVALID_REGULAR_EXPRESSION_FLAGS  :  condition;	  return    condition;    	non-compiled	[CE]  	22	None	replace
353	[BUG]  [BUGGY]  return  condition  ==  null?  STANDARD_OBJECT_CONSTRUCTORS  :  INVALID_REGULAR_EXPRESSION;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  condition  ==  null?  STANDARD_OBJECT_CONSTRUCTORS  :  INVALID_REGULAR_EXPRESSION;  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  condition  ==  null?  STANDARD_OBJECT_CONSTRUCTORS  :  INVALID_REGULAR_EXPRESSION;	  return    condition;    	non-compiled	[CE]  	22	None	replace
354	[BUG]  [BUGGY]  return  condition  ==  null?  INVALID_REGULAR_EXPRESSION_FLAGS  :  Condition.INVALID_REGULAR_EXPRESSION_FLAGS;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  condition  ==  null?  INVALID_REGULAR_EXPRESSION_FLAGS  :  Condition.INVALID_REGULAR_EXPRESSION_FLAGS;  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  condition  ==  null?  INVALID_REGULAR_EXPRESSION_FLAGS  :  Condition.INVALID_REGULAR_EXPRESSION_FLAGS;	  return    condition;    	non-compiled	[CE]  	22	None	replace
355	[BUG]  [BUGGY]  return  condition  ==  null?  Integer.toString(n.getFirstChild().getString()):  Collections.EMPTY_LIST;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  condition  ==  null?  Integer.toString(n.getFirstChild().getString()):  Collections.EMPTY_LIST;  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  condition  ==  null?  Integer.toString(n.getFirstChild().getString()):  Collections.EMPTY_LIST;	  return    condition;    	non-compiled	[CE]  	22	None	replace
356	[BUG]  [BUGGY]  return  condition  ==  null?  Integer.toString(Integer.toString(n.getLastChild()):  n);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  condition  ==  null?  Integer.toString(Integer.toString(n.getLastChild()):  n);  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  condition  ==  null?  Integer.toString(Integer.toString(n.getLastChild()):  n);	  return    condition;    	non-compiled	[CE]  	22	None	replace
357	[BUG]  [BUGGY]  n.removeChild(condition);  break;  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  n.removeChild(condition);  break;  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	n.removeChild(condition);  break;	  n.removeChild(right);    break;    	non-compiled	[CE]  	64	None	replace
358	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  condition,  new  FoldArrayAction(),  this);  break;  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  condition,  new  FoldArrayAction(),  this);  break;  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	NodeTraversal.traverse(compiler,  condition,  new  FoldArrayAction(),  this);  break;	  NodeTraversal.traverse(compiler,    condition,    new    FoldArrayAction());    break;    	non-compiled	[CE]  	54	None	replace
359	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  FoldArrayAction());  break;  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  FoldArrayAction());  break;  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	NodeTraversal.traverse(compiler,  root,  new  FoldArrayAction());  break;	  NodeTraversal.traverse(compiler,    condition,    new    FoldArrayAction());    break;    	non-compiled	[CE]  	54	None	replace
360	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  FoldArrayAction(),  this);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  FoldArrayAction(),  this);  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	NodeTraversal.traverse(compiler,  n,  new  FoldArrayAction(),  this);	  NodeTraversal.traverse(compiler,    n,    new    FoldArrayAction());    	non-compiled	[CE]  	51	None	replace
361	[BUG]  [BUGGY]  return  parent.replaceChild(n,  replace);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  parent.replaceChild(n,  replace);  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  parent.replaceChild(n,  replace);	  return    parent.replaceChild(n,    newRoot);    	non-compiled	[CE]  	59	None	replace
362	[BUG]  [BUGGY]  return  parent.removeChild(left);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  parent.removeChild(left);  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  parent.removeChild(left);	  return    n.removeChild(left);    	non-compiled	[CE]  	5	None	replace
363	[BUG]  [BUGGY]  return  parent.replaceChild(n,  left);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  parent.replaceChild(n,  left);  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  parent.replaceChild(n,  left);	  return    n.removeChild(left);    	non-compiled	[CE]  	5	None	replace
364	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  break;  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  break;  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  break;	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    break;    	non-compiled	[CE]  	32	None	replace
365	[BUG]  [BUGGY]  Preconditions.checkState(left.getType()  ==  Token.FUNCTION);  break;  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  Preconditions.checkState(left.getType()  ==  Token.FUNCTION);  break;  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	Preconditions.checkState(left.getType()  ==  Token.FUNCTION);  break;	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    break;    	non-compiled	[CE]  	32	None	replace
366	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR);  break;  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR);  break;  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	Preconditions.checkState(n.getType()  ==  Token.VAR);  break;	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    break;    	non-compiled	[CE]  	32	None	replace
367	[BUG]  [BUGGY]  return  n.replaceFirst(n.getFirstChild(),  newRoot);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  n.replaceFirst(n.getFirstChild(),  newRoot);  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  n.replaceFirst(n.getFirstChild(),  newRoot);	  return    n.removeFirstChild()    +    1;    	non-compiled	[CE]  	48	None	replace
368	[BUG]  [BUGGY]  return  n.replaceFirst(n.getFirstChild(),  trueNode);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  n.replaceFirst(n.getFirstChild(),  trueNode);  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  n.replaceFirst(n.getFirstChild(),  trueNode);	  return    n.removeFirstChild()    +    1;    	non-compiled	[CE]  	48	None	replace
369	[BUG]  [BUGGY]  return  n.replaceFirst(n.getFirstChild(),  right);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      replacement  =  right;  }  if  (replacement  !=  null)  {  n.detachChildren();  parent.replaceChild(n,  replacement);  reportCodeChange();  return  replacement;  }  }      [BUGGY]  return  n.replaceFirst(n.getFirstChild(),  right);  [BUGGY]      }  case  Token.HOOK:  {  Node  condition  =  n.getFirstChild();  Node  trueNode  =  n.getFirstChild().getNext();  Node  falseNode  =  n.getLastChild();      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	749	749	1	replace	return  n.replaceFirst(n.getFirstChild(),  right);	  return    n.removeFirstChild()    +    1;    	non-compiled	[CE]  	48	None	replace
