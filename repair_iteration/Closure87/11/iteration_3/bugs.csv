bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE)||  isPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE)||  isPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE)||  isPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {	  if(isPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE)||    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  	65	None	replace
2	[BUG]  [BUGGY]  if(isPrecedenceInExpression(n.getFirstChild(),  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(n.getFirstChild(),  AND_PRECEDENCE))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(isPrecedenceInExpression(n.getFirstChild(),  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(n.getFirstChild(),  AND_PRECEDENCE))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isPrecedenceInExpression(n.getFirstChild(),  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(n.getFirstChild(),  AND_PRECEDENCE))  {	  if(isPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE)||    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  	65	None	replace
3	[BUG]  [BUGGY]  if(isPrecedenceInExpression(cond.getFirstChild(),  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(cond.getFirstChild(),  AND_PRECEDENCE))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(isPrecedenceInExpression(cond.getFirstChild(),  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(cond.getFirstChild(),  AND_PRECEDENCE))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isPrecedenceInExpression(cond.getFirstChild(),  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(cond.getFirstChild(),  AND_PRECEDENCE))  {	  if(isPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE)||    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  	65	None	replace
4	[BUG]  [BUGGY]  if(isPrecedenceInExpression(cond.getFirstChild(),  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(isPrecedenceInExpression(cond.getFirstChild(),  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isPrecedenceInExpression(cond.getFirstChild(),  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {	  if(isPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE)||    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  	65	None	replace
5	[BUG]  [BUGGY]  if(isPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(isPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {	  if(isPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE)||    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  	65	None	replace
6	[BUG]  [BUGGY]  if(isPrecedenceInExpression(cond.getFirstChild(),  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(isPrecedenceInExpression(cond.getFirstChild(),  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isPrecedenceInExpression(cond.getFirstChild(),  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {	  if(isPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE)||    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  	65	None	replace
7	[BUG]  [BUGGY]  Node  assign  =  cond.getFirstChild();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  Node  assign  =  cond.getFirstChild();  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  assign  =  cond.getFirstChild();	  Node    assign    =    expr.getFirstChild();    	non-compiled	[CE]  	8	None	replace
8	[BUG]  [BUGGY]  Node  assign  =  n.getFirstChild();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  Node  assign  =  n.getFirstChild();  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  assign  =  n.getFirstChild();	  Node    assign    =    expr.getFirstChild();    	non-compiled	[CE]  	8	None	replace
9	[BUG]  [BUGGY]  Node  assign  =  expr.removeFirstChild();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  Node  assign  =  expr.removeFirstChild();  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  assign  =  expr.removeFirstChild();	  Node    assign    =    expr.getFirstChild();    	non-compiled	[CE]  	8	None	replace
10	[BUG]  [BUGGY]  Node  assign  =  parent.getFirstChild();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  Node  assign  =  parent.getFirstChild();  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  assign  =  parent.getFirstChild();	  Node    assign    =    expr.getFirstChild();    	non-compiled	[CE]  	8	None	replace
11	[BUG]  [BUGGY]  Node  assign  =  expr.getAssignedValue();  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  Node  assign  =  expr.getAssignedValue();  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  assign  =  expr.getAssignedValue();	  Node    assign    =    expr.getFirstChild();    	non-compiled	[CE]  	8	None	replace
12	[BUG]  [BUGGY]  Node  assign  =  new  Node(Token.OR,  cond.getFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  Node  assign  =  new  Node(Token.OR,  cond.getFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  assign  =  new  Node(Token.OR,  cond.getFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);	  Node    assign    =    new    Node(Token.OR,    cond.removeFirstChild(),    expr.removeFirstChild()).copyInformationFrom(n);    	non-compiled	[CE]  	6	None	replace
13	[BUG]  [BUGGY]  Node  assign  =  new  Node(Token.OR,  cond.removeLastChild(),  expr.removeLastChild()).copyInformationFrom(n);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  Node  assign  =  new  Node(Token.OR,  cond.removeLastChild(),  expr.removeLastChild()).copyInformationFrom(n);  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  assign  =  new  Node(Token.OR,  cond.removeLastChild(),  expr.removeLastChild()).copyInformationFrom(n);	  Node    assign    =    new    Node(Token.OR,    cond.removeFirstChild(),    expr.removeFirstChild()).copyInformationFrom(n);    	non-compiled	[CE]  	6	None	replace
14	[BUG]  [BUGGY]  Node  assign  =  new  Node(Token.OR,  cond.getFirstChild(),  expr.getFirstChild()).copyInformationFrom(n);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  Node  assign  =  new  Node(Token.OR,  cond.getFirstChild(),  expr.getFirstChild()).copyInformationFrom(n);  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  assign  =  new  Node(Token.OR,  cond.getFirstChild(),  expr.getFirstChild()).copyInformationFrom(n);	  Node    assign    =    new    Node(Token.OR,    cond.removeFirstChild(),    expr.removeFirstChild()).copyInformationFrom(n);    	non-compiled	[CE]  	6	None	replace
15	[BUG]  [BUGGY]  Node  assign  =  new  Node(Token.OR,  cond,  expr.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  Node  assign  =  new  Node(Token.OR,  cond,  expr.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  assign  =  new  Node(Token.OR,  cond,  expr.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);	  Node    assign    =    new    Node(Token.OR,    cond.removeFirstChild(),    expr.removeFirstChild()).copyInformationFrom(n);    	non-compiled	[CE]  	6	None	replace
16	[BUG]  [BUGGY]  Node  assign  =  new  Node(Token.OR,  cond,  expr.removeFirstChild(),  expr.removeLastChild()).copyInformationFrom(n);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  Node  assign  =  new  Node(Token.OR,  cond,  expr.removeFirstChild(),  expr.removeLastChild()).copyInformationFrom(n);  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  assign  =  new  Node(Token.OR,  cond,  expr.removeFirstChild(),  expr.removeLastChild()).copyInformationFrom(n);	  Node    assign    =    new    Node(Token.OR,    cond.removeFirstChild(),    expr.removeFirstChild()).copyInformationFrom(n);    	non-compiled	[CE]  	6	None	replace
17	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond,  AND_REGULAR_EXPRESSION_FLAGS)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(isLowerPrecedenceInExpression(cond,  AND_REGULAR_EXPRESSION_FLAGS)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(cond,  AND_REGULAR_EXPRESSION_FLAGS)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(cond,    AND_REGULAR_EXPRESSION_FLAGS)&&    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  	50	None	replace
18	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond,  AND_REGULAR_EXPRESSION_FLAGS)&&  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(isLowerPrecedenceInExpression(cond,  AND_REGULAR_EXPRESSION_FLAGS)&&  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(cond,  AND_REGULAR_EXPRESSION_FLAGS)&&  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(cond,    AND_REGULAR_EXPRESSION_FLAGS)&&    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  	50	None	replace
19	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(n,  AND_REGULAR_EXPRESSION_FLAGS)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(isLowerPrecedenceInExpression(n,  AND_REGULAR_EXPRESSION_FLAGS)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(n,  AND_REGULAR_EXPRESSION_FLAGS)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(cond,    AND_REGULAR_EXPRESSION_FLAGS)&&    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  	50	None	replace
20	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(expr,  AND_REGULAR_EXPRESSION_FLAGS)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(isLowerPrecedenceInExpression(expr,  AND_REGULAR_EXPRESSION_FLAGS)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(expr,  AND_REGULAR_EXPRESSION_FLAGS)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(cond,    AND_REGULAR_EXPRESSION_FLAGS)&&    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  	50	None	replace
21	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(!isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(!isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {	  if(!isLowerPrecedenceInExpression(cond,    AND_PRECEDENCE)||    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  	18	None	replace
22	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(cond,  STANDARD_OBJECT_CONSTRUCTORS)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(!isLowerPrecedenceInExpression(cond,  STANDARD_OBJECT_CONSTRUCTORS)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(!isLowerPrecedenceInExpression(cond,  STANDARD_OBJECT_CONSTRUCTORS)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {	  if(!isLowerPrecedenceInExpression(cond,    AND_PRECEDENCE)||    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  	18	None	replace
23	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(n,  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(!isLowerPrecedenceInExpression(n,  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(!isLowerPrecedenceInExpression(n,  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {	  if(!isLowerPrecedenceInExpression(cond,    AND_PRECEDENCE)||    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  	18	None	replace
24	[BUG]  [BUGGY]  Node  var  =  cond.getLastChild();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  Node  var  =  cond.getLastChild();  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  var  =  cond.getLastChild();	  Node    var    =    expr.getLastChild();    	non-compiled	[CE]  	37	None	replace
25	[BUG]  [BUGGY]  Node  var  =  cond.getFirstChild();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  Node  var  =  cond.getFirstChild();  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  var  =  cond.getFirstChild();	  Node    var    =    expr.getLastChild();    	non-compiled	[CE]  	37	None	replace
26	[BUG]  [BUGGY]  Node  var  =  parent.getFirstChild();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  Node  var  =  parent.getFirstChild();  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  var  =  parent.getFirstChild();	  Node    var    =    expr.getLastChild();    	non-compiled	[CE]  	37	None	replace
27	[BUG]  [BUGGY]  Node  var  =  expr.nextChild();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  Node  var  =  expr.nextChild();  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  var  =  expr.nextChild();	  Node    var    =    expr.getLastChild();    	non-compiled	[CE]  	37	None	replace
28	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(n,  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(isLowerPrecedenceInExpression(n,  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(n,  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(n,    AND_PRECEDENCE)&&    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	13	None	replace
29	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(n,  OR)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(isLowerPrecedenceInExpression(n,  OR)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(n,  OR)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(n,    AND_PRECEDENCE)&&    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  	13	None	replace
30	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(n,  COND)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(isLowerPrecedenceInExpression(n,  COND)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(n,  COND)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(n,    AND_PRECEDENCE)&&    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  	13	None	replace
31	[BUG]  [BUGGY]  Node  assign  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeLastChild());  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  Node  assign  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeLastChild());  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  assign  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeLastChild());	  Node    assign    =    new    Node(Token.OR,    cond.removeFirstChild(),    expr.removeFirstChild());    	non-compiled	[CE]  ')'  expected	12	None	replace
32	[BUG]  [BUGGY]  Node  assign  =  new  Node(Token.OR,  cond.getFirstChild(),  expr.removeFirstChild());  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  Node  assign  =  new  Node(Token.OR,  cond.getFirstChild(),  expr.removeFirstChild());  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  assign  =  new  Node(Token.OR,  cond.getFirstChild(),  expr.removeFirstChild());	  Node    assign    =    new    Node(Token.OR,    cond.removeFirstChild(),    expr.removeFirstChild());    	non-compiled	[CE]  	12	None	replace
33	[BUG]  [BUGGY]  Node  assign  =  new  Node(Token.OR,  cond.removeLastChild(),  expr.removeLastChild());  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  Node  assign  =  new  Node(Token.OR,  cond.removeLastChild(),  expr.removeLastChild());  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  assign  =  new  Node(Token.OR,  cond.removeLastChild(),  expr.removeLastChild());	  Node    assign    =    new    Node(Token.OR,    cond.removeFirstChild(),    expr.removeFirstChild());    	non-compiled	[CE]  	12	None	replace
34	[BUG]  [BUGGY]  Node  assign  =  new  Node(Token.OR,  expr.removeFirstChild(),  cond.removeFirstChild());  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  Node  assign  =  new  Node(Token.OR,  expr.removeFirstChild(),  cond.removeFirstChild());  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  assign  =  new  Node(Token.OR,  expr.removeFirstChild(),  cond.removeFirstChild());	  Node    assign    =    new    Node(Token.OR,    cond.removeFirstChild(),    expr.removeFirstChild());    	non-compiled	[CE]  	12	None	replace
35	[BUG]  [BUGGY]  Node  assign  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.getLastChild());  [CE]  [FE]                                            AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  Node  assign  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.getLastChild());  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  assign  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.getLastChild());	  Node    assign    =    new    Node(Token.OR,    cond.removeFirstChild(),    expr.removeFirstChild());    	non-compiled	[CE]  	12	None	replace
36	[BUG]  [BUGGY]  Node  assign  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeNextChild());  [CE]  [FE]                                              AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  Node  assign  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeNextChild());  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  assign  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeNextChild());	  Node    assign    =    new    Node(Token.OR,    cond.removeFirstChild(),    expr.removeFirstChild());    	non-compiled	[CE]  	12	None	replace
37	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE)||    isLowerPrecedenceInExpression(expr.getLastChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  	30	None	replace
38	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(n.getFirstChild(),  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(n.getLastChild(),  AND_PRECEDENCE))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(isLowerPrecedenceInExpression(n.getFirstChild(),  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(n.getLastChild(),  AND_PRECEDENCE))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(n.getFirstChild(),  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(n.getLastChild(),  AND_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE)||    isLowerPrecedenceInExpression(expr.getLastChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  	30	None	replace
39	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond.getFirstChild(),  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(isLowerPrecedenceInExpression(cond.getFirstChild(),  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(cond.getFirstChild(),  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE)||    isLowerPrecedenceInExpression(expr.getLastChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  	30	None	replace
40	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(expr.getFirstChild(),  OR)||  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(isLowerPrecedenceInExpression(expr.getFirstChild(),  OR)||  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(expr.getFirstChild(),  OR)||  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE)||    isLowerPrecedenceInExpression(expr.getLastChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  	30	None	replace
41	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(expr,  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(isLowerPrecedenceInExpression(expr,  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(expr,  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR))  {	  if(isLowerPrecedenceInExpression(cond,    AND_PRECEDENCE)||    isLowerPrecedenceInExpression(expr.getFirstChild(),    OR))    {    	non-compiled	[CE]  	25	None	replace
42	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getLastChild(),  OR))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getLastChild(),  OR))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getLastChild(),  OR))  {	  if(isLowerPrecedenceInExpression(cond,    AND_PRECEDENCE)||    isLowerPrecedenceInExpression(expr.getFirstChild(),    OR))    {    	non-compiled	[CE]  	25	None	replace
43	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(n,  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR))  {  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(isLowerPrecedenceInExpression(n,  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(n,  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR))  {	  if(isLowerPrecedenceInExpression(cond,    AND_PRECEDENCE)||    isLowerPrecedenceInExpression(expr.getFirstChild(),    OR))    {    	non-compiled	[CE]  ')'  expected	25	None	replace
44	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR))  {  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR))  {	  if(isLowerPrecedenceInExpression(cond,    AND_PRECEDENCE)||    isLowerPrecedenceInExpression(expr.getFirstChild(),    OR))    {    	non-compiled	[CE]  	25	None	replace
45	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR))  {  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR))  {	  if(isLowerPrecedenceInExpression(cond,    AND_PRECEDENCE)||    isLowerPrecedenceInExpression(expr.getFirstChild(),    OR))    {    	non-compiled	[CE]  	25	None	replace
46	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(n,  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(!isLowerPrecedenceInExpression(n,  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(!isLowerPrecedenceInExpression(n,  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {	  if(!isLowerPrecedenceInExpression(n,    AND_PRECEDENCE)&&    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  	19	None	replace
47	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(n,  OR)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(!isLowerPrecedenceInExpression(n,  OR)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(!isLowerPrecedenceInExpression(n,  OR)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {	  if(!isLowerPrecedenceInExpression(n,    AND_PRECEDENCE)&&    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	19	None	replace
48	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(n,  COND)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(!isLowerPrecedenceInExpression(n,  COND)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(!isLowerPrecedenceInExpression(n,  COND)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {	  if(!isLowerPrecedenceInExpression(n,    AND_PRECEDENCE)&&    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  	19	None	replace
49	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(expr,  OR)||  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(isLowerPrecedenceInExpression(expr,  OR)||  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(expr,  OR)||  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(expr,    OR)||    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	24	None	replace
50	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(expr,  OR)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(isLowerPrecedenceInExpression(expr,  OR)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(expr,  OR)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(expr,    OR)||    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	24	None	replace
51	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(n,  OR)||  isLowerPrecedenceInExpression(n.getFirstChild(),  AND_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(isLowerPrecedenceInExpression(n,  OR)||  isLowerPrecedenceInExpression(n.getFirstChild(),  AND_PRECEDENCE))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(n,  OR)||  isLowerPrecedenceInExpression(n.getFirstChild(),  AND_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(expr,    OR)||    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	24	None	replace
52	[BUG]  [BUGGY]  Node  assign  =  new  Node(Token.AND,  cond,  expr.getFirstChild());  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  Node  assign  =  new  Node(Token.AND,  cond,  expr.getFirstChild());  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  assign  =  new  Node(Token.AND,  cond,  expr.getFirstChild());	  Node    assign    =    new    Node(Token.AND,    cond,    expr.removeFirstChild());    	non-compiled	[CE]  ')'  expected	11	None	replace
53	[BUG]  [BUGGY]  Node  assign  =  new  Node(Token.AND,  cond,  expr.getLastChild());  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  Node  assign  =  new  Node(Token.AND,  cond,  expr.getLastChild());  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  assign  =  new  Node(Token.AND,  cond,  expr.getLastChild());	  Node    assign    =    new    Node(Token.AND,    cond,    expr.removeFirstChild());    	non-compiled	[CE]  ')'  expected	11	None	replace
54	[BUG]  [BUGGY]  Node  assign  =  new  Node(Token.AND,  cond,  expr.removeLastChild());  [CE]  ')'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  Node  assign  =  new  Node(Token.AND,  cond,  expr.removeLastChild());  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  assign  =  new  Node(Token.AND,  cond,  expr.removeLastChild());	  Node    assign    =    new    Node(Token.AND,    cond,    expr.removeFirstChild());    	non-compiled	[CE]  ')'  expected	11	None	replace
55	[BUG]  [BUGGY]  Node  assign  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  expr.getLastChild());  [CE]  ')'  expected  [FE]                                        AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  Node  assign  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  expr.getLastChild());  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  assign  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  expr.getLastChild());	  Node    assign    =    new    Node(Token.AND,    cond,    expr.removeFirstChild());    	non-compiled	[CE]  ')'  expected	11	None	replace
56	[BUG]  [BUGGY]  Node  assign  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  expr.removeLastChild());  [CE]  ')'  expected  [FE]                                          AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  Node  assign  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  expr.removeLastChild());  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  assign  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  expr.removeLastChild());	  Node    assign    =    new    Node(Token.AND,    cond,    expr.removeFirstChild());    	non-compiled	[CE]  ')'  expected	11	None	replace
57	[BUG]  [BUGGY]  Node  assign  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  expr.removeFirstChild());  [CE]  ')'  expected  [FE]                                            AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  Node  assign  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  expr.removeFirstChild());  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  assign  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  expr.removeFirstChild());	  Node    assign    =    new    Node(Token.AND,    cond,    expr.removeFirstChild());    	non-compiled	[CE]  ')'  expected	11	None	replace
58	[BUG]  [BUGGY]  Node  assign  =  new  Node(Token.AND,  cond,  expr.getNext());  [CE]  ')'  expected  [FE]                                              AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  Node  assign  =  new  Node(Token.AND,  cond,  expr.getNext());  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  assign  =  new  Node(Token.AND,  cond,  expr.getNext());	  Node    assign    =    new    Node(Token.AND,    cond,    expr.removeFirstChild());    	non-compiled	[CE]  ')'  expected	11	None	replace
59	[BUG]  [BUGGY]  Node  thenBranch  =  cond.getFirstChild();  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  Node  thenBranch  =  cond.getFirstChild();  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  thenBranch  =  cond.getFirstChild();	  Node    thenBranch    =    expr.getFirstChild();    	non-compiled	[CE]  ')'  expected	40	None	replace
60	[BUG]  [BUGGY]  Node  thenBranch  =  n.getFirstChild();  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  Node  thenBranch  =  n.getFirstChild();  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  thenBranch  =  n.getFirstChild();	  Node    thenBranch    =    expr.getFirstChild();    	non-compiled	[CE]  ')'  expected	40	None	replace
61	[BUG]  [BUGGY]  Node  thenBranch  =  expr.getNext();  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  Node  thenBranch  =  expr.getNext();  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  thenBranch  =  expr.getNext();	  Node    thenBranch    =    expr.getFirstChild();    	non-compiled	[CE]  ')'  expected	40	None	replace
62	[BUG]  [BUGGY]  Node  thenBranch  =  expr.removeFirstChild();  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  Node  thenBranch  =  expr.removeFirstChild();  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  thenBranch  =  expr.removeFirstChild();	  Node    thenBranch    =    expr.getFirstChild();    	non-compiled	[CE]  ')'  expected	40	None	replace
63	[BUG]  [BUGGY]  Node  thenBranch  =  elseBranch.getFirstChild();  [CE]  ')'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  Node  thenBranch  =  elseBranch.getFirstChild();  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  thenBranch  =  elseBranch.getFirstChild();	  Node    thenBranch    =    expr.getFirstChild();    	non-compiled	[CE]  ')'  expected	40	None	replace
64	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(!isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(!isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {	  if(!isLowerPrecedenceInExpression(cond.getFirstChild(),    AND_PRECEDENCE)&&    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	47	None	replace
65	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(n.getFirstChild(),  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(!isLowerPrecedenceInExpression(n.getFirstChild(),  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(!isLowerPrecedenceInExpression(n.getFirstChild(),  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {	  if(!isLowerPrecedenceInExpression(cond.getFirstChild(),    AND_PRECEDENCE)&&    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	47	None	replace
66	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(!isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(!isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {	  if(!isLowerPrecedenceInExpression(cond.getFirstChild(),    AND_PRECEDENCE)&&    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	47	None	replace
67	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(cond.getFirstChild(),  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(!isLowerPrecedenceInExpression(cond.getFirstChild(),  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(!isLowerPrecedenceInExpression(cond.getFirstChild(),  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {	  if(!isLowerPrecedenceInExpression(cond.getFirstChild(),    AND_PRECEDENCE)&&    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	47	None	replace
68	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(cond.getFirstChild(),  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(!isLowerPrecedenceInExpression(cond.getFirstChild(),  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(!isLowerPrecedenceInExpression(cond.getFirstChild(),  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {	  if(!isLowerPrecedenceInExpression(cond.getFirstChild(),    AND_PRECEDENCE)&&    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	47	None	replace
69	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(n.getFirstChild(),  AND_PRECEDENCE))  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(n.getFirstChild(),  AND_PRECEDENCE))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(n.getFirstChild(),  AND_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(n.getFirstChild(),    AND_PRECEDENCE)||    isLowerPrecedenceInExpression(n.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	29	None	replace
70	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(n.getFirstChild(),  AND_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(n.getFirstChild(),  AND_PRECEDENCE))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(n.getFirstChild(),  AND_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(n.getFirstChild(),    AND_PRECEDENCE)||    isLowerPrecedenceInExpression(n.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	29	None	replace
71	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(n.getFirstChild(),  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(n.getFirstChild(),  AND_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(isLowerPrecedenceInExpression(n.getFirstChild(),  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(n.getFirstChild(),  AND_PRECEDENCE))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(n.getFirstChild(),  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(n.getFirstChild(),  AND_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(n.getFirstChild(),    AND_PRECEDENCE)||    isLowerPrecedenceInExpression(n.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	29	None	replace
72	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(n.getFirstChild(),  OR)||  isLowerPrecedenceInExpression(n.getFirstChild(),  AND_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(isLowerPrecedenceInExpression(n.getFirstChild(),  OR)||  isLowerPrecedenceInExpression(n.getFirstChild(),  AND_PRECEDENCE))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(n.getFirstChild(),  OR)||  isLowerPrecedenceInExpression(n.getFirstChild(),  AND_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(n.getFirstChild(),    AND_PRECEDENCE)||    isLowerPrecedenceInExpression(n.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	29	None	replace
73	[BUG]  [BUGGY]  Node  thenOp  =  new  Node(Token.AND,  cond,  expr.getFirstChild()).copyInformationFrom(n);  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  Node  thenOp  =  new  Node(Token.AND,  cond,  expr.getFirstChild()).copyInformationFrom(n);  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  thenOp  =  new  Node(Token.AND,  cond,  expr.getFirstChild()).copyInformationFrom(n);	  Node    thenOp    =    new    Node(Token.AND,    cond,    expr.removeFirstChild()).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	58	None	replace
74	[BUG]  [BUGGY]  Node  thenOp  =  new  Node(Token.AND,  cond,  expr.removeLastChild()).copyInformationFrom(n);  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  Node  thenOp  =  new  Node(Token.AND,  cond,  expr.removeLastChild()).copyInformationFrom(n);  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  thenOp  =  new  Node(Token.AND,  cond,  expr.removeLastChild()).copyInformationFrom(n);	  Node    thenOp    =    new    Node(Token.AND,    cond,    expr.removeFirstChild()).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	58	None	replace
75	[BUG]  [BUGGY]  Node  thenOp  =  new  Node(Token.AND,  cond,  expr.getLastChild()).copyInformationFrom(n);  [CE]  ')'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  Node  thenOp  =  new  Node(Token.AND,  cond,  expr.getLastChild()).copyInformationFrom(n);  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  thenOp  =  new  Node(Token.AND,  cond,  expr.getLastChild()).copyInformationFrom(n);	  Node    thenOp    =    new    Node(Token.AND,    cond,    expr.removeFirstChild()).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	58	None	replace
76	[BUG]  [BUGGY]  Node  thenOp  =  new  Node(Token.AND,  cond,  expr.removeFirstChild()).copyInformationFrom(n,  expr.getLastChild());  [CE]  ')'  expected  [FE]                                        AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  Node  thenOp  =  new  Node(Token.AND,  cond,  expr.removeFirstChild()).copyInformationFrom(n,  expr.getLastChild());  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  thenOp  =  new  Node(Token.AND,  cond,  expr.removeFirstChild()).copyInformationFrom(n,  expr.getLastChild());	  Node    thenOp    =    new    Node(Token.AND,    cond,    expr.removeFirstChild()).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	58	None	replace
77	[BUG]  [BUGGY]  Node  thenOp  =  new  Node(Token.AND,  cond,  expr.removeFirstChild()),  expr.copyInformationFrom(n);  [CE]  ')'  expected  [FE]                                          AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  Node  thenOp  =  new  Node(Token.AND,  cond,  expr.removeFirstChild()),  expr.copyInformationFrom(n);  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  thenOp  =  new  Node(Token.AND,  cond,  expr.removeFirstChild()),  expr.copyInformationFrom(n);	  Node    thenOp    =    new    Node(Token.AND,    cond,    expr.removeFirstChild()).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	58	None	replace
78	[BUG]  [BUGGY]  Node  thenOp  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  expr.removeLastChild()).copyInformationFrom(n);  [CE]  ')'  expected  [FE]                                            AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  Node  thenOp  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  expr.removeLastChild()).copyInformationFrom(n);  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  thenOp  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  expr.removeLastChild()).copyInformationFrom(n);	  Node    thenOp    =    new    Node(Token.AND,    cond,    expr.removeFirstChild()).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	58	None	replace
79	[BUG]  [BUGGY]  Node  assign  =  cond.getLastChild();  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  Node  assign  =  cond.getLastChild();  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  assign  =  cond.getLastChild();	  Node    assign    =    expr.getLastChild();    	non-compiled	[CE]  ')'  expected	7	None	replace
80	[BUG]  [BUGGY]  Node  assign  =  n.getLastChild();  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  Node  assign  =  n.getLastChild();  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  assign  =  n.getLastChild();	  Node    assign    =    expr.getLastChild();    	non-compiled	[CE]  ')'  expected	7	None	replace
81	[BUG]  [BUGGY]  Node  var  =  expr.removeFirstChild();  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  Node  var  =  expr.removeFirstChild();  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  var  =  expr.removeFirstChild();	  Node    var    =    expr.getFirstChild();    	non-compiled	[CE]  ')'  expected	41	None	replace
82	[BUG]  [BUGGY]  Node  var  =  expr.getNext();  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  Node  var  =  expr.getNext();  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  var  =  expr.getNext();	  Node    var    =    expr.getFirstChild();    	non-compiled	[CE]  ')'  expected	41	None	replace
83	[BUG]  [BUGGY]  Node  assign  =  new  Node(Token.OR,  cond.getFirstChild(),  expr.removeLastChild()).copyInformationFrom(n);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  Node  assign  =  new  Node(Token.OR,  cond.getFirstChild(),  expr.removeLastChild()).copyInformationFrom(n);  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  assign  =  new  Node(Token.OR,  cond.getFirstChild(),  expr.removeLastChild()).copyInformationFrom(n);	  Node    assign    =    new    Node(Token.OR,    cond.removeFirstChild(),    expr.removeLastChild()).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	9	None	replace
84	[BUG]  [BUGGY]  Node  assign  =  new  Node(Token.OR,  cond.removeLastChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  Node  assign  =  new  Node(Token.OR,  cond.removeLastChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  assign  =  new  Node(Token.OR,  cond.removeLastChild(),  expr.removeFirstChild()).copyInformationFrom(n);	  Node    assign    =    new    Node(Token.OR,    cond.removeFirstChild(),    expr.removeLastChild()).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	9	None	replace
85	[BUG]  [BUGGY]  Node  assign  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.getLastChild()).copyInformationFrom(n);  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  Node  assign  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.getLastChild()).copyInformationFrom(n);  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  assign  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.getLastChild()).copyInformationFrom(n);	  Node    assign    =    new    Node(Token.OR,    cond.removeFirstChild(),    expr.removeLastChild()).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	9	None	replace
86	[BUG]  [BUGGY]  Node  assign  =  new  Node(Token.OR,  n.removeFirstChild(),  expr.removeLastChild()).copyInformationFrom(cond);  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  Node  assign  =  new  Node(Token.OR,  n.removeFirstChild(),  expr.removeLastChild()).copyInformationFrom(cond);  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  assign  =  new  Node(Token.OR,  n.removeFirstChild(),  expr.removeLastChild()).copyInformationFrom(cond);	  Node    assign    =    new    Node(Token.OR,    cond.removeFirstChild(),    expr.removeLastChild()).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	9	None	replace
87	[BUG]  [BUGGY]  Node  assign  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeLastChild()).copyInformationFrom(n  +  1);  [CE]  ')'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  Node  assign  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeLastChild()).copyInformationFrom(n  +  1);  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  assign  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeLastChild()).copyInformationFrom(n  +  1);	  Node    assign    =    new    Node(Token.OR,    cond.removeFirstChild(),    expr.removeLastChild()).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	9	None	replace
88	[BUG]  [BUGGY]  Node  thenAssign  =  new  Node(Token.AND,  cond,  expr.getFirstChild()).copyInformationFrom(n);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  Node  thenAssign  =  new  Node(Token.AND,  cond,  expr.getFirstChild()).copyInformationFrom(n);  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  thenAssign  =  new  Node(Token.AND,  cond,  expr.getFirstChild()).copyInformationFrom(n);	  Node    thenAssign    =    new    Node(Token.AND,    cond,    expr.removeFirstChild()).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	53	None	replace
89	[BUG]  [BUGGY]  Node  thenAssign  =  new  Node(Token.AND,  cond,  expr.removeLastChild()).copyInformationFrom(n);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  Node  thenAssign  =  new  Node(Token.AND,  cond,  expr.removeLastChild()).copyInformationFrom(n);  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  thenAssign  =  new  Node(Token.AND,  cond,  expr.removeLastChild()).copyInformationFrom(n);	  Node    thenAssign    =    new    Node(Token.AND,    cond,    expr.removeFirstChild()).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	53	None	replace
90	[BUG]  [BUGGY]  Node  thenAssign  =  new  Node(Token.AND,  cond,  expr.getLastChild()).copyInformationFrom(n);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  Node  thenAssign  =  new  Node(Token.AND,  cond,  expr.getLastChild()).copyInformationFrom(n);  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  thenAssign  =  new  Node(Token.AND,  cond,  expr.getLastChild()).copyInformationFrom(n);	  Node    thenAssign    =    new    Node(Token.AND,    cond,    expr.removeFirstChild()).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	53	None	replace
91	[BUG]  [BUGGY]  Node  thenAssign  =  new  Node(Token.AND,  cond,  expr.removeFirstChild()),  expr.copyInformationFrom(n);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  Node  thenAssign  =  new  Node(Token.AND,  cond,  expr.removeFirstChild()),  expr.copyInformationFrom(n);  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  thenAssign  =  new  Node(Token.AND,  cond,  expr.removeFirstChild()),  expr.copyInformationFrom(n);	  Node    thenAssign    =    new    Node(Token.AND,    cond,    expr.removeFirstChild()).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	53	None	replace
92	[BUG]  [BUGGY]  Node  thenAssign  =  new  Node(Token.AND,  cond,  expr.removeFirstChild()).copyInformationFrom(n,  expr.getLastChild());  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  Node  thenAssign  =  new  Node(Token.AND,  cond,  expr.removeFirstChild()).copyInformationFrom(n,  expr.getLastChild());  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  thenAssign  =  new  Node(Token.AND,  cond,  expr.removeFirstChild()).copyInformationFrom(n,  expr.getLastChild());	  Node    thenAssign    =    new    Node(Token.AND,    cond,    expr.removeFirstChild()).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	53	None	replace
93	[BUG]  [BUGGY]  Node  thenAssign  =  new  Node(Token.AND,  cond,  expr.getFirstChild());  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  Node  thenAssign  =  new  Node(Token.AND,  cond,  expr.getFirstChild());  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  thenAssign  =  new  Node(Token.AND,  cond,  expr.getFirstChild());	  Node    thenAssign    =    new    Node(Token.AND,    cond,    expr.removeFirstChild());    	non-compiled	[CE]  ')'  expected	54	None	replace
94	[BUG]  [BUGGY]  Node  thenAssign  =  new  Node(Token.AND,  cond,  expr.getLastChild());  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  Node  thenAssign  =  new  Node(Token.AND,  cond,  expr.getLastChild());  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  thenAssign  =  new  Node(Token.AND,  cond,  expr.getLastChild());	  Node    thenAssign    =    new    Node(Token.AND,    cond,    expr.removeFirstChild());    	non-compiled	[CE]  ')'  expected	54	None	replace
95	[BUG]  [BUGGY]  Node  thenAssign  =  new  Node(Token.AND,  cond,  expr.removeLastChild());  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  Node  thenAssign  =  new  Node(Token.AND,  cond,  expr.removeLastChild());  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  thenAssign  =  new  Node(Token.AND,  cond,  expr.removeLastChild());	  Node    thenAssign    =    new    Node(Token.AND,    cond,    expr.removeFirstChild());    	non-compiled	[CE]  ')'  expected	54	None	replace
96	[BUG]  [BUGGY]  Node  thenAssign  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  expr.getLastChild());  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  Node  thenAssign  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  expr.getLastChild());  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  thenAssign  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  expr.getLastChild());	  Node    thenAssign    =    new    Node(Token.AND,    cond,    expr.removeFirstChild());    	non-compiled	[CE]  ')'  expected	54	None	replace
97	[BUG]  [BUGGY]  Node  thenAssign  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  expr.removeLastChild());  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  Node  thenAssign  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  expr.removeLastChild());  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  thenAssign  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  expr.removeLastChild());	  Node    thenAssign    =    new    Node(Token.AND,    cond,    expr.removeFirstChild());    	non-compiled	[CE]  ')'  expected	54	None	replace
98	[BUG]  [BUGGY]  Node  thenAssign  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  expr.removeFirstChild());  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  Node  thenAssign  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  expr.removeFirstChild());  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  thenAssign  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  expr.removeFirstChild());	  Node    thenAssign    =    new    Node(Token.AND,    cond,    expr.removeFirstChild());    	non-compiled	[CE]  ')'  expected	54	None	replace
99	[BUG]  [BUGGY]  Node  thenAssign  =  new  Node(Token.AND,  cond,  expr.cloneTree());  [CE]  ')'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  Node  thenAssign  =  new  Node(Token.AND,  cond,  expr.cloneTree());  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  thenAssign  =  new  Node(Token.AND,  cond,  expr.cloneTree());	  Node    thenAssign    =    new    Node(Token.AND,    cond,    expr.removeFirstChild());    	non-compiled	[CE]  ')'  expected	54	None	replace
100	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(n,  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  STANDARD_OBJECT_CONSTRUCTORS))  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(isLowerPrecedenceInExpression(n,  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  STANDARD_OBJECT_CONSTRUCTORS))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(n,  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  STANDARD_OBJECT_CONSTRUCTORS))  {	  if(isLowerPrecedenceInExpression(n,    STANDARD_OBJECT_CONSTRUCTORS)||    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	21	None	replace
101	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(n,  STANDARD_OBJECT_CONSTRUCTORS)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(isLowerPrecedenceInExpression(n,  STANDARD_OBJECT_CONSTRUCTORS)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(n,  STANDARD_OBJECT_CONSTRUCTORS)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(n,    STANDARD_OBJECT_CONSTRUCTORS)||    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	21	None	replace
102	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(n,  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  STANDARD_OBJECT_CONSTRUCTORS))  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(isLowerPrecedenceInExpression(n,  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  STANDARD_OBJECT_CONSTRUCTORS))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(n,  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  STANDARD_OBJECT_CONSTRUCTORS))  {	  if(isLowerPrecedenceInExpression(n,    STANDARD_OBJECT_CONSTRUCTORS)||    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	21	None	replace
103	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(n,  STANDARD_OBJECT_CONSTRUCTORS)||  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(isLowerPrecedenceInExpression(n,  STANDARD_OBJECT_CONSTRUCTORS)||  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(n,  STANDARD_OBJECT_CONSTRUCTORS)||  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(n,    STANDARD_OBJECT_CONSTRUCTORS)||    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	21	None	replace
104	[BUG]  [BUGGY]  if(isPrecedenceInExpression(cond,  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(isPrecedenceInExpression(cond,  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isPrecedenceInExpression(cond,  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {	  if(isPrecedenceInExpression(cond,    AND_PRECEDENCE)&&    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	62	None	replace
105	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {	  if(isPrecedenceInExpression(cond,    AND_PRECEDENCE)&&    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	62	None	replace
106	[BUG]  [BUGGY]  if(isPrecedenceInExpression(n,  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(isPrecedenceInExpression(n,  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isPrecedenceInExpression(n,  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {	  if(isPrecedenceInExpression(cond,    AND_PRECEDENCE)&&    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	62	None	replace
107	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(n,  AND_PRECEDENCE)&&  isPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(isLowerPrecedenceInExpression(n,  AND_PRECEDENCE)&&  isPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(n,  AND_PRECEDENCE)&&  isPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {	  if(isPrecedenceInExpression(cond,    AND_PRECEDENCE)&&    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	62	None	replace
108	[BUG]  [BUGGY]  if(isPrecedenceInExpression(cond,  OR)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(isPrecedenceInExpression(cond,  OR)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isPrecedenceInExpression(cond,  OR)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {	  if(isPrecedenceInExpression(cond,    AND_PRECEDENCE)&&    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	62	None	replace
109	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond)||  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(isLowerPrecedenceInExpression(cond)||  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(cond)||  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(cond)||    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	49	None	replace
110	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(isLowerPrecedenceInExpression(cond)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(cond)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(cond)||    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	49	None	replace
111	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(n)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(isLowerPrecedenceInExpression(n)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(n)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(cond)||    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	49	None	replace
112	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(expr)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(isLowerPrecedenceInExpression(expr)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(expr)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(cond)||    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	49	None	replace
113	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond)||  isLowerPrecedenceInExpression(n.getFirstChild(),  AND_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(isLowerPrecedenceInExpression(cond)||  isLowerPrecedenceInExpression(n.getFirstChild(),  AND_PRECEDENCE))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(cond)||  isLowerPrecedenceInExpression(n.getFirstChild(),  AND_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(cond)||    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	49	None	replace
114	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(cond)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(!isLowerPrecedenceInExpression(cond)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(!isLowerPrecedenceInExpression(cond)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(cond)||    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	49	None	replace
115	[BUG]  [BUGGY]  Node  thenBranch  =  new  Node(Token.AND,  cond,  expr.getLastChild());  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  Node  thenBranch  =  new  Node(Token.AND,  cond,  expr.getLastChild());  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  thenBranch  =  new  Node(Token.AND,  cond,  expr.getLastChild());	  Node    thenBranch    =    new    Node(Token.AND,    cond,    expr.removeFirstChild());    	non-compiled	[CE]  ')'  expected	38	None	replace
116	[BUG]  [BUGGY]  Node  thenBranch  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  expr.getLastChild());  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  Node  thenBranch  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  expr.getLastChild());  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  thenBranch  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  expr.getLastChild());	  Node    thenBranch    =    new    Node(Token.AND,    cond,    expr.removeFirstChild());    	non-compiled	[CE]  ')'  expected	38	None	replace
117	[BUG]  [BUGGY]  Node  thenBranch  =  new  Node(Token.AND,  cond,  expr.removeLastChild());  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  Node  thenBranch  =  new  Node(Token.AND,  cond,  expr.removeLastChild());  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  thenBranch  =  new  Node(Token.AND,  cond,  expr.removeLastChild());	  Node    thenBranch    =    new    Node(Token.AND,    cond,    expr.removeFirstChild());    	non-compiled	[CE]  ')'  expected	38	None	replace
118	[BUG]  [BUGGY]  Node  thenBranch  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  expr.removeLastChild());  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  Node  thenBranch  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  expr.removeLastChild());  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  thenBranch  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  expr.removeLastChild());	  Node    thenBranch    =    new    Node(Token.AND,    cond,    expr.removeFirstChild());    	non-compiled	[CE]  ')'  expected	38	None	replace
119	[BUG]  [BUGGY]  Node  thenBranch  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  expr.removeFirstChild());  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  Node  thenBranch  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  expr.removeFirstChild());  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  thenBranch  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  expr.removeFirstChild());	  Node    thenBranch    =    new    Node(Token.AND,    cond,    expr.removeFirstChild());    	non-compiled	[CE]  ')'  expected	38	None	replace
120	[BUG]  [BUGGY]  Node  thenBranch  =  new  Node(Token.AND,  cond,  expr.cloneTree());  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  Node  thenBranch  =  new  Node(Token.AND,  cond,  expr.cloneTree());  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  thenBranch  =  new  Node(Token.AND,  cond,  expr.cloneTree());	  Node    thenBranch    =    new    Node(Token.AND,    cond,    expr.removeFirstChild());    	non-compiled	[CE]  ')'  expected	38	None	replace
121	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(n.getFirstChild(),  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(isLowerPrecedenceInExpression(n.getFirstChild(),  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(n.getFirstChild(),  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(cond.getFirstChild(),    AND_PRECEDENCE)||    isLowerPrecedenceInExpression(expr.getLastChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	46	None	replace
122	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getLastChild(),  STANDARD_OBJECT_CONSTRUCTORS))  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getLastChild(),  STANDARD_OBJECT_CONSTRUCTORS))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getLastChild(),  STANDARD_OBJECT_CONSTRUCTORS))  {	  if(isLowerPrecedenceInExpression(cond,    AND_PRECEDENCE)||    isLowerPrecedenceInExpression(expr.getFirstChild(),    STANDARD_OBJECT_CONSTRUCTORS))    {    	non-compiled	[CE]  ')'  expected	34	None	replace
123	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getLastChild(),  STANDARD_OBJECT_CONSTRUCTORS))  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getLastChild(),  STANDARD_OBJECT_CONSTRUCTORS))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getLastChild(),  STANDARD_OBJECT_CONSTRUCTORS))  {	  if(isLowerPrecedenceInExpression(cond,    AND_PRECEDENCE)||    isLowerPrecedenceInExpression(expr.getFirstChild(),    STANDARD_OBJECT_CONSTRUCTORS))    {    	non-compiled	[CE]  ')'  expected	34	None	replace
124	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(expr,  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  STANDARD_OBJECT_CONSTRUCTORS))  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(isLowerPrecedenceInExpression(expr,  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  STANDARD_OBJECT_CONSTRUCTORS))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(expr,  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  STANDARD_OBJECT_CONSTRUCTORS))  {	  if(isLowerPrecedenceInExpression(cond,    AND_PRECEDENCE)||    isLowerPrecedenceInExpression(expr.getFirstChild(),    STANDARD_OBJECT_CONSTRUCTORS))    {    	non-compiled	[CE]  ')'  expected	34	None	replace
125	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond,  STANDARD_OBJECT_CONSTRUCTORS)&&  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(isLowerPrecedenceInExpression(cond,  STANDARD_OBJECT_CONSTRUCTORS)&&  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(cond,  STANDARD_OBJECT_CONSTRUCTORS)&&  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(cond,    STANDARD_OBJECT_CONSTRUCTORS)&&    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	14	None	replace
126	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(cond,    OR_PRECEDENCE)&&    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	63	None	replace
127	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(cond,    OR_PRECEDENCE)&&    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	63	None	replace
128	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(n,  OR_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(isLowerPrecedenceInExpression(n,  OR_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(n,  OR_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(cond,    OR_PRECEDENCE)&&    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	63	None	replace
129	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(cond,    OR_PRECEDENCE)&&    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	63	None	replace
130	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isLowerPrecedenceInExpression(n.getFirstChild(),  AND_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isLowerPrecedenceInExpression(n.getFirstChild(),  AND_PRECEDENCE))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isLowerPrecedenceInExpression(n.getFirstChild(),  AND_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(cond,    OR_PRECEDENCE)&&    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	63	None	replace
131	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(expr,  OR_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(isLowerPrecedenceInExpression(expr,  OR_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(expr,  OR_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(cond,    OR_PRECEDENCE)&&    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	63	None	replace
132	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(n,  STANDARD_OBJECT_CONSTRUCTORS)||  isLowerPrecedenceInExpression(n.getFirstChild(),  AND_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(isLowerPrecedenceInExpression(n,  STANDARD_OBJECT_CONSTRUCTORS)||  isLowerPrecedenceInExpression(n.getFirstChild(),  AND_PRECEDENCE))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(n,  STANDARD_OBJECT_CONSTRUCTORS)||  isLowerPrecedenceInExpression(n.getFirstChild(),  AND_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(expr,    STANDARD_OBJECT_CONSTRUCTORS)||    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	35	None	replace
133	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE)&&    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	64	None	replace
134	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE)&&    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	64	None	replace
135	[BUG]  [BUGGY]  Node  thenBranch  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  expr.getLastChild());  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  Node  thenBranch  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  expr.getLastChild());  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  thenBranch  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  expr.getLastChild());	  Node    thenBranch    =    new    Node(Token.AND,    cond,    expr.getFirstChild());    	non-compiled	[CE]  ')'  expected	43	None	replace
136	[BUG]  [BUGGY]  Node  thenBranch  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  expr.removeLastChild());  [CE]  ')'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  Node  thenBranch  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  expr.removeLastChild());  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  thenBranch  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  expr.removeLastChild());	  Node    thenBranch    =    new    Node(Token.AND,    cond,    expr.getFirstChild());    	non-compiled	[CE]  ')'  expected	43	None	replace
137	[BUG]  [BUGGY]  Node  thenBranch  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  expr.removeFirstChild());  [CE]  ')'  expected  [FE]                                        AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  Node  thenBranch  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  expr.removeFirstChild());  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  thenBranch  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  expr.removeFirstChild());	  Node    thenBranch    =    new    Node(Token.AND,    cond,    expr.getFirstChild());    	non-compiled	[CE]  ')'  expected	43	None	replace
138	[BUG]  [BUGGY]  Node  thenBranch  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  expr);  [CE]  ')'  expected  [FE]                                          AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  Node  thenBranch  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  expr);  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  thenBranch  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  expr);	  Node    thenBranch    =    new    Node(Token.AND,    cond,    expr.getFirstChild());    	non-compiled	[CE]  ')'  expected	43	None	replace
139	[BUG]  [BUGGY]  Node  thenBranch  =  new  Node(Token.AND,  cond,  expr.getOwnerChild());  [CE]  ')'  expected  [FE]                                            AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  Node  thenBranch  =  new  Node(Token.AND,  cond,  expr.getOwnerChild());  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  thenBranch  =  new  Node(Token.AND,  cond,  expr.getOwnerChild());	  Node    thenBranch    =    new    Node(Token.AND,    cond,    expr.getFirstChild());    	non-compiled	[CE]  ')'  expected	43	None	replace
140	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond.getLastChild(),  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(isLowerPrecedenceInExpression(cond.getLastChild(),  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(cond.getLastChild(),  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(expr.getLastChild(),    AND_PRECEDENCE)||    isLowerPrecedenceInExpression(expr.getLastChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	31	None	replace
141	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(n.getLastChild(),  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(n.getLastChild(),  AND_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(isLowerPrecedenceInExpression(n.getLastChild(),  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(n.getLastChild(),  AND_PRECEDENCE))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(n.getLastChild(),  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(n.getLastChild(),  AND_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(expr.getLastChild(),    AND_PRECEDENCE)||    isLowerPrecedenceInExpression(expr.getLastChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	31	None	replace
142	[BUG]  [BUGGY]  if(isPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(isPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(expr.getLastChild(),    AND_PRECEDENCE)||    isLowerPrecedenceInExpression(expr.getLastChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	31	None	replace
143	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(n,  OR)||  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(isLowerPrecedenceInExpression(n,  OR)||  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(n,  OR)||  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(n,    AND_PRECEDENCE)||    isLowerPrecedenceInExpression(expr.getLastChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	2	None	replace
144	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(n,  COND)||  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(isLowerPrecedenceInExpression(n,  COND)||  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(n,  COND)||  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(n,    AND_PRECEDENCE)||    isLowerPrecedenceInExpression(expr.getLastChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	2	None	replace
145	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond,  OR)&&  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(isLowerPrecedenceInExpression(cond,  OR)&&  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(cond,  OR)&&  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(cond,    OR)&&    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	15	None	replace
146	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond,  AND)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(isLowerPrecedenceInExpression(cond,  AND)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(cond,  AND)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(cond,    OR)&&    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	15	None	replace
147	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond,  AND)||  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(isLowerPrecedenceInExpression(cond,  AND)||  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(cond,  AND)||  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(cond,    AND)||    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	23	None	replace
148	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(n,  AND)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(isLowerPrecedenceInExpression(n,  AND)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(n,  AND)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(cond,    AND)||    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	23	None	replace
149	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(expr,  AND)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(isLowerPrecedenceInExpression(expr,  AND)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(expr,  AND)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(cond,    AND)||    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	23	None	replace
150	[BUG]  [BUGGY]  Node  thenBranch  =  cond.getLastChild();  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  Node  thenBranch  =  cond.getLastChild();  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  thenBranch  =  cond.getLastChild();	  Node    thenBranch    =    expr.getLastChild();    	non-compiled	[CE]  ')'  expected	39	None	replace
151	[BUG]  [BUGGY]  Node  thenBranch  =  n.getLastChild();  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  Node  thenBranch  =  n.getLastChild();  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  thenBranch  =  n.getLastChild();	  Node    thenBranch    =    expr.getLastChild();    	non-compiled	[CE]  ')'  expected	39	None	replace
152	[BUG]  [BUGGY]  Node  thenBranch  =  elseBranch.getLastChild();  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  Node  thenBranch  =  elseBranch.getLastChild();  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  thenBranch  =  elseBranch.getLastChild();	  Node    thenBranch    =    expr.getLastChild();    	non-compiled	[CE]  ')'  expected	39	None	replace
153	[BUG]  [BUGGY]  Node  thenAssign  =  new  Node(Token.AND,  cond,  expr.getFirstChild());  parent.replaceChild(n,  newExpr);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  Node  thenAssign  =  new  Node(Token.AND,  cond,  expr.getFirstChild());  parent.replaceChild(n,  newExpr);  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  thenAssign  =  new  Node(Token.AND,  cond,  expr.getFirstChild());  parent.replaceChild(n,  newExpr);	  Node    thenAssign    =    new    Node(Token.AND,    cond,    expr.removeFirstChild());    parent.replaceChild(n,    newExpr);    	non-compiled	[CE]  ')'  expected	55	None	replace
154	[BUG]  [BUGGY]  Node  thenAssign  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  expr.removeLastChild());  parent.replaceChild(n,  newExpr);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  Node  thenAssign  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  expr.removeLastChild());  parent.replaceChild(n,  newExpr);  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  thenAssign  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  expr.removeLastChild());  parent.replaceChild(n,  newExpr);	  Node    thenAssign    =    new    Node(Token.AND,    cond,    expr.removeFirstChild());    parent.replaceChild(n,    newExpr);    	non-compiled	[CE]  ')'  expected	55	None	replace
155	[BUG]  [BUGGY]  Node  thenAssign  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  expr.removeFirstChild());  parent.replaceChild(n,  newExpr);  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  Node  thenAssign  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  expr.removeFirstChild());  parent.replaceChild(n,  newExpr);  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  thenAssign  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  expr.removeFirstChild());  parent.replaceChild(n,  newExpr);	  Node    thenAssign    =    new    Node(Token.AND,    cond,    expr.removeFirstChild());    parent.replaceChild(n,    newExpr);    	non-compiled	[CE]  ')'  expected	55	None	replace
156	[BUG]  [BUGGY]  Node  thenAssign  =  new  Node(Token.AND,  cond,  expr.removeLastChild());  parent.replaceChild(n,  newExpr);  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  Node  thenAssign  =  new  Node(Token.AND,  cond,  expr.removeLastChild());  parent.replaceChild(n,  newExpr);  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  thenAssign  =  new  Node(Token.AND,  cond,  expr.removeLastChild());  parent.replaceChild(n,  newExpr);	  Node    thenAssign    =    new    Node(Token.AND,    cond,    expr.removeFirstChild());    parent.replaceChild(n,    newExpr);    	non-compiled	[CE]  ')'  expected	55	None	replace
157	[BUG]  [BUGGY]  Node  thenAssign  =  new  Node(Token.AND,  cond,  expr.getLastChild());  parent.replaceChild(n,  newExpr);  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  Node  thenAssign  =  new  Node(Token.AND,  cond,  expr.getLastChild());  parent.replaceChild(n,  newExpr);  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  thenAssign  =  new  Node(Token.AND,  cond,  expr.getLastChild());  parent.replaceChild(n,  newExpr);	  Node    thenAssign    =    new    Node(Token.AND,    cond,    expr.removeFirstChild());    parent.replaceChild(n,    newExpr);    	non-compiled	[CE]  ')'  expected	55	None	replace
158	[BUG]  [BUGGY]  Node  thenAssign  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  expr.removeFirstChild());  parent.replaceChild(n,  newExpr);  [CE]  ')'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  Node  thenAssign  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  expr.removeFirstChild());  parent.replaceChild(n,  newExpr);  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  thenAssign  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  expr.removeFirstChild());  parent.replaceChild(n,  newExpr);	  Node    thenAssign    =    new    Node(Token.AND,    cond,    expr.removeFirstChild());    parent.replaceChild(n,    newExpr);    	non-compiled	[CE]  ')'  expected	55	None	replace
159	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(n.getFirstChild(),  STANDARD_OBJECT_CONSTRUCTORS))  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(n.getFirstChild(),  STANDARD_OBJECT_CONSTRUCTORS))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(n.getFirstChild(),  STANDARD_OBJECT_CONSTRUCTORS))  {	  if(isLowerPrecedenceInExpression(cond,    AND_PRECEDENCE)&&    isLowerPrecedenceInExpression(expr.getFirstChild(),    STANDARD_OBJECT_CONSTRUCTORS))    {    	non-compiled	[CE]  ')'  expected	36	None	replace
160	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(n.getFirstChild(),  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(isLowerPrecedenceInExpression(n.getFirstChild(),  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(n.getFirstChild(),  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(cond.getFirstChild(),    AND_PRECEDENCE)||    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	28	None	replace
161	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(cond.getFirstChild(),    AND_PRECEDENCE)||    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	28	None	replace
162	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE)||  isPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE)||  isPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE)||  isPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {	  if(isPrecedenceInExpression(cond,    AND_PRECEDENCE)||    isLowerPrecedenceInExpression(expr.getLastChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	59	None	replace
163	[BUG]  [BUGGY]  if(isPrecedenceInExpression(cond,  STANDARD_OBJECT_CONSTRUCTORS)||  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(isPrecedenceInExpression(cond,  STANDARD_OBJECT_CONSTRUCTORS)||  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isPrecedenceInExpression(cond,  STANDARD_OBJECT_CONSTRUCTORS)||  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {	  if(isPrecedenceInExpression(cond,    AND_PRECEDENCE)||    isLowerPrecedenceInExpression(expr.getLastChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	59	None	replace
164	[BUG]  [BUGGY]  if(isPrecedenceInExpression(n,  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(isPrecedenceInExpression(n,  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isPrecedenceInExpression(n,  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {	  if(isPrecedenceInExpression(cond,    AND_PRECEDENCE)||    isLowerPrecedenceInExpression(expr.getLastChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	59	None	replace
165	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {	  if(isPrecedenceInExpression(cond,    AND_PRECEDENCE)||    isLowerPrecedenceInExpression(expr.getLastChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	59	None	replace
166	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(expr,  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(n.getFirstChild(),  AND_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(isLowerPrecedenceInExpression(expr,  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(n.getFirstChild(),  AND_PRECEDENCE))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(expr,  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(n.getFirstChild(),  AND_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(n,    AND_PRECEDENCE)||    isLowerPrecedenceInExpression(n.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	26	None	replace
167	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(n,  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(n.getFirstChild(),  AND_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(isLowerPrecedenceInExpression(n,  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(n.getFirstChild(),  AND_PRECEDENCE))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(n,  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(n.getFirstChild(),  AND_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(n,    AND_PRECEDENCE)||    isLowerPrecedenceInExpression(n.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	26	None	replace
168	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(n.getFirstChild(),  AND_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(n.getFirstChild(),  AND_PRECEDENCE))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(n.getFirstChild(),  AND_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(n,    AND_PRECEDENCE)||    isLowerPrecedenceInExpression(n.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	26	None	replace
169	[BUG]  [BUGGY]  Node  thenBranchIsExpressionBlock  =  expr.getFirstChild().getNext().getNext();  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  Node  thenBranchIsExpressionBlock  =  expr.getFirstChild().getNext().getNext();  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  thenBranchIsExpressionBlock  =  expr.getFirstChild().getNext().getNext();	  Node    thenBranchIsExpressionBlock    =    n.getFirstChild().getNext().getNext();    	non-compiled	[CE]  ')'  expected	42	None	replace
170	[BUG]  [BUGGY]  Node  thenBranchIsExpressionBlock  =  cond.getFirstChild().getNext().getNext();  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  Node  thenBranchIsExpressionBlock  =  cond.getFirstChild().getNext().getNext();  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  thenBranchIsExpressionBlock  =  cond.getFirstChild().getNext().getNext();	  Node    thenBranchIsExpressionBlock    =    n.getFirstChild().getNext().getNext();    	non-compiled	[CE]  ')'  expected	42	None	replace
171	[BUG]  [BUGGY]  Node  thenBranchIsExpressionBlock  =  parent.getFirstChild().getNext().getNext();  [CE]  ')'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  Node  thenBranchIsExpressionBlock  =  parent.getFirstChild().getNext().getNext();  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  thenBranchIsExpressionBlock  =  parent.getFirstChild().getNext().getNext();	  Node    thenBranchIsExpressionBlock    =    n.getFirstChild().getNext().getNext();    	non-compiled	[CE]  ')'  expected	42	None	replace
172	[BUG]  [BUGGY]  Node  thenBranchIsExpressionBlock  =  expr.getLastChild().getNext().getNext();  [CE]  ')'  expected  [FE]                                        AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  Node  thenBranchIsExpressionBlock  =  expr.getLastChild().getNext().getNext();  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  thenBranchIsExpressionBlock  =  expr.getLastChild().getNext().getNext();	  Node    thenBranchIsExpressionBlock    =    n.getFirstChild().getNext().getNext();    	non-compiled	[CE]  ')'  expected	42	None	replace
173	[BUG]  [BUGGY]  if(isPrecedenceInExpression(n,  OR)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(isPrecedenceInExpression(n,  OR)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isPrecedenceInExpression(n,  OR)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {	  if(isPrecedenceInExpression(n,    AND_PRECEDENCE)||    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	44	None	replace
174	[BUG]  [BUGGY]  if(isPrecedenceInExpression(n,  COND)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(isPrecedenceInExpression(n,  COND)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isPrecedenceInExpression(n,  COND)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {	  if(isPrecedenceInExpression(n,    AND_PRECEDENCE)||    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	44	None	replace
175	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(n,  AND_PRECEDENCE)||  isPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(isLowerPrecedenceInExpression(n,  AND_PRECEDENCE)||  isPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(n,  AND_PRECEDENCE)||  isPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {	  if(isPrecedenceInExpression(n,    AND_PRECEDENCE)||    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	44	None	replace
176	[BUG]  [BUGGY]  if(isPrecedenceInExpression(cond,  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getLastChild(),  STANDARD_OBJECT_CONSTRUCTORS))  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(isPrecedenceInExpression(cond,  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getLastChild(),  STANDARD_OBJECT_CONSTRUCTORS))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isPrecedenceInExpression(cond,  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getLastChild(),  STANDARD_OBJECT_CONSTRUCTORS))  {	  if(isPrecedenceInExpression(cond,    AND_PRECEDENCE)||    isLowerPrecedenceInExpression(expr.getFirstChild(),    STANDARD_OBJECT_CONSTRUCTORS))    {    	non-compiled	[CE]  ')'  expected	61	None	replace
177	[BUG]  [BUGGY]  if(isPrecedenceInExpression(cond,  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  STANDARD_OBJECT_CONSTRUCTORS))  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(isPrecedenceInExpression(cond,  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  STANDARD_OBJECT_CONSTRUCTORS))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isPrecedenceInExpression(cond,  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  STANDARD_OBJECT_CONSTRUCTORS))  {	  if(isPrecedenceInExpression(cond,    AND_PRECEDENCE)||    isLowerPrecedenceInExpression(expr.getFirstChild(),    STANDARD_OBJECT_CONSTRUCTORS))    {    	non-compiled	[CE]  ')'  expected	61	None	replace
178	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE)||  isPrecedenceInExpression(expr.getFirstChild(),  STANDARD_OBJECT_CONSTRUCTORS))  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE)||  isPrecedenceInExpression(expr.getFirstChild(),  STANDARD_OBJECT_CONSTRUCTORS))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE)||  isPrecedenceInExpression(expr.getFirstChild(),  STANDARD_OBJECT_CONSTRUCTORS))  {	  if(isPrecedenceInExpression(cond,    AND_PRECEDENCE)||    isLowerPrecedenceInExpression(expr.getFirstChild(),    STANDARD_OBJECT_CONSTRUCTORS))    {    	non-compiled	[CE]  ')'  expected	61	None	replace
179	[BUG]  [BUGGY]  if(isPrecedenceInExpression(cond,  STANDARD_OBJECT_CONSTRUCTORS)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(isPrecedenceInExpression(cond,  STANDARD_OBJECT_CONSTRUCTORS)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isPrecedenceInExpression(cond,  STANDARD_OBJECT_CONSTRUCTORS)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {	  if(isPrecedenceInExpression(cond,    AND_PRECEDENCE)||    isLowerPrecedenceInExpression(expr.getFirstChild(),    STANDARD_OBJECT_CONSTRUCTORS))    {    	non-compiled	[CE]  ')'  expected	61	None	replace
180	[BUG]  [BUGGY]  if(isPrecedenceInExpression(n,  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  STANDARD_OBJECT_CONSTRUCTORS))  {  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(isPrecedenceInExpression(n,  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  STANDARD_OBJECT_CONSTRUCTORS))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isPrecedenceInExpression(n,  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  STANDARD_OBJECT_CONSTRUCTORS))  {	  if(isPrecedenceInExpression(cond,    AND_PRECEDENCE)||    isLowerPrecedenceInExpression(expr.getFirstChild(),    STANDARD_OBJECT_CONSTRUCTORS))    {    	non-compiled	[CE]  ')'  expected	61	None	replace
181	[BUG]  [BUGGY]  if(isPrecedenceInExpression(cond,  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getLastChild(),  STANDARD_OBJECT_CONSTRUCTORS))  {  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(isPrecedenceInExpression(cond,  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getLastChild(),  STANDARD_OBJECT_CONSTRUCTORS))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isPrecedenceInExpression(cond,  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getLastChild(),  STANDARD_OBJECT_CONSTRUCTORS))  {	  if(isPrecedenceInExpression(cond,    AND_PRECEDENCE)||    isLowerPrecedenceInExpression(expr.getFirstChild(),    STANDARD_OBJECT_CONSTRUCTORS))    {    	non-compiled	[CE]  ')'  expected	61	None	replace
182	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(expr,  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(n.getFirstChild(),  AND_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(isLowerPrecedenceInExpression(expr,  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(n.getFirstChild(),  AND_PRECEDENCE))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(expr,  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(n.getFirstChild(),  AND_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(cond,    AND_PRECEDENCE)&&    isLowerPrecedenceInExpression(n.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	16	None	replace
183	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond,  STANDARD_OBJECT_CONSTRUCTORS)&&  isLowerPrecedenceInExpression(n.getFirstChild(),  AND_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(isLowerPrecedenceInExpression(cond,  STANDARD_OBJECT_CONSTRUCTORS)&&  isLowerPrecedenceInExpression(n.getFirstChild(),  AND_PRECEDENCE))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(cond,  STANDARD_OBJECT_CONSTRUCTORS)&&  isLowerPrecedenceInExpression(n.getFirstChild(),  AND_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(cond,    AND_PRECEDENCE)&&    isLowerPrecedenceInExpression(n.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	16	None	replace
184	[BUG]  [BUGGY]  Node  thenAssign  =  new  Node(Token.AND,  cond,  expr.getFirstChild()).copyInformationFrom(n);  parent.replaceChild(n,  newExpr);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  Node  thenAssign  =  new  Node(Token.AND,  cond,  expr.getFirstChild()).copyInformationFrom(n);  parent.replaceChild(n,  newExpr);  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  thenAssign  =  new  Node(Token.AND,  cond,  expr.getFirstChild()).copyInformationFrom(n);  parent.replaceChild(n,  newExpr);	  Node    thenAssign    =    new    Node(Token.AND,    cond,    expr.removeFirstChild()).copyInformationFrom(n);    parent.replaceChild(n,    newExpr);    	non-compiled	[CE]  ')'  expected	56	None	replace
185	[BUG]  [BUGGY]  Node  thenAssign  =  new  Node(Token.AND,  cond,  expr.removeLastChild()).copyInformationFrom(n);  parent.replaceChild(n,  newExpr);  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  Node  thenAssign  =  new  Node(Token.AND,  cond,  expr.removeLastChild()).copyInformationFrom(n);  parent.replaceChild(n,  newExpr);  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  thenAssign  =  new  Node(Token.AND,  cond,  expr.removeLastChild()).copyInformationFrom(n);  parent.replaceChild(n,  newExpr);	  Node    thenAssign    =    new    Node(Token.AND,    cond,    expr.removeFirstChild()).copyInformationFrom(n);    parent.replaceChild(n,    newExpr);    	non-compiled	[CE]  ')'  expected	56	None	replace
186	[BUG]  [BUGGY]  Node  thenAssign  =  new  Node(Token.AND,  cond,  expr.getLastChild()).copyInformationFrom(n);  parent.replaceChild(n,  newExpr);  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  Node  thenAssign  =  new  Node(Token.AND,  cond,  expr.getLastChild()).copyInformationFrom(n);  parent.replaceChild(n,  newExpr);  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  thenAssign  =  new  Node(Token.AND,  cond,  expr.getLastChild()).copyInformationFrom(n);  parent.replaceChild(n,  newExpr);	  Node    thenAssign    =    new    Node(Token.AND,    cond,    expr.removeFirstChild()).copyInformationFrom(n);    parent.replaceChild(n,    newExpr);    	non-compiled	[CE]  ')'  expected	56	None	replace
187	[BUG]  [BUGGY]  Node  thenAssign  =  new  Node(Token.AND,  cond,  expr.removeFirstChild()),  expr.copyInformationFrom(n);  parent.replaceChild(n,  newExpr);  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  Node  thenAssign  =  new  Node(Token.AND,  cond,  expr.removeFirstChild()),  expr.copyInformationFrom(n);  parent.replaceChild(n,  newExpr);  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  thenAssign  =  new  Node(Token.AND,  cond,  expr.removeFirstChild()),  expr.copyInformationFrom(n);  parent.replaceChild(n,  newExpr);	  Node    thenAssign    =    new    Node(Token.AND,    cond,    expr.removeFirstChild()).copyInformationFrom(n);    parent.replaceChild(n,    newExpr);    	non-compiled	[CE]  ')'  expected	56	None	replace
188	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(expr,  STANDARD_OBJECT_CONSTRUCTORS)||  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(isLowerPrecedenceInExpression(expr,  STANDARD_OBJECT_CONSTRUCTORS)||  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(expr,  STANDARD_OBJECT_CONSTRUCTORS)||  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(cond,    STANDARD_OBJECT_CONSTRUCTORS)||    isLowerPrecedenceInExpression(expr.getLastChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	3	None	replace
189	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  STANDARD_OBJECT_CONSTRUCTORS))  {  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(!isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  STANDARD_OBJECT_CONSTRUCTORS))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(!isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  STANDARD_OBJECT_CONSTRUCTORS))  {	  if(!isLowerPrecedenceInExpression(cond,    STANDARD_OBJECT_CONSTRUCTORS)    &&    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	51	None	replace
190	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(cond,  STANDARD_OBJECT_CONSTRUCTORS)&&  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(!isLowerPrecedenceInExpression(cond,  STANDARD_OBJECT_CONSTRUCTORS)&&  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(!isLowerPrecedenceInExpression(cond,  STANDARD_OBJECT_CONSTRUCTORS)&&  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {	  if(!isLowerPrecedenceInExpression(cond,    STANDARD_OBJECT_CONSTRUCTORS)    &&    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	51	None	replace
191	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(n,  STANDARD_OBJECT_CONSTRUCTORS)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(!isLowerPrecedenceInExpression(n,  STANDARD_OBJECT_CONSTRUCTORS)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(!isLowerPrecedenceInExpression(n,  STANDARD_OBJECT_CONSTRUCTORS)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {	  if(!isLowerPrecedenceInExpression(cond,    STANDARD_OBJECT_CONSTRUCTORS)    &&    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	51	None	replace
192	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond.getFirstChild(),  OR)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(isLowerPrecedenceInExpression(cond.getFirstChild(),  OR)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(cond.getFirstChild(),  OR)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(expr.getFirstChild(),    OR)||    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	33	None	replace
193	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond.getFirstChild(),  OR)||  isLowerPrecedenceInExpression(cond.getFirstChild(),  AND_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(isLowerPrecedenceInExpression(cond.getFirstChild(),  OR)||  isLowerPrecedenceInExpression(cond.getFirstChild(),  AND_PRECEDENCE))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(cond.getFirstChild(),  OR)||  isLowerPrecedenceInExpression(cond.getFirstChild(),  AND_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(expr.getFirstChild(),    OR)||    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	33	None	replace
194	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(expr.getLastChild(),  OR)||  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(isLowerPrecedenceInExpression(expr.getLastChild(),  OR)||  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(expr.getLastChild(),  OR)||  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(expr.getFirstChild(),    OR)||    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	33	None	replace
195	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(expr.getFirstChild(),  AND)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(isLowerPrecedenceInExpression(expr.getFirstChild(),  AND)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(expr.getFirstChild(),  AND)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(expr.getFirstChild(),    OR)||    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	33	None	replace
196	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(expr.getFirstChild(),  OR)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(isLowerPrecedenceInExpression(expr.getFirstChild(),  OR)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(expr.getFirstChild(),  OR)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(expr.getFirstChild(),    OR)||    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	33	None	replace
197	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(expr,  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(isLowerPrecedenceInExpression(expr,  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(expr,  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(expr,    AND_PRECEDENCE)&&    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	27	None	replace
198	[BUG]  [BUGGY]  Node  assign  =  new  Node(Token.AND,  cond,  expr.getFirstChild()).copyInformationFrom(n);  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  Node  assign  =  new  Node(Token.AND,  cond,  expr.getFirstChild()).copyInformationFrom(n);  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  assign  =  new  Node(Token.AND,  cond,  expr.getFirstChild()).copyInformationFrom(n);	  Node    assign    =    new    Node(Token.AND,    cond,    expr.removeFirstChild()).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	10	None	replace
199	[BUG]  [BUGGY]  Node  assign  =  new  Node(Token.AND,  cond,  expr.removeLastChild()).copyInformationFrom(n);  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  Node  assign  =  new  Node(Token.AND,  cond,  expr.removeLastChild()).copyInformationFrom(n);  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  assign  =  new  Node(Token.AND,  cond,  expr.removeLastChild()).copyInformationFrom(n);	  Node    assign    =    new    Node(Token.AND,    cond,    expr.removeFirstChild()).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	10	None	replace
200	[BUG]  [BUGGY]  Node  assign  =  new  Node(Token.AND,  cond,  expr.getLastChild()).copyInformationFrom(n);  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  Node  assign  =  new  Node(Token.AND,  cond,  expr.getLastChild()).copyInformationFrom(n);  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  assign  =  new  Node(Token.AND,  cond,  expr.getLastChild()).copyInformationFrom(n);	  Node    assign    =    new    Node(Token.AND,    cond,    expr.removeFirstChild()).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	10	None	replace
201	[BUG]  [BUGGY]  Node  assign  =  new  Node(Token.AND,  cond,  expr.removeFirstChild()),  expr.copyInformationFrom(n);  [CE]  ')'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  Node  assign  =  new  Node(Token.AND,  cond,  expr.removeFirstChild()),  expr.copyInformationFrom(n);  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  assign  =  new  Node(Token.AND,  cond,  expr.removeFirstChild()),  expr.copyInformationFrom(n);	  Node    assign    =    new    Node(Token.AND,    cond,    expr.removeFirstChild()).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	10	None	replace
202	[BUG]  [BUGGY]  Node  assign  =  new  Node(Token.AND,  cond,  expr.getNext()).copyInformationFrom(n);  [CE]  ')'  expected  [FE]                                        AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  Node  assign  =  new  Node(Token.AND,  cond,  expr.getNext()).copyInformationFrom(n);  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  assign  =  new  Node(Token.AND,  cond,  expr.getNext()).copyInformationFrom(n);	  Node    assign    =    new    Node(Token.AND,    cond,    expr.removeFirstChild()).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	10	None	replace
203	[BUG]  [BUGGY]  Node  assign  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  parent).copyInformationFrom(n);  [CE]  ')'  expected  [FE]                                          AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  Node  assign  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  parent).copyInformationFrom(n);  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  assign  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  parent).copyInformationFrom(n);	  Node    assign    =    new    Node(Token.AND,    cond,    expr.removeFirstChild()).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	10	None	replace
204	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(n,  cond)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(isLowerPrecedenceInExpression(n,  cond)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(n,  cond)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(n,    OR)||    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	20	None	replace
205	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(n.getFirstChild(),  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(isLowerPrecedenceInExpression(n.getFirstChild(),  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(n.getFirstChild(),  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(cond.getFirstChild(),    AND_PRECEDENCE)&&    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	32	None	replace
206	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(cond,  OR)&&  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(!isLowerPrecedenceInExpression(cond,  OR)&&  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(!isLowerPrecedenceInExpression(cond,  OR)&&  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {	  if(!isLowerPrecedenceInExpression(cond,    OR)&&    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	45	None	replace
207	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(cond,  OR)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(!isLowerPrecedenceInExpression(cond,  OR)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(!isLowerPrecedenceInExpression(cond,  OR)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {	  if(!isLowerPrecedenceInExpression(cond,    OR)&&    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	45	None	replace
208	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(cond,  AND)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(!isLowerPrecedenceInExpression(cond,  AND)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(!isLowerPrecedenceInExpression(cond,  AND)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {	  if(!isLowerPrecedenceInExpression(cond,    OR)&&    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	45	None	replace
209	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(cond,  AND)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(!isLowerPrecedenceInExpression(cond,  AND)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(!isLowerPrecedenceInExpression(cond,  AND)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {	  if(!isLowerPrecedenceInExpression(cond,    OR)&&    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	45	None	replace
210	[BUG]  [BUGGY]  if(isPrecedenceInExpression(n.getFirstChild(),  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(isPrecedenceInExpression(n.getFirstChild(),  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isPrecedenceInExpression(n.getFirstChild(),  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {	  if(isPrecedenceInExpression(cond.getFirstChild(),    AND_PRECEDENCE)||    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	48	None	replace
211	[BUG]  [BUGGY]  if(isPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(isPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {	  if(isPrecedenceInExpression(cond.getFirstChild(),    AND_PRECEDENCE)||    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	48	None	replace
212	[BUG]  [BUGGY]  if(isPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(isPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {	  if(isPrecedenceInExpression(cond.getFirstChild(),    AND_PRECEDENCE)||    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	48	None	replace
213	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(n,  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(n.getLastChild(),  AND_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(isLowerPrecedenceInExpression(n,  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(n.getLastChild(),  AND_PRECEDENCE))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(n,  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(n.getLastChild(),  AND_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(expr,    AND_PRECEDENCE)||    isLowerPrecedenceInExpression(expr.getLastChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	4	None	replace
214	[BUG]  [BUGGY]  Node  thenOp  =  new  Node(Token.AND,  cond,  expr.getFirstChild());  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  Node  thenOp  =  new  Node(Token.AND,  cond,  expr.getFirstChild());  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  thenOp  =  new  Node(Token.AND,  cond,  expr.getFirstChild());	  Node    thenOp    =    new    Node(Token.AND,    cond,    expr.removeFirstChild());    	non-compiled	[CE]  ')'  expected	57	None	replace
215	[BUG]  [BUGGY]  Node  thenOp  =  new  Node(Token.AND,  cond,  expr.getLastChild());  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  Node  thenOp  =  new  Node(Token.AND,  cond,  expr.getLastChild());  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  thenOp  =  new  Node(Token.AND,  cond,  expr.getLastChild());	  Node    thenOp    =    new    Node(Token.AND,    cond,    expr.removeFirstChild());    	non-compiled	[CE]  ')'  expected	57	None	replace
216	[BUG]  [BUGGY]  Node  thenOp  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  expr.getLastChild());  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  Node  thenOp  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  expr.getLastChild());  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  thenOp  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  expr.getLastChild());	  Node    thenOp    =    new    Node(Token.AND,    cond,    expr.removeFirstChild());    	non-compiled	[CE]  ')'  expected	57	None	replace
217	[BUG]  [BUGGY]  Node  thenOp  =  new  Node(Token.AND,  cond,  expr.removeLastChild());  [CE]  ')'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  Node  thenOp  =  new  Node(Token.AND,  cond,  expr.removeLastChild());  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  thenOp  =  new  Node(Token.AND,  cond,  expr.removeLastChild());	  Node    thenOp    =    new    Node(Token.AND,    cond,    expr.removeFirstChild());    	non-compiled	[CE]  ')'  expected	57	None	replace
218	[BUG]  [BUGGY]  Node  thenOp  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  expr.removeLastChild());  [CE]  ')'  expected  [FE]                                        AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  Node  thenOp  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  expr.removeLastChild());  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  thenOp  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  expr.removeLastChild());	  Node    thenOp    =    new    Node(Token.AND,    cond,    expr.removeFirstChild());    	non-compiled	[CE]  ')'  expected	57	None	replace
219	[BUG]  [BUGGY]  Node  thenOp  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  expr.removeFirstChild());  [CE]  ')'  expected  [FE]                                          AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  Node  thenOp  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  expr.removeFirstChild());  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  thenOp  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  expr.removeFirstChild());	  Node    thenOp    =    new    Node(Token.AND,    cond,    expr.removeFirstChild());    	non-compiled	[CE]  ')'  expected	57	None	replace
220	[BUG]  [BUGGY]  Node  thenOp  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  expr.getNext());  [CE]  ')'  expected  [FE]                                            AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  Node  thenOp  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  expr.getNext());  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  thenOp  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  expr.getNext());	  Node    thenOp    =    new    Node(Token.AND,    cond,    expr.removeFirstChild());    	non-compiled	[CE]  ')'  expected	57	None	replace
221	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(cond,  AND_VAR)&&  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(!isLowerPrecedenceInExpression(cond,  AND_VAR)&&  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(!isLowerPrecedenceInExpression(cond,  AND_VAR)&&  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {	  if(!isLowerPrecedenceInExpression(cond,    AND_VAR)&&    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	52	None	replace
222	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(cond,  AND_VAR)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(!isLowerPrecedenceInExpression(cond,  AND_VAR)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(!isLowerPrecedenceInExpression(cond,  AND_VAR)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {	  if(!isLowerPrecedenceInExpression(cond,    AND_VAR)&&    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	52	None	replace
223	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(n,  AND_VAR)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(!isLowerPrecedenceInExpression(n,  AND_VAR)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(!isLowerPrecedenceInExpression(n,  AND_VAR)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {	  if(!isLowerPrecedenceInExpression(cond,    AND_VAR)&&    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	52	None	replace
224	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond,  AND_VAR)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(isLowerPrecedenceInExpression(cond,  AND_VAR)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(cond,  AND_VAR)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {	  if(!isLowerPrecedenceInExpression(cond,    AND_VAR)&&    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	52	None	replace
225	[BUG]  [BUGGY]  if(isPrecedenceInExpression(cond,  OR)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(isPrecedenceInExpression(cond,  OR)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isPrecedenceInExpression(cond,  OR)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {	  if(isPrecedenceInExpression(cond,    AND_PRECEDENCE)||    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	60	None	replace
226	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(n,  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  COND))  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(isLowerPrecedenceInExpression(n,  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  COND))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(n,  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  COND))  {	  if(isLowerPrecedenceInExpression(n,    COND)||    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	22	None	replace
227	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond,  COND)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(isLowerPrecedenceInExpression(cond,  COND)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(cond,  COND)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(n,    COND)||    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	22	None	replace
228	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond,  COND)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(isLowerPrecedenceInExpression(cond,  COND)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(cond,  COND)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(n,    COND)||    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	22	None	replace
229	[BUG]  [BUGGY]  if(isConstructorInExpression(cond,  OR)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(isConstructorInExpression(cond,  OR)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isConstructorInExpression(cond,  OR)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(expr,    OR)||    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	24	None	replace
230	[BUG]  [BUGGY]  Node  assign  =  new  Node(Token.AND,  cond,  expr.cloneTree());  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  Node  assign  =  new  Node(Token.AND,  cond,  expr.cloneTree());  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  assign  =  new  Node(Token.AND,  cond,  expr.cloneTree());	  Node    assign    =    new    Node(Token.AND,    cond,    expr.removeFirstChild());    	non-compiled	[CE]  ')'  expected	11	None	replace
231	[BUG]  [BUGGY]  Node  var  =  cond.getfirstChild();  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  Node  var  =  cond.getfirstChild();  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  var  =  cond.getfirstChild();	  Node    var    =    expr.getLastChild();    	non-compiled	[CE]  ')'  expected	37	None	replace
232	[BUG]  [BUGGY]  Node  assign  =  new  Node(Token.OR,  cond,  expr.removeFirstChild(),  expr.removeFirstChild());  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  Node  assign  =  new  Node(Token.OR,  cond,  expr.removeFirstChild(),  expr.removeFirstChild());  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  assign  =  new  Node(Token.OR,  cond,  expr.removeFirstChild(),  expr.removeFirstChild());	  Node    assign    =    new    Node(Token.OR,    cond.removeFirstChild(),    expr.removeFirstChild());    	non-compiled	[CE]  ')'  expected	12	None	replace
233	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE)||  isPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE)||  isPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE)||  isPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {	  if(isPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE)||    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	65	None	replace
234	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(cond,  AND_REGULAR_EXPRESSION_FLAGS)&&  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(!isLowerPrecedenceInExpression(cond,  AND_REGULAR_EXPRESSION_FLAGS)&&  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(!isLowerPrecedenceInExpression(cond,  AND_REGULAR_EXPRESSION_FLAGS)&&  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {	  if(!isLowerPrecedenceInExpression(cond,    AND_PRECEDENCE)&&    isLowerPrecedenceInExpression(expr.getLastChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	17	None	replace
235	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(!isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(!isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(cond.getFirstChild(),    AND_PRECEDENCE)||    isLowerPrecedenceInExpression(expr.getLastChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	46	None	replace
236	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_VAR))  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(!isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_VAR))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(!isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_VAR))  {	  if(!isLowerPrecedenceInExpression(cond,    AND_VAR)&&    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	52	None	replace
237	[BUG]  [BUGGY]  Node  thenOp  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  elseOp);  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  Node  thenOp  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  elseOp);  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  thenOp  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  elseOp);	  Node    thenOp    =    new    Node(Token.AND,    cond,    expr.removeFirstChild());    	non-compiled	[CE]  ')'  expected	57	None	replace
238	[BUG]  [BUGGY]  Node  thenOp  =  new  Node(Token.AND,  cond,  expr.cloneTree());  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  Node  thenOp  =  new  Node(Token.AND,  cond,  expr.cloneTree());  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  thenOp  =  new  Node(Token.AND,  cond,  expr.cloneTree());	  Node    thenOp    =    new    Node(Token.AND,    cond,    expr.removeFirstChild());    	non-compiled	[CE]  ')'  expected	57	None	replace
239	[BUG]  [BUGGY]  if(!isVarPrecedenceInExpression(n,  AND_PRECEDENCE)&&  isVarPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(!isVarPrecedenceInExpression(n,  AND_PRECEDENCE)&&  isVarPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(!isVarPrecedenceInExpression(n,  AND_PRECEDENCE)&&  isVarPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {	  if(!isLowerPrecedenceInExpression(n,    AND_PRECEDENCE)&&    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	19	None	replace
240	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE)&&  isPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE)&&  isPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE)&&  isPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {	  if(isPrecedenceInExpression(cond.getFirstChild(),    AND_PRECEDENCE)||    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	48	None	replace
241	[BUG]  [BUGGY]  if(isVarPrecedenceInExpression(n.getFirstChild(),  AND_PRECEDENCE)||  isVarPrecedenceInExpression(n.getFirstChild(),  AND_PRECEDENCE))  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(isVarPrecedenceInExpression(n.getFirstChild(),  AND_PRECEDENCE)||  isVarPrecedenceInExpression(n.getFirstChild(),  AND_PRECEDENCE))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isVarPrecedenceInExpression(n.getFirstChild(),  AND_PRECEDENCE)||  isVarPrecedenceInExpression(n.getFirstChild(),  AND_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(n.getFirstChild(),    AND_PRECEDENCE)||    isLowerPrecedenceInExpression(n.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	29	None	replace
242	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(n.getLastChild(),  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(n.getFirstChild(),  AND_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(isLowerPrecedenceInExpression(n.getLastChild(),  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(n.getFirstChild(),  AND_PRECEDENCE))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(n.getLastChild(),  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(n.getFirstChild(),  AND_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(n.getFirstChild(),    AND_PRECEDENCE)||    isLowerPrecedenceInExpression(n.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	29	None	replace
243	[BUG]  [BUGGY]  Node  thenAssign  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  elseOp);  parent.replaceChild(n,  newExpr);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  Node  thenAssign  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  elseOp);  parent.replaceChild(n,  newExpr);  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  thenAssign  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  elseOp);  parent.replaceChild(n,  newExpr);	  Node    thenAssign    =    new    Node(Token.AND,    cond,    expr.removeFirstChild());    parent.replaceChild(n,    newExpr);    	non-compiled	[CE]  ')'  expected	55	None	replace
244	[BUG]  [BUGGY]  Node  thenAssign  =  new  Node(Token.AND,  cond,  expr.removeFirstChild()).copyInformationFrom(n);  parent.replaceChild(n,  elseExpr);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  Node  thenAssign  =  new  Node(Token.AND,  cond,  expr.removeFirstChild()).copyInformationFrom(n);  parent.replaceChild(n,  elseExpr);  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  thenAssign  =  new  Node(Token.AND,  cond,  expr.removeFirstChild()).copyInformationFrom(n);  parent.replaceChild(n,  elseExpr);	  Node    thenAssign    =    new    Node(Token.AND,    cond,    expr.removeFirstChild()).copyInformationFrom(n);    parent.replaceChild(n,    newExpr);    	non-compiled	[CE]  ')'  expected	56	None	replace
245	[BUG]  [BUGGY]  Node  thenBranch  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  elseBranch);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  Node  thenBranch  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  elseBranch);  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  thenBranch  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  elseBranch);	  Node    thenBranch    =    new    Node(Token.AND,    cond,    expr.removeFirstChild());    	non-compiled	[CE]  ')'  expected	38	None	replace
246	[BUG]  [BUGGY]  if(isPrecedenceInExpression(expr,  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(isPrecedenceInExpression(expr,  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isPrecedenceInExpression(expr,  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {	  if(isPrecedenceInExpression(cond,    AND_PRECEDENCE)||    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	60	None	replace
247	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  STANDARD_OBJECT_CONSTRUCTORS))  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  STANDARD_OBJECT_CONSTRUCTORS))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  STANDARD_OBJECT_CONSTRUCTORS))  {	  if(isLowerPrecedenceInExpression(cond,    AND_PRECEDENCE)||    isLowerPrecedenceInExpression(expr.getFirstChild(),    STANDARD_OBJECT_CONSTRUCTORS))    {    	non-compiled	[CE]  ')'  expected	34	None	replace
248	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(cond,    OR_PRECEDENCE)&&    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	63	None	replace
249	[BUG]  [BUGGY]  Node  assign  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeLastChild()),  copyInformationFrom(n);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  Node  assign  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeLastChild()),  copyInformationFrom(n);  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  assign  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeLastChild()),  copyInformationFrom(n);	  Node    assign    =    new    Node(Token.OR,    cond.removeFirstChild(),    expr.removeLastChild()).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	9	None	replace
250	[BUG]  [BUGGY]  Node  assign  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeLastChild()).copyInformationFrom(newExpr);  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  Node  assign  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeLastChild()).copyInformationFrom(newExpr);  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  assign  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeLastChild()).copyInformationFrom(newExpr);	  Node    assign    =    new    Node(Token.OR,    cond.removeFirstChild(),    expr.removeLastChild()).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	9	None	replace
251	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond.getFirstChild(),  OR)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(isLowerPrecedenceInExpression(cond.getFirstChild(),  OR)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(cond.getFirstChild(),  OR)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(expr.getFirstChild(),    OR)||    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	33	None	replace
252	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond.getFirstChild(),  OR)||  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(isLowerPrecedenceInExpression(cond.getFirstChild(),  OR)||  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(cond.getFirstChild(),  OR)||  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(expr.getFirstChild(),    OR)||    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	33	None	replace
253	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(expr.getLastChild(),  OR)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(isLowerPrecedenceInExpression(expr.getLastChild(),  OR)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(expr.getLastChild(),  OR)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(expr.getFirstChild(),    OR)||    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	33	None	replace
254	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(expr.getFirstChild(),  OR)&&  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(isLowerPrecedenceInExpression(expr.getFirstChild(),  OR)&&  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(expr.getFirstChild(),  OR)&&  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(expr.getFirstChild(),    OR)||    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	33	None	replace
255	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(expr.getFirstChild(),  AND)||  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(isLowerPrecedenceInExpression(expr.getFirstChild(),  AND)||  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(expr.getFirstChild(),  AND)||  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(expr.getFirstChild(),    OR)||    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	33	None	replace
256	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(!isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(!isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {	  if(!isLowerPrecedenceInExpression(cond.getFirstChild(),    AND_PRECEDENCE)&&    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	47	None	replace
257	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  STANDARD_OBJECT_CONSTRUCTORS))  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  STANDARD_OBJECT_CONSTRUCTORS))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  STANDARD_OBJECT_CONSTRUCTORS))  {	  if(isLowerPrecedenceInExpression(cond,    AND_PRECEDENCE)&&    isLowerPrecedenceInExpression(expr.getFirstChild(),    STANDARD_OBJECT_CONSTRUCTORS))    {    	non-compiled	[CE]  ')'  expected	36	None	replace
258	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond,  OR)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  STANDARD_OBJECT_CONSTRUCTORS))  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(isLowerPrecedenceInExpression(cond,  OR)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  STANDARD_OBJECT_CONSTRUCTORS))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(cond,  OR)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  STANDARD_OBJECT_CONSTRUCTORS))  {	  if(isLowerPrecedenceInExpression(cond,    AND_PRECEDENCE)&&    isLowerPrecedenceInExpression(expr.getFirstChild(),    STANDARD_OBJECT_CONSTRUCTORS))    {    	non-compiled	[CE]  ')'  expected	36	None	replace
259	[BUG]  [BUGGY]  Node  thenAssign  =  new  Node(Token.AND,  cond,  expr.cloneTree()).copyInformationFrom(n);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  Node  thenAssign  =  new  Node(Token.AND,  cond,  expr.cloneTree()).copyInformationFrom(n);  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  thenAssign  =  new  Node(Token.AND,  cond,  expr.cloneTree()).copyInformationFrom(n);	  Node    thenAssign    =    new    Node(Token.AND,    cond,    expr.removeFirstChild()).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	53	None	replace
260	[BUG]  [BUGGY]  Node  assign  =  expr.nextChild();  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  Node  assign  =  expr.nextChild();  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  assign  =  expr.nextChild();	  Node    assign    =    expr.getFirstChild();    	non-compiled	[CE]  ')'  expected	8	None	replace
261	[BUG]  [BUGGY]  Node  assign  =  expr.getAssignedChild();  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  Node  assign  =  expr.getAssignedChild();  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  assign  =  expr.getAssignedChild();	  Node    assign    =    expr.getFirstChild();    	non-compiled	[CE]  ')'  expected	8	None	replace
262	[BUG]  [BUGGY]  Node  assign  =  new  Node(Token.AND,  cond,  expr.cloneTree()).copyInformationFrom(n);  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  Node  assign  =  new  Node(Token.AND,  cond,  expr.cloneTree()).copyInformationFrom(n);  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  assign  =  new  Node(Token.AND,  cond,  expr.cloneTree()).copyInformationFrom(n);	  Node    assign    =    new    Node(Token.AND,    cond,    expr.removeFirstChild()).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	10	None	replace
263	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_OBJECT_CONSTRUCTORS))  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_OBJECT_CONSTRUCTORS))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_OBJECT_CONSTRUCTORS))  {	  if(isLowerPrecedenceInExpression(expr,    STANDARD_OBJECT_CONSTRUCTORS)||    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	35	None	replace
264	[BUG]  [BUGGY]  Node  var  =  cond.removeFirstChild();  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  Node  var  =  cond.removeFirstChild();  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  var  =  cond.removeFirstChild();	  Node    var    =    expr.getFirstChild();    	non-compiled	[CE]  ')'  expected	41	None	replace
265	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(expr,  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR))  {  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(isLowerPrecedenceInExpression(expr,  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(expr,  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR))  {	  if(isLowerPrecedenceInExpression(cond,    AND_PRECEDENCE)||    isLowerPrecedenceInExpression(expr.getFirstChild(),    OR))    {    	non-compiled	[CE]  ')'  expected	25	None	replace
266	[BUG]  [BUGGY]  if(isPrecedenceInExpression(n,  STANDARD_OBJECT_CONSTRUCTORS)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(isPrecedenceInExpression(n,  STANDARD_OBJECT_CONSTRUCTORS)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isPrecedenceInExpression(n,  STANDARD_OBJECT_CONSTRUCTORS)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(n,    STANDARD_OBJECT_CONSTRUCTORS)||    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	21	None	replace
267	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(expr.getLastChild())||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(isLowerPrecedenceInExpression(expr.getLastChild())||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(expr.getLastChild())||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(cond)||    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	49	None	replace
268	[BUG]  [BUGGY]  Node  thenBranch  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  elseBranch);  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  Node  thenBranch  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  elseBranch);  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  thenBranch  =  new  Node(Token.AND,  cond,  expr.getFirstChild(),  elseBranch);	  Node    thenBranch    =    new    Node(Token.AND,    cond,    expr.getFirstChild());    	non-compiled	[CE]  ')'  expected	43	None	replace
269	[BUG]  [BUGGY]  if(isPrecedenceInExpression(cond,  STANDARD_OBJECT_CONSTRUCTORS)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(isPrecedenceInExpression(cond,  STANDARD_OBJECT_CONSTRUCTORS)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isPrecedenceInExpression(cond,  STANDARD_OBJECT_CONSTRUCTORS)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {	  if(isPrecedenceInExpression(cond,    AND_PRECEDENCE)&&    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	62	None	replace
270	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(cond,  OR)&&  isLowerPrecedenceInExpression(n.getFirstChild(),  AND_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(!isLowerPrecedenceInExpression(cond,  OR)&&  isLowerPrecedenceInExpression(n.getFirstChild(),  AND_PRECEDENCE))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(!isLowerPrecedenceInExpression(cond,  OR)&&  isLowerPrecedenceInExpression(n.getFirstChild(),  AND_PRECEDENCE))  {	  if(!isLowerPrecedenceInExpression(cond,    OR)&&    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	45	None	replace
271	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond,  COND)||  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(isLowerPrecedenceInExpression(cond,  COND)||  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(cond,  COND)||  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(n,    COND)||    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	22	None	replace
272	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  COND))  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  COND))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  COND))  {	  if(isLowerPrecedenceInExpression(n,    COND)||    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	22	None	replace
273	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(n.getFirstChild(),  AND_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(n.getFirstChild(),  AND_PRECEDENCE))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(n.getFirstChild(),  AND_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(cond,    AND_PRECEDENCE)&&    isLowerPrecedenceInExpression(n.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	16	None	replace
274	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(pr,  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(n.getFirstChild(),  AND_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(isLowerPrecedenceInExpression(pr,  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(n.getFirstChild(),  AND_PRECEDENCE))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(pr,  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(n.getFirstChild(),  AND_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(cond,    AND_PRECEDENCE)&&    isLowerPrecedenceInExpression(n.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	16	None	replace
275	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_REGULAR_EXPRESSION_FLAGS))  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_REGULAR_EXPRESSION_FLAGS))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_REGULAR_EXPRESSION_FLAGS))  {	  if(isLowerPrecedenceInExpression(cond,    AND_REGULAR_EXPRESSION_FLAGS)&&    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	50	None	replace
276	[BUG]  [BUGGY]  Node  thenAssign  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  elseOp);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  Node  thenAssign  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  elseOp);  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  thenAssign  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  elseOp);	  Node    thenAssign    =    new    Node(Token.AND,    cond,    expr.removeFirstChild());    	non-compiled	[CE]  ')'  expected	54	None	replace
277	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)||  isPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)||  isPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)||  isPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {	  if(isPrecedenceInExpression(n,    AND_PRECEDENCE)||    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	44	None	replace
278	[BUG]  [BUGGY]  if(isVarPrecedenceInExpression(cond,  AND_PRECEDENCE)&&  isVarPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(isVarPrecedenceInExpression(cond,  AND_PRECEDENCE)&&  isVarPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isVarPrecedenceInExpression(cond,  AND_PRECEDENCE)&&  isVarPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(expr,    AND_PRECEDENCE)&&    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	27	None	replace
279	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond,  AND)||  isPrettyPrinterInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(isLowerPrecedenceInExpression(cond,  AND)||  isPrettyPrinterInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(cond,  AND)||  isPrettyPrinterInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(cond,    AND)||    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	23	None	replace
280	[BUG]  [BUGGY]  if(isPrecedenceInExpression(cond)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(isPrecedenceInExpression(cond)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isPrecedenceInExpression(cond)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(cond)||    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	49	None	replace
281	[BUG]  [BUGGY]  Node  thenAssign  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  expr.removeLastChild()).copyInformationFrom(n);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  Node  thenAssign  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  expr.removeLastChild()).copyInformationFrom(n);  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  thenAssign  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  expr.removeLastChild()).copyInformationFrom(n);	  Node    thenAssign    =    new    Node(Token.AND,    cond,    expr.removeFirstChild()).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	53	None	replace
282	[BUG]  [BUGGY]  Node  thenAssign  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  expr.getLastChild()).copyInformationFrom(n);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  Node  thenAssign  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  expr.getLastChild()).copyInformationFrom(n);  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  thenAssign  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  expr.getLastChild()).copyInformationFrom(n);	  Node    thenAssign    =    new    Node(Token.AND,    cond,    expr.removeFirstChild()).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	53	None	replace
283	[BUG]  [BUGGY]  Node  var  =  expr.cloneTree();  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  Node  var  =  expr.cloneTree();  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  var  =  expr.cloneTree();	  Node    var    =    expr.getLastChild();    	non-compiled	[CE]  ')'  expected	37	None	replace
284	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(cond,  INVALID_REGULAR_EXPRESSION_FLAGS)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(!isLowerPrecedenceInExpression(cond,  INVALID_REGULAR_EXPRESSION_FLAGS)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(!isLowerPrecedenceInExpression(cond,  INVALID_REGULAR_EXPRESSION_FLAGS)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {	  if(!isLowerPrecedenceInExpression(cond,    STANDARD_OBJECT_CONSTRUCTORS)    &&    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	51	None	replace
285	[BUG]  [BUGGY]  Node  thenBranchIsExpressionBlock  =  expr.removeFirstChild().getNext().getNext();  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  Node  thenBranchIsExpressionBlock  =  expr.removeFirstChild().getNext().getNext();  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  thenBranchIsExpressionBlock  =  expr.removeFirstChild().getNext().getNext();	  Node    thenBranchIsExpressionBlock    =    n.getFirstChild().getNext().getNext();    	non-compiled	[CE]  ')'  expected	42	None	replace
286	[BUG]  [BUGGY]  Node  thenBranchIsExpressionBlock  =  expr.getFirstChild().getParent().getNext();  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  Node  thenBranchIsExpressionBlock  =  expr.getFirstChild().getParent().getNext();  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  thenBranchIsExpressionBlock  =  expr.getFirstChild().getParent().getNext();	  Node    thenBranchIsExpressionBlock    =    n.getFirstChild().getNext().getNext();    	non-compiled	[CE]  ')'  expected	42	None	replace
287	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(!isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(!isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE)||    isLowerPrecedenceInExpression(expr.getLastChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	30	None	replace
288	[BUG]  [BUGGY]  Node  thenBranch  =  cond.removeFirstChild();  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  Node  thenBranch  =  cond.removeFirstChild();  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  thenBranch  =  cond.removeFirstChild();	  Node    thenBranch    =    expr.getFirstChild();    	non-compiled	[CE]  ')'  expected	40	None	replace
289	[BUG]  [BUGGY]  Node  thenBranch  =  expr.cloneTree();  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  Node  thenBranch  =  expr.cloneTree();  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  thenBranch  =  expr.cloneTree();	  Node    thenBranch    =    expr.getFirstChild();    	non-compiled	[CE]  ')'  expected	40	None	replace
290	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(cond,    OR_PRECEDENCE)&&    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	63	None	replace
291	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(!isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(!isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(cond,    OR_PRECEDENCE)&&    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	63	None	replace
292	[BUG]  [BUGGY]  Node  thenAssign  =  new  Node(Token.AND,  cond,  expr.cloneTree());  parent.replaceChild(n,  newExpr);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  Node  thenAssign  =  new  Node(Token.AND,  cond,  expr.cloneTree());  parent.replaceChild(n,  newExpr);  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  thenAssign  =  new  Node(Token.AND,  cond,  expr.cloneTree());  parent.replaceChild(n,  newExpr);	  Node    thenAssign    =    new    Node(Token.AND,    cond,    expr.removeFirstChild());    parent.replaceChild(n,    newExpr);    	non-compiled	[CE]  ')'  expected	55	None	replace
293	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(n.getFirstChild(),  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(n.getFirstChild(),  AND_PRECEDENCE))  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(!isLowerPrecedenceInExpression(n.getFirstChild(),  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(n.getFirstChild(),  AND_PRECEDENCE))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(!isLowerPrecedenceInExpression(n.getFirstChild(),  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(n.getFirstChild(),  AND_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(n.getFirstChild(),    AND_PRECEDENCE)||    isLowerPrecedenceInExpression(n.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	29	None	replace
294	[BUG]  [BUGGY]  Node  thenBranch  =  expr.nextChild();  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  Node  thenBranch  =  expr.nextChild();  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  thenBranch  =  expr.nextChild();	  Node    thenBranch    =    expr.getLastChild();    	non-compiled	[CE]  ')'  expected	39	None	replace
295	[BUG]  [BUGGY]  Node  assign  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeLastChild()),  expr.copyInformationFrom(n);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  Node  assign  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeLastChild()),  expr.copyInformationFrom(n);  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  assign  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeLastChild()),  expr.copyInformationFrom(n);	  Node    assign    =    new    Node(Token.OR,    cond.removeFirstChild(),    expr.removeLastChild()).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	9	None	replace
296	[BUG]  [BUGGY]  Node  assign  =  new  Node(Token.OR,  cond.cloneTree(),  expr.removeLastChild()).copyInformationFrom(n);  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  Node  assign  =  new  Node(Token.OR,  cond.cloneTree(),  expr.removeLastChild()).copyInformationFrom(n);  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  assign  =  new  Node(Token.OR,  cond.cloneTree(),  expr.removeLastChild()).copyInformationFrom(n);	  Node    assign    =    new    Node(Token.OR,    cond.removeFirstChild(),    expr.removeLastChild()).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	9	None	replace
297	[BUG]  [BUGGY]  Node  thenAssign  =  new  Node(Token.AND,  cond,  expr.cloneTree()).copyInformationFrom(n);  parent.replaceChild(n,  newExpr);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  Node  thenAssign  =  new  Node(Token.AND,  cond,  expr.cloneTree()).copyInformationFrom(n);  parent.replaceChild(n,  newExpr);  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  thenAssign  =  new  Node(Token.AND,  cond,  expr.cloneTree()).copyInformationFrom(n);  parent.replaceChild(n,  newExpr);	  Node    thenAssign    =    new    Node(Token.AND,    cond,    expr.removeFirstChild()).copyInformationFrom(n);    parent.replaceChild(n,    newExpr);    	non-compiled	[CE]  ')'  expected	56	None	replace
298	[BUG]  [BUGGY]  Node  thenAssign  =  new  Node(Token.AND,  cond,  expr.removeFirstChild()).copyInformationFrom(n,  expr);  parent.replaceChild(n,  newExpr);  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  Node  thenAssign  =  new  Node(Token.AND,  cond,  expr.removeFirstChild()).copyInformationFrom(n,  expr);  parent.replaceChild(n,  newExpr);  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  thenAssign  =  new  Node(Token.AND,  cond,  expr.removeFirstChild()).copyInformationFrom(n,  expr);  parent.replaceChild(n,  newExpr);	  Node    thenAssign    =    new    Node(Token.AND,    cond,    expr.removeFirstChild()).copyInformationFrom(n);    parent.replaceChild(n,    newExpr);    	non-compiled	[CE]  ')'  expected	56	None	replace
299	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE)  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE)  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE)	  if(isLowerPrecedenceInExpression(expr.getLastChild(),    AND_PRECEDENCE)||    isLowerPrecedenceInExpression(expr.getLastChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	31	None	replace
300	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(expr,  COND)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(isLowerPrecedenceInExpression(expr,  COND)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(expr,  COND)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(expr,    OR)||    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	24	None	replace
301	[BUG]  [BUGGY]  Node  assign  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  expr.removeLastChild()).copyInformationFrom(n);  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  Node  assign  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  expr.removeLastChild()).copyInformationFrom(n);  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  assign  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  expr.removeLastChild()).copyInformationFrom(n);	  Node    assign    =    new    Node(Token.AND,    cond,    expr.removeFirstChild()).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	10	None	replace
302	[BUG]  [BUGGY]  Node  assign  =  new  Node(Token.AND,  cond,  expr.removeFirstChild()).copyInformationFrom(n,  expr.getLastChild());  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  Node  assign  =  new  Node(Token.AND,  cond,  expr.removeFirstChild()).copyInformationFrom(n,  expr.getLastChild());  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  assign  =  new  Node(Token.AND,  cond,  expr.removeFirstChild()).copyInformationFrom(n,  expr.getLastChild());	  Node    assign    =    new    Node(Token.AND,    cond,    expr.removeFirstChild()).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	10	None	replace
303	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(cond,  AND_VAR)&&  isLowerPrecedenceInExpression(n.getFirstChild(),  AND_PRECEDENCE))  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(!isLowerPrecedenceInExpression(cond,  AND_VAR)&&  isLowerPrecedenceInExpression(n.getFirstChild(),  AND_PRECEDENCE))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(!isLowerPrecedenceInExpression(cond,  AND_VAR)&&  isLowerPrecedenceInExpression(n.getFirstChild(),  AND_PRECEDENCE))  {	  if(!isLowerPrecedenceInExpression(cond,    AND_VAR)&&    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	52	None	replace
304	[BUG]  [BUGGY]  Node  thenOp  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  expr.getLastChild()).copyInformationFrom(n);  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  Node  thenOp  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  expr.getLastChild()).copyInformationFrom(n);  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  thenOp  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  expr.getLastChild()).copyInformationFrom(n);	  Node    thenOp    =    new    Node(Token.AND,    cond,    expr.removeFirstChild()).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	58	None	replace
305	[BUG]  [BUGGY]  Node  assign  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeSecond()).copyInformationFrom(n);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  Node  assign  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeSecond()).copyInformationFrom(n);  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  assign  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeSecond()).copyInformationFrom(n);	  Node    assign    =    new    Node(Token.OR,    cond.removeFirstChild(),    expr.removeFirstChild()).copyInformationFrom(n);    	non-compiled	[CE]  ')'  expected	6	None	replace
306	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(n,  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  COND))  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(isLowerPrecedenceInExpression(n,  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  COND))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(n,  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  COND))  {	  if(isLowerPrecedenceInExpression(n,    COND)||    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	22	None	replace
307	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(n,  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(n.getFirstChild(),  AND_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(!isLowerPrecedenceInExpression(n,  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(n.getFirstChild(),  AND_PRECEDENCE))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(!isLowerPrecedenceInExpression(n,  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(n.getFirstChild(),  AND_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(n,    AND_PRECEDENCE)||    isLowerPrecedenceInExpression(n.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	26	None	replace
308	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_REGULAR_EXPRESSION_FLAGS))  {  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_REGULAR_EXPRESSION_FLAGS))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_REGULAR_EXPRESSION_FLAGS))  {	  if(isLowerPrecedenceInExpression(cond,    AND_REGULAR_EXPRESSION_FLAGS)&&    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	50	None	replace
309	[BUG]  [BUGGY]  if(isPrecedenceInExpression(cond,  AND_REGULAR_EXPRESSION_FLAGS)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  if(isPrecedenceInExpression(cond,  AND_REGULAR_EXPRESSION_FLAGS)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isPrecedenceInExpression(cond,  AND_REGULAR_EXPRESSION_FLAGS)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(cond,    AND_REGULAR_EXPRESSION_FLAGS)&&    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	50	None	replace
310	[BUG]  [BUGGY]  Node  thenBranch  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  expr.cloneTree());  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  Node  thenBranch  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  expr.cloneTree());  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  thenBranch  =  new  Node(Token.AND,  cond,  expr.removeFirstChild(),  expr.cloneTree());	  Node    thenBranch    =    new    Node(Token.AND,    cond,    expr.removeFirstChild());    	non-compiled	[CE]  ')'  expected	38	None	replace
311	[BUG]  [BUGGY]  Node  assign  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild(),  expr.getLastChild());  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }        [BUGGY]  Node  assign  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild(),  expr.getLastChild());  [BUGGY]      isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  assign  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild(),  expr.getLastChild());	  Node    assign    =    new    Node(Token.OR,    cond.removeFirstChild(),    expr.removeFirstChild());    	non-compiled	[CE]  ')'  expected	12	None	replace
