bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }      [BUGGY]  if(isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {  [BUGGY]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(cond,    AND_PRECEDENCE)||    isLowerPrecedenceInExpression(expr.getLastChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	1	None	replace
2	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(n,  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }      [BUGGY]  if(isLowerPrecedenceInExpression(n,  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {  [BUGGY]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(n,  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(cond,    AND_PRECEDENCE)||    isLowerPrecedenceInExpression(expr.getLastChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	1	None	replace
3	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond,  STANDARD_OBJECT_CONSTRUCTORS)||  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }      [BUGGY]  if(isLowerPrecedenceInExpression(cond,  STANDARD_OBJECT_CONSTRUCTORS)||  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {  [BUGGY]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(cond,  STANDARD_OBJECT_CONSTRUCTORS)||  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(cond,    AND_PRECEDENCE)||    isLowerPrecedenceInExpression(expr.getLastChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	1	None	replace
4	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(expr,  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }      [BUGGY]  if(isLowerPrecedenceInExpression(expr,  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {  [BUGGY]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(expr,  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(cond,    AND_PRECEDENCE)||    isLowerPrecedenceInExpression(expr.getLastChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	1	None	replace
5	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond,  OR)||  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }      [BUGGY]  if(isLowerPrecedenceInExpression(cond,  OR)||  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {  [BUGGY]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(cond,  OR)||  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(cond,    AND_PRECEDENCE)||    isLowerPrecedenceInExpression(expr.getLastChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  ')'  expected	1	None	replace
6	[BUG]  [BUGGY]  Node  assign  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }      [BUGGY]  Node  assign  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  [BUGGY]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  assign  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);	      	non-compiled	[CE]  ')'  expected	7	None	replace
7	[BUG]  [BUGGY]  Node  assign  =  expr.getLastChild();  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }      [BUGGY]  Node  assign  =  expr.getLastChild();  [BUGGY]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  assign  =  expr.getLastChild();	      	non-compiled	[CE]  	7	None	replace
8	[BUG]  [BUGGY]  Node  assign  =  expr.getFirstChild();  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }      [BUGGY]  Node  assign  =  expr.getFirstChild();  [BUGGY]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  assign  =  expr.getFirstChild();	      	non-compiled	[CE]  	7	None	replace
9	[BUG]  [BUGGY]  Node  assign  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeLastChild()).copyInformationFrom(n);  [CE]  [FE]                          AssertionFailedError    [CONTEXT]    Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }      [BUGGY]  Node  assign  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeLastChild()).copyInformationFrom(n);  [BUGGY]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  assign  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeLastChild()).copyInformationFrom(n);	      	non-compiled	[CE]  	7	None	replace
10	[BUG]  [BUGGY]  Node  assign  =  new  Node(Token.AND,  cond,  expr.removeFirstChild()).copyInformationFrom(n);  [CE]  [FE]                            AssertionFailedError    [CONTEXT]    Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }      [BUGGY]  Node  assign  =  new  Node(Token.AND,  cond,  expr.removeFirstChild()).copyInformationFrom(n);  [BUGGY]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  assign  =  new  Node(Token.AND,  cond,  expr.removeFirstChild()).copyInformationFrom(n);	      	non-compiled	[CE]  	7	None	replace
11	[BUG]  [BUGGY]  Node  assign  =  new  Node(Token.AND,  cond,  expr.removeFirstChild());  [CE]  [FE]                              AssertionFailedError    [CONTEXT]    Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }      [BUGGY]  Node  assign  =  new  Node(Token.AND,  cond,  expr.removeFirstChild());  [BUGGY]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  assign  =  new  Node(Token.AND,  cond,  expr.removeFirstChild());	      	non-compiled	[CE]  	7	None	replace
12	[BUG]  [BUGGY]  Node  assign  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild());  [CE]  [FE]                                AssertionFailedError    [CONTEXT]    Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }      [BUGGY]  Node  assign  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild());  [BUGGY]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  assign  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild());	      	non-compiled	[CE]  	7	None	replace
13	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(n,  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }      [BUGGY]  if(isLowerPrecedenceInExpression(n,  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [BUGGY]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(n,  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(cond,    AND_PRECEDENCE)&&    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  	2	None	replace
14	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond,  STANDARD_OBJECT_CONSTRUCTORS)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }      [BUGGY]  if(isLowerPrecedenceInExpression(cond,  STANDARD_OBJECT_CONSTRUCTORS)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [BUGGY]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(cond,  STANDARD_OBJECT_CONSTRUCTORS)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(cond,    AND_PRECEDENCE)&&    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  	2	None	replace
15	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond,  OR)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }      [BUGGY]  if(isLowerPrecedenceInExpression(cond,  OR)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [BUGGY]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(cond,  OR)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(cond,    AND_PRECEDENCE)&&    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  	2	None	replace
16	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(n.getFirstChild(),  AND_PRECEDENCE))  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]    Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }      [BUGGY]  if(isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(n.getFirstChild(),  AND_PRECEDENCE))  {  [BUGGY]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(n.getFirstChild(),  AND_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(cond,    AND_PRECEDENCE)&&    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  	2	None	replace
17	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]    Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }      [BUGGY]  if(!isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {  [BUGGY]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(!isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {	  if(!isLowerPrecedenceInExpression(cond,    AND_PRECEDENCE)&&    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  	9	None	replace
18	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }      [BUGGY]  if(!isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [BUGGY]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(!isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {	  if(!isLowerPrecedenceInExpression(cond,    AND_PRECEDENCE)&&    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  	9	None	replace
19	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(n,  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }      [BUGGY]  if(!isLowerPrecedenceInExpression(n,  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [BUGGY]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(!isLowerPrecedenceInExpression(n,  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {	  if(!isLowerPrecedenceInExpression(cond,    AND_PRECEDENCE)&&    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  	9	None	replace
20	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(n,  OR)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }      [BUGGY]  if(isLowerPrecedenceInExpression(n,  OR)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [BUGGY]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(n,  OR)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(n,    AND_PRECEDENCE)||    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  	3	None	replace
21	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(n,  STANDARD_OBJECT_CONSTRUCTORS)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }      [BUGGY]  if(isLowerPrecedenceInExpression(n,  STANDARD_OBJECT_CONSTRUCTORS)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [BUGGY]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(n,  STANDARD_OBJECT_CONSTRUCTORS)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(n,    AND_PRECEDENCE)||    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  	3	None	replace
22	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(n,  COND)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]    Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }      [BUGGY]  if(isLowerPrecedenceInExpression(n,  COND)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [BUGGY]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(n,  COND)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(n,    AND_PRECEDENCE)||    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  	3	None	replace
23	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond,  AND)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }      [BUGGY]  if(isLowerPrecedenceInExpression(cond,  AND)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [BUGGY]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(cond,  AND)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(cond,    OR)||    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  	6	None	replace
24	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(expr,  OR)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }      [BUGGY]  if(isLowerPrecedenceInExpression(expr,  OR)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [BUGGY]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(expr,  OR)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(cond,    OR)||    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  	6	None	replace
25	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR))  {  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }      [BUGGY]  if(isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR))  {  [BUGGY]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  OR))  {	  if(isLowerPrecedenceInExpression(cond,    OR)||    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  	6	None	replace
26	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(n,  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(n.getFirstChild(),  AND_PRECEDENCE))  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]    Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }      [BUGGY]  if(isLowerPrecedenceInExpression(n,  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(n.getFirstChild(),  AND_PRECEDENCE))  {  [BUGGY]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(n,  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(n.getFirstChild(),  AND_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(expr,    AND_PRECEDENCE)||    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  	5	None	replace
27	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(expr,  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }      [BUGGY]  if(isLowerPrecedenceInExpression(expr,  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [BUGGY]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(expr,  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(expr,    AND_PRECEDENCE)||    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  	5	None	replace
28	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond.getFirstChild(),  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]    Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }      [BUGGY]  if(isLowerPrecedenceInExpression(cond.getFirstChild(),  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [BUGGY]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(cond.getFirstChild(),  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE)||    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  	8	None	replace
29	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(n.getFirstChild(),  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(n.getFirstChild(),  AND_PRECEDENCE))  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }      [BUGGY]  if(isLowerPrecedenceInExpression(n.getFirstChild(),  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(n.getFirstChild(),  AND_PRECEDENCE))  {  [BUGGY]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(n.getFirstChild(),  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(n.getFirstChild(),  AND_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE)||    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  	8	None	replace
30	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }      [BUGGY]  if(isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {  [BUGGY]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE)||    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  	8	None	replace
31	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }      [BUGGY]  if(isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {  [BUGGY]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE)||    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  	8	None	replace
32	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond.getFirstChild(),  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]    Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }      [BUGGY]  if(isLowerPrecedenceInExpression(cond.getFirstChild(),  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [BUGGY]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(cond.getFirstChild(),  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE)||    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  	8	None	replace
33	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(expr.getFirstChild(),  OR)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }      [BUGGY]  if(isLowerPrecedenceInExpression(expr.getFirstChild(),  OR)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [BUGGY]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(expr.getFirstChild(),  OR)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE)||    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  	8	None	replace
34	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  STANDARD_OBJECT_CONSTRUCTORS))  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }      [BUGGY]  if(isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  STANDARD_OBJECT_CONSTRUCTORS))  {  [BUGGY]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  STANDARD_OBJECT_CONSTRUCTORS))  {	  if(isLowerPrecedenceInExpression(cond,    STANDARD_OBJECT_CONSTRUCTORS)||    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  	4	None	replace
35	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(expr,  STANDARD_OBJECT_CONSTRUCTORS)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]    Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }      [BUGGY]  if(isLowerPrecedenceInExpression(expr,  STANDARD_OBJECT_CONSTRUCTORS)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [BUGGY]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(expr,  STANDARD_OBJECT_CONSTRUCTORS)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(cond,    STANDARD_OBJECT_CONSTRUCTORS)||    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  	4	None	replace
36	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  STANDARD_OBJECT_CONSTRUCTORS))  {  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }      [BUGGY]  if(isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  STANDARD_OBJECT_CONSTRUCTORS))  {  [BUGGY]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  STANDARD_OBJECT_CONSTRUCTORS))  {	  if(isLowerPrecedenceInExpression(cond,    STANDARD_OBJECT_CONSTRUCTORS)||    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  	4	None	replace
37	[BUG]  [BUGGY]  Node  var  =  expr.getLastChild();  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }      [BUGGY]  Node  var  =  expr.getLastChild();  [BUGGY]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  var  =  expr.getLastChild();	      	non-compiled	[CE]  	7	None	replace
38	[BUG]  [BUGGY]  Node  thenBranch  =  new  Node(Token.AND,  cond,  expr.removeFirstChild());  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }      [BUGGY]  Node  thenBranch  =  new  Node(Token.AND,  cond,  expr.removeFirstChild());  [BUGGY]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  thenBranch  =  new  Node(Token.AND,  cond,  expr.removeFirstChild());	      	non-compiled	[CE]  	7	None	replace
39	[BUG]  [BUGGY]  Node  thenBranch  =  expr.getLastChild();  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }      [BUGGY]  Node  thenBranch  =  expr.getLastChild();  [BUGGY]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  thenBranch  =  expr.getLastChild();	      	non-compiled	[CE]  	7	None	replace
40	[BUG]  [BUGGY]  Node  thenBranch  =  expr.getFirstChild();  [CE]  [FE]                          AssertionFailedError    [CONTEXT]    Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }      [BUGGY]  Node  thenBranch  =  expr.getFirstChild();  [BUGGY]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  thenBranch  =  expr.getFirstChild();	      	non-compiled	[CE]  	7	None	replace
41	[BUG]  [BUGGY]  Node  var  =  expr.getFirstChild();  [CE]  [FE]                            AssertionFailedError    [CONTEXT]    Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }      [BUGGY]  Node  var  =  expr.getFirstChild();  [BUGGY]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  var  =  expr.getFirstChild();	      	non-compiled	[CE]  	7	None	replace
42	[BUG]  [BUGGY]  Node  thenBranchIsExpressionBlock  =  n.getFirstChild().getNext().getNext();  [CE]  [FE]                              AssertionFailedError    [CONTEXT]    Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }      [BUGGY]  Node  thenBranchIsExpressionBlock  =  n.getFirstChild().getNext().getNext();  [BUGGY]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  thenBranchIsExpressionBlock  =  n.getFirstChild().getNext().getNext();	      	non-compiled	[CE]  	7	None	replace
43	[BUG]  [BUGGY]  Node  thenBranch  =  new  Node(Token.AND,  cond,  expr.getFirstChild());  [CE]  [FE]                                AssertionFailedError    [CONTEXT]    Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }      [BUGGY]  Node  thenBranch  =  new  Node(Token.AND,  cond,  expr.getFirstChild());  [BUGGY]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  thenBranch  =  new  Node(Token.AND,  cond,  expr.getFirstChild());	      	non-compiled	[CE]  	7	None	replace
44	[BUG]  [BUGGY]  if(isPrecedenceInExpression(n,  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }      [BUGGY]  if(isPrecedenceInExpression(n,  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [BUGGY]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isPrecedenceInExpression(n,  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(n,    AND_PRECEDENCE)||    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  	3	None	replace
45	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(cond,  OR)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }      [BUGGY]  if(!isLowerPrecedenceInExpression(cond,  OR)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [BUGGY]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(!isLowerPrecedenceInExpression(cond,  OR)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(cond,    OR)||    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  	6	None	replace
46	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond.getFirstChild(),  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]    Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }      [BUGGY]  if(isLowerPrecedenceInExpression(cond.getFirstChild(),  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {  [BUGGY]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(cond.getFirstChild(),  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE)||    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  	8	None	replace
47	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(cond.getFirstChild(),  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }      [BUGGY]  if(!isLowerPrecedenceInExpression(cond.getFirstChild(),  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [BUGGY]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(!isLowerPrecedenceInExpression(cond.getFirstChild(),  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE)||    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  	8	None	replace
48	[BUG]  [BUGGY]  if(isPrecedenceInExpression(cond.getFirstChild(),  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }      [BUGGY]  if(isPrecedenceInExpression(cond.getFirstChild(),  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [BUGGY]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isPrecedenceInExpression(cond.getFirstChild(),  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE)||    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  	8	None	replace
49	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]    Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }      [BUGGY]  if(isLowerPrecedenceInExpression(cond)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [BUGGY]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(cond)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(expr,    AND_PRECEDENCE)||    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  	5	None	replace
50	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond,  AND_REGULAR_EXPRESSION_FLAGS)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }      [BUGGY]  if(isLowerPrecedenceInExpression(cond,  AND_REGULAR_EXPRESSION_FLAGS)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [BUGGY]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(cond,  AND_REGULAR_EXPRESSION_FLAGS)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(cond,    AND_PRECEDENCE)&&    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  	2	None	replace
51	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(cond,  STANDARD_OBJECT_CONSTRUCTORS)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]    Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }      [BUGGY]  if(!isLowerPrecedenceInExpression(cond,  STANDARD_OBJECT_CONSTRUCTORS)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [BUGGY]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(!isLowerPrecedenceInExpression(cond,  STANDARD_OBJECT_CONSTRUCTORS)  &&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {	  if(!isLowerPrecedenceInExpression(cond,    AND_PRECEDENCE)&&    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  	9	None	replace
52	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(cond,  AND_VAR)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }      [BUGGY]  if(!isLowerPrecedenceInExpression(cond,  AND_VAR)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [BUGGY]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(!isLowerPrecedenceInExpression(cond,  AND_VAR)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {	  if(!isLowerPrecedenceInExpression(cond,    AND_PRECEDENCE)&&    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  	9	None	replace
53	[BUG]  [BUGGY]  Node  thenAssign  =  new  Node(Token.AND,  cond,  expr.removeFirstChild()).copyInformationFrom(n);  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }      [BUGGY]  Node  thenAssign  =  new  Node(Token.AND,  cond,  expr.removeFirstChild()).copyInformationFrom(n);  [BUGGY]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  thenAssign  =  new  Node(Token.AND,  cond,  expr.removeFirstChild()).copyInformationFrom(n);	      	non-compiled	[CE]  	7	None	replace
54	[BUG]  [BUGGY]  Node  thenAssign  =  new  Node(Token.AND,  cond,  expr.removeFirstChild());  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }      [BUGGY]  Node  thenAssign  =  new  Node(Token.AND,  cond,  expr.removeFirstChild());  [BUGGY]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  thenAssign  =  new  Node(Token.AND,  cond,  expr.removeFirstChild());	      	non-compiled	[CE]  	7	None	replace
55	[BUG]  [BUGGY]  Node  thenAssign  =  new  Node(Token.AND,  cond,  expr.removeFirstChild());  parent.replaceChild(n,  newExpr);  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }      [BUGGY]  Node  thenAssign  =  new  Node(Token.AND,  cond,  expr.removeFirstChild());  parent.replaceChild(n,  newExpr);  [BUGGY]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  thenAssign  =  new  Node(Token.AND,  cond,  expr.removeFirstChild());  parent.replaceChild(n,  newExpr);	      	non-compiled	[CE]  	7	None	replace
56	[BUG]  [BUGGY]  Node  thenAssign  =  new  Node(Token.AND,  cond,  expr.removeFirstChild()).copyInformationFrom(n);  parent.replaceChild(n,  newExpr);  [CE]  [FE]                          AssertionFailedError    [CONTEXT]    Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }      [BUGGY]  Node  thenAssign  =  new  Node(Token.AND,  cond,  expr.removeFirstChild()).copyInformationFrom(n);  parent.replaceChild(n,  newExpr);  [BUGGY]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  thenAssign  =  new  Node(Token.AND,  cond,  expr.removeFirstChild()).copyInformationFrom(n);  parent.replaceChild(n,  newExpr);	      	non-compiled	[CE]  	7	None	replace
57	[BUG]  [BUGGY]  Node  thenOp  =  new  Node(Token.AND,  cond,  expr.removeFirstChild());  [CE]  [FE]                            AssertionFailedError    [CONTEXT]    Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }      [BUGGY]  Node  thenOp  =  new  Node(Token.AND,  cond,  expr.removeFirstChild());  [BUGGY]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  thenOp  =  new  Node(Token.AND,  cond,  expr.removeFirstChild());	      	non-compiled	[CE]  	7	None	replace
58	[BUG]  [BUGGY]  Node  thenOp  =  new  Node(Token.AND,  cond,  expr.removeFirstChild()).copyInformationFrom(n);  [CE]  [FE]                              AssertionFailedError    [CONTEXT]    Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }      [BUGGY]  Node  thenOp  =  new  Node(Token.AND,  cond,  expr.removeFirstChild()).copyInformationFrom(n);  [BUGGY]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	Node  thenOp  =  new  Node(Token.AND,  cond,  expr.removeFirstChild()).copyInformationFrom(n);	      	non-compiled	[CE]  	7	None	replace
59	[BUG]  [BUGGY]  if(isPrecedenceInExpression(cond,  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]    Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }      [BUGGY]  if(isPrecedenceInExpression(cond,  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {  [BUGGY]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isPrecedenceInExpression(cond,  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(cond,    AND_PRECEDENCE)||    isLowerPrecedenceInExpression(expr.getLastChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  	1	None	replace
60	[BUG]  [BUGGY]  if(isPrecedenceInExpression(cond,  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]    Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }      [BUGGY]  if(isPrecedenceInExpression(cond,  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [BUGGY]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isPrecedenceInExpression(cond,  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(expr,    AND_PRECEDENCE)||    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  	5	None	replace
61	[BUG]  [BUGGY]  if(isPrecedenceInExpression(cond,  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  STANDARD_OBJECT_CONSTRUCTORS))  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]    Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }      [BUGGY]  if(isPrecedenceInExpression(cond,  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  STANDARD_OBJECT_CONSTRUCTORS))  {  [BUGGY]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isPrecedenceInExpression(cond,  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  STANDARD_OBJECT_CONSTRUCTORS))  {	  if(isLowerPrecedenceInExpression(cond,    STANDARD_OBJECT_CONSTRUCTORS)||    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  	4	None	replace
62	[BUG]  [BUGGY]  if(isPrecedenceInExpression(cond,  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }      [BUGGY]  if(isPrecedenceInExpression(cond,  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [BUGGY]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isPrecedenceInExpression(cond,  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(cond,    AND_PRECEDENCE)&&    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  	2	None	replace
63	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]    Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }      [BUGGY]  if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [BUGGY]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(cond,    AND_PRECEDENCE)&&    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  	2	None	replace
64	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]    Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }      [BUGGY]  if(isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [BUGGY]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE)||    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  	8	None	replace
65	[BUG]  [BUGGY]  if(isPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }      [BUGGY]  if(isPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [BUGGY]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE)||    isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))    {    	non-compiled	[CE]  	8	None	replace
