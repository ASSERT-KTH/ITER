bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {  [CE]  ')'  expected  [FE]    AssertionFailedError  [CONTEXT]  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }    [BUGGY]  if(isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {  [BUGGY]  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getLastChild(),  AND_PRECEDENCE))  {	if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))  {  	non-compiled	[CE]  ')'  expected	21	None	replace
2	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [CE]  ')'  expected  [FE]      AssertionFailedError  [CONTEXT]  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }    [BUGGY]  if(isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [BUGGY]  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {	if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))  {  	non-compiled	[CE]  ')'  expected	21	None	replace
3	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(n,  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [CE]  ')'  expected  [FE]        AssertionFailedError  [CONTEXT]  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }    [BUGGY]  if(isLowerPrecedenceInExpression(n,  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [BUGGY]  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(n,  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {	if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))  {  	non-compiled	[CE]  ')'  expected	21	None	replace
4	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond,  STANDARD_OBJECT_CONSTRUCTORS)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [CE]  ')'  expected  [FE]          AssertionFailedError  [CONTEXT]  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }    [BUGGY]  if(isLowerPrecedenceInExpression(cond,  STANDARD_OBJECT_CONSTRUCTORS)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [BUGGY]  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(cond,  STANDARD_OBJECT_CONSTRUCTORS)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {	if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))  {  	non-compiled	[CE]  ')'  expected	21	None	replace
5	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(expr,  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [CE]  ')'  expected  [FE]            AssertionFailedError  [CONTEXT]  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }    [BUGGY]  if(isLowerPrecedenceInExpression(expr,  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [BUGGY]  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(expr,  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {	if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))  {  	non-compiled	[CE]  ')'  expected	21	None	replace
6	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond,  OR)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [CE]  ')'  expected  [FE]              AssertionFailedError  [CONTEXT]  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }    [BUGGY]  if(isLowerPrecedenceInExpression(cond,  OR)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [BUGGY]  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(cond,  OR)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {	if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))  {  	non-compiled	[CE]  ')'  expected	21	None	replace
7	[BUG]  [BUGGY]    [CE]  ')'  expected  [FE]                AssertionFailedError  [CONTEXT]  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }    [BUGGY]    [BUGGY]  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	  	if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))  {  	non-compiled	[CE]  ')'  expected	21	None	replace
8	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [CE]  ')'  expected  [FE]    AssertionFailedError  [CONTEXT]  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }    [BUGGY]  if(isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [BUGGY]  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE)||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {	if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))  {  	non-compiled	[CE]  ')'  expected	21	None	replace
9	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [CE]  ')'  expected  [FE]    AssertionFailedError  [CONTEXT]  Node  or  =  new  Node(Token.OR,  cond.removeFirstChild(),  expr.removeFirstChild()).copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(or);  parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }    [BUGGY]  if(!isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  [BUGGY]  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	302	304	1	replace	if(!isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)&&  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {	if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),    AND_PRECEDENCE))  {  	non-compiled	[CE]  ')'  expected	21	None	replace
