bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  newExpr.replaceChild(n,  newExpr  -  1);  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);    [BUGGY]  newExpr.replaceChild(n,  newExpr  -  1);  [BUGGY]    reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	313	313	1	replace	newExpr.replaceChild(n,  newExpr  -  1);	  parent.replaceChild(n,    newExpr    -    1);    	non-compiled	[CE]  ')'  expected	3	None	replace
2	[BUG]  [BUGGY]  parent.replaceChild(n,  newExpr  +  1);  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);    [BUGGY]  parent.replaceChild(n,  newExpr  +  1);  [BUGGY]    reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	313	313	1	replace	parent.replaceChild(n,  newExpr  +  1);	  parent.replaceChild(n,    newExpr    -    1);    	non-compiled	[CE]  ')'  expected	3	None	replace
3	[BUG]  [BUGGY]  parent.replaceChild(n,  newExpr).replaceChild(cond,  newExpr);  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);    [BUGGY]  parent.replaceChild(n,  newExpr).replaceChild(cond,  newExpr);  [BUGGY]    reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	313	313	1	replace	parent.replaceChild(n,  newExpr).replaceChild(cond,  newExpr);	  parent.replaceChild(n,    newExpr    -    1);    	non-compiled	[CE]  ')'  expected	3	None	replace
4	[BUG]  [BUGGY]  newExpr.removeChild(cond);  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);    [BUGGY]  newExpr.removeChild(cond);  [BUGGY]    reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	313	313	1	replace	newExpr.removeChild(cond);	  newExpr.removeChild(parent);    	non-compiled	[CE]  ')'  expected	13	None	replace
5	[BUG]  [BUGGY]  newExpr.removeChild(expr);  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);    [BUGGY]  newExpr.removeChild(expr);  [BUGGY]    reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	313	313	1	replace	newExpr.removeChild(expr);	  newExpr.removeChild(parent);    	non-compiled	[CE]  ')'  expected	13	None	replace
6	[BUG]  [BUGGY]  newExpr.removeChild(n);  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);    [BUGGY]  newExpr.removeChild(n);  [BUGGY]    reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	313	313	1	replace	newExpr.removeChild(n);	  newExpr.removeChild(parent);    	non-compiled	[CE]  ')'  expected	13	None	replace
7	[BUG]  [BUGGY]  newExpr.replaceChild(n,  newExpr);  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);    [BUGGY]  newExpr.replaceChild(n,  newExpr);  [BUGGY]    reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	313	313	1	replace	newExpr.replaceChild(n,  newExpr);	  newExpr.removeChild(parent);    	non-compiled	[CE]  ')'  expected	13	None	replace
8	[BUG]  [BUGGY]  newExpr.addChildToFront(newExpr);  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);    [BUGGY]  newExpr.addChildToFront(newExpr);  [BUGGY]    reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	313	313	1	replace	newExpr.addChildToFront(newExpr);	  newExpr.removeChild(parent);    	non-compiled	[CE]  ')'  expected	13	None	replace
9	[BUG]  [BUGGY]  newExpr.addChildToBack(newExpr);  [CE]  ')'  expected  [FE]                      AssertionFailedError    [CONTEXT]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);    [BUGGY]  newExpr.addChildToBack(newExpr);  [BUGGY]    reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	313	313	1	replace	newExpr.addChildToBack(newExpr);	  newExpr.removeChild(parent);    	non-compiled	[CE]  ')'  expected	13	None	replace
10	[BUG]  [BUGGY]  newExpr.removeChild(newExpr);  [CE]  ')'  expected  [FE]                        AssertionFailedError    [CONTEXT]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);    [BUGGY]  newExpr.removeChild(newExpr);  [BUGGY]    reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	313	313	1	replace	newExpr.removeChild(newExpr);	  newExpr.removeChild(parent);    	non-compiled	[CE]  ')'  expected	13	None	replace
11	[BUG]  [BUGGY]  NodeUtil.removeChild(newExpr,  parent);  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);    [BUGGY]  NodeUtil.removeChild(newExpr,  parent);  [BUGGY]    reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	313	313	1	replace	NodeUtil.removeChild(newExpr,  parent);	  NodeUtil.removeChild(parent,    newExpr);    	non-compiled	[CE]  ')'  expected	11	None	replace
12	[BUG]  [BUGGY]  NodeUtil.removeChild(n,  newExpr);  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);    [BUGGY]  NodeUtil.removeChild(n,  newExpr);  [BUGGY]    reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	313	313	1	replace	NodeUtil.removeChild(n,  newExpr);	  NodeUtil.removeChild(parent,    newExpr);    	non-compiled	[CE]  ')'  expected	11	None	replace
13	[BUG]  [BUGGY]  NodeUtil.removeChild(newExpr);  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);    [BUGGY]  NodeUtil.removeChild(newExpr);  [BUGGY]    reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	313	313	1	replace	NodeUtil.removeChild(newExpr);	  NodeUtil.removeChild(parent,    newExpr);    	non-compiled	[CE]  ')'  expected	11	None	replace
14	[BUG]  [BUGGY]  NodeUtil.removeChild(expr,  newExpr);  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);    [BUGGY]  NodeUtil.removeChild(expr,  newExpr);  [BUGGY]    reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	313	313	1	replace	NodeUtil.removeChild(expr,  newExpr);	  NodeUtil.removeChild(parent,    newExpr);    	non-compiled	[CE]  ')'  expected	11	None	replace
15	[BUG]  [BUGGY]  NodeUtil.removeChild(newExpr,  cond);  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);    [BUGGY]  NodeUtil.removeChild(newExpr,  cond);  [BUGGY]    reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	313	313	1	replace	NodeUtil.removeChild(newExpr,  cond);	  NodeUtil.removeChild(parent,    newExpr);    	non-compiled	[CE]  ')'  expected	11	None	replace
16	[BUG]  [BUGGY]  NodeUtil.removeChild(newExpr,  expr);  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);    [BUGGY]  NodeUtil.removeChild(newExpr,  expr);  [BUGGY]    reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	313	313	1	replace	NodeUtil.removeChild(newExpr,  expr);	  NodeUtil.removeChild(parent,    newExpr);    	non-compiled	[CE]  ')'  expected	11	None	replace
17	[BUG]  [BUGGY]  parent.replaceChild(n,  cond,  newExpr);  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);    [BUGGY]  parent.replaceChild(n,  cond,  newExpr);  [BUGGY]    reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	313	313	1	replace	parent.replaceChild(n,  cond,  newExpr);	  parent.replaceChild(n,    newExpr,    cond);    	non-compiled	[CE]  ')'  expected	1	None	replace
18	[BUG]  [BUGGY]  parent.replaceChild(n,  newExpr,  cond  -  1);  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);    [BUGGY]  parent.replaceChild(n,  newExpr,  cond  -  1);  [BUGGY]    reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	313	313	1	replace	parent.replaceChild(n,  newExpr,  cond  -  1);	  parent.replaceChild(n,    newExpr,    cond);    	non-compiled	[CE]  ')'  expected	1	None	replace
19	[BUG]  [BUGGY]  parent.replaceChild(n,  newExpr,  var);  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);    [BUGGY]  parent.replaceChild(n,  newExpr,  var);  [BUGGY]    reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	313	313	1	replace	parent.replaceChild(n,  newExpr,  var);	  parent.replaceChild(n,    newExpr,    cond);    	non-compiled	[CE]  ')'  expected	1	None	replace
20	[BUG]  [BUGGY]  parents.replaceChild(n,  newExpr).replaceChild(cond,  newExpr);  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);    [BUGGY]  parents.replaceChild(n,  newExpr).replaceChild(cond,  newExpr);  [BUGGY]    reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	313	313	1	replace	parents.replaceChild(n,  newExpr).replaceChild(cond,  newExpr);	  parents.replaceChild(n,    newExpr);    	non-compiled	[CE]  ')'  expected	12	None	replace
21	[BUG]  [BUGGY]  parents.replaceChild(n,  newExpr).removeChild(cond);  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);    [BUGGY]  parents.replaceChild(n,  newExpr).removeChild(cond);  [BUGGY]    reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	313	313	1	replace	parents.replaceChild(n,  newExpr).removeChild(cond);	  parents.replaceChild(n,    newExpr);    	non-compiled	[CE]  ')'  expected	12	None	replace
22	[BUG]  [BUGGY]  parents.replaceChild(n,  newExpr  -  1);  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);    [BUGGY]  parents.replaceChild(n,  newExpr  -  1);  [BUGGY]    reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	313	313	1	replace	parents.replaceChild(n,  newExpr  -  1);	  parents.replaceChild(n,    newExpr);    	non-compiled	[CE]  ')'  expected	12	None	replace
23	[BUG]  [BUGGY]  Parents.replaceChild(n,  newExpr,  cond);  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);    [BUGGY]  Parents.replaceChild(n,  newExpr,  cond);  [BUGGY]    reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	313	313	1	replace	Parents.replaceChild(n,  newExpr,  cond);	  parents.replaceChild(n,    newExpr);    	non-compiled	[CE]  ')'  expected	12	None	replace
24	[BUG]  [BUGGY]  parents.replaceChild(n,  newExpr,  cond);  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);    [BUGGY]  parents.replaceChild(n,  newExpr,  cond);  [BUGGY]    reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	313	313	1	replace	parents.replaceChild(n,  newExpr,  cond);	  parents.replaceChild(n,    newExpr);    	non-compiled	[CE]  ')'  expected	12	None	replace
25	[BUG]  [BUGGY]  parent.replaceChild(n,  assign,  newExpr);  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);    [BUGGY]  parent.replaceChild(n,  assign,  newExpr);  [BUGGY]    reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	313	313	1	replace	parent.replaceChild(n,  assign,  newExpr);	  parent.replaceChild(n,    newExpr,    assign);    	non-compiled	[CE]  ')'  expected	5	None	replace
26	[BUG]  [BUGGY]  parent.replaceChild(n,  newExpr,  returnNode);  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);    [BUGGY]  parent.replaceChild(n,  newExpr,  returnNode);  [BUGGY]    reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	313	313	1	replace	parent.replaceChild(n,  newExpr,  returnNode);	  parent.replaceChild(n,    newExpr,    assign);    	non-compiled	[CE]  ')'  expected	5	None	replace
27	[BUG]  [BUGGY]  parent.replaceChild(n,  newExpr)&&  NodeUtil.isAssignmentOp(newExpr);  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);    [BUGGY]  parent.replaceChild(n,  newExpr)&&  NodeUtil.isAssignmentOp(newExpr);  [BUGGY]    reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	313	313	1	replace	parent.replaceChild(n,  newExpr)&&  NodeUtil.isAssignmentOp(newExpr);	  parent.replaceChild(n,    newExpr)&&    NodeUtil.isAssignmentOp(n);    	non-compiled	[CE]  ')'  expected	8	None	replace
28	[BUG]  [BUGGY]  parent.replaceChild(n,  newExpr)||  NodeUtil.isAssignmentOp(n);  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);    [BUGGY]  parent.replaceChild(n,  newExpr)||  NodeUtil.isAssignmentOp(n);  [BUGGY]    reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	313	313	1	replace	parent.replaceChild(n,  newExpr)||  NodeUtil.isAssignmentOp(n);	  parent.replaceChild(n,    newExpr)&&    NodeUtil.isAssignmentOp(n);    	non-compiled	[CE]  ')'  expected	8	None	replace
29	[BUG]  [BUGGY]  parent.replaceChild(n,  newExpr)&&  NodeUtil.mayHaveSideEffects(newExpr);  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);    [BUGGY]  parent.replaceChild(n,  newExpr)&&  NodeUtil.mayHaveSideEffects(newExpr);  [BUGGY]    reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	313	313	1	replace	parent.replaceChild(n,  newExpr)&&  NodeUtil.mayHaveSideEffects(newExpr);	  parent.replaceChild(n,    newExpr)&&    NodeUtil.isAssignmentOp(n);    	non-compiled	[CE]  ')'  expected	8	None	replace
30	[BUG]  [BUGGY]  parent.replaceChild(n,  newExpr)&&  NodeUtil.mayHaveSideEffects(expr);  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);    [BUGGY]  parent.replaceChild(n,  newExpr)&&  NodeUtil.mayHaveSideEffects(expr);  [BUGGY]    reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	313	313	1	replace	parent.replaceChild(n,  newExpr)&&  NodeUtil.mayHaveSideEffects(expr);	  parent.replaceChild(n,    newExpr)&&    NodeUtil.mayHaveSideEffects(n);    	non-compiled	[CE]  ')'  expected	7	None	replace
31	[BUG]  [BUGGY]  parent.replaceChild(n,  newExpr)||  NodeUtil.mayHaveSideEffects(n);  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);    [BUGGY]  parent.replaceChild(n,  newExpr)||  NodeUtil.mayHaveSideEffects(n);  [BUGGY]    reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	313	313	1	replace	parent.replaceChild(n,  newExpr)||  NodeUtil.mayHaveSideEffects(n);	  parent.replaceChild(n,    newExpr)&&    NodeUtil.mayHaveSideEffects(n);    	non-compiled	[CE]  ')'  expected	7	None	replace
32	[BUG]  [BUGGY]  parent.replaceChild(n,  newExpr)&&  NodeUtil.mayHaveSideEffects(n,  expr);  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);    [BUGGY]  parent.replaceChild(n,  newExpr)&&  NodeUtil.mayHaveSideEffects(n,  expr);  [BUGGY]    reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	313	313	1	replace	parent.replaceChild(n,  newExpr)&&  NodeUtil.mayHaveSideEffects(n,  expr);	  parent.replaceChild(n,    newExpr)&&    NodeUtil.mayHaveSideEffects(n);    	non-compiled	[CE]  ')'  expected	7	None	replace
33	[BUG]  [BUGGY]  parent.replaceChild(n,  newExpr)&&  NodeUtil.mayHaveSideEffects(cond);  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);    [BUGGY]  parent.replaceChild(n,  newExpr)&&  NodeUtil.mayHaveSideEffects(cond);  [BUGGY]    reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	313	313	1	replace	parent.replaceChild(n,  newExpr)&&  NodeUtil.mayHaveSideEffects(cond);	  parent.replaceChild(n,    newExpr)&&    NodeUtil.mayHaveSideEffects(n);    	non-compiled	[CE]  ')'  expected	7	None	replace
34	[BUG]  [BUGGY]  n.removeChild(cond);  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);    [BUGGY]  n.removeChild(cond);  [BUGGY]    reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	313	313	1	replace	n.removeChild(cond);	  n.replaceChild(n,    newExpr);    	non-compiled	[CE]  ')'  expected	14	None	replace
35	[BUG]  [BUGGY]  n.removeChild(newExpr);  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);    [BUGGY]  n.removeChild(newExpr);  [BUGGY]    reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	313	313	1	replace	n.removeChild(newExpr);	  n.replaceChild(n,    newExpr);    	non-compiled	[CE]  ')'  expected	14	None	replace
36	[BUG]  [BUGGY]  n.replaceChild(cond,  newExpr);  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);    [BUGGY]  n.replaceChild(cond,  newExpr);  [BUGGY]    reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	313	313	1	replace	n.replaceChild(cond,  newExpr);	  n.replaceChild(n,    newExpr);    	non-compiled	[CE]  ')'  expected	14	None	replace
37	[BUG]  [BUGGY]  n.removeChild(expr);  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);    [BUGGY]  n.removeChild(expr);  [BUGGY]    reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	313	313	1	replace	n.removeChild(expr);	  n.replaceChild(n,    newExpr);    	non-compiled	[CE]  ')'  expected	14	None	replace
38	[BUG]  [BUGGY]  parent.replaceChild(n,  newExpr).replaceChild(n,  and);  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);    [BUGGY]  parent.replaceChild(n,  newExpr).replaceChild(n,  and);  [BUGGY]    reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	313	313	1	replace	parent.replaceChild(n,  newExpr).replaceChild(n,  and);	  parent.replaceChild(n,    newExpr).replaceChild(n,    newExpr);    	non-compiled	[CE]  ')'  expected	10	None	replace
39	[BUG]  [BUGGY]  parent.replaceChild(n,  newExpr).replaceChild(n,  cond);  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);    [BUGGY]  parent.replaceChild(n,  newExpr).replaceChild(n,  cond);  [BUGGY]    reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	313	313	1	replace	parent.replaceChild(n,  newExpr).replaceChild(n,  cond);	  parent.replaceChild(n,    newExpr).replaceChild(n,    newExpr);    	non-compiled	[CE]  ')'  expected	10	None	replace
40	[BUG]  [BUGGY]  parent.replaceChild(n,  newExpr).removeChild(newExpr);  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);    [BUGGY]  parent.replaceChild(n,  newExpr).removeChild(newExpr);  [BUGGY]    reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	313	313	1	replace	parent.replaceChild(n,  newExpr).removeChild(newExpr);	  parent.replaceChild(n,    newExpr).replaceChild(n,    newExpr);    	non-compiled	[CE]  ')'  expected	10	None	replace
41	[BUG]  [BUGGY]  parent.replaceChild(n,  newExpr).replaceChild(newExpr,  and);  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);    [BUGGY]  parent.replaceChild(n,  newExpr).replaceChild(newExpr,  and);  [BUGGY]    reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	313	313	1	replace	parent.replaceChild(n,  newExpr).replaceChild(newExpr,  and);	  parent.replaceChild(n,    newExpr).replaceChild(n,    newExpr);    	non-compiled	[CE]  ')'  expected	10	None	replace
42	[BUG]  [BUGGY]  parent.replaceChild(n,  newExpr,  newExpr);  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);    [BUGGY]  parent.replaceChild(n,  newExpr,  newExpr);  [BUGGY]    reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	313	313	1	replace	parent.replaceChild(n,  newExpr,  newExpr);	  parent.replaceChild(n,    newExpr,    expr);    	non-compiled	[CE]  ')'  expected	2	None	replace
43	[BUG]  [BUGGY]  parent.replaceChild(n,  cond,  expr);  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);    [BUGGY]  parent.replaceChild(n,  cond,  expr);  [BUGGY]    reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	313	313	1	replace	parent.replaceChild(n,  cond,  expr);	  parent.replaceChild(n,    newExpr,    expr);    	non-compiled	[CE]  ')'  expected	2	None	replace
44	[BUG]  [BUGGY]  parent.replaceChild(n,  newExpr,  expr.cloneTree());  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);    [BUGGY]  parent.replaceChild(n,  newExpr,  expr.cloneTree());  [BUGGY]    reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	313	313	1	replace	parent.replaceChild(n,  newExpr,  expr.cloneTree());	  parent.replaceChild(n,    newExpr,    expr);    	non-compiled	[CE]  ')'  expected	2	None	replace
45	[BUG]  [BUGGY]  parent.replaceChild(n,  newExpr,  n);  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);    [BUGGY]  parent.replaceChild(n,  newExpr,  n);  [BUGGY]    reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	313	313	1	replace	parent.replaceChild(n,  newExpr,  n);	  parent.replaceChild(n,    newExpr,    expr);    	non-compiled	[CE]  ')'  expected	2	None	replace
46	[BUG]  [BUGGY]  parent.replaceChild(n,  newExpr).replaceChild(cond,  expr);  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);    [BUGGY]  parent.replaceChild(n,  newExpr).replaceChild(cond,  expr);  [BUGGY]    reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	313	313	1	replace	parent.replaceChild(n,  newExpr).replaceChild(cond,  expr);	  parent.replaceChild(n,    newExpr).replaceChild(n,    expr);    	non-compiled	[CE]  ')'  expected	9	None	replace
47	[BUG]  [BUGGY]  parent.replaceChild(n,  newExpr).removeChild(cond,  expr);  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);    [BUGGY]  parent.replaceChild(n,  newExpr).removeChild(cond,  expr);  [BUGGY]    reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	313	313	1	replace	parent.replaceChild(n,  newExpr).removeChild(cond,  expr);	  parent.replaceChild(n,    newExpr).replaceChild(n,    expr);    	non-compiled	[CE]  ')'  expected	9	None	replace
48	[BUG]  [BUGGY]  newExpr.replaceChild(n,  newExpr).replaceChild(n,  expr);  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);    [BUGGY]  newExpr.replaceChild(n,  newExpr).replaceChild(n,  expr);  [BUGGY]    reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	313	313	1	replace	newExpr.replaceChild(n,  newExpr).replaceChild(n,  expr);	  parent.replaceChild(n,    newExpr).replaceChild(n,    expr);    	non-compiled	[CE]  ')'  expected	9	None	replace
49	[BUG]  [BUGGY]  parent.replaceChild(n,  newExpr,  or);  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);    [BUGGY]  parent.replaceChild(n,  newExpr,  or);  [BUGGY]    reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	313	313	1	replace	parent.replaceChild(n,  newExpr,  or);	  parent.replaceChild(n,    newExpr,    and);    	non-compiled	[CE]  ')'  expected	4	None	replace
50	[BUG]  [BUGGY]  parent.replaceChild(n,  newExpr,  to);  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);    [BUGGY]  parent.replaceChild(n,  newExpr,  to);  [BUGGY]    reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	313	313	1	replace	parent.replaceChild(n,  newExpr,  to);	  parent.replaceChild(n,    newExpr,    and);    	non-compiled	[CE]  ')'  expected	4	None	replace
51	[BUG]  [BUGGY]  n.removeChild(cond);  newExpr.addChildToBack(newExpr);  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);    [BUGGY]  n.removeChild(cond);  newExpr.addChildToBack(newExpr);  [BUGGY]    reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	313	313	1	replace	n.removeChild(cond);  newExpr.addChildToBack(newExpr);	      	non-compiled	[CE]  ')'  expected	6	None	replace
52	[BUG]  [BUGGY]  NodeUtil.removeChild(cond,  newExpr);  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);    [BUGGY]  NodeUtil.removeChild(cond,  newExpr);  [BUGGY]    reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	313	313	1	replace	NodeUtil.removeChild(cond,  newExpr);	      	non-compiled	[CE]  ')'  expected	6	None	replace
53	[BUG]  [BUGGY]  Node  parent  =  expr.getParent();  [CE]  ')'  expected  [FE]                      AssertionFailedError    [CONTEXT]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);    [BUGGY]  Node  parent  =  expr.getParent();  [BUGGY]    reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	313	313	1	replace	Node  parent  =  expr.getParent();	      	non-compiled	[CE]  ')'  expected	6	None	replace
54	[BUG]  [BUGGY]  Node  parent  =  newExpr.getParent();  [CE]  ')'  expected  [FE]                        AssertionFailedError    [CONTEXT]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);    [BUGGY]  Node  parent  =  newExpr.getParent();  [BUGGY]    reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	313	313	1	replace	Node  parent  =  newExpr.getParent();	      	non-compiled	[CE]  ')'  expected	6	None	replace
55	[BUG]  [BUGGY]  n.removeChild(cond);  newExpr.addChildToFront(newExpr);  [CE]  ')'  expected  [FE]                          AssertionFailedError    [CONTEXT]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);    [BUGGY]  n.removeChild(cond);  newExpr.addChildToFront(newExpr);  [BUGGY]    reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	313	313	1	replace	n.removeChild(cond);  newExpr.addChildToFront(newExpr);	      	non-compiled	[CE]  ')'  expected	6	None	replace
56	[BUG]  [BUGGY]  parent.replaceChild(n,  newExpr).replaceChild(n,  expr.removeFirstChild());  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);    [BUGGY]  parent.replaceChild(n,  newExpr).replaceChild(n,  expr.removeFirstChild());  [BUGGY]    reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	313	313	1	replace	parent.replaceChild(n,  newExpr).replaceChild(n,  expr.removeFirstChild());	  parent.replaceChild(n,    newExpr    -    1);    	non-compiled	[CE]  ')'  expected	3	None	replace
57	[BUG]  [BUGGY]  parent.replaceChild(n,  newExpr)&&  NodeUtil.mayHaveSideEffects(and);  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);    [BUGGY]  parent.replaceChild(n,  newExpr)&&  NodeUtil.mayHaveSideEffects(and);  [BUGGY]    reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	313	313	1	replace	parent.replaceChild(n,  newExpr)&&  NodeUtil.mayHaveSideEffects(and);	  parent.replaceChild(n,    newExpr)&&    NodeUtil.mayHaveSideEffects(n);    	non-compiled	[CE]  ')'  expected	7	None	replace
58	[BUG]  [BUGGY]  parent.replaceChild(n,  newExpr,  ref);  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);    [BUGGY]  parent.replaceChild(n,  newExpr,  ref);  [BUGGY]    reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	313	313	1	replace	parent.replaceChild(n,  newExpr,  ref);	  parent.replaceChild(n,    newExpr,    cond);    	non-compiled	[CE]  ')'  expected	1	None	replace
59	[BUG]  [BUGGY]  parent.replaceChild(n,  newExpr)&&  NodeUtil.isFunctionDeclaration(n);  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);    [BUGGY]  parent.replaceChild(n,  newExpr)&&  NodeUtil.isFunctionDeclaration(n);  [BUGGY]    reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	313	313	1	replace	parent.replaceChild(n,  newExpr)&&  NodeUtil.isFunctionDeclaration(n);	  parent.replaceChild(n,    newExpr)&&    NodeUtil.isAssignmentOp(n);    	non-compiled	[CE]  ')'  expected	8	None	replace
60	[BUG]  [BUGGY]  parent.replaceChild(n,  newExpr)&&  NodeUtil.isAssignmentOp(parent);  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);    [BUGGY]  parent.replaceChild(n,  newExpr)&&  NodeUtil.isAssignmentOp(parent);  [BUGGY]    reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	313	313	1	replace	parent.replaceChild(n,  newExpr)&&  NodeUtil.isAssignmentOp(parent);	  parent.replaceChild(n,    newExpr)&&    NodeUtil.isAssignmentOp(n);    	non-compiled	[CE]  ')'  expected	8	None	replace
61	[BUG]  [BUGGY]  parent.replaceChild(n,  newExpr).replaceChild(n,  returnNode);  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);    [BUGGY]  parent.replaceChild(n,  newExpr).replaceChild(n,  returnNode);  [BUGGY]    reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	313	313	1	replace	parent.replaceChild(n,  newExpr).replaceChild(n,  returnNode);	  parent.replaceChild(n,    newExpr).replaceChild(n,    newExpr);    	non-compiled	[CE]  ')'  expected	10	None	replace
62	[BUG]  [BUGGY]  parent.replaceChild(n,  newExpr).replaceChild(n,  ref);  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);    [BUGGY]  parent.replaceChild(n,  newExpr).replaceChild(n,  ref);  [BUGGY]    reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	313	313	1	replace	parent.replaceChild(n,  newExpr).replaceChild(n,  ref);	  parent.replaceChild(n,    newExpr).replaceChild(n,    newExpr);    	non-compiled	[CE]  ')'  expected	10	None	replace
63	[BUG]  [BUGGY]  parent.replaceChild(n,  newExpr).replaceChild(n,  ')');  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);    [BUGGY]  parent.replaceChild(n,  newExpr).replaceChild(n,  ')');  [BUGGY]    reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	313	313	1	replace	parent.replaceChild(n,  newExpr).replaceChild(n,  ')');	  parent.replaceChild(n,    newExpr).replaceChild(n,    newExpr);    	non-compiled	[CE]  ')'  expected	10	None	replace
64	[BUG]  [BUGGY]  Parents.replaceChild(n,  newExpr);  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);    [BUGGY]  Parents.replaceChild(n,  newExpr);  [BUGGY]    reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	313	313	1	replace	Parents.replaceChild(n,  newExpr);	  parents.replaceChild(n,    newExpr);    	non-compiled	[CE]  ')'  expected	12	None	replace
65	[BUG]  [BUGGY]  parents.replaceChild(n,  newExpr)&&!NodeUtil.isAssignmentOp(n);  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);    [BUGGY]  parents.replaceChild(n,  newExpr)&&!NodeUtil.isAssignmentOp(n);  [BUGGY]    reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	313	313	1	replace	parents.replaceChild(n,  newExpr)&&!NodeUtil.isAssignmentOp(n);	  parents.replaceChild(n,    newExpr);    	non-compiled	[CE]  ')'  expected	12	None	replace
66	[BUG]  [BUGGY]  parents.replaceChild(n,  newExpr)&&  NodeUtil.isAssignmentOp(n);  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);    [BUGGY]  parents.replaceChild(n,  newExpr)&&  NodeUtil.isAssignmentOp(n);  [BUGGY]    reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	313	313	1	replace	parents.replaceChild(n,  newExpr)&&  NodeUtil.isAssignmentOp(n);	  parents.replaceChild(n,    newExpr);    	non-compiled	[CE]  ')'  expected	12	None	replace
67	[BUG]  [BUGGY]  parents.replaceChild(n,  newExpr).replaceChild(parent,  newExpr);  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);    [BUGGY]  parents.replaceChild(n,  newExpr).replaceChild(parent,  newExpr);  [BUGGY]    reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	313	313	1	replace	parents.replaceChild(n,  newExpr).replaceChild(parent,  newExpr);	  parents.replaceChild(n,    newExpr);    	non-compiled	[CE]  ')'  expected	12	None	replace
68	[BUG]  [BUGGY]  parents.replaceChild(n,  newExpr)&&  NodeUtil.isAssignmentOp(newExpr);  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);    [BUGGY]  parents.replaceChild(n,  newExpr)&&  NodeUtil.isAssignmentOp(newExpr);  [BUGGY]    reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	313	313	1	replace	parents.replaceChild(n,  newExpr)&&  NodeUtil.isAssignmentOp(newExpr);	  parents.replaceChild(n,    newExpr);    	non-compiled	[CE]  ')'  expected	12	None	replace
69	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newExpr,  this);  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);    [BUGGY]  NodeTraversal.traverse(compiler,  newExpr,  this);  [BUGGY]    reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	313	313	1	replace	NodeTraversal.traverse(compiler,  newExpr,  this);	      	non-compiled	[CE]  ')'  expected	6	None	replace
70	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newExpr,  false);  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);    [BUGGY]  NodeTraversal.traverse(compiler,  newExpr,  false);  [BUGGY]    reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	313	313	1	replace	NodeTraversal.traverse(compiler,  newExpr,  false);	      	non-compiled	[CE]  ')'  expected	6	None	replace
71	[BUG]  [BUGGY]  NodeUtil.copyInformationFrom(newExpr,  n);  [CE]  ')'  expected  [FE]                      AssertionFailedError    [CONTEXT]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);    [BUGGY]  NodeUtil.copyInformationFrom(newExpr,  n);  [BUGGY]    reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	313	313	1	replace	NodeUtil.copyInformationFrom(newExpr,  n);	      	non-compiled	[CE]  ')'  expected	6	None	replace
72	[BUG]  [BUGGY]  NodeUtil.copyInformationFrom(newExpr);  [CE]  ')'  expected  [FE]                        AssertionFailedError    [CONTEXT]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);    [BUGGY]  NodeUtil.copyInformationFrom(newExpr);  [BUGGY]    reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	313	313	1	replace	NodeUtil.copyInformationFrom(newExpr);	      	non-compiled	[CE]  ')'  expected	6	None	replace
73	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newExpr,  newExpr);  [CE]  ')'  expected  [FE]                          AssertionFailedError    [CONTEXT]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);    [BUGGY]  NodeTraversal.traverse(compiler,  newExpr,  newExpr);  [BUGGY]    reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	313	313	1	replace	NodeTraversal.traverse(compiler,  newExpr,  newExpr);	      	non-compiled	[CE]  ')'  expected	6	None	replace
74	[BUG]  [BUGGY]  NodeUtil.copyInformationFrom(newExpr,  newExpr);  [CE]  ')'  expected  [FE]                            AssertionFailedError    [CONTEXT]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);    [BUGGY]  NodeUtil.copyInformationFrom(newExpr,  newExpr);  [BUGGY]    reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	313	313	1	replace	NodeUtil.copyInformationFrom(newExpr,  newExpr);	      	non-compiled	[CE]  ')'  expected	6	None	replace
75	[BUG]  [BUGGY]  NodeUtil.replaceChild(n,  newExpr);  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);    [BUGGY]  NodeUtil.replaceChild(n,  newExpr);  [BUGGY]    reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	313	313	1	replace	NodeUtil.replaceChild(n,  newExpr);	  NodeUtil.removeChild(parent,    newExpr);    	non-compiled	[CE]  ')'  expected	11	None	replace
76	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  newExpr  -  1);  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);    [BUGGY]  NodeUtil.removeChild(parent,  newExpr  -  1);  [BUGGY]    reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	313	313	1	replace	NodeUtil.removeChild(parent,  newExpr  -  1);	  NodeUtil.removeChild(parent,    newExpr);    	non-compiled	[CE]  ')'  expected	11	None	replace
77	[BUG]  [BUGGY]  parent.replaceChild(n,  and);  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);    [BUGGY]  parent.replaceChild(n,  and);  [BUGGY]    reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	313	313	1	replace	parent.replaceChild(n,  and);	  parent.replaceChild(n,    newExpr,    and);    	non-compiled	[CE]  ')'  expected	4	None	replace
78	[BUG]  [BUGGY]  parent.replaceChild(n,  newExpr,  AND_PRECEDENCE);  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);    [BUGGY]  parent.replaceChild(n,  newExpr,  AND_PRECEDENCE);  [BUGGY]    reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	313	313	1	replace	parent.replaceChild(n,  newExpr,  AND_PRECEDENCE);	  parent.replaceChild(n,    newExpr,    and);    	non-compiled	[CE]  ')'  expected	4	None	replace
79	[BUG]  [BUGGY]  parent.replaceChild(n,  assign);  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);    [BUGGY]  parent.replaceChild(n,  assign);  [BUGGY]    reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	313	313	1	replace	parent.replaceChild(n,  assign);	  parent.replaceChild(n,    newExpr,    assign);    	non-compiled	[CE]  ')'  expected	5	None	replace
80	[BUG]  [BUGGY]  n.replaceChild(parent,  newExpr);  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);    [BUGGY]  n.replaceChild(parent,  newExpr);  [BUGGY]    reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	313	313	1	replace	n.replaceChild(parent,  newExpr);	  n.replaceChild(n,    newExpr);    	non-compiled	[CE]  ')'  expected	14	None	replace
81	[BUG]  [BUGGY]  parent.replaceChild(n,  expr,  newExpr);  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);    [BUGGY]  parent.replaceChild(n,  expr,  newExpr);  [BUGGY]    reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	313	313	1	replace	parent.replaceChild(n,  expr,  newExpr);	  parent.replaceChild(n,    newExpr,    expr);    	non-compiled	[CE]  ')'  expected	2	None	replace
82	[BUG]  [BUGGY]  parent.replaceChild(n,  newExpr,  assignName);  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);    [BUGGY]  parent.replaceChild(n,  newExpr,  assignName);  [BUGGY]    reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	313	313	1	replace	parent.replaceChild(n,  newExpr,  assignName);	  parent.replaceChild(n,    newExpr,    assign);    	non-compiled	[CE]  ')'  expected	5	None	replace
83	[BUG]  [BUGGY]  parent.replaceChild(n,  newExpr)&&  NodeUtil.isNamedAssignmentOp(n);  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);    [BUGGY]  parent.replaceChild(n,  newExpr)&&  NodeUtil.isNamedAssignmentOp(n);  [BUGGY]    reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	313	313	1	replace	parent.replaceChild(n,  newExpr)&&  NodeUtil.isNamedAssignmentOp(n);	  parent.replaceChild(n,    newExpr)&&    NodeUtil.isAssignmentOp(n);    	non-compiled	[CE]  ')'  expected	8	None	replace
84	[BUG]  [BUGGY]  parent.replaceChild(n,  newExpr)&&  NodeUtil.isImmutableValue(n);  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);    [BUGGY]  parent.replaceChild(n,  newExpr)&&  NodeUtil.isImmutableValue(n);  [BUGGY]    reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	313	313	1	replace	parent.replaceChild(n,  newExpr)&&  NodeUtil.isImmutableValue(n);	  parent.replaceChild(n,    newExpr)&&    NodeUtil.isAssignmentOp(n);    	non-compiled	[CE]  ')'  expected	8	None	replace
85	[BUG]  [BUGGY]  parent.replaceChild(n,  newExpr)&&  NodeUtil.isFunctionAnswer(n);  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);    [BUGGY]  parent.replaceChild(n,  newExpr)&&  NodeUtil.isFunctionAnswer(n);  [BUGGY]    reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	313	313	1	replace	parent.replaceChild(n,  newExpr)&&  NodeUtil.isFunctionAnswer(n);	  parent.replaceChild(n,    newExpr)&&    NodeUtil.isAssignmentOp(n);    	non-compiled	[CE]  ')'  expected	8	None	replace
86	[BUG]  [BUGGY]  parent.replaceChild(n,  newExpr  *  1);  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);    [BUGGY]  parent.replaceChild(n,  newExpr  *  1);  [BUGGY]    reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	313	313	1	replace	parent.replaceChild(n,  newExpr  *  1);	  parent.replaceChild(n,    newExpr    -    1);    	non-compiled	[CE]  ')'  expected	3	None	replace
87	[BUG]  [BUGGY]  newExpr.addChildToFront(cond);  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);    [BUGGY]  newExpr.addChildToFront(cond);  [BUGGY]    reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	313	313	1	replace	newExpr.addChildToFront(cond);	  newExpr.removeChild(parent);    	non-compiled	[CE]  ')'  expected	13	None	replace
88	[BUG]  [BUGGY]  newExpr.addChildToFront(expr);  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);    [BUGGY]  newExpr.addChildToFront(expr);  [BUGGY]    reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	313	313	1	replace	newExpr.addChildToFront(expr);	  newExpr.removeChild(parent);    	non-compiled	[CE]  ')'  expected	13	None	replace
89	[BUG]  [BUGGY]  newExpr.addChildToFront(n);  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);    [BUGGY]  newExpr.addChildToFront(n);  [BUGGY]    reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	313	313	1	replace	newExpr.addChildToFront(n);	  newExpr.removeChild(parent);    	non-compiled	[CE]  ')'  expected	13	None	replace
90	[BUG]  [BUGGY]  NodeUtil.removeChild(newExpr,  and);  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);    [BUGGY]  NodeUtil.removeChild(newExpr,  and);  [BUGGY]    reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	313	313	1	replace	NodeUtil.removeChild(newExpr,  and);	  NodeUtil.removeChild(parent,    newExpr);    	non-compiled	[CE]  ')'  expected	11	None	replace
91	[BUG]  [BUGGY]  parent.replaceChild(n,  newExpr).replaceChild(and,  newExpr);  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);    [BUGGY]  parent.replaceChild(n,  newExpr).replaceChild(and,  newExpr);  [BUGGY]    reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	313	313	1	replace	parent.replaceChild(n,  newExpr).replaceChild(and,  newExpr);	  parent.replaceChild(n,    newExpr).replaceChild(n,    newExpr);    	non-compiled	[CE]  ')'  expected	10	None	replace
92	[BUG]  [BUGGY]  NodeUtil.copyInformationFrom(newExpr);  newExpr.removeChild(cond);  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);    [BUGGY]  NodeUtil.copyInformationFrom(newExpr);  newExpr.removeChild(cond);  [BUGGY]    reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	313	313	1	replace	NodeUtil.copyInformationFrom(newExpr);  newExpr.removeChild(cond);	      	non-compiled	[CE]  ')'  expected	6	None	replace
93	[BUG]  [BUGGY]  NodeUtil.copyInformationFrom(cond,  expr.getFirstChild(),  newExpr);  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);    [BUGGY]  NodeUtil.copyInformationFrom(cond,  expr.getFirstChild(),  newExpr);  [BUGGY]    reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	313	313	1	replace	NodeUtil.copyInformationFrom(cond,  expr.getFirstChild(),  newExpr);	      	non-compiled	[CE]  ')'  expected	6	None	replace
94	[BUG]  [BUGGY]  NodeUtil.copyInformationFrom(cond,  expr.getFirstChild());  [CE]  ')'  expected  [FE]                      AssertionFailedError    [CONTEXT]    isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);    [BUGGY]  NodeUtil.copyInformationFrom(cond,  expr.getFirstChild());  [BUGGY]    reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	313	313	1	replace	NodeUtil.copyInformationFrom(cond,  expr.getFirstChild());	      	non-compiled	[CE]  ')'  expected	6	None	replace
