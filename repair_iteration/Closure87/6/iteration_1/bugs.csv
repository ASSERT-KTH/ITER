bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  parent.replaceChild(n,  newExpr);  [CE]  ')'  expected  [FE]    AssertionFailedError  [CONTEXT]  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  [BUGGY]  parent.replaceChild(n,  newExpr);  [BUGGY]    return  newExpr;  }  return  n;  }      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	314	314	1	replace	parent.replaceChild(n,  newExpr);	reportCodeChange();  	non-compiled	[CE]  ')'  expected	11	None	replace
2	[BUG]  [BUGGY]  n.removeChild(cond);  [CE]  ')'  expected  [FE]      AssertionFailedError  [CONTEXT]  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  [BUGGY]  n.removeChild(cond);  [BUGGY]    return  newExpr;  }  return  n;  }      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	314	314	1	replace	n.removeChild(cond);	reportCodeChange();  	non-compiled	[CE]  ')'  expected	11	None	replace
3	[BUG]  [BUGGY]  n.removeChild(n);  [CE]  ')'  expected  [FE]        AssertionFailedError  [CONTEXT]  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  [BUGGY]  n.removeChild(n);  [BUGGY]    return  newExpr;  }  return  n;  }      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	314	314	1	replace	n.removeChild(n);	reportCodeChange();  	non-compiled	[CE]  ')'  expected	11	None	replace
4	[BUG]  [BUGGY]  n.removeChild(newExpr);  [CE]  ')'  expected  [FE]          AssertionFailedError  [CONTEXT]  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  [BUGGY]  n.removeChild(newExpr);  [BUGGY]    return  newExpr;  }  return  n;  }      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	314	314	1	replace	n.removeChild(newExpr);	reportCodeChange();  	non-compiled	[CE]  ')'  expected	11	None	replace
5	[BUG]  [BUGGY]    [CE]  ')'  expected  [FE]            AssertionFailedError  [CONTEXT]  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  [BUGGY]    [BUGGY]    return  newExpr;  }  return  n;  }      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	314	314	1	replace	  	reportCodeChange();  	non-compiled	[CE]  ')'  expected	11	None	replace
6	[BUG]  [BUGGY]  n.removeChild(expr);  [CE]  ')'  expected  [FE]    AssertionFailedError  [CONTEXT]  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  [BUGGY]  n.removeChild(expr);  [BUGGY]    return  newExpr;  }  return  n;  }      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	314	314	1	replace	n.removeChild(expr);	reportCodeChange();  	non-compiled	[CE]  ')'  expected	11	None	replace
7	[BUG]  [BUGGY]  n.removeChild(parent);  [CE]  ')'  expected  [FE]      AssertionFailedError  [CONTEXT]  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  [BUGGY]  n.removeChild(parent);  [BUGGY]    return  newExpr;  }  return  n;  }      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	314	314	1	replace	n.removeChild(parent);	reportCodeChange();  	non-compiled	[CE]  ')'  expected	11	None	replace
8	[BUG]  [BUGGY]  parent.removeChild(n);  [CE]  ')'  expected  [FE]    AssertionFailedError  [CONTEXT]  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  [BUGGY]  parent.removeChild(n);  [BUGGY]    return  newExpr;  }  return  n;  }      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	314	314	1	replace	parent.removeChild(n);	reportCodeChange();  	non-compiled	[CE]  ')'  expected	11	None	replace
9	[BUG]  [BUGGY]  repaint();  [CE]  ')'  expected  [FE]      AssertionFailedError  [CONTEXT]  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);  Node  newExpr  =  NodeUtil.newExpr(and);  parent.replaceChild(n,  newExpr);  [BUGGY]  repaint();  [BUGGY]    return  newExpr;  }  return  n;  }      [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	314	314	1	replace	repaint();	reportCodeChange();  	non-compiled	[CE]  ')'  expected	11	None	replace
