bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0.getNext())  {  Preconditions.checkState(arg0.getNext().getType()  ==  Token.FUNCTION);  }  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }    [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0.getNext())  {  Preconditions.checkState(arg0.getNext().getType()  ==  Token.FUNCTION);  }  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0.getNext())  {  Preconditions.checkState(arg0.getNext().getType()  ==  Token.FUNCTION);  }	      	non-compiled	[CE]  	8	None	replace
2	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0.getNext())  {  Preconditions.checkState(arg0.getNext().getType()  ==  Token.NAME);  }  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }    [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0.getNext())  {  Preconditions.checkState(arg0.getNext().getType()  ==  Token.NAME);  }  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0.getNext())  {  Preconditions.checkState(arg0.getNext().getType()  ==  Token.NAME);  }	      	non-compiled	[CE]  	8	None	replace
3	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0.getNext())  {  Preconditions.checkNotNull(arg0);  }  [CE]  [FE]                          AssertionFailedError    [CONTEXT]    }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }    [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0.getNext())  {  Preconditions.checkNotNull(arg0);  }  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0.getNext())  {  Preconditions.checkNotNull(arg0);  }	      	non-compiled	[CE]  	8	None	replace
4	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0.getNext())  {  Node  newOp  =  arg0.getNext();  if(newOp.getType()  ==  Token.FUNCTION)  {  reportCodeChange();  }  [CE]  [FE]                            AssertionFailedError    [CONTEXT]    }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }    [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0.getNext())  {  Node  newOp  =  arg0.getNext();  if(newOp.getType()  ==  Token.FUNCTION)  {  reportCodeChange();  }  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0.getNext())  {  Node  newOp  =  arg0.getNext();  if(newOp.getType()  ==  Token.FUNCTION)  {  reportCodeChange();  }	      	non-compiled	[CE]  	8	None	replace
5	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0.getNext())  {  Preconditions.checkState(arg0.getNext().getType()  ==  Token.VAR);  }  [CE]  [FE]                              AssertionFailedError    [CONTEXT]    }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }    [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0.getNext())  {  Preconditions.checkState(arg0.getNext().getType()  ==  Token.VAR);  }  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0.getNext())  {  Preconditions.checkState(arg0.getNext().getType()  ==  Token.VAR);  }	      	non-compiled	[CE]  	8	None	replace
6	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0.getNext())  {  Node  arg0  =  arg0.getNext();  if(arg0.getNext().getType()  ==  Token.FUNCTION)  {  reportCodeChange  [CE]  [FE]                                AssertionFailedError    [CONTEXT]    }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }    [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0.getNext())  {  Node  arg0  =  arg0.getNext();  if(arg0.getNext().getType()  ==  Token.FUNCTION)  {  reportCodeChange  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0.getNext())  {  Node  arg0  =  arg0.getNext();  if(arg0.getNext().getType()  ==  Token.FUNCTION)  {  reportCodeChange	      	non-compiled	[CE]  	8	None	replace
7	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0.getNext())  {  Preconditions.checkArgument(arg0.getNext().getType()  ==  Token.NAME);  }  [CE]  [FE]                                  AssertionFailedError    [CONTEXT]    }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }    [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0.getNext())  {  Preconditions.checkArgument(arg0.getNext().getType()  ==  Token.NAME);  }  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0.getNext())  {  Preconditions.checkArgument(arg0.getNext().getType()  ==  Token.NAME);  }	      	non-compiled	[CE]  	8	None	replace
8	[BUG]  [BUGGY]  return  n.getParent().clone();  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }    [BUGGY]  return  n.getParent().clone();  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getParent().clone();	  return    n.clone();    	non-compiled	[CE]  	6	None	replace
9	[BUG]  [BUGGY]  return  n.removeLastChild();  [CE]  [FE]        AssertionFailedError    [CONTEXT]    }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }    [BUGGY]  return  n.removeLastChild();  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.removeLastChild();	  return    n.removeFirstChild();    	non-compiled	[CE]  	9	None	replace
10	[BUG]  [BUGGY]  removeChild(n.getFirstChild());  [CE]  [FE]          AssertionFailedError    [CONTEXT]    }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }    [BUGGY]  removeChild(n.getFirstChild());  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	removeChild(n.getFirstChild());	  return    n.removeFirstChild();    	non-compiled	[CE]  	9	None	replace
11	[BUG]  [BUGGY]  return  n.cloneFoldNode();  [CE]  [FE]              AssertionFailedError    [CONTEXT]    }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }    [BUGGY]  return  n.cloneFoldNode();  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.cloneFoldNode();	  return    n.cloneTree();    	non-compiled	[CE]  	4	None	replace
12	[BUG]  [BUGGY]  return  n.getType()!=  Token.FUNCTION;  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }    [BUGGY]  return  n.getType()!=  Token.FUNCTION;  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()!=  Token.FUNCTION;	  return    n.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	7	None	replace
13	[BUG]  [BUGGY]  return  n.getFirstChild().getType()  ==  Token.FUNCTION;  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }    [BUGGY]  return  n.getFirstChild().getType()  ==  Token.FUNCTION;  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getFirstChild().getType()  ==  Token.FUNCTION;	  return    n.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	7	None	replace
14	[BUG]  [BUGGY]  return  n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild().getType()  ==  Token.EXPR_RESULT;  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }    [BUGGY]  return  n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild().getType()  ==  Token.EXPR_RESULT;  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild().getType()  ==  Token.EXPR_RESULT;	  return    n.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	7	None	replace
15	[BUG]  [BUGGY]  return  n.getType()  ==  Token.FUNCTION  ||  n.getParent().getType()  ==  Token.EXPR_RESULT;  [CE]  [FE]                          AssertionFailedError    [CONTEXT]    }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }    [BUGGY]  return  n.getType()  ==  Token.FUNCTION  ||  n.getParent().getType()  ==  Token.EXPR_RESULT;  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  ==  Token.FUNCTION  ||  n.getParent().getType()  ==  Token.EXPR_RESULT;	  return    n.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	7	None	replace
16	[BUG]  [BUGGY]  return  n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild().getType()  ==  Token.NAME;  [CE]  [FE]                            AssertionFailedError    [CONTEXT]    }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }    [BUGGY]  return  n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild().getType()  ==  Token.NAME;  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild().getType()  ==  Token.NAME;	  return    n.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	7	None	replace
17	[BUG]  [BUGGY]  return  n.getType()  ==  Token.FUNCTION  ||  n.getParent().getType()  ==  Token.VAR;  [CE]  [FE]                              AssertionFailedError    [CONTEXT]    }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }    [BUGGY]  return  n.getType()  ==  Token.FUNCTION  ||  n.getParent().getType()  ==  Token.VAR;  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  ==  Token.FUNCTION  ||  n.getParent().getType()  ==  Token.VAR;	  return    n.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	7	None	replace
18	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getChildCount()  :  n.getParent();  [CE]  [FE]                AssertionFailedError    [CONTEXT]    }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }    [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getChildCount()  :  n.getParent();  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  ==  Token.NAME?  n.getChildCount()  :  n.getParent();	  return    n.getParent();    	non-compiled	[CE]  	5	None	replace
19	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getFirstChild()  :  n.getNext();  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }    [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getFirstChild()  :  n.getNext();  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  ==  Token.NAME?  n.getFirstChild()  :  n.getNext();	  return    n.getParent();    	non-compiled	[CE]  	5	None	replace
20	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getParent()  :  null;  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }    [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getParent()  :  null;  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  ==  Token.NAME?  n.getParent()  :  null;	  return    n.getParent();    	non-compiled	[CE]  	5	None	replace
21	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getChildCount()  :  n.getNext();  [CE]  [FE]        AssertionFailedError    [CONTEXT]    }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }    [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getChildCount()  :  n.getNext();  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  ==  Token.NAME?  n.getChildCount()  :  n.getNext();	  return    n.getNext();    	non-compiled	[CE]  	1	None	replace
22	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getLastChild()  :  n.getNext();  [CE]  [FE]          AssertionFailedError    [CONTEXT]    }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }    [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getLastChild()  :  n.getNext();  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  ==  Token.NAME?  n.getLastChild()  :  n.getNext();	  return    n.getNext();    	non-compiled	[CE]  	1	None	replace
23	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getLastChild()  :  n.getLastChild();  [CE]  [FE]          AssertionFailedError    [CONTEXT]    }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }    [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getLastChild()  :  n.getLastChild();  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  ==  Token.NAME?  n.getLastChild()  :  n.getLastChild();	  return    n.getFirstChild();    	non-compiled	[CE]  	2	None	replace
24	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getFirstChild()  :  n.getLastChild();  [CE]  [FE]            AssertionFailedError    [CONTEXT]    }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }    [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getFirstChild()  :  n.getLastChild();  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  ==  Token.NAME?  n.getFirstChild()  :  n.getLastChild();	  return    n.getFirstChild();    	non-compiled	[CE]  	2	None	replace
25	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getFirstChild()  :  null;  [CE]  [FE]              AssertionFailedError    [CONTEXT]    }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }    [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getFirstChild()  :  null;  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  ==  Token.NAME?  n.getFirstChild()  :  null;	  return    n.getFirstChild();    	non-compiled	[CE]  	2	None	replace
26	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getChildCount()  :  n.getFirstChild();  [CE]  [FE]                AssertionFailedError    [CONTEXT]    }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }    [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getChildCount()  :  n.getFirstChild();  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  ==  Token.NAME?  n.getChildCount()  :  n.getFirstChild();	  return    n.getFirstChild();    	non-compiled	[CE]  	2	None	replace
27	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getChildCount()  :  n.getLastChild();  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }    [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getChildCount()  :  n.getLastChild();  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  ==  Token.NAME?  n.getChildCount()  :  n.getLastChild();	  return    n.getFirstChild();    	non-compiled	[CE]  	2	None	replace
28	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getLastChild()  :  n.getFirstChild();  [CE]  [FE]            AssertionFailedError    [CONTEXT]    }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }    [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getLastChild()  :  n.getFirstChild();  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  ==  Token.NAME?  n.getLastChild()  :  n.getFirstChild();	  return    n.getLastChild();    	non-compiled	[CE]  	3	None	replace
29	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getString()  :  n.getLastChild();  [CE]  [FE]              AssertionFailedError    [CONTEXT]    }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }    [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getString()  :  n.getLastChild();  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  ==  Token.NAME?  n.getString()  :  n.getLastChild();	  return    n.getLastChild();    	non-compiled	[CE]  	3	None	replace
30	[BUG]  [BUGGY]  return  n.getLastChild()  +  1;  [CE]  [FE]                AssertionFailedError    [CONTEXT]    }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }    [BUGGY]  return  n.getLastChild()  +  1;  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getLastChild()  +  1;	  return    n.getLastChild();    	non-compiled	[CE]  	3	None	replace
31	[BUG]  [BUGGY]  return  n.replaceChild(n,  newLiteralNode);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }    [BUGGY]  return  n.replaceChild(n,  newLiteralNode);  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.replaceChild(n,  newLiteralNode);	  return    n.removeFirstChild();    	non-compiled	[CE]  	9	None	replace
32	[BUG]  [BUGGY]  return  n.getLastChild().getNext();  [CE]  [FE]            AssertionFailedError    [CONTEXT]    }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }    [BUGGY]  return  n.getLastChild().getNext();  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getLastChild().getNext();	  return    n.getLastChild();    	non-compiled	[CE]  	3	None	replace
33	[BUG]  [BUGGY]  return  n.getPreviousChild();  [CE]  [FE]              AssertionFailedError    [CONTEXT]    }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }    [BUGGY]  return  n.getPreviousChild();  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getPreviousChild();	  return    n.getLastChild();    	non-compiled	[CE]  	3	None	replace
34	[BUG]  [BUGGY]  return  n.getLastChild().getString();  [CE]  [FE]                AssertionFailedError    [CONTEXT]    }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }    [BUGGY]  return  n.getLastChild().getString();  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getLastChild().getString();	  return    n.getLastChild();    	non-compiled	[CE]  	3	None	replace
35	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getLastChild()  :  n;  [CE]  [FE]          AssertionFailedError    [CONTEXT]    }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }    [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getLastChild()  :  n;  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  ==  Token.NAME?  n.getLastChild()  :  n;	  return    n.getFirstChild();    	non-compiled	[CE]  	2	None	replace
36	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  null  :  n.getFirstChild();  [CE]  [FE]            AssertionFailedError    [CONTEXT]    }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }    [BUGGY]  return  n.getType()  ==  Token.NAME?  null  :  n.getFirstChild();  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  ==  Token.NAME?  null  :  n.getFirstChild();	  return    n.getFirstChild();    	non-compiled	[CE]  	2	None	replace
37	[BUG]  [BUGGY]  return  n.getPrevious();  [CE]  [FE]                AssertionFailedError    [CONTEXT]    }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }    [BUGGY]  return  n.getPrevious();  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getPrevious();	  return    n.getParent();    	non-compiled	[CE]  	5	None	replace
38	[BUG]  [BUGGY]  return  n.getNameNode();  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }    [BUGGY]  return  n.getNameNode();  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getNameNode();	  return    n.getParent();    	non-compiled	[CE]  	5	None	replace
39	[BUG]  [BUGGY]  return  n.getType()  ==  Token.GETPROP;  [CE]  [FE]        AssertionFailedError    [CONTEXT]    }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }    [BUGGY]  return  n.getType()  ==  Token.GETPROP;  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  ==  Token.GETPROP;	  return    n.getNext();    	non-compiled	[CE]  	1	None	replace
40	[BUG]  [BUGGY]  return  n.cloneNode();  [CE]  [FE]              AssertionFailedError    [CONTEXT]    }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }    [BUGGY]  return  n.cloneNode();  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.cloneNode();	  return    n.cloneTree();    	non-compiled	[CE]  	4	None	replace
41	[BUG]  [BUGGY]  return  n.cloneSyntax();  [CE]  [FE]                AssertionFailedError    [CONTEXT]    }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }    [BUGGY]  return  n.cloneSyntax();  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.cloneSyntax();	  return    n.cloneTree();    	non-compiled	[CE]  	4	None	replace
42	[BUG]  [BUGGY]  n.removeChild(newLiteralNode);  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }    [BUGGY]  n.removeChild(newLiteralNode);  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	n.removeChild(newLiteralNode);	      	non-compiled	[CE]  	8	None	replace
43	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0)  {  Node  newOp  =  arg0.getNext();  if(newOp!=  null)  {  return  newOp;  }  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }    [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0)  {  Node  newOp  =  arg0.getNext();  if(newOp!=  null)  {  return  newOp;  }  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0)  {  Node  newOp  =  arg0.getNext();  if(newOp!=  null)  {  return  newOp;  }	      	non-compiled	[CE]  	8	None	replace
44	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0)  {  Node  newOp  =  arg0.getNext();  if(newOp!=  null)  {  reportCodeChange();  }  [CE]  [FE]                          AssertionFailedError    [CONTEXT]    }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }    [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0)  {  Node  newOp  =  arg0.getNext();  if(newOp!=  null)  {  reportCodeChange();  }  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0)  {  Node  newOp  =  arg0.getNext();  if(newOp!=  null)  {  reportCodeChange();  }	      	non-compiled	[CE]  	8	None	replace
45	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0)  {  Preconditions.checkNotNull(arg0);  }  [CE]  [FE]                            AssertionFailedError    [CONTEXT]    }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }    [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0)  {  Preconditions.checkNotNull(arg0);  }  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0)  {  Preconditions.checkNotNull(arg0);  }	      	non-compiled	[CE]  	8	None	replace
46	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0)  {  Node  arg0  =  arg0.getNext();  if(arg0!=  null)  {  reportCodeChange();  }  [CE]  [FE]                              AssertionFailedError    [CONTEXT]    }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }    [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0)  {  Node  arg0  =  arg0.getNext();  if(arg0!=  null)  {  reportCodeChange();  }  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0)  {  Node  arg0  =  arg0.getNext();  if(arg0!=  null)  {  reportCodeChange();  }	      	non-compiled	[CE]  	8	None	replace
47	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0  =  arg0.getNext())  {  Node  newOp  =  arg0.getNext();  if(newOp!=  null)  {  return  newOp;  }  [CE]  [FE]                                AssertionFailedError    [CONTEXT]    }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }    [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0  =  arg0.getNext())  {  Node  newOp  =  arg0.getNext();  if(newOp!=  null)  {  return  newOp;  }  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0  =  arg0.getNext())  {  Node  newOp  =  arg0.getNext();  if(newOp!=  null)  {  return  newOp;  }	      	non-compiled	[CE]  	8	None	replace
48	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0)  {  Node  newOp  =  arg0.getNext();  if(newOp!=  null)  {  newOp  =  newOp;  }  [CE]  [FE]                                  AssertionFailedError    [CONTEXT]    }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }    [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0)  {  Node  newOp  =  arg0.getNext();  if(newOp!=  null)  {  newOp  =  newOp;  }  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0)  {  Node  newOp  =  arg0.getNext();  if(newOp!=  null)  {  newOp  =  newOp;  }	      	non-compiled	[CE]  	8	None	replace
49	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME;  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }    [BUGGY]  return  n.getType()  ==  Token.NAME;  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  ==  Token.NAME;	  return    n.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	7	None	replace
50	[BUG]  [BUGGY]  return  n.getType()  ==  Token.EMPTY;  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }    [BUGGY]  return  n.getType()  ==  Token.EMPTY;  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  ==  Token.EMPTY;	  return    n.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	7	None	replace
51	[BUG]  [BUGGY]  return  n.getType()  ==  Token.STRING;  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }    [BUGGY]  return  n.getType()  ==  Token.STRING;  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  ==  Token.STRING;	  return    n.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	7	None	replace
52	[BUG]  [BUGGY]  return  n.getType()  ==  Token.FUNCTION  ||  n.hasChildren();  [CE]  [FE]                          AssertionFailedError    [CONTEXT]    }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }    [BUGGY]  return  n.getType()  ==  Token.FUNCTION  ||  n.hasChildren();  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  ==  Token.FUNCTION  ||  n.hasChildren();	  return    n.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	7	None	replace
53	[BUG]  [BUGGY]  return  n.getParent().cloneTree();  [CE]  [FE]              AssertionFailedError    [CONTEXT]    }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }    [BUGGY]  return  n.getParent().cloneTree();  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getParent().cloneTree();	  return    n.cloneTree();    	non-compiled	[CE]  	4	None	replace
54	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0.getNext())  {  Node  arg0  =  arg0.getNext();  if(arg0.getNext().getNext().getNext().getNext().get  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }    [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0.getNext())  {  Node  arg0  =  arg0.getNext();  if(arg0.getNext().getNext().getNext().getNext().get  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0.getNext())  {  Node  arg0  =  arg0.getNext();  if(arg0.getNext().getNext().getNext().getNext().get	      	non-compiled	[CE]  	8	None	replace
55	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0)  {  Preconditions.checkState(arg0.getType()  ==  Token.VAR);  newOp  =  arg0.getNext();  }  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }    [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0)  {  Preconditions.checkState(arg0.getType()  ==  Token.VAR);  newOp  =  arg0.getNext();  }  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0)  {  Preconditions.checkState(arg0.getType()  ==  Token.VAR);  newOp  =  arg0.getNext();  }	      	non-compiled	[CE]  	8	None	replace
56	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0)  {  Preconditions.checkArgument(arg0.getType()  ==  Token.VAR);  newOp  =  arg0.getNext();  }  [CE]  [FE]                          AssertionFailedError    [CONTEXT]    }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }    [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0)  {  Preconditions.checkArgument(arg0.getType()  ==  Token.VAR);  newOp  =  arg0.getNext();  }  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0)  {  Preconditions.checkArgument(arg0.getType()  ==  Token.VAR);  newOp  =  arg0.getNext();  }	      	non-compiled	[CE]  	8	None	replace
57	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0.getNext())  {  Node  arg0  =  arg0.getNext();  if(arg0.getNext().getNext().getNext().getNext  [CE]  [FE]                            AssertionFailedError    [CONTEXT]    }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }    [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0.getNext())  {  Node  arg0  =  arg0.getNext();  if(arg0.getNext().getNext().getNext().getNext  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0.getNext())  {  Node  arg0  =  arg0.getNext();  if(arg0.getNext().getNext().getNext().getNext	      	non-compiled	[CE]  	8	None	replace
58	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0)  {  Preconditions.checkState(arg0.getType()  ==  Token.VAR);  }  [CE]  [FE]                              AssertionFailedError    [CONTEXT]    }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }    [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0)  {  Preconditions.checkState(arg0.getType()  ==  Token.VAR);  }  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0)  {  Preconditions.checkState(arg0.getType()  ==  Token.VAR);  }	      	non-compiled	[CE]  	8	None	replace
59	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0.getNext())  {  Node  arg0  =  arg0.getNext();  if(arg0.getNext().getNext().getNext().getNext().getNext  [CE]  [FE]                                AssertionFailedError    [CONTEXT]    }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }    [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0.getNext())  {  Node  arg0  =  arg0.getNext();  if(arg0.getNext().getNext().getNext().getNext().getNext  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0.getNext())  {  Node  arg0  =  arg0.getNext();  if(arg0.getNext().getNext().getNext().getNext().getNext	      	non-compiled	[CE]  	8	None	replace
60	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0)  {  Node  arg0  =  arg0.getNext();  if(arg0.getNext().getNext().getNext().getNext().getNext().get  [CE]  [FE]                                  AssertionFailedError    [CONTEXT]    }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }    [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0)  {  Node  arg0  =  arg0.getNext();  if(arg0.getNext().getNext().getNext().getNext().getNext().get  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0)  {  Node  arg0  =  arg0.getNext();  if(arg0.getNext().getNext().getNext().getNext().getNext().get	      	non-compiled	[CE]  	8	None	replace
61	[BUG]  [BUGGY]  return  n.getType()  ==  Token.VAR;  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }    [BUGGY]  return  n.getType()  ==  Token.VAR;  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  ==  Token.VAR;	  return    n.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	7	None	replace
62	[BUG]  [BUGGY]  return  n.removeChild(n.getFirstChild());  [CE]  [FE]        AssertionFailedError    [CONTEXT]    }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }    [BUGGY]  return  n.removeChild(n.getFirstChild());  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.removeChild(n.getFirstChild());	  return    n.removeFirstChild();    	non-compiled	[CE]  	9	None	replace
63	[BUG]  [BUGGY]  return  n.removeChild(n.getLastChild());  [CE]  [FE]          AssertionFailedError    [CONTEXT]    }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }    [BUGGY]  return  n.removeChild(n.getLastChild());  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.removeChild(n.getLastChild());	  return    n.removeFirstChild();    	non-compiled	[CE]  	9	None	replace
64	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getParent()  :  n.getNext();  [CE]  [FE]        AssertionFailedError    [CONTEXT]    }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }    [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getParent()  :  n.getNext();  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  ==  Token.NAME?  n.getParent()  :  n.getNext();	  return    n.getNext();    	non-compiled	[CE]  	1	None	replace
65	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getFirstChild()  :  n;  [CE]  [FE]          AssertionFailedError    [CONTEXT]    }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }    [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getFirstChild()  :  n;  [BUGGY]    }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  ==  Token.NAME?  n.getFirstChild()  :  n;	  return    n.getFirstChild();    	non-compiled	[CE]  	2	None	replace
