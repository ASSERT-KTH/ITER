bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  n.getNext();  [CE]  [FE]    AssertionFailedError  [CONTEXT]  }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }  [BUGGY]  return  n.getNext();  [BUGGY]  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getNext();	return  n;  	non-compiled	[CE]  	93	None	replace
2	[BUG]  [BUGGY]  return  n.getFirstChild();  [CE]  [FE]      AssertionFailedError  [CONTEXT]  }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }  [BUGGY]  return  n.getFirstChild();  [BUGGY]  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getFirstChild();	return  n;  	non-compiled	[CE]  	93	None	replace
3	[BUG]  [BUGGY]  return  n.getLastChild();  [CE]  [FE]        AssertionFailedError  [CONTEXT]  }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }  [BUGGY]  return  n.getLastChild();  [BUGGY]  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getLastChild();	return  n;  	non-compiled	[CE]  	93	None	replace
4	[BUG]  [BUGGY]  return  n.cloneTree();  [CE]  [FE]          AssertionFailedError  [CONTEXT]  }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }  [BUGGY]  return  n.cloneTree();  [BUGGY]  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.cloneTree();	return  n;  	non-compiled	[CE]  	93	None	replace
5	[BUG]  [BUGGY]  return  n.getParent();  [CE]  [FE]            AssertionFailedError  [CONTEXT]  }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }  [BUGGY]  return  n.getParent();  [BUGGY]  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getParent();	return  n;  	non-compiled	[CE]  	93	None	replace
6	[BUG]  [BUGGY]  return  n.clone();  [CE]  [FE]              AssertionFailedError  [CONTEXT]  }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }  [BUGGY]  return  n.clone();  [BUGGY]  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.clone();	return  n;  	non-compiled	[CE]  	93	None	replace
7	[BUG]  [BUGGY]  return  n.getType()  ==  Token.FUNCTION;  [CE]  [FE]                AssertionFailedError  [CONTEXT]  }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }  [BUGGY]  return  n.getType()  ==  Token.FUNCTION;  [BUGGY]  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  ==  Token.FUNCTION;	return  n;  	non-compiled	[CE]  	93	None	replace
8	[BUG]  [BUGGY]    [CE]  [FE]                  AssertionFailedError  [CONTEXT]  }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }  [BUGGY]    [BUGGY]  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	  	return  n;  	non-compiled	[CE]  	93	None	replace
9	[BUG]  [BUGGY]  return  n.removeFirstChild();  [CE]  [FE]    AssertionFailedError  [CONTEXT]  }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }  [BUGGY]  return  n.removeFirstChild();  [BUGGY]  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.removeFirstChild();	return  n;  	non-compiled	[CE]  	93	None	replace
