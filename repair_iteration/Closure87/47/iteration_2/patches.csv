bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0)  {  Node  arg0  =  arg0.getNext();  if(arg0!=  null)  {  reportCodeChange();  }  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0)  {  Node  arg0  =  arg0.getNext();  if(arg0!=  null)  {  reportCodeChange();  }  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0)  {  Node  arg0  =  arg0.getNext();  if(arg0!=  null)  {  reportCodeChange();  }	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0)    {    Node    arg0    =    arg0.getNext();    if(arg0!=    null)    {    reportCodeChange();    }    	non-compiled	[CE]  	46	None	replace
2	[BUG]  [BUGGY]  Node  newLiteralNode  =  n.getFirstChild();  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  Node  newLiteralNode  =  n.getFirstChild();  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	Node  newLiteralNode  =  n.getFirstChild();	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0)    {    Node    arg0    =    arg0.getNext();    if(arg0!=    null)    {    reportCodeChange();    }    	non-compiled	[CE]  	46	None	replace
3	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0)  {  Node  newLiteralNode  =  arg0.getNext();  if(newLiteralNode!=  null)  {  reportCodeChange();  }  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0)  {  Node  newLiteralNode  =  arg0.getNext();  if(newLiteralNode!=  null)  {  reportCodeChange();  }  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0)  {  Node  newLiteralNode  =  arg0.getNext();  if(newLiteralNode!=  null)  {  reportCodeChange();  }	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0)    {    Node    arg0    =    arg0.getNext();    if(arg0!=    null)    {    reportCodeChange();    }    	non-compiled	[CE]  	46	None	replace
4	[BUG]  [BUGGY]  Node  arg0  =  n.getFirstChild();  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  Node  arg0  =  n.getFirstChild();  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	Node  arg0  =  n.getFirstChild();	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0)    {    Node    arg0    =    arg0.getNext();    if(arg0!=    null)    {    reportCodeChange();    }    	non-compiled	[CE]  	46	None	replace
5	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0)  {  Node  arg0  =  arg0.getNext();  if(arg0  ==  null)  {  reportCodeChange();  }  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0)  {  Node  arg0  =  arg0.getNext();  if(arg0  ==  null)  {  reportCodeChange();  }  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0)  {  Node  arg0  =  arg0.getNext();  if(arg0  ==  null)  {  reportCodeChange();  }	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0)    {    Node    arg0    =    arg0.getNext();    if(arg0!=    null)    {    reportCodeChange();    }    	non-compiled	[CE]  	46	None	replace
6	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg  >=  null;  arg0)  {  Node  arg0  =  arg0.getNext();  if(arg0!=  null)  {  reportCodeChange();  }  [CE]  [FE]                                            AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg  >=  null;  arg0)  {  Node  arg0  =  arg0.getNext();  if(arg0!=  null)  {  reportCodeChange();  }  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg  >=  null;  arg0)  {  Node  arg0  =  arg0.getNext();  if(arg0!=  null)  {  reportCodeChange();  }	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0)    {    Node    arg0    =    arg0.getNext();    if(arg0!=    null)    {    reportCodeChange();    }    	non-compiled	[CE]  	46	None	replace
7	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg  ==  null;  arg0)  {  Node  arg0  =  arg0.getNext();  if(arg0!=  null)  {  reportCodeChange();  }  [CE]  [FE]                                              AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg  ==  null;  arg0)  {  Node  arg0  =  arg0.getNext();  if(arg0!=  null)  {  reportCodeChange();  }  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg  ==  null;  arg0)  {  Node  arg0  =  arg0.getNext();  if(arg0!=  null)  {  reportCodeChange();  }	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0)    {    Node    arg0    =    arg0.getNext();    if(arg0!=    null)    {    reportCodeChange();    }    	non-compiled	[CE]  	46	None	replace
8	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0.getNext())  {  Node  arg0  =  arg0.getNext();  if(arg0.getNext().getNext().getNext().getNext  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0.getNext())  {  Node  arg0  =  arg0.getNext();  if(arg0.getNext().getNext().getNext().getNext  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0.getNext())  {  Node  arg0  =  arg0.getNext();  if(arg0.getNext().getNext().getNext().getNext	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0.getNext())    {    Node    arg0    =    arg0.getNext();    if(arg0.getNext().getNext().getNext().getNext    	non-compiled	[CE]  	57	None	replace
9	[BUG]  [BUGGY]  for(Node  arg0  =  n.getLastChild();  arg0!=  null;  arg0.getNext())  {  Node  arg0  =  arg0.getNext();  if(arg0.getNext().getNext().getNext().getNext  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getLastChild();  arg0!=  null;  arg0.getNext())  {  Node  arg0  =  arg0.getNext();  if(arg0.getNext().getNext().getNext().getNext  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getLastChild();  arg0!=  null;  arg0.getNext())  {  Node  arg0  =  arg0.getNext();  if(arg0.getNext().getNext().getNext().getNext	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0.getNext())    {    Node    arg0    =    arg0.getNext();    if(arg0.getNext().getNext().getNext().getNext    	non-compiled	[CE]  	57	None	replace
10	[BUG]  [BUGGY]  For(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0.getNext())  {  Node  arg0  =  arg0.getNext();  if(arg0.getNext().getNext().getNext().getNext  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  For(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0.getNext())  {  Node  arg0  =  arg0.getNext();  if(arg0.getNext().getNext().getNext().getNext  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	For(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0.getNext())  {  Node  arg0  =  arg0.getNext();  if(arg0.getNext().getNext().getNext().getNext	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0.getNext())    {    Node    arg0    =    arg0.getNext();    if(arg0.getNext().getNext().getNext().getNext    	non-compiled	[CE]  	57	None	replace
11	[BUG]  [BUGGY]  For(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0.getNext())  {  Node  arg0  =  arg0.getNext();  if(arg0.getNext().getNext().getNext().getNext  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  For(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0.getNext())  {  Node  arg0  =  arg0.getNext();  if(arg0.getNext().getNext().getNext().getNext  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	For(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0.getNext())  {  Node  arg0  =  arg0.getNext();  if(arg0.getNext().getNext().getNext().getNext	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0.getNext())    {    Node    arg0    =    arg0.getNext();    if(arg0.getNext().getNext().getNext().getNext    	non-compiled	[CE]  	57	None	replace
12	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0.getNext())  {  Node  arg0  =  arg0.getNext();  if(arg0.getNext().getNext().getNext().get  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0.getNext())  {  Node  arg0  =  arg0.getNext();  if(arg0.getNext().getNext().getNext().get  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0.getNext())  {  Node  arg0  =  arg0.getNext();  if(arg0.getNext().getNext().getNext().get	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0.getNext())    {    Node    arg0    =    arg0.getNext();    if(arg0.getNext().getNext().getNext().getNext    	non-compiled	[CE]  	57	None	replace
13	[BUG]  [BUGGY]  Node  arg0  =  n.getLastChild();  if(arg0.getNext().getNext().getNext().getNext  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  Node  arg0  =  n.getLastChild();  if(arg0.getNext().getNext().getNext().getNext  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	Node  arg0  =  n.getLastChild();  if(arg0.getNext().getNext().getNext().getNext	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0.getNext())    {    Node    arg0    =    arg0.getNext();    if(arg0.getNext().getNext().getNext().getNext    	non-compiled	[CE]  	57	None	replace
14	[BUG]  [BUGGY]  return  n.getFirstChild().getString();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getFirstChild().getString();  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getFirstChild().getString();	  return    n.getLastChild().getString();    	non-compiled	[CE]  	34	None	replace
15	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getFirstChild().getString()  :  n.getLastChild().getString();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getFirstChild().getString()  :  n.getLastChild().getString();  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  ==  Token.NAME?  n.getFirstChild().getString()  :  n.getLastChild().getString();	  return    n.getLastChild().getString();    	non-compiled	[CE]  	34	None	replace
16	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getLastChild().getString()  :  n.getFirstChild().getString();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getLastChild().getString()  :  n.getFirstChild().getString();  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  ==  Token.NAME?  n.getLastChild().getString()  :  n.getFirstChild().getString();	  return    n.getLastChild().getString();    	non-compiled	[CE]  	34	None	replace
17	[BUG]  [BUGGY]  return  n.getLastChild().getString()  +  1;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getLastChild().getString()  +  1;  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getLastChild().getString()  +  1;	  return    n.getLastChild().getString();    	non-compiled	[CE]  	34	None	replace
18	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getLastChild().getString()  :  n.getLastChild().getString();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getLastChild().getString()  :  n.getLastChild().getString();  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  ==  Token.NAME?  n.getLastChild().getString()  :  n.getLastChild().getString();	  return    n.getLastChild().getString();    	non-compiled	[CE]  	34	None	replace
19	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getFirstChild().getNext()  :  n.getLastChild().getString();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getFirstChild().getNext()  :  n.getLastChild().getString();  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  ==  Token.NAME?  n.getFirstChild().getNext()  :  n.getLastChild().getString();	  return    n.getLastChild().getString();    	non-compiled	[CE]  	34	None	replace
20	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getFirstChild()  :  n.getParent();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getFirstChild()  :  n.getParent();  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  ==  Token.NAME?  n.getFirstChild()  :  n.getParent();	  return    n.getType()    ==    Token.NAME?    n.getFirstChild()    :    n.getNext();    	non-compiled	[CE]  	19	None	replace
21	[BUG]  [BUGGY]  return  n.getType()!=  Token.NAME?  n.getFirstChild()  :  n.getNext();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()!=  Token.NAME?  n.getFirstChild()  :  n.getNext();  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()!=  Token.NAME?  n.getFirstChild()  :  n.getNext();	  return    n.getType()    ==    Token.NAME?    n.getFirstChild()    :    n.getNext();    	non-compiled	[CE]  	19	None	replace
22	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getNext()  :  n.getFirstChild();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getNext()  :  n.getFirstChild();  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  ==  Token.NAME?  n.getNext()  :  n.getFirstChild();	  return    n.getType()    ==    Token.NAME?    n.getFirstChild()    :    n.getNext();    	non-compiled	[CE]  	19	None	replace
23	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0.getNext())  {  Node  arg0  =  arg0.getNext();  if(arg0.getNext().getType()  ==  Token.FUNCTION)  {  reportCodeChange  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0.getNext())  {  Node  arg0  =  arg0.getNext();  if(arg0.getNext().getType()  ==  Token.FUNCTION)  {  reportCodeChange  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0.getNext())  {  Node  arg0  =  arg0.getNext();  if(arg0.getNext().getType()  ==  Token.FUNCTION)  {  reportCodeChange	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0.getNext())    {    Node    arg0    =    arg0.getNext();    if(arg0.getNext().getType()    ==    Token.FUNCTION)    {    reportCodeChange    	non-compiled	[CE]  	6	None	replace
24	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0.getNext())  {  Node  arg0  =  arg0.getNext();  if(arg0.getNext().getType()  ==  Token.FUNCTION)  {  reportCode  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0.getNext())  {  Node  arg0  =  arg0.getNext();  if(arg0.getNext().getType()  ==  Token.FUNCTION)  {  reportCode  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0.getNext())  {  Node  arg0  =  arg0.getNext();  if(arg0.getNext().getType()  ==  Token.FUNCTION)  {  reportCode	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0.getNext())    {    Node    arg0    =    arg0.getNext();    if(arg0.getNext().getType()    ==    Token.FUNCTION)    {    reportCodeChange    	non-compiled	[CE]  	6	None	replace
25	[BUG]  [BUGGY]  for(Node  arg0  =  n.getLastChild();  arg0!=  null;  arg0.getNext())  {  Node  arg0  =  arg0.getNext();  if(arg0.getNext().getType()  ==  Token.FUNCTION)  {  reportCodeChange  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getLastChild();  arg0!=  null;  arg0.getNext())  {  Node  arg0  =  arg0.getNext();  if(arg0.getNext().getType()  ==  Token.FUNCTION)  {  reportCodeChange  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getLastChild();  arg0!=  null;  arg0.getNext())  {  Node  arg0  =  arg0.getNext();  if(arg0.getNext().getType()  ==  Token.FUNCTION)  {  reportCodeChange	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0.getNext())    {    Node    arg0    =    arg0.getNext();    if(arg0.getNext().getType()    ==    Token.FUNCTION)    {    reportCodeChange    	non-compiled	[CE]  	6	None	replace
26	[BUG]  [BUGGY]  For(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0.getNext())  {  Node  arg0  =  arg0.getNext();  if(arg0.getNext().getType()  ==  Token.FUNCTION)  {  reportCodeChange  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  For(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0.getNext())  {  Node  arg0  =  arg0.getNext();  if(arg0.getNext().getType()  ==  Token.FUNCTION)  {  reportCodeChange  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	For(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0.getNext())  {  Node  arg0  =  arg0.getNext();  if(arg0.getNext().getType()  ==  Token.FUNCTION)  {  reportCodeChange	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0.getNext())    {    Node    arg0    =    arg0.getNext();    if(arg0.getNext().getType()    ==    Token.FUNCTION)    {    reportCodeChange    	non-compiled	[CE]  	6	None	replace
27	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0.getNext())  {  Node  arg0  =  arg0.getNext();  if(arg0.getNext().getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                                            AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0.getNext())  {  Node  arg0  =  arg0.getNext();  if(arg0.getNext().getType()  ==  Token.FUNCTION)  {  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0.getNext())  {  Node  arg0  =  arg0.getNext();  if(arg0.getNext().getType()  ==  Token.FUNCTION)  {	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0.getNext())    {    Node    arg0    =    arg0.getNext();    if(arg0.getNext().getType()    ==    Token.FUNCTION)    {    reportCodeChange    	non-compiled	[CE]  	6	None	replace
28	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg  >=  null;  arg0.getNext())  {  Node  arg0  =  arg0.getNext();  if(arg0.getNext().getType()  ==  Token.FUNCTION)  {  reportCodeChange  [CE]  [FE]                                              AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg  >=  null;  arg0.getNext())  {  Node  arg0  =  arg0.getNext();  if(arg0.getNext().getType()  ==  Token.FUNCTION)  {  reportCodeChange  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg  >=  null;  arg0.getNext())  {  Node  arg0  =  arg0.getNext();  if(arg0.getNext().getType()  ==  Token.FUNCTION)  {  reportCodeChange	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0.getNext())    {    Node    arg0    =    arg0.getNext();    if(arg0.getNext().getType()    ==    Token.FUNCTION)    {    reportCodeChange    	non-compiled	[CE]  	6	None	replace
29	[BUG]  [BUGGY]  return  n.getLastChild().getType()  ==  Token.FUNCTION;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getLastChild().getType()  ==  Token.FUNCTION;  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getLastChild().getType()  ==  Token.FUNCTION;	  return    n.getFirstChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	13	None	replace
30	[BUG]  [BUGGY]  return  n.getFirstChild().getType()!=  Token.FUNCTION;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getFirstChild().getType()!=  Token.FUNCTION;  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getFirstChild().getType()!=  Token.FUNCTION;	  return    n.getFirstChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	13	None	replace
31	[BUG]  [BUGGY]  return  n.getFirstChild().getType()  ==  Token.FUNCTION  ||  n.getLastChild().getType()  ==  Token.EXPR_RESULT;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getFirstChild().getType()  ==  Token.FUNCTION  ||  n.getLastChild().getType()  ==  Token.EXPR_RESULT;  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getFirstChild().getType()  ==  Token.FUNCTION  ||  n.getLastChild().getType()  ==  Token.EXPR_RESULT;	  return    n.getFirstChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	13	None	replace
32	[BUG]  [BUGGY]  return  n.getFirstChild().getType()  ==  Token.FUNCTION  ||  n.getLastChild().getType()  ==  Token.FUNCTION;  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getFirstChild().getType()  ==  Token.FUNCTION  ||  n.getLastChild().getType()  ==  Token.FUNCTION;  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getFirstChild().getType()  ==  Token.FUNCTION  ||  n.getLastChild().getType()  ==  Token.FUNCTION;	  return    n.getFirstChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	13	None	replace
33	[BUG]  [BUGGY]  return  n.getLastChild().getType()!=  Token.FUNCTION;  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getLastChild().getType()!=  Token.FUNCTION;  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getLastChild().getType()!=  Token.FUNCTION;	  return    n.getFirstChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	13	None	replace
34	[BUG]  [BUGGY]  return  n.getFirstChild().getType()  ==  Token.FUNCTION  ||  n.getLastChild().getType()  ==  Token.NAME;  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getFirstChild().getType()  ==  Token.FUNCTION  ||  n.getLastChild().getType()  ==  Token.NAME;  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getFirstChild().getType()  ==  Token.FUNCTION  ||  n.getLastChild().getType()  ==  Token.NAME;	  return    n.getFirstChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	13	None	replace
35	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getNext()  :  null;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getNext()  :  null;  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  ==  Token.NAME?  n.getNext()  :  null;	  return    n.getType()    ==    Token.NAME?    n.getParent()    :    null;    	non-compiled	[CE]  	20	None	replace
36	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getString()  :  null;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getString()  :  null;  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  ==  Token.NAME?  n.getString()  :  null;	  return    n.getType()    ==    Token.NAME?    n.getParent()    :    null;    	non-compiled	[CE]  	20	None	replace
37	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getLastChild()  :  null;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getLastChild()  :  null;  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  ==  Token.NAME?  n.getLastChild()  :  null;	  return    n.getType()    ==    Token.NAME?    n.getParent()    :    null;    	non-compiled	[CE]  	20	None	replace
38	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getNameNode()  :  null;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getNameNode()  :  null;  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  ==  Token.NAME?  n.getNameNode()  :  null;	  return    n.getType()    ==    Token.NAME?    n.getParent()    :    null;    	non-compiled	[CE]  	20	None	replace
39	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getRootNode()  :  null;  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getRootNode()  :  null;  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  ==  Token.NAME?  n.getRootNode()  :  null;	  return    n.getType()    ==    Token.NAME?    n.getParent()    :    null;    	non-compiled	[CE]  	20	None	replace
40	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getFirstChild()  :  n.getPreviousChild();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getFirstChild()  :  n.getPreviousChild();  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  ==  Token.NAME?  n.getFirstChild()  :  n.getPreviousChild();	  return    n.getPreviousChild();    	non-compiled	[CE]  	33	None	replace
41	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getLastChild()  :  n.getPreviousChild();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getLastChild()  :  n.getPreviousChild();  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  ==  Token.NAME?  n.getLastChild()  :  n.getPreviousChild();	  return    n.getPreviousChild();    	non-compiled	[CE]  	33	None	replace
42	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  null  :  n.getPreviousChild();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()  ==  Token.NAME?  null  :  n.getPreviousChild();  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  ==  Token.NAME?  null  :  n.getPreviousChild();	  return    n.getPreviousChild();    	non-compiled	[CE]  	33	None	replace
43	[BUG]  [BUGGY]  for(Node  arg0  =  n.getLastChild();  arg0!=  null;  arg0.getNext())  {  Node  arg0  =  arg0.getNext();  if(arg0.getNext().getNext().getNext().get  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getLastChild();  arg0!=  null;  arg0.getNext())  {  Node  arg0  =  arg0.getNext();  if(arg0.getNext().getNext().getNext().get  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getLastChild();  arg0!=  null;  arg0.getNext())  {  Node  arg0  =  arg0.getNext();  if(arg0.getNext().getNext().getNext().get	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0.getNext())    {    Node    arg0    =    arg0.getNext();    if(arg0.getNext().getNext().getNext().getNext().get    	non-compiled	[CE]  	54	None	replace
44	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0.getNext())  {  Node  arg0  =  arg0.getNext();  if(arg0.getNext().getNext().getNext().getNext().get  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0.getNext())  {  Node  arg0  =  arg0.getNext();  if(arg0.getNext().getNext().getNext().getNext().get  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0.getNext())  {  Node  arg0  =  arg0.getNext();  if(arg0.getNext().getNext().getNext().getNext().get	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0.getNext())    {    Node    arg0    =    arg0.getNext();    if(arg0.getNext().getNext().getNext().getNext().get    	non-compiled	[CE]  	54	None	replace
45	[BUG]  [BUGGY]  For(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0.getNext())  {  Node  arg0  =  arg0.getNext();  if(arg0.getNext().getNext().getNext().get  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  For(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0.getNext())  {  Node  arg0  =  arg0.getNext();  if(arg0.getNext().getNext().getNext().get  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	For(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0.getNext())  {  Node  arg0  =  arg0.getNext();  if(arg0.getNext().getNext().getNext().get	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0.getNext())    {    Node    arg0    =    arg0.getNext();    if(arg0.getNext().getNext().getNext().getNext().get    	non-compiled	[CE]  	54	None	replace
46	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0.getNext())  {  Node  arg0  =  arg0.getNext();  if(arg0.getNext().getNext().getNext().get  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0.getNext())  {  Node  arg0  =  arg0.getNext();  if(arg0.getNext().getNext().getNext().get  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0.getNext())  {  Node  arg0  =  arg0.getNext();  if(arg0.getNext().getNext().getNext().get	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0.getNext())    {    Node    arg0    =    arg0.getNext();    if(arg0.getNext().getNext().getNext().getNext().get    	non-compiled	[CE]  	54	None	replace
47	[BUG]  [BUGGY]  For(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0.getNext())  {  Node  arg0  =  arg0.getNext();  if(arg0.getNext().getNext().getNext().getNext().get  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  For(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0.getNext())  {  Node  arg0  =  arg0.getNext();  if(arg0.getNext().getNext().getNext().getNext().get  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	For(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0.getNext())  {  Node  arg0  =  arg0.getNext();  if(arg0.getNext().getNext().getNext().getNext().get	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0.getNext())    {    Node    arg0    =    arg0.getNext();    if(arg0.getNext().getNext().getNext().getNext().get    	non-compiled	[CE]  	54	None	replace
48	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0)  {  Node  newOp  =  arg0.getNext();  if(newOp!=  null)  {  return  newOp;  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0)  {  Node  newOp  =  arg0.getNext();  if(newOp!=  null)  {  return  newOp;  }  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0)  {  Node  newOp  =  arg0.getNext();  if(newOp!=  null)  {  return  newOp;  }	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0)    {    Node    newOp    =    arg0.getNext();    if(newOp!=    null)    {    return    newOp;    }    	non-compiled	[CE]  	43	None	replace
49	[BUG]  [BUGGY]  Node  newOp  =  n.getFirstChild();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  Node  newOp  =  n.getFirstChild();  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	Node  newOp  =  n.getFirstChild();	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0)    {    Node    newOp    =    arg0.getNext();    if(newOp!=    null)    {    return    newOp;    }    	non-compiled	[CE]  	43	None	replace
50	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg  <  null;  arg0)  {  Node  newOp  =  arg0.getNext();  if(newOp!=  null)  {  return  newOp;  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg  <  null;  arg0)  {  Node  newOp  =  arg0.getNext();  if(newOp!=  null)  {  return  newOp;  }  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg  <  null;  arg0)  {  Node  newOp  =  arg0.getNext();  if(newOp!=  null)  {  return  newOp;  }	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0)    {    Node    newOp    =    arg0.getNext();    if(newOp!=    null)    {    return    newOp;    }    	non-compiled	[CE]  	43	None	replace
51	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0)  {  Node  newOp  =  arg0.getNext();  if(newOp  ==  null)  {  return  newOp;  }  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0)  {  Node  newOp  =  arg0.getNext();  if(newOp  ==  null)  {  return  newOp;  }  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0)  {  Node  newOp  =  arg0.getNext();  if(newOp  ==  null)  {  return  newOp;  }	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0)    {    Node    newOp    =    arg0.getNext();    if(newOp!=    null)    {    return    newOp;    }    	non-compiled	[CE]  	43	None	replace
52	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0)  {  newOp  =  arg0.getNext();  if(newOp!=  null)  {  return  newOp;  }  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0)  {  newOp  =  arg0.getNext();  if(newOp!=  null)  {  return  newOp;  }  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0)  {  newOp  =  arg0.getNext();  if(newOp!=  null)  {  return  newOp;  }	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0)    {    Node    newOp    =    arg0.getNext();    if(newOp!=    null)    {    return    newOp;    }    	non-compiled	[CE]  	43	None	replace
53	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg  >=  null;  arg0)  {  Node  newOp  =  arg0.getNext();  if(newOp!=  null)  {  return  newOp;  }  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg  >=  null;  arg0)  {  Node  newOp  =  arg0.getNext();  if(newOp!=  null)  {  return  newOp;  }  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg  >=  null;  arg0)  {  Node  newOp  =  arg0.getNext();  if(newOp!=  null)  {  return  newOp;  }	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0)    {    Node    newOp    =    arg0.getNext();    if(newOp!=    null)    {    return    newOp;    }    	non-compiled	[CE]  	43	None	replace
54	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getFirstChild()  :  Collections.EMPTY_LIST;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getFirstChild()  :  Collections.EMPTY_LIST;  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  ==  Token.NAME?  n.getFirstChild()  :  Collections.EMPTY_LIST;	  return    n.getType()    ==    Token.NAME?    n.getFirstChild()    :    null;    	non-compiled	[CE]  	25	None	replace
55	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getFirstChild()  :  Integer.MAX_VALUE;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getFirstChild()  :  Integer.MAX_VALUE;  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  ==  Token.NAME?  n.getFirstChild()  :  Integer.MAX_VALUE;	  return    n.getType()    ==    Token.NAME?    n.getFirstChild()    :    null;    	non-compiled	[CE]  	25	None	replace
56	[BUG]  [BUGGY]  return  n.getType()!=  Token.NAME?  n.getFirstChild()  :  null;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()!=  Token.NAME?  n.getFirstChild()  :  null;  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()!=  Token.NAME?  n.getFirstChild()  :  null;	  return    n.getType()    ==    Token.NAME?    n.getFirstChild()    :    null;    	non-compiled	[CE]  	25	None	replace
57	[BUG]  [BUGGY]  return  n.getType()!=  Token.NAME?  n.getChildCount()  :  n.getFirstChild();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()!=  Token.NAME?  n.getChildCount()  :  n.getFirstChild();  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()!=  Token.NAME?  n.getChildCount()  :  n.getFirstChild();	  return    n.getType()    ==    Token.NAME?    n.getChildCount()    :    n.getLastChild();    	non-compiled	[CE]  	27	None	replace
58	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  null  :  n.getLastChild();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()  ==  Token.NAME?  null  :  n.getLastChild();  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  ==  Token.NAME?  null  :  n.getLastChild();	  return    n.getType()    ==    Token.NAME?    null    :    n.getFirstChild();    	non-compiled	[CE]  	36	None	replace
59	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  null  :  n.getNext();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()  ==  Token.NAME?  null  :  n.getNext();  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  ==  Token.NAME?  null  :  n.getNext();	  return    n.getType()    ==    Token.NAME?    null    :    n.getFirstChild();    	non-compiled	[CE]  	36	None	replace
60	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  null  :  n.getString();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()  ==  Token.NAME?  null  :  n.getString();  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  ==  Token.NAME?  null  :  n.getString();	  return    n.getType()    ==    Token.NAME?    null    :    n.getFirstChild();    	non-compiled	[CE]  	36	None	replace
61	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  null  :  n.getChildCount();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()  ==  Token.NAME?  null  :  n.getChildCount();  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  ==  Token.NAME?  null  :  n.getChildCount();	  return    n.getType()    ==    Token.NAME?    null    :    n.getFirstChild();    	non-compiled	[CE]  	36	None	replace
62	[BUG]  [BUGGY]  return  n.getType()!=  Token.NAME?  null  :  n.getFirstChild();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()!=  Token.NAME?  null  :  n.getFirstChild();  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()!=  Token.NAME?  null  :  n.getFirstChild();	  return    n.getType()    ==    Token.NAME?    null    :    n.getFirstChild();    	non-compiled	[CE]  	36	None	replace
63	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  null  :  n.getParent();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()  ==  Token.NAME?  null  :  n.getParent();  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  ==  Token.NAME?  null  :  n.getParent();	  return    n.getType()    ==    Token.NAME?    null    :    n.getFirstChild();    	non-compiled	[CE]  	36	None	replace
64	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getChildCount()  :  n.getString();  [CE]  [FE]            AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getChildCount()  :  n.getString();  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  ==  Token.NAME?  n.getChildCount()  :  n.getString();	  return    n.getType()    ==    Token.NAME?    n.getChildCount()    :    n.getNext();    	non-compiled	[CE]  	21	None	replace
65	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME  &&  n.getLastChild()  :  n.getNext();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()  ==  Token.NAME  &&  n.getLastChild()  :  n.getNext();  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  ==  Token.NAME  &&  n.getLastChild()  :  n.getNext();	  return    n.getType()    ==    Token.NAME?    n.getLastChild()    :    n.getNext();    	non-compiled	[CE]  	22	None	replace
66	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getLastChild()  :  n.getParent();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getLastChild()  :  n.getParent();  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  ==  Token.NAME?  n.getLastChild()  :  n.getParent();	  return    n.getType()    ==    Token.NAME?    n.getLastChild()    :    n.getNext();    	non-compiled	[CE]  	22	None	replace
67	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getString()  :  n.getNext();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getString()  :  n.getNext();  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  ==  Token.NAME?  n.getString()  :  n.getNext();	  return    n.getType()    ==    Token.NAME?    n.getLastChild()    :    n.getNext();    	non-compiled	[CE]  	22	None	replace
68	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0)  {  Node  arg0  =  arg0.getNext();  if(arg0.getNext().getNext().getNext().getNext().get  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0)  {  Node  arg0  =  arg0.getNext();  if(arg0.getNext().getNext().getNext().getNext().get  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0)  {  Node  arg0  =  arg0.getNext();  if(arg0.getNext().getNext().getNext().getNext().get	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0)    {    Node    arg0    =    arg0.getNext();    if(arg0.getNext().getNext().getNext().getNext().getNext().get    	non-compiled	[CE]  	60	None	replace
69	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0)  {  Node  arg0  =  arg0.getNext();  if(arg0.getNext().getNext().getNext().getNext().getNext().get  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0)  {  Node  arg0  =  arg0.getNext();  if(arg0.getNext().getNext().getNext().getNext().getNext().get  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0)  {  Node  arg0  =  arg0.getNext();  if(arg0.getNext().getNext().getNext().getNext().getNext().get	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0)    {    Node    arg0    =    arg0.getNext();    if(arg0.getNext().getNext().getNext().getNext().getNext().get    	non-compiled	[CE]  	60	None	replace
70	[BUG]  [BUGGY]  for(Node  arg0  =  n.getLastChild();  arg0!=  null;  arg0)  {  Node  arg0  =  arg0.getNext();  if(arg0.getNext().getNext().getNext().getNext().get  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getLastChild();  arg0!=  null;  arg0)  {  Node  arg0  =  arg0.getNext();  if(arg0.getNext().getNext().getNext().getNext().get  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getLastChild();  arg0!=  null;  arg0)  {  Node  arg0  =  arg0.getNext();  if(arg0.getNext().getNext().getNext().getNext().get	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0)    {    Node    arg0    =    arg0.getNext();    if(arg0.getNext().getNext().getNext().getNext().getNext().get    	non-compiled	[CE]  	60	None	replace
71	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0)  {  Node  arg0  =  arg0.getNext();  if(arg0.getNext().getNext().getNext().getNext().get  [CE]  [FE]                                            AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0)  {  Node  arg0  =  arg0.getNext();  if(arg0.getNext().getNext().getNext().getNext().get  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0)  {  Node  arg0  =  arg0.getNext();  if(arg0.getNext().getNext().getNext().getNext().get	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0)    {    Node    arg0    =    arg0.getNext();    if(arg0.getNext().getNext().getNext().getNext().getNext().get    	non-compiled	[CE]  	60	None	replace
72	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0)  {  Node  arg0  =  arg0.getNext();  if(arg0.getNext().getNext().getNext().getNext().getNext().  [CE]  [FE]                                              AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0)  {  Node  arg0  =  arg0.getNext();  if(arg0.getNext().getNext().getNext().getNext().getNext().  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0)  {  Node  arg0  =  arg0.getNext();  if(arg0.getNext().getNext().getNext().getNext().getNext().	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0)    {    Node    arg0    =    arg0.getNext();    if(arg0.getNext().getNext().getNext().getNext().getNext().get    	non-compiled	[CE]  	60	None	replace
73	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0)  {  Node  arg0  =  arg0.getNext();  if(arg0.getNext().getNext().getNext().getNext().getNext().  [CE]  [FE]                                                AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0)  {  Node  arg0  =  arg0.getNext();  if(arg0.getNext().getNext().getNext().getNext().getNext().  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0)  {  Node  arg0  =  arg0.getNext();  if(arg0.getNext().getNext().getNext().getNext().getNext().	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0)    {    Node    arg0    =    arg0.getNext();    if(arg0.getNext().getNext().getNext().getNext().getNext().get    	non-compiled	[CE]  	60	None	replace
74	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0.getNext())  {  Node  newOp  =  arg0.getNext();  if(newOp.getType()  ==  Token.FUNCTION)  {  reportCodeChange  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0.getNext())  {  Node  newOp  =  arg0.getNext();  if(newOp.getType()  ==  Token.FUNCTION)  {  reportCodeChange  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0.getNext())  {  Node  newOp  =  arg0.getNext();  if(newOp.getType()  ==  Token.FUNCTION)  {  reportCodeChange	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0.getNext())    {    Node    newOp    =    arg0.getNext();    if(newOp.getType()    ==    Token.FUNCTION)    {    reportCodeChange();    }    	non-compiled	[CE]  	4	None	replace
75	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0.getNext())  {  Node  newOp  =  arg0.getNext();  if(newOp.getType()  ==  Token.FUNCTION)  {  reportCode  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0.getNext())  {  Node  newOp  =  arg0.getNext();  if(newOp.getType()  ==  Token.FUNCTION)  {  reportCode  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0.getNext())  {  Node  newOp  =  arg0.getNext();  if(newOp.getType()  ==  Token.FUNCTION)  {  reportCode	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0.getNext())    {    Node    newOp    =    arg0.getNext();    if(newOp.getType()    ==    Token.FUNCTION)    {    reportCodeChange();    }    	non-compiled	[CE]  	4	None	replace
76	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0.getNext())  {  Node  newOp  =  arg0.getNext();  if(newOp.getType()  ==  Token.FUNCTION)  {  reportCodeCh  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0.getNext())  {  Node  newOp  =  arg0.getNext();  if(newOp.getType()  ==  Token.FUNCTION)  {  reportCodeCh  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0.getNext())  {  Node  newOp  =  arg0.getNext();  if(newOp.getType()  ==  Token.FUNCTION)  {  reportCodeCh	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0.getNext())    {    Node    newOp    =    arg0.getNext();    if(newOp.getType()    ==    Token.FUNCTION)    {    reportCodeChange();    }    	non-compiled	[CE]  	4	None	replace
77	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0.getNext())  {  newOp  =  arg0.getNext();  if(newOp.getType()  ==  Token.FUNCTION)  {  reportCodeChange  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0.getNext())  {  newOp  =  arg0.getNext();  if(newOp.getType()  ==  Token.FUNCTION)  {  reportCodeChange  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0.getNext())  {  newOp  =  arg0.getNext();  if(newOp.getType()  ==  Token.FUNCTION)  {  reportCodeChange	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0.getNext())    {    Node    newOp    =    arg0.getNext();    if(newOp.getType()    ==    Token.FUNCTION)    {    reportCodeChange();    }    	non-compiled	[CE]  	4	None	replace
78	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0.getNext())  {  newOp  =  arg0.getNext();  if(newOp.getType()  ==  Token.FUNCTION)  {  reportCodeChange();  }  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0.getNext())  {  newOp  =  arg0.getNext();  if(newOp.getType()  ==  Token.FUNCTION)  {  reportCodeChange();  }  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0.getNext())  {  newOp  =  arg0.getNext();  if(newOp.getType()  ==  Token.FUNCTION)  {  reportCodeChange();  }	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0.getNext())    {    Node    newOp    =    arg0.getNext();    if(newOp.getType()    ==    Token.FUNCTION)    {    reportCodeChange();    }    	non-compiled	[CE]  	4	None	replace
79	[BUG]  [BUGGY]  return  n.getFirstChild()  +  1;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getFirstChild()  +  1;  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getFirstChild()  +  1;	  return    n.getLastChild()    +    1;    	non-compiled	[CE]  	30	None	replace
80	[BUG]  [BUGGY]  return  n.getfirstChild()  +  1;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getfirstChild()  +  1;  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getfirstChild()  +  1;	  return    n.getLastChild()    +    1;    	non-compiled	[CE]  	30	None	replace
81	[BUG]  [BUGGY]  return  n.getPreviousChild()  +  1;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getPreviousChild()  +  1;  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getPreviousChild()  +  1;	  return    n.getLastChild()    +    1;    	non-compiled	[CE]  	30	None	replace
82	[BUG]  [BUGGY]  return  n.getNext()  +  1;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getNext()  +  1;  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getNext()  +  1;	  return    n.getLastChild()    +    1;    	non-compiled	[CE]  	30	None	replace
83	[BUG]  [BUGGY]  removeChild(n.getLastChild());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  removeChild(n.getLastChild());  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	removeChild(n.getLastChild());	  removeChild(n.getFirstChild());    	non-compiled	[CE]  	10	None	replace
84	[BUG]  [BUGGY]  n.removeChild(n.getLastChild());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  n.removeChild(n.getLastChild());  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	n.removeChild(n.getLastChild());	  removeChild(n.getFirstChild());    	non-compiled	[CE]  	10	None	replace
85	[BUG]  [BUGGY]  removeChild(n.getFirstChild(),  newLiteralNode);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  removeChild(n.getFirstChild(),  newLiteralNode);  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	removeChild(n.getFirstChild(),  newLiteralNode);	  removeChild(n.getFirstChild());    	non-compiled	[CE]  	10	None	replace
86	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME);	  removeChild(n.getFirstChild());    	non-compiled	[CE]  	10	None	replace
87	[BUG]  [BUGGY]  removeChild(n.getNext());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  removeChild(n.getNext());  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	removeChild(n.getNext());	  removeChild(n.getFirstChild());    	non-compiled	[CE]  	10	None	replace
88	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0)  {  Node  newOp  =  arg0.getNext();  if(newOp!=  null)  {  reportCodeChange();  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0)  {  Node  newOp  =  arg0.getNext();  if(newOp!=  null)  {  reportCodeChange();  }  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0)  {  Node  newOp  =  arg0.getNext();  if(newOp!=  null)  {  reportCodeChange();  }	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0)    {    Node    newOp    =    arg0.getNext();    if(newOp!=    null)    {    reportCodeChange();    }    	non-compiled	[CE]  	44	None	replace
89	[BUG]  [BUGGY]  for(Node  newOp  :  n.getFirstChild())  {  Node  newOp  =  newOp.getNext();  if(newOp!=  null)  {  reportCodeChange();  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  newOp  :  n.getFirstChild())  {  Node  newOp  =  newOp.getNext();  if(newOp!=  null)  {  reportCodeChange();  }  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  newOp  :  n.getFirstChild())  {  Node  newOp  =  newOp.getNext();  if(newOp!=  null)  {  reportCodeChange();  }	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0)    {    Node    newOp    =    arg0.getNext();    if(newOp!=    null)    {    reportCodeChange();    }    	non-compiled	[CE]  	44	None	replace
90	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0)  {  newOp  =  arg0.getNext();  if(newOp!=  null)  {  reportCodeChange();  }  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0)  {  newOp  =  arg0.getNext();  if(newOp!=  null)  {  reportCodeChange();  }  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0)  {  newOp  =  arg0.getNext();  if(newOp!=  null)  {  reportCodeChange();  }	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0)    {    Node    newOp    =    arg0.getNext();    if(newOp!=    null)    {    reportCodeChange();    }    	non-compiled	[CE]  	44	None	replace
91	[BUG]  [BUGGY]  Node  newOp  =  n.getNext();  if(newOp!=  null)  {  reportCodeChange();  }  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  Node  newOp  =  n.getNext();  if(newOp!=  null)  {  reportCodeChange();  }  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	Node  newOp  =  n.getNext();  if(newOp!=  null)  {  reportCodeChange();  }	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0)    {    Node    newOp    =    arg0.getNext();    if(newOp!=    null)    {    reportCodeChange();    }    	non-compiled	[CE]  	44	None	replace
92	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0)  {  Node  newOp  =  arg0.getNext();  if(newOp  ==  null)  {  reportCodeChange();  }  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0)  {  Node  newOp  =  arg0.getNext();  if(newOp  ==  null)  {  reportCodeChange();  }  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0)  {  Node  newOp  =  arg0.getNext();  if(newOp  ==  null)  {  reportCodeChange();  }	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0)    {    Node    newOp    =    arg0.getNext();    if(newOp!=    null)    {    reportCodeChange();    }    	non-compiled	[CE]  	44	None	replace
93	[BUG]  [BUGGY]  removeLastChild();  [CE]  [FE]            AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  removeLastChild();  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	removeLastChild();	  return    n.removeLastChild();    	non-compiled	[CE]  	9	None	replace
94	[BUG]  [BUGGY]  return  n.removeLastChild()  +  1;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.removeLastChild()  +  1;  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.removeLastChild()  +  1;	  return    n.removeLastChild();    	non-compiled	[CE]  	9	None	replace
95	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getNext()  :  n;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getNext()  :  n;  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  ==  Token.NAME?  n.getNext()  :  n;	  return    n.getType()    ==    Token.NAME?    n.getFirstChild()    :    n;    	non-compiled	[CE]  	65	None	replace
96	[BUG]  [BUGGY]  return  n.getConstructorNode();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getConstructorNode();  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getConstructorNode();	  return    n.getNameNode();    	non-compiled	[CE]  	38	None	replace
97	[BUG]  [BUGGY]  return  n.getConstructor();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getConstructor();  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getConstructor();	  return    n.getNameNode();    	non-compiled	[CE]  	38	None	replace
98	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	Preconditions.checkState(n.getType()  ==  Token.VAR);	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0)    {    Preconditions.checkState(arg0.getType()    ==    Token.VAR);    }    	non-compiled	[CE]  	58	None	replace
99	[BUG]  [BUGGY]  For(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0)  {  Preconditions.checkState(arg0.getType()  ==  Token.VAR);  }  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  For(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0)  {  Preconditions.checkState(arg0.getType()  ==  Token.VAR);  }  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	For(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0)  {  Preconditions.checkState(arg0.getType()  ==  Token.VAR);  }	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0)    {    Preconditions.checkState(arg0.getType()    ==    Token.VAR);    }    	non-compiled	[CE]  	58	None	replace
100	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0)  {  Preconditions.checkState(arg0.getType()  ==  Token.VAR);  }  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0)  {  Preconditions.checkState(arg0.getType()  ==  Token.VAR);  }  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0)  {  Preconditions.checkState(arg0.getType()  ==  Token.VAR);  }	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0)    {    Preconditions.checkState(arg0.getType()    ==    Token.VAR);    }    	non-compiled	[CE]  	58	None	replace
101	[BUG]  [BUGGY]  Preconditions.checkState(arg0.getType()  ==  Token.VAR);  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  Preconditions.checkState(arg0.getType()  ==  Token.VAR);  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	Preconditions.checkState(arg0.getType()  ==  Token.VAR);	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0)    {    Preconditions.checkState(arg0.getType()    ==    Token.VAR);    }    	non-compiled	[CE]  	58	None	replace
102	[BUG]  [BUGGY]  For(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0)  {  Preconditions.checkState(arg0.getType()  ==  Token.VAR);  }  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  For(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0)  {  Preconditions.checkState(arg0.getType()  ==  Token.VAR);  }  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	For(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0)  {  Preconditions.checkState(arg0.getType()  ==  Token.VAR);  }	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0)    {    Preconditions.checkState(arg0.getType()    ==    Token.VAR);    }    	non-compiled	[CE]  	58	None	replace
103	[BUG]  [BUGGY]  Preconditions.checkState(newLiteralNode.getType()  ==  Token.VAR);  [CE]  [FE]                                            AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  Preconditions.checkState(newLiteralNode.getType()  ==  Token.VAR);  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	Preconditions.checkState(newLiteralNode.getType()  ==  Token.VAR);	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0)    {    Preconditions.checkState(arg0.getType()    ==    Token.VAR);    }    	non-compiled	[CE]  	58	None	replace
104	[BUG]  [BUGGY]  for(Node  arg0  =  n.getLastChild();  arg0!=  null;  arg0)  {  Preconditions.checkNotNull(arg0);  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getLastChild();  arg0!=  null;  arg0)  {  Preconditions.checkNotNull(arg0);  }  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getLastChild();  arg0!=  null;  arg0)  {  Preconditions.checkNotNull(arg0);  }	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0)    {    Preconditions.checkNotNull(arg0);    }    	non-compiled	[CE]  	45	None	replace
105	[BUG]  [BUGGY]  For(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0)  {  Preconditions.checkNotNull(arg0);  }  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  For(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0)  {  Preconditions.checkNotNull(arg0);  }  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	For(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0)  {  Preconditions.checkNotNull(arg0);  }	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0)    {    Preconditions.checkNotNull(arg0);    }    	non-compiled	[CE]  	45	None	replace
106	[BUG]  [BUGGY]  For(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0)  {  Preconditions.checkNotNull(arg0);  }  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  For(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0)  {  Preconditions.checkNotNull(arg0);  }  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	For(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0)  {  Preconditions.checkNotNull(arg0);  }	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0)    {    Preconditions.checkNotNull(arg0);    }    	non-compiled	[CE]  	45	None	replace
107	[BUG]  [BUGGY]  Preconditions.checkNotNull(n);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  Preconditions.checkNotNull(n);  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	Preconditions.checkNotNull(n);	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0)    {    Preconditions.checkNotNull(arg0);    }    	non-compiled	[CE]  	45	None	replace
108	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg0  ==  null;  arg0)  {  Preconditions.checkNotNull(arg0);  }  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg0  ==  null;  arg0)  {  Preconditions.checkNotNull(arg0);  }  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg0  ==  null;  arg0)  {  Preconditions.checkNotNull(arg0);  }	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0)    {    Preconditions.checkNotNull(arg0);    }    	non-compiled	[CE]  	45	None	replace
109	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0)    {    Preconditions.checkNotNull(arg0);    }    	non-compiled	[CE]  	45	None	replace
110	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getString()  :  n.getParent();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getString()  :  n.getParent();  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  ==  Token.NAME?  n.getString()  :  n.getParent();	  return    n.getType()    ==    Token.NAME?    n.getChildCount()    :    n.getParent();    	non-compiled	[CE]  	18	None	replace
111	[BUG]  [BUGGY]  For(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0.getNext())  {  Preconditions.checkState(arg0.getNext().getType()  ==  Token.VAR);  }  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  For(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0.getNext())  {  Preconditions.checkState(arg0.getNext().getType()  ==  Token.VAR);  }  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	For(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0.getNext())  {  Preconditions.checkState(arg0.getNext().getType()  ==  Token.VAR);  }	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0.getNext())    {    Preconditions.checkState(arg0.getNext().getType()    ==    Token.VAR);    }    	non-compiled	[CE]  	5	None	replace
112	[BUG]  [BUGGY]  For(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0.getNext())  {  Preconditions.checkState(arg0.getNext().getType()  ==  Token.VAR);  }  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  For(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0.getNext())  {  Preconditions.checkState(arg0.getNext().getType()  ==  Token.VAR);  }  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	For(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0.getNext())  {  Preconditions.checkState(arg0.getNext().getType()  ==  Token.VAR);  }	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0.getNext())    {    Preconditions.checkState(arg0.getNext().getType()    ==    Token.VAR);    }    	non-compiled	[CE]  	5	None	replace
113	[BUG]  [BUGGY]  Preconditions.checkState(n.getNext().getType()  ==  Token.VAR);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  Preconditions.checkState(n.getNext().getType()  ==  Token.VAR);  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	Preconditions.checkState(n.getNext().getType()  ==  Token.VAR);	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0.getNext())    {    Preconditions.checkState(arg0.getNext().getType()    ==    Token.VAR);    }    	non-compiled	[CE]  	5	None	replace
114	[BUG]  [BUGGY]  Preconditions.checkState(arg0.getNext().getType()  ==  Token.VAR);  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  Preconditions.checkState(arg0.getNext().getType()  ==  Token.VAR);  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	Preconditions.checkState(arg0.getNext().getType()  ==  Token.VAR);	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0.getNext())    {    Preconditions.checkState(arg0.getNext().getType()    ==    Token.VAR);    }    	non-compiled	[CE]  	5	None	replace
115	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0.hasNext())  {  Preconditions.checkState(arg0.getNext().getType()  ==  Token.VAR);  }  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0.hasNext())  {  Preconditions.checkState(arg0.getNext().getType()  ==  Token.VAR);  }  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0.hasNext())  {  Preconditions.checkState(arg0.getNext().getType()  ==  Token.VAR);  }	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0.getNext())    {    Preconditions.checkState(arg0.getNext().getType()    ==    Token.VAR);    }    	non-compiled	[CE]  	5	None	replace
116	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0)  {  Preconditions.checkState(arg0.getType()  ==  Token.VAR);  newOp  =  arg0.getNext();  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0)  {  Preconditions.checkState(arg0.getType()  ==  Token.VAR);  newOp  =  arg0.getNext();  }  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0)  {  Preconditions.checkState(arg0.getType()  ==  Token.VAR);  newOp  =  arg0.getNext();  }	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0)    {    Preconditions.checkState(arg0.getType()    ==    Token.VAR);    newOp    =    arg0.getNext();    }    	non-compiled	[CE]  	55	None	replace
117	[BUG]  [BUGGY]  Preconditions.checkState(newOp.getType()  ==  Token.VAR);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  Preconditions.checkState(newOp.getType()  ==  Token.VAR);  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	Preconditions.checkState(newOp.getType()  ==  Token.VAR);	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0)    {    Preconditions.checkState(arg0.getType()    ==    Token.VAR);    newOp    =    arg0.getNext();    }    	non-compiled	[CE]  	55	None	replace
118	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR);  newOp  =  n.getNext();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR);  newOp  =  n.getNext();  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	Preconditions.checkState(n.getType()  ==  Token.VAR);  newOp  =  n.getNext();	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0)    {    Preconditions.checkState(arg0.getType()    ==    Token.VAR);    newOp    =    arg0.getNext();    }    	non-compiled	[CE]  	55	None	replace
119	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0)  {  Preconditions.checkState(arg0.getType()  ==  Token.FUNCTION);  newOp  =  arg0.getNext();  }  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0)  {  Preconditions.checkState(arg0.getType()  ==  Token.FUNCTION);  newOp  =  arg0.getNext();  }  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0)  {  Preconditions.checkState(arg0.getType()  ==  Token.FUNCTION);  newOp  =  arg0.getNext();  }	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0)    {    Preconditions.checkState(arg0.getType()    ==    Token.VAR);    newOp    =    arg0.getNext();    }    	non-compiled	[CE]  	55	None	replace
120	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0)  {  preconditions.checkState(arg0.getType()  ==  Token.VAR);  newOp  =  arg0.getNext();  }  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0)  {  preconditions.checkState(arg0.getType()  ==  Token.VAR);  newOp  =  arg0.getNext();  }  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0)  {  preconditions.checkState(arg0.getType()  ==  Token.VAR);  newOp  =  arg0.getNext();  }	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0)    {    Preconditions.checkState(arg0.getType()    ==    Token.VAR);    newOp    =    arg0.getNext();    }    	non-compiled	[CE]  	55	None	replace
121	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0)  {  Preconditions.checkState(arg0.getType()  ==  Token.NAME);  newOp  =  arg0.getNext();  }  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0)  {  Preconditions.checkState(arg0.getType()  ==  Token.NAME);  newOp  =  arg0.getNext();  }  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0)  {  Preconditions.checkState(arg0.getType()  ==  Token.NAME);  newOp  =  arg0.getNext();  }	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0)    {    Preconditions.checkState(arg0.getType()    ==    Token.VAR);    newOp    =    arg0.getNext();    }    	non-compiled	[CE]  	55	None	replace
122	[BUG]  [BUGGY]  return  n.getType()  ==  Token.FUNCTION  &&  n.getParent().getType()  ==  Token.EXPR_RESULT;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()  ==  Token.FUNCTION  &&  n.getParent().getType()  ==  Token.EXPR_RESULT;  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  ==  Token.FUNCTION  &&  n.getParent().getType()  ==  Token.EXPR_RESULT;	  return    n.getType()    ==    Token.FUNCTION    ||    n.getParent().getType()    ==    Token.EXPR_RESULT;    	non-compiled	[CE]  	15	None	replace
123	[BUG]  [BUGGY]  return  n.getType()!=  Token.FUNCTION  &&  n.getParent().getType()  ==  Token.EXPR_RESULT;  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()!=  Token.FUNCTION  &&  n.getParent().getType()  ==  Token.EXPR_RESULT;  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()!=  Token.FUNCTION  &&  n.getParent().getType()  ==  Token.EXPR_RESULT;	  return    n.getType()    ==    Token.FUNCTION    ||    n.getParent().getType()    ==    Token.EXPR_RESULT;    	non-compiled	[CE]  	15	None	replace
124	[BUG]  [BUGGY]  return  n.getType()  ==  Token.FUNCTION  ||  n.getNext().getType()  ==  Token.EXPR_RESULT;  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()  ==  Token.FUNCTION  ||  n.getNext().getType()  ==  Token.EXPR_RESULT;  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  ==  Token.FUNCTION  ||  n.getNext().getType()  ==  Token.EXPR_RESULT;	  return    n.getType()    ==    Token.FUNCTION    ||    n.getParent().getType()    ==    Token.EXPR_RESULT;    	non-compiled	[CE]  	15	None	replace
125	[BUG]  [BUGGY]  return  n.getType()  ==  Token.FUNCTION  &&  n.getParent().getType()!=  Token.EXPR_RESULT;  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()  ==  Token.FUNCTION  &&  n.getParent().getType()!=  Token.EXPR_RESULT;  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  ==  Token.FUNCTION  &&  n.getParent().getType()!=  Token.EXPR_RESULT;	  return    n.getType()    ==    Token.FUNCTION    ||    n.getParent().getType()    ==    Token.EXPR_RESULT;    	non-compiled	[CE]  	15	None	replace
126	[BUG]  [BUGGY]  return  n.getType()  ==  Token.EXPR_RESULT  ||  n.getParent().getType()  ==  Token.FUNCTION;  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()  ==  Token.EXPR_RESULT  ||  n.getParent().getType()  ==  Token.FUNCTION;  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  ==  Token.EXPR_RESULT  ||  n.getParent().getType()  ==  Token.FUNCTION;	  return    n.getType()    ==    Token.FUNCTION    ||    n.getParent().getType()    ==    Token.EXPR_RESULT;    	non-compiled	[CE]  	15	None	replace
127	[BUG]  [BUGGY]  return  n.getParent().getType()  ==  Token.FUNCTION  ||  n.getParent().getType()  ==  Token.EXPR_RESULT;  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getParent().getType()  ==  Token.FUNCTION  ||  n.getParent().getType()  ==  Token.EXPR_RESULT;  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getParent().getType()  ==  Token.FUNCTION  ||  n.getParent().getType()  ==  Token.EXPR_RESULT;	  return    n.getType()    ==    Token.FUNCTION    ||    n.getParent().getType()    ==    Token.EXPR_RESULT;    	non-compiled	[CE]  	15	None	replace
128	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getString()  :  n.getFirstChild();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getString()  :  n.getFirstChild();  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  ==  Token.NAME?  n.getString()  :  n.getFirstChild();	  return    n.getType()    ==    Token.NAME?    n.getString()    :    n.getLastChild();    	non-compiled	[CE]  	29	None	replace
129	[BUG]  [BUGGY]  return  n.getType()!=  Token.NAME?  n.getString()  :  n.getFirstChild();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()!=  Token.NAME?  n.getString()  :  n.getFirstChild();  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()!=  Token.NAME?  n.getString()  :  n.getFirstChild();	  return    n.getType()    ==    Token.NAME?    n.getString()    :    n.getLastChild();    	non-compiled	[CE]  	29	None	replace
130	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME  &&  n.getString()  :  n.getLastChild();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()  ==  Token.NAME  &&  n.getString()  :  n.getLastChild();  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  ==  Token.NAME  &&  n.getString()  :  n.getLastChild();	  return    n.getType()    ==    Token.NAME?    n.getString()    :    n.getLastChild();    	non-compiled	[CE]  	29	None	replace
131	[BUG]  [BUGGY]  For(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0.getNext())  {  Preconditions.checkNotNull(arg0);  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  For(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0.getNext())  {  Preconditions.checkNotNull(arg0);  }  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	For(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0.getNext())  {  Preconditions.checkNotNull(arg0);  }	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0.getNext())    {    Preconditions.checkNotNull(arg0);    }    	non-compiled	[CE]  	3	None	replace
132	[BUG]  [BUGGY]  For(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0.getNext())  {  Preconditions.checkNotNull(arg0);  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  For(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0.getNext())  {  Preconditions.checkNotNull(arg0);  }  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	For(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0.getNext())  {  Preconditions.checkNotNull(arg0);  }	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0.getNext())    {    Preconditions.checkNotNull(arg0);    }    	non-compiled	[CE]  	3	None	replace
133	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg0  ==  null;  arg0.getNext())  {  Preconditions.checkNotNull(arg0);  }  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg0  ==  null;  arg0.getNext())  {  Preconditions.checkNotNull(arg0);  }  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg0  ==  null;  arg0.getNext())  {  Preconditions.checkNotNull(arg0);  }	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0.getNext())    {    Preconditions.checkNotNull(arg0);    }    	non-compiled	[CE]  	3	None	replace
134	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0.getNext())  {  Preconditions.checkNotNull(arg0);  }  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0.getNext())  {  Preconditions.checkNotNull(arg0);  }  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0.getNext())  {  Preconditions.checkNotNull(arg0);  }	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0.getNext())    {    Preconditions.checkNotNull(arg0);    }    	non-compiled	[CE]  	3	None	replace
135	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0.getNext())  {  Preconditions.checkArgument(arg0.getType()  ==  Token.FUNCTION);  }  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0.getNext())  {  Preconditions.checkArgument(arg0.getType()  ==  Token.FUNCTION);  }  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0.getNext())  {  Preconditions.checkArgument(arg0.getType()  ==  Token.FUNCTION);  }	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0.getNext())    {    Preconditions.checkNotNull(arg0);    }    	non-compiled	[CE]  	3	None	replace
136	[BUG]  [BUGGY]  return  n.getType()!=  Token.STRING;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()!=  Token.STRING;  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()!=  Token.STRING;	  return    n.getType()    ==    Token.STRING;    	non-compiled	[CE]  	51	None	replace
137	[BUG]  [BUGGY]  return  n.getFirstChild().getType()  ==  Token.STRING;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getFirstChild().getType()  ==  Token.STRING;  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getFirstChild().getType()  ==  Token.STRING;	  return    n.getType()    ==    Token.STRING;    	non-compiled	[CE]  	51	None	replace
138	[BUG]  [BUGGY]  return  n.getType()  ==  Token.STRING  ||  n.getFirstChild().getType()  ==  Token.EXPR_RESULT;  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()  ==  Token.STRING  ||  n.getFirstChild().getType()  ==  Token.EXPR_RESULT;  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  ==  Token.STRING  ||  n.getFirstChild().getType()  ==  Token.EXPR_RESULT;	  return    n.getType()    ==    Token.STRING;    	non-compiled	[CE]  	51	None	replace
139	[BUG]  [BUGGY]  return  n.getType()  ==  Token.STRING  ||  n.getParent().getType()  ==  Token.EXPR_RESULT;  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()  ==  Token.STRING  ||  n.getParent().getType()  ==  Token.EXPR_RESULT;  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  ==  Token.STRING  ||  n.getParent().getType()  ==  Token.EXPR_RESULT;	  return    n.getType()    ==    Token.STRING;    	non-compiled	[CE]  	51	None	replace
140	[BUG]  [BUGGY]  return  n.getType()  ==  Token.STRING  ||  n.getFirstChild().getType()  ==  Token.FUNCTION;  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()  ==  Token.STRING  ||  n.getFirstChild().getType()  ==  Token.FUNCTION;  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  ==  Token.STRING  ||  n.getFirstChild().getType()  ==  Token.FUNCTION;	  return    n.getType()    ==    Token.STRING;    	non-compiled	[CE]  	51	None	replace
141	[BUG]  [BUGGY]  return  n.getType()  ==  Token.STRING  ||  n.getParent().getType()  ==  Token.FUNCTION;  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()  ==  Token.STRING  ||  n.getParent().getType()  ==  Token.FUNCTION;  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  ==  Token.STRING  ||  n.getParent().getType()  ==  Token.FUNCTION;	  return    n.getType()    ==    Token.STRING;    	non-compiled	[CE]  	51	None	replace
142	[BUG]  [BUGGY]  Preconditions.checkArgument(newOp.getType()  ==  Token.VAR);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  Preconditions.checkArgument(newOp.getType()  ==  Token.VAR);  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	Preconditions.checkArgument(newOp.getType()  ==  Token.VAR);	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0)    {    Preconditions.checkArgument(arg0.getType()    ==    Token.VAR);    newOp    =    arg0.getNext();    }    	non-compiled	[CE]  	56	None	replace
143	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0)  {  Preconditions.checkArgument(arg0.getType()  ==  Token.VAR);  newOp  =  arg0.getNext();  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0)  {  Preconditions.checkArgument(arg0.getType()  ==  Token.VAR);  newOp  =  arg0.getNext();  }  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0)  {  Preconditions.checkArgument(arg0.getType()  ==  Token.VAR);  newOp  =  arg0.getNext();  }	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0)    {    Preconditions.checkArgument(arg0.getType()    ==    Token.VAR);    newOp    =    arg0.getNext();    }    	non-compiled	[CE]  	56	None	replace
144	[BUG]  [BUGGY]  Preconditions.checkArgument(arg0.getType()  ==  Token.VAR);  newOp  =  arg0.getNext();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  Preconditions.checkArgument(arg0.getType()  ==  Token.VAR);  newOp  =  arg0.getNext();  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	Preconditions.checkArgument(arg0.getType()  ==  Token.VAR);  newOp  =  arg0.getNext();	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0)    {    Preconditions.checkArgument(arg0.getType()    ==    Token.VAR);    newOp    =    arg0.getNext();    }    	non-compiled	[CE]  	56	None	replace
145	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  newOp  =  n.getNext();  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  newOp  =  n.getNext();  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.VAR);  newOp  =  n.getNext();	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0)    {    Preconditions.checkArgument(arg0.getType()    ==    Token.VAR);    newOp    =    arg0.getNext();    }    	non-compiled	[CE]  	56	None	replace
146	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0)  {  Preconditions.checkArgument(arg0.getType()  ==  Token.FUNCTION);  newOp  =  arg0.getNext();  }  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0)  {  Preconditions.checkArgument(arg0.getType()  ==  Token.FUNCTION);  newOp  =  arg0.getNext();  }  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0)  {  Preconditions.checkArgument(arg0.getType()  ==  Token.FUNCTION);  newOp  =  arg0.getNext();  }	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0)    {    Preconditions.checkArgument(arg0.getType()    ==    Token.VAR);    newOp    =    arg0.getNext();    }    	non-compiled	[CE]  	56	None	replace
147	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0)  {  preconditions.checkArgument(arg0.getType()  ==  Token.VAR);  newOp  =  arg0.getNext();  }  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0)  {  preconditions.checkArgument(arg0.getType()  ==  Token.VAR);  newOp  =  arg0.getNext();  }  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0)  {  preconditions.checkArgument(arg0.getType()  ==  Token.VAR);  newOp  =  arg0.getNext();  }	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0)    {    Preconditions.checkArgument(arg0.getType()    ==    Token.VAR);    newOp    =    arg0.getNext();    }    	non-compiled	[CE]  	56	None	replace
148	[BUG]  [BUGGY]  Preconditions.checkArgument(newOp.getType()  ==  Token.FUNCTION);  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  Preconditions.checkArgument(newOp.getType()  ==  Token.FUNCTION);  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	Preconditions.checkArgument(newOp.getType()  ==  Token.FUNCTION);	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0)    {    Preconditions.checkArgument(arg0.getType()    ==    Token.VAR);    newOp    =    arg0.getNext();    }    	non-compiled	[CE]  	56	None	replace
149	[BUG]  [BUGGY]  return  n.getType()  >=  Token.FUNCTION;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()  >=  Token.FUNCTION;  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  >=  Token.FUNCTION;	  return    n.getType()!=    Token.FUNCTION;    	non-compiled	[CE]  	12	None	replace
150	[BUG]  [BUGGY]  return  n.getType()  >>  Token.FUNCTION;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()  >>  Token.FUNCTION;  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  >>  Token.FUNCTION;	  return    n.getType()!=    Token.FUNCTION;    	non-compiled	[CE]  	12	None	replace
151	[BUG]  [BUGGY]  return  n.getType()  [Delete]  Token.FUNCTION;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()  [Delete]  Token.FUNCTION;  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  [Delete]  Token.FUNCTION;	  return    n.getType()!=    Token.FUNCTION;    	non-compiled	[CE]  	12	None	replace
152	[BUG]  [BUGGY]  return  newLiteralNode.getType()!=  Token.FUNCTION;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  newLiteralNode.getType()!=  Token.FUNCTION;  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  newLiteralNode.getType()!=  Token.FUNCTION;	  return    n.getType()!=    Token.FUNCTION;    	non-compiled	[CE]  	12	None	replace
153	[BUG]  [BUGGY]  return  n.getType()!=  Token.VAR;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()!=  Token.VAR;  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()!=  Token.VAR;	  return    n.getType()    ==    Token.VAR;    	non-compiled	[CE]  	61	None	replace
154	[BUG]  [BUGGY]  return  n.getType()  ==  Token.VAR  ||  n.getFirstChild().getType()  ==  Token.FUNCTION;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()  ==  Token.VAR  ||  n.getFirstChild().getType()  ==  Token.FUNCTION;  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  ==  Token.VAR  ||  n.getFirstChild().getType()  ==  Token.FUNCTION;	  return    n.getType()    ==    Token.VAR;    	non-compiled	[CE]  	61	None	replace
155	[BUG]  [BUGGY]  return  n.getType()  ==  Token.VAR  ||  n.getFirstChild().getType()  ==  Token.EXPR_RESULT;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()  ==  Token.VAR  ||  n.getFirstChild().getType()  ==  Token.EXPR_RESULT;  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  ==  Token.VAR  ||  n.getFirstChild().getType()  ==  Token.EXPR_RESULT;	  return    n.getType()    ==    Token.VAR;    	non-compiled	[CE]  	61	None	replace
156	[BUG]  [BUGGY]  return  n.getType()  ==  Token.VAR  ||  n.getFirstChild().getType()  ==  Token.NAME;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()  ==  Token.VAR  ||  n.getFirstChild().getType()  ==  Token.NAME;  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  ==  Token.VAR  ||  n.getFirstChild().getType()  ==  Token.NAME;	  return    n.getType()    ==    Token.VAR;    	non-compiled	[CE]  	61	None	replace
157	[BUG]  [BUGGY]  return  n.getFirstChild().getType()  ==  Token.VAR;  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getFirstChild().getType()  ==  Token.VAR;  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getFirstChild().getType()  ==  Token.VAR;	  return    n.getType()    ==    Token.VAR;    	non-compiled	[CE]  	61	None	replace
158	[BUG]  [BUGGY]  return  n.getType()  ==  Token.VAR  ||  n.getFirstChild().getType()!=  Token.FUNCTION;  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()  ==  Token.VAR  ||  n.getFirstChild().getType()!=  Token.FUNCTION;  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  ==  Token.VAR  ||  n.getFirstChild().getType()!=  Token.FUNCTION;	  return    n.getType()    ==    Token.VAR;    	non-compiled	[CE]  	61	None	replace
159	[BUG]  [BUGGY]  n.removeChild(arg0);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  n.removeChild(arg0);  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	n.removeChild(arg0);	  n.removeChild(newLiteralNode);    	non-compiled	[CE]  	42	None	replace
160	[BUG]  [BUGGY]  n.getParent().removeChild(newLiteralNode);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  n.getParent().removeChild(newLiteralNode);  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	n.getParent().removeChild(newLiteralNode);	  n.removeChild(newLiteralNode);    	non-compiled	[CE]  	42	None	replace
161	[BUG]  [BUGGY]  n.removeChild(newOp);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  n.removeChild(newOp);  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	n.removeChild(newOp);	  n.removeChild(newLiteralNode);    	non-compiled	[CE]  	42	None	replace
162	[BUG]  [BUGGY]  n.removeChild(constructorNameNode);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  n.removeChild(constructorNameNode);  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	n.removeChild(constructorNameNode);	  n.removeChild(newLiteralNode);    	non-compiled	[CE]  	42	None	replace
163	[BUG]  [BUGGY]  parent.replaceChild(n,  newLiteralNode);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  parent.replaceChild(n,  newLiteralNode);  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	parent.replaceChild(n,  newLiteralNode);	  n.removeChild(newLiteralNode);    	non-compiled	[CE]  	42	None	replace
164	[BUG]  [BUGGY]  return  n.removeChild(n.getLastChild(),  newLiteralNode);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.removeChild(n.getLastChild(),  newLiteralNode);  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.removeChild(n.getLastChild(),  newLiteralNode);	  return    n.removeChild(n.getLastChild());    	non-compiled	[CE]  	63	None	replace
165	[BUG]  [BUGGY]  n.removeChild(n.getFirstChild());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  n.removeChild(n.getFirstChild());  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	n.removeChild(n.getFirstChild());	  return    n.removeChild(n.getLastChild());    	non-compiled	[CE]  	63	None	replace
166	[BUG]  [BUGGY]  return  n.replaceChild(n.getFirstChild());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.replaceChild(n.getFirstChild());  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.replaceChild(n.getFirstChild());	  return    n.removeChild(n.getLastChild());    	non-compiled	[CE]  	63	None	replace
167	[BUG]  [BUGGY]  return  n.getParent().cloneSyntax();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getParent().cloneSyntax();  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getParent().cloneSyntax();	  return    n.cloneSyntax();    	non-compiled	[CE]  	41	None	replace
168	[BUG]  [BUGGY]  return  n.cloneFoldLiteralNode();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.cloneFoldLiteralNode();  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.cloneFoldLiteralNode();	  return    n.cloneSyntax();    	non-compiled	[CE]  	41	None	replace
169	[BUG]  [BUGGY]  return  n.getType()  ==  Token.FUNCTION  &&  n.getFirstChild().getType()  ==  Token.NAME;  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()  ==  Token.FUNCTION  &&  n.getFirstChild().getType()  ==  Token.NAME;  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  ==  Token.FUNCTION  &&  n.getFirstChild().getType()  ==  Token.NAME;	  return    n.getType()    ==    Token.FUNCTION    ||    n.getFirstChild().getType()    ==    Token.NAME;    	non-compiled	[CE]  	16	None	replace
170	[BUG]  [BUGGY]  return  n.getType()!=  Token.FUNCTION  &&  n.getFirstChild().getType()  ==  Token.NAME;  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()!=  Token.FUNCTION  &&  n.getFirstChild().getType()  ==  Token.NAME;  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()!=  Token.FUNCTION  &&  n.getFirstChild().getType()  ==  Token.NAME;	  return    n.getType()    ==    Token.FUNCTION    ||    n.getFirstChild().getType()    ==    Token.NAME;    	non-compiled	[CE]  	16	None	replace
171	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME  ||  n.getFirstChild().getType()  ==  Token.FUNCTION;  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()  ==  Token.NAME  ||  n.getFirstChild().getType()  ==  Token.FUNCTION;  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  ==  Token.NAME  ||  n.getFirstChild().getType()  ==  Token.FUNCTION;	  return    n.getType()    ==    Token.FUNCTION    ||    n.getFirstChild().getType()    ==    Token.NAME;    	non-compiled	[CE]  	16	None	replace
172	[BUG]  [BUGGY]  return  n.getType()  ==  Token.FUNCTION  ||  n.getLastChild().getType()  ==  Token.NAME;  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()  ==  Token.FUNCTION  ||  n.getLastChild().getType()  ==  Token.NAME;  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  ==  Token.FUNCTION  ||  n.getLastChild().getType()  ==  Token.NAME;	  return    n.getType()    ==    Token.FUNCTION    ||    n.getFirstChild().getType()    ==    Token.NAME;    	non-compiled	[CE]  	16	None	replace
173	[BUG]  [BUGGY]  return  n.getFirstChild().getType()  ==  Token.FUNCTION  ||  n.getFirstChild().getType()  ==  Token.NAME;  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getFirstChild().getType()  ==  Token.FUNCTION  ||  n.getFirstChild().getType()  ==  Token.NAME;  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getFirstChild().getType()  ==  Token.FUNCTION  ||  n.getFirstChild().getType()  ==  Token.NAME;	  return    n.getType()    ==    Token.FUNCTION    ||    n.getFirstChild().getType()    ==    Token.NAME;    	non-compiled	[CE]  	16	None	replace
174	[BUG]  [BUGGY]  return  n.getType()  ==  Token.FUNCTION  &&  n.getFirstChild().getType()!=  Token.NAME;  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()  ==  Token.FUNCTION  &&  n.getFirstChild().getType()!=  Token.NAME;  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  ==  Token.FUNCTION  &&  n.getFirstChild().getType()!=  Token.NAME;	  return    n.getType()    ==    Token.FUNCTION    ||    n.getFirstChild().getType()    ==    Token.NAME;    	non-compiled	[CE]  	16	None	replace
175	[BUG]  [BUGGY]  return  n.getNext().clone();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getNext().clone();  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getNext().clone();	  return    n.getParent().clone();    	non-compiled	[CE]  	8	None	replace
176	[BUG]  [BUGGY]  return  n.getLastChild().clone();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getLastChild().clone();  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getLastChild().clone();	  return    n.getParent().clone();    	non-compiled	[CE]  	8	None	replace
177	[BUG]  [BUGGY]  return  n.getFirstChild().clone();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getFirstChild().clone();  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getFirstChild().clone();	  return    n.getParent().clone();    	non-compiled	[CE]  	8	None	replace
178	[BUG]  [BUGGY]  return  n.getParent().replaceChild(n,  newLiteralNode);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getParent().replaceChild(n,  newLiteralNode);  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getParent().replaceChild(n,  newLiteralNode);	  return    n.getParent().clone();    	non-compiled	[CE]  	8	None	replace
179	[BUG]  [BUGGY]  return  n.getParent().cloneChild(n);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getParent().cloneChild(n);  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getParent().cloneChild(n);	  return    n.getParent().clone();    	non-compiled	[CE]  	8	None	replace
180	[BUG]  [BUGGY]  return  n.getParent().cloneChildren();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getParent().cloneChildren();  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getParent().cloneChildren();	  return    n.getParent().clone();    	non-compiled	[CE]  	8	None	replace
181	[BUG]  [BUGGY]  return  n.getParent().removeChild(n.getFirstChild());  [CE]  [FE]            AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getParent().removeChild(n.getFirstChild());  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getParent().removeChild(n.getFirstChild());	  return    n.removeChild(n.getFirstChild());    	non-compiled	[CE]  	62	None	replace
182	[BUG]  [BUGGY]  return  n.removeChild(n.getString());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.removeChild(n.getString());  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.removeChild(n.getString());	  return    n.removeChild(n.getFirstChild());    	non-compiled	[CE]  	62	None	replace
183	[BUG]  [BUGGY]  return  n.getType()!=  Token.NAME?  n.getFirstChild()  :  n;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()!=  Token.NAME?  n.getFirstChild()  :  n;  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()!=  Token.NAME?  n.getFirstChild()  :  n;	  return    n.getType()    ==    Token.NAME?    n.getLastChild()    :    n;    	non-compiled	[CE]  	35	None	replace
184	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getString()  :  n;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getString()  :  n;  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  ==  Token.NAME?  n.getString()  :  n;	  return    n.getType()    ==    Token.NAME?    n.getLastChild()    :    n;    	non-compiled	[CE]  	35	None	replace
185	[BUG]  [BUGGY]  For(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0.getNext())  {  Preconditions.checkState(arg0.getNext().getType()  ==  Token.NAME);  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  For(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0.getNext())  {  Preconditions.checkState(arg0.getNext().getType()  ==  Token.NAME);  }  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	For(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0.getNext())  {  Preconditions.checkState(arg0.getNext().getType()  ==  Token.NAME);  }	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0.getNext())    {    Preconditions.checkState(arg0.getNext().getType()    ==    Token.NAME);    }    	non-compiled	[CE]  	2	None	replace
186	[BUG]  [BUGGY]  For(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0.getNext())  {  Preconditions.checkState(arg0.getNext().getType()  ==  Token.NAME);  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  For(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0.getNext())  {  Preconditions.checkState(arg0.getNext().getType()  ==  Token.NAME);  }  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	For(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0.getNext())  {  Preconditions.checkState(arg0.getNext().getType()  ==  Token.NAME);  }	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0.getNext())    {    Preconditions.checkState(arg0.getNext().getType()    ==    Token.NAME);    }    	non-compiled	[CE]  	2	None	replace
187	[BUG]  [BUGGY]  Preconditions.checkState(arg0.getNext().getType()  ==  Token.NAME);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  Preconditions.checkState(arg0.getNext().getType()  ==  Token.NAME);  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	Preconditions.checkState(arg0.getNext().getType()  ==  Token.NAME);	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0.getNext())    {    Preconditions.checkState(arg0.getNext().getType()    ==    Token.NAME);    }    	non-compiled	[CE]  	2	None	replace
188	[BUG]  [BUGGY]  Preconditions.checkState(n.getNext().getType()  ==  Token.NAME);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  Preconditions.checkState(n.getNext().getType()  ==  Token.NAME);  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	Preconditions.checkState(n.getNext().getType()  ==  Token.NAME);	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0.getNext())    {    Preconditions.checkState(arg0.getNext().getType()    ==    Token.NAME);    }    	non-compiled	[CE]  	2	None	replace
189	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0.hasNext())  {  Preconditions.checkState(arg0.getNext().getType()  ==  Token.NAME);  }  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0.hasNext())  {  Preconditions.checkState(arg0.getNext().getType()  ==  Token.NAME);  }  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0.hasNext())  {  Preconditions.checkState(arg0.getNext().getType()  ==  Token.NAME);  }	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0.getNext())    {    Preconditions.checkState(arg0.getNext().getType()    ==    Token.NAME);    }    	non-compiled	[CE]  	2	None	replace
190	[BUG]  [BUGGY]  return  n.getNext().replaceChild(n,  newLiteralNode);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getNext().replaceChild(n,  newLiteralNode);  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getNext().replaceChild(n,  newLiteralNode);	  return    n.replaceChild(n,    newLiteralNode);    	non-compiled	[CE]  	31	None	replace
191	[BUG]  [BUGGY]  return  n.removeChild(newLiteralNode);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.removeChild(newLiteralNode);  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.removeChild(newLiteralNode);	  return    n.replaceChild(n,    newLiteralNode);    	non-compiled	[CE]  	31	None	replace
192	[BUG]  [BUGGY]  return  n.replaceChild(n,  newOp);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.replaceChild(n,  newOp);  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.replaceChild(n,  newOp);	  return    n.replaceChild(n,    newLiteralNode);    	non-compiled	[CE]  	31	None	replace
193	[BUG]  [BUGGY]  return  n.getNext().cloneTree();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getNext().cloneTree();  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getNext().cloneTree();	  return    n.getParent().cloneTree();    	non-compiled	[CE]  	53	None	replace
194	[BUG]  [BUGGY]  return  n.getLastChild().cloneTree();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getLastChild().cloneTree();  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getLastChild().cloneTree();	  return    n.getParent().cloneTree();    	non-compiled	[CE]  	53	None	replace
195	[BUG]  [BUGGY]  return  n.getFirstChild().cloneTree();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getFirstChild().cloneTree();  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getFirstChild().cloneTree();	  return    n.getParent().cloneTree();    	non-compiled	[CE]  	53	None	replace
196	[BUG]  [BUGGY]  return  n.getParent().cloneChild(n,  newLiteralNode);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getParent().cloneChild(n,  newLiteralNode);  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getParent().cloneChild(n,  newLiteralNode);	  return    n.getParent().cloneTree();    	non-compiled	[CE]  	53	None	replace
197	[BUG]  [BUGGY]  return  n.getParent().cloneNode();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getParent().cloneNode();  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getParent().cloneNode();	  return    n.getParent().cloneTree();    	non-compiled	[CE]  	53	None	replace
198	[BUG]  [BUGGY]  return  n.getFirstChild().getNext();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getFirstChild().getNext();  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getFirstChild().getNext();	  return    n.getLastChild().getNext();    	non-compiled	[CE]  	32	None	replace
199	[BUG]  [BUGGY]  return  n.getLastChild().getParent();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getLastChild().getParent();  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getLastChild().getParent();	  return    n.getLastChild().getNext();    	non-compiled	[CE]  	32	None	replace
200	[BUG]  [BUGGY]  return  n.getLastChild().getNext()  +  1;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getLastChild().getNext()  +  1;  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getLastChild().getNext()  +  1;	  return    n.getLastChild().getNext();    	non-compiled	[CE]  	32	None	replace
201	[BUG]  [BUGGY]  return  n.getLastChild().getFirstChild();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getLastChild().getFirstChild();  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getLastChild().getFirstChild();	  return    n.getLastChild().getNext();    	non-compiled	[CE]  	32	None	replace
202	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getFirstChild()  :  n.getFirstChild();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getFirstChild()  :  n.getFirstChild();  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  ==  Token.NAME?  n.getFirstChild()  :  n.getFirstChild();	  return    n.getType()    ==    Token.NAME?    n.getLastChild()    :    n.getFirstChild();    	non-compiled	[CE]  	28	None	replace
203	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME  &&  n.getLastChild()  :  n.getFirstChild();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()  ==  Token.NAME  &&  n.getLastChild()  :  n.getFirstChild();  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  ==  Token.NAME  &&  n.getLastChild()  :  n.getFirstChild();	  return    n.getType()    ==    Token.NAME?    n.getLastChild()    :    n.getFirstChild();    	non-compiled	[CE]  	28	None	replace
204	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0)  {  Node  newOp  =  arg0.getNext();  if(newOp!=  null)  {  newOp  =  newOp;  }  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0)  {  Node  newOp  =  arg0.getNext();  if(newOp!=  null)  {  newOp  =  newOp;  }  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0)  {  Node  newOp  =  arg0.getNext();  if(newOp!=  null)  {  newOp  =  newOp;  }	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0)    {    Node    newOp    =    arg0.getNext();    if(newOp!=    null)    {    newOp    =    newOp;    }    	non-compiled	[CE]  	48	None	replace
205	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0)  {  newOp  =  arg0.getNext();  if(newOp!=  null)  {  newOp  =  newOp;  }  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0)  {  newOp  =  arg0.getNext();  if(newOp!=  null)  {  newOp  =  newOp;  }  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0)  {  newOp  =  arg0.getNext();  if(newOp!=  null)  {  newOp  =  newOp;  }	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0)    {    Node    newOp    =    arg0.getNext();    if(newOp!=    null)    {    newOp    =    newOp;    }    	non-compiled	[CE]  	48	None	replace
206	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0)  {  newOp  =  arg0.getNext();  if(newOp!=  null)  {  newOp  =  newOp;  }  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0)  {  newOp  =  arg0.getNext();  if(newOp!=  null)  {  newOp  =  newOp;  }  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0)  {  newOp  =  arg0.getNext();  if(newOp!=  null)  {  newOp  =  newOp;  }	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0)    {    Node    newOp    =    arg0.getNext();    if(newOp!=    null)    {    newOp    =    newOp;    }    	non-compiled	[CE]  	48	None	replace
207	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg  <  null;  arg0)  {  Node  newOp  =  arg0.getNext();  if(newOp!=  null)  {  newOp  =  newOp;  }  [CE]  [FE]                                            AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg  <  null;  arg0)  {  Node  newOp  =  arg0.getNext();  if(newOp!=  null)  {  newOp  =  newOp;  }  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg  <  null;  arg0)  {  Node  newOp  =  arg0.getNext();  if(newOp!=  null)  {  newOp  =  newOp;  }	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0)    {    Node    newOp    =    arg0.getNext();    if(newOp!=    null)    {    newOp    =    newOp;    }    	non-compiled	[CE]  	48	None	replace
208	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg  >=  null;  arg0)  {  Node  newOp  =  arg0.getNext();  if(newOp!=  null)  {  newOp  =  newOp;  }  [CE]  [FE]                                              AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg  >=  null;  arg0)  {  Node  newOp  =  arg0.getNext();  if(newOp!=  null)  {  newOp  =  newOp;  }  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg  >=  null;  arg0)  {  Node  newOp  =  arg0.getNext();  if(newOp!=  null)  {  newOp  =  newOp;  }	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0)    {    Node    newOp    =    arg0.getNext();    if(newOp!=    null)    {    newOp    =    newOp;    }    	non-compiled	[CE]  	48	None	replace
209	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getPrevious()  :  null;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getPrevious()  :  null;  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  ==  Token.NAME?  n.getPrevious()  :  null;	  return    n.getPrevious();    	non-compiled	[CE]  	37	None	replace
210	[BUG]  [BUGGY]  For(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0.getNext())  {  Preconditions.checkArgument(arg0.getNext().getType()  ==  Token.NAME);  }  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  For(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0.getNext())  {  Preconditions.checkArgument(arg0.getNext().getType()  ==  Token.NAME);  }  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	For(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0.getNext())  {  Preconditions.checkArgument(arg0.getNext().getType()  ==  Token.NAME);  }	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0.getNext())    {    Preconditions.checkArgument(arg0.getNext().getType()    ==    Token.NAME);    }    	non-compiled	[CE]  	7	None	replace
211	[BUG]  [BUGGY]  Preconditions.checkArgument(arg0.getNext().getType()  ==  Token.NAME);  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  Preconditions.checkArgument(arg0.getNext().getType()  ==  Token.NAME);  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	Preconditions.checkArgument(arg0.getNext().getType()  ==  Token.NAME);	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0.getNext())    {    Preconditions.checkArgument(arg0.getNext().getType()    ==    Token.NAME);    }    	non-compiled	[CE]  	7	None	replace
212	[BUG]  [BUGGY]  For(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0.getNext())  {  Preconditions.checkArgument(arg0.getNext().getType()  ==  Token.NAME);  }  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  For(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0.getNext())  {  Preconditions.checkArgument(arg0.getNext().getType()  ==  Token.NAME);  }  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	For(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0.getNext())  {  Preconditions.checkArgument(arg0.getNext().getType()  ==  Token.NAME);  }	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0.getNext())    {    Preconditions.checkArgument(arg0.getNext().getType()    ==    Token.NAME);    }    	non-compiled	[CE]  	7	None	replace
213	[BUG]  [BUGGY]  for(Node  arg0  =  n.getLastChild();  arg0!=  null;  arg0.getNext())  {  Preconditions.checkArgument(arg0.getNext().getType()  ==  Token.NAME);  }  [CE]  [FE]                                            AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getLastChild();  arg0!=  null;  arg0.getNext())  {  Preconditions.checkArgument(arg0.getNext().getType()  ==  Token.NAME);  }  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getLastChild();  arg0!=  null;  arg0.getNext())  {  Preconditions.checkArgument(arg0.getNext().getType()  ==  Token.NAME);  }	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0.getNext())    {    Preconditions.checkArgument(arg0.getNext().getType()    ==    Token.NAME);    }    	non-compiled	[CE]  	7	None	replace
214	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getNext().getType()  ==  Token.NAME);  [CE]  [FE]                                              AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  Preconditions.checkArgument(n.getNext().getType()  ==  Token.NAME);  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	Preconditions.checkArgument(n.getNext().getType()  ==  Token.NAME);	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0.getNext())    {    Preconditions.checkArgument(arg0.getNext().getType()    ==    Token.NAME);    }    	non-compiled	[CE]  	7	None	replace
215	[BUG]  [BUGGY]  return  n.getType()!=  Token.NAME;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()!=  Token.NAME;  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()!=  Token.NAME;	  return    n.getType()    ==    Token.NAME;    	non-compiled	[CE]  	49	None	replace
216	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME  ||  n.getFirstChild().getType()  ==  Token.EXPR_RESULT;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()  ==  Token.NAME  ||  n.getFirstChild().getType()  ==  Token.EXPR_RESULT;  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  ==  Token.NAME  ||  n.getFirstChild().getType()  ==  Token.EXPR_RESULT;	  return    n.getType()    ==    Token.NAME;    	non-compiled	[CE]  	49	None	replace
217	[BUG]  [BUGGY]  return  n.getFirstChild().getType()  ==  Token.NAME;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getFirstChild().getType()  ==  Token.NAME;  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getFirstChild().getType()  ==  Token.NAME;	  return    n.getType()    ==    Token.NAME;    	non-compiled	[CE]  	49	None	replace
218	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME  ||  n.getFirstChild().getType()  ==  Token.VAR;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()  ==  Token.NAME  ||  n.getFirstChild().getType()  ==  Token.VAR;  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  ==  Token.NAME  ||  n.getFirstChild().getType()  ==  Token.VAR;	  return    n.getType()    ==    Token.NAME;    	non-compiled	[CE]  	49	None	replace
219	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME  ||  n.getChildCount()  ==  1;  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()  ==  Token.NAME  ||  n.getChildCount()  ==  1;  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  ==  Token.NAME  ||  n.getChildCount()  ==  1;	  return    n.getType()    ==    Token.NAME;    	non-compiled	[CE]  	49	None	replace
220	[BUG]  [BUGGY]  return  n.getType()  ==  Token.FUNCTION  &&  n.getFirstChild().getType()  ==  Token.EXPR_RESULT;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()  ==  Token.FUNCTION  &&  n.getFirstChild().getType()  ==  Token.EXPR_RESULT;  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  ==  Token.FUNCTION  &&  n.getFirstChild().getType()  ==  Token.EXPR_RESULT;	  return    n.getType()    ==    Token.FUNCTION    ||    n.getFirstChild().getType()    ==    Token.EXPR_RESULT;    	non-compiled	[CE]  	14	None	replace
221	[BUG]  [BUGGY]  return  n.getType()!=  Token.FUNCTION  &&  n.getFirstChild().getType()  ==  Token.EXPR_RESULT;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()!=  Token.FUNCTION  &&  n.getFirstChild().getType()  ==  Token.EXPR_RESULT;  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()!=  Token.FUNCTION  &&  n.getFirstChild().getType()  ==  Token.EXPR_RESULT;	  return    n.getType()    ==    Token.FUNCTION    ||    n.getFirstChild().getType()    ==    Token.EXPR_RESULT;    	non-compiled	[CE]  	14	None	replace
222	[BUG]  [BUGGY]  return  n.getFirstChild().getType()  ==  Token.FUNCTION  ||  n.getFirstChild().getType()  ==  Token.EXPR_RESULT;  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getFirstChild().getType()  ==  Token.FUNCTION  ||  n.getFirstChild().getType()  ==  Token.EXPR_RESULT;  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getFirstChild().getType()  ==  Token.FUNCTION  ||  n.getFirstChild().getType()  ==  Token.EXPR_RESULT;	  return    n.getType()    ==    Token.FUNCTION    ||    n.getFirstChild().getType()    ==    Token.EXPR_RESULT;    	non-compiled	[CE]  	14	None	replace
223	[BUG]  [BUGGY]  return  n.getType()  ==  Token.EXPR_RESULT  ||  n.getFirstChild().getType()  ==  Token.FUNCTION;  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()  ==  Token.EXPR_RESULT  ||  n.getFirstChild().getType()  ==  Token.FUNCTION;  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  ==  Token.EXPR_RESULT  ||  n.getFirstChild().getType()  ==  Token.FUNCTION;	  return    n.getType()    ==    Token.FUNCTION    ||    n.getFirstChild().getType()    ==    Token.EXPR_RESULT;    	non-compiled	[CE]  	14	None	replace
224	[BUG]  [BUGGY]  return  n.getType()  ==  Token.FUNCTION  &&  n.getFirstChild().getType()!=  Token.EXPR_RESULT;  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()  ==  Token.FUNCTION  &&  n.getFirstChild().getType()!=  Token.EXPR_RESULT;  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  ==  Token.FUNCTION  &&  n.getFirstChild().getType()!=  Token.EXPR_RESULT;	  return    n.getType()    ==    Token.FUNCTION    ||    n.getFirstChild().getType()    ==    Token.EXPR_RESULT;    	non-compiled	[CE]  	14	None	replace
225	[BUG]  [BUGGY]  return  n.getType()  ==  Token.FUNCTION  ||  n.getLastChild().getType()  ==  Token.EXPR_RESULT;  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()  ==  Token.FUNCTION  ||  n.getLastChild().getType()  ==  Token.EXPR_RESULT;  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  ==  Token.FUNCTION  ||  n.getLastChild().getType()  ==  Token.EXPR_RESULT;	  return    n.getType()    ==    Token.FUNCTION    ||    n.getFirstChild().getType()    ==    Token.EXPR_RESULT;    	non-compiled	[CE]  	14	None	replace
226	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0  =  arg0.getNext())  {  Node  newOp  =  arg0.getNext();  if(newOp!=  null)  {  return  newOp;  }  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0  =  arg0.getNext())  {  Node  newOp  =  arg0.getNext();  if(newOp!=  null)  {  return  newOp;  }  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0  =  arg0.getNext())  {  Node  newOp  =  arg0.getNext();  if(newOp!=  null)  {  return  newOp;  }	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0    =    arg0.getNext())    {    Node    newOp    =    arg0.getNext();    if(newOp!=    null)    {    return    newOp;    }    	non-compiled	[CE]  	47	None	replace
227	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg  >=  null;  arg0  =  arg0.getNext())  {  Node  newOp  =  arg0.getNext();  if(newOp!=  null)  {  return  newOp;  }  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg  >=  null;  arg0  =  arg0.getNext())  {  Node  newOp  =  arg0.getNext();  if(newOp!=  null)  {  return  newOp;  }  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg  >=  null;  arg0  =  arg0.getNext())  {  Node  newOp  =  arg0.getNext();  if(newOp!=  null)  {  return  newOp;  }	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0    =    arg0.getNext())    {    Node    newOp    =    arg0.getNext();    if(newOp!=    null)    {    return    newOp;    }    	non-compiled	[CE]  	47	None	replace
228	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg  <  null;  arg0  =  arg0.getNext())  {  Node  newOp  =  arg0.getNext();  if(newOp!=  null)  {  return  newOp;  }  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg  <  null;  arg0  =  arg0.getNext())  {  Node  newOp  =  arg0.getNext();  if(newOp!=  null)  {  return  newOp;  }  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg  <  null;  arg0  =  arg0.getNext())  {  Node  newOp  =  arg0.getNext();  if(newOp!=  null)  {  return  newOp;  }	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0    =    arg0.getNext())    {    Node    newOp    =    arg0.getNext();    if(newOp!=    null)    {    return    newOp;    }    	non-compiled	[CE]  	47	None	replace
229	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0  =  arg0.getNext())  {  Node  newOp  =  arg0.getNext();  if(newOp  ==  null)  {  return  newOp;  }  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0  =  arg0.getNext())  {  Node  newOp  =  arg0.getNext();  if(newOp  ==  null)  {  return  newOp;  }  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0  =  arg0.getNext())  {  Node  newOp  =  arg0.getNext();  if(newOp  ==  null)  {  return  newOp;  }	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0    =    arg0.getNext())    {    Node    newOp    =    arg0.getNext();    if(newOp!=    null)    {    return    newOp;    }    	non-compiled	[CE]  	47	None	replace
230	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg  ==  null;  arg0  =  arg0.getNext())  {  Node  newOp  =  arg0.getNext();  if(newOp!=  null)  {  return  newOp;  }  [CE]  [FE]                                            AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg  ==  null;  arg0  =  arg0.getNext())  {  Node  newOp  =  arg0.getNext();  if(newOp!=  null)  {  return  newOp;  }  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg  ==  null;  arg0  =  arg0.getNext())  {  Node  newOp  =  arg0.getNext();  if(newOp!=  null)  {  return  newOp;  }	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0    =    arg0.getNext())    {    Node    newOp    =    arg0.getNext();    if(newOp!=    null)    {    return    newOp;    }    	non-compiled	[CE]  	47	None	replace
231	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getNext()  :  n.getNext();  [CE]  [FE]            AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getNext()  :  n.getNext();  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  ==  Token.NAME?  n.getNext()  :  n.getNext();	  return    n.getType()    ==    Token.NAME?    n.getParent()    :    n.getNext();    	non-compiled	[CE]  	64	None	replace
232	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getNext()  :  n.getParent();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getNext()  :  n.getParent();  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  ==  Token.NAME?  n.getNext()  :  n.getParent();	  return    n.getType()    ==    Token.NAME?    n.getParent()    :    n.getNext();    	non-compiled	[CE]  	64	None	replace
233	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getNameNode()  :  n.getNext();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getNameNode()  :  n.getNext();  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  ==  Token.NAME?  n.getNameNode()  :  n.getNext();	  return    n.getType()    ==    Token.NAME?    n.getParent()    :    n.getNext();    	non-compiled	[CE]  	64	None	replace
234	[BUG]  [BUGGY]  return  n.getType()  ==  Token.FUNCTION  &&  n.hasChildren();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()  ==  Token.FUNCTION  &&  n.hasChildren();  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  ==  Token.FUNCTION  &&  n.hasChildren();	  return    n.getType()    ==    Token.FUNCTION    ||    n.hasChildren();    	non-compiled	[CE]  	52	None	replace
235	[BUG]  [BUGGY]  return  n.getType()!=  Token.FUNCTION  &&  n.hasChildren();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()!=  Token.FUNCTION  &&  n.hasChildren();  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()!=  Token.FUNCTION  &&  n.hasChildren();	  return    n.getType()    ==    Token.FUNCTION    ||    n.hasChildren();    	non-compiled	[CE]  	52	None	replace
236	[BUG]  [BUGGY]  return  n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild().hasChildren();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild().hasChildren();  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild().hasChildren();	  return    n.getType()    ==    Token.FUNCTION    ||    n.hasChildren();    	non-compiled	[CE]  	52	None	replace
237	[BUG]  [BUGGY]  return  n.getType()  ==  Token.FUNCTION  ||  n.removeChild(n.getFirstChild());  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()  ==  Token.FUNCTION  ||  n.removeChild(n.getFirstChild());  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  ==  Token.FUNCTION  ||  n.removeChild(n.getFirstChild());	  return    n.getType()    ==    Token.FUNCTION    ||    n.hasChildren();    	non-compiled	[CE]  	52	None	replace
238	[BUG]  [BUGGY]  return  n.getType()!=  Token.FUNCTION  ||  n.hasChildren();  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()!=  Token.FUNCTION  ||  n.hasChildren();  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()!=  Token.FUNCTION  ||  n.hasChildren();	  return    n.getType()    ==    Token.FUNCTION    ||    n.hasChildren();    	non-compiled	[CE]  	52	None	replace
239	[BUG]  [BUGGY]  return  n.getType()  ==  Token.FUNCTION  ||  n.parent.hasChildren();  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()  ==  Token.FUNCTION  ||  n.parent.hasChildren();  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  ==  Token.FUNCTION  ||  n.parent.hasChildren();	  return    n.getType()    ==    Token.FUNCTION    ||    n.hasChildren();    	non-compiled	[CE]  	52	None	replace
240	[BUG]  [BUGGY]  return  n.getType()!=  Token.NAME?  n.getFirstChild()  :  n.getLastChild();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()!=  Token.NAME?  n.getFirstChild()  :  n.getLastChild();  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()!=  Token.NAME?  n.getFirstChild()  :  n.getLastChild();	  return    n.getType()    ==    Token.NAME?    n.getLastChild()    :    n.getLastChild();    	non-compiled	[CE]  	23	None	replace
241	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME  &&  n.getLastChild()  :  n.getLastChild();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()  ==  Token.NAME  &&  n.getLastChild()  :  n.getLastChild();  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  ==  Token.NAME  &&  n.getLastChild()  :  n.getLastChild();	  return    n.getType()    ==    Token.NAME?    n.getLastChild()    :    n.getLastChild();    	non-compiled	[CE]  	23	None	replace
242	[BUG]  [BUGGY]  return  newLiteralNode.getType()  ==  Token.NAME?  n.getFirstChild()  :  n.getLastChild();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  newLiteralNode.getType()  ==  Token.NAME?  n.getFirstChild()  :  n.getLastChild();  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  newLiteralNode.getType()  ==  Token.NAME?  n.getFirstChild()  :  n.getLastChild();	  return    n.getType()    ==    Token.NAME?    n.getLastChild()    :    n.getLastChild();    	non-compiled	[CE]  	23	None	replace
243	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0.getNext())  {  Node  arg0  =  arg0.getNext();  if(arg0.getNext().getNext().getNext().getNext().  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0.getNext())  {  Node  arg0  =  arg0.getNext();  if(arg0.getNext().getNext().getNext().getNext().  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0.getNext())  {  Node  arg0  =  arg0.getNext();  if(arg0.getNext().getNext().getNext().getNext().	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0.getNext())    {    Node    arg0    =    arg0.getNext();    if(arg0.getNext().getNext().getNext().getNext().getNext    	non-compiled	[CE]  	59	None	replace
244	[BUG]  [BUGGY]  Node  arg0  =  n.getLastChild();  if(arg0.getNext().getNext().getNext().getNext().getNext().getNext  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  Node  arg0  =  n.getLastChild();  if(arg0.getNext().getNext().getNext().getNext().getNext().getNext  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	Node  arg0  =  n.getLastChild();  if(arg0.getNext().getNext().getNext().getNext().getNext().getNext	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0.getNext())    {    Node    arg0    =    arg0.getNext();    if(arg0.getNext().getNext().getNext().getNext().getNext    	non-compiled	[CE]  	59	None	replace
245	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0.getNext())  {  Node  arg0  =  arg0.getNext();  if(arg0.getNext().getNext().getNext().getNext().getNext  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0.getNext())  {  Node  arg0  =  arg0.getNext();  if(arg0.getNext().getNext().getNext().getNext().getNext  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0.getNext())  {  Node  arg0  =  arg0.getNext();  if(arg0.getNext().getNext().getNext().getNext().getNext	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0.getNext())    {    Node    arg0    =    arg0.getNext();    if(arg0.getNext().getNext().getNext().getNext().getNext    	non-compiled	[CE]  	59	None	replace
246	[BUG]  [BUGGY]  return  n.getType()!=  Token.GETPROP;  [CE]  [FE]            AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()!=  Token.GETPROP;  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()!=  Token.GETPROP;	  return    n.getType()    ==    Token.GETPROP;    	non-compiled	[CE]  	39	None	replace
247	[BUG]  [BUGGY]  return  n.getType()  ==  Token.SETPROP;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()  ==  Token.SETPROP;  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  ==  Token.SETPROP;	  return    n.getType()    ==    Token.GETPROP;    	non-compiled	[CE]  	39	None	replace
248	[BUG]  [BUGGY]  return  n.getType()  ==  Token.GETPROP  +  1;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()  ==  Token.GETPROP  +  1;  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  ==  Token.GETPROP  +  1;	  return    n.getType()    ==    Token.GETPROP;    	non-compiled	[CE]  	39	None	replace
249	[BUG]  [BUGGY]  return  n.getType()  ==  Token.GETELEM;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()  ==  Token.GETELEM;  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  ==  Token.GETELEM;	  return    n.getType()    ==    Token.GETPROP;    	non-compiled	[CE]  	39	None	replace
250	[BUG]  [BUGGY]  return  n.getType()  >=  Token.GETPROP;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()  >=  Token.GETPROP;  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  >=  Token.GETPROP;	  return    n.getType()    ==    Token.GETPROP;    	non-compiled	[CE]  	39	None	replace
251	[BUG]  [BUGGY]  return  n.getType()  ==  Token.FUNCTION  &&  n.getParent().getType()  ==  Token.VAR;  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()  ==  Token.FUNCTION  &&  n.getParent().getType()  ==  Token.VAR;  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  ==  Token.FUNCTION  &&  n.getParent().getType()  ==  Token.VAR;	  return    n.getType()    ==    Token.FUNCTION    ||    n.getParent().getType()    ==    Token.VAR;    	non-compiled	[CE]  	17	None	replace
252	[BUG]  [BUGGY]  return  n.getType()!=  Token.FUNCTION  &&  n.getParent().getType()  ==  Token.VAR;  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()!=  Token.FUNCTION  &&  n.getParent().getType()  ==  Token.VAR;  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()!=  Token.FUNCTION  &&  n.getParent().getType()  ==  Token.VAR;	  return    n.getType()    ==    Token.FUNCTION    ||    n.getParent().getType()    ==    Token.VAR;    	non-compiled	[CE]  	17	None	replace
253	[BUG]  [BUGGY]  return  n.getType()  ==  Token.VAR  ||  n.getParent().getType()  ==  Token.FUNCTION;  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()  ==  Token.VAR  ||  n.getParent().getType()  ==  Token.FUNCTION;  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  ==  Token.VAR  ||  n.getParent().getType()  ==  Token.FUNCTION;	  return    n.getType()    ==    Token.FUNCTION    ||    n.getParent().getType()    ==    Token.VAR;    	non-compiled	[CE]  	17	None	replace
254	[BUG]  [BUGGY]  return  n.getType()  ==  Token.FUNCTION  ||  n.getNext().getType()  ==  Token.VAR;  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()  ==  Token.FUNCTION  ||  n.getNext().getType()  ==  Token.VAR;  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  ==  Token.FUNCTION  ||  n.getNext().getType()  ==  Token.VAR;	  return    n.getType()    ==    Token.FUNCTION    ||    n.getParent().getType()    ==    Token.VAR;    	non-compiled	[CE]  	17	None	replace
255	[BUG]  [BUGGY]  return  n.getType()  ==  Token.FUNCTION  &&  n.getParent().getType()!=  Token.VAR;  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()  ==  Token.FUNCTION  &&  n.getParent().getType()!=  Token.VAR;  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  ==  Token.FUNCTION  &&  n.getParent().getType()!=  Token.VAR;	  return    n.getType()    ==    Token.FUNCTION    ||    n.getParent().getType()    ==    Token.VAR;    	non-compiled	[CE]  	17	None	replace
256	[BUG]  [BUGGY]  return  n.getType()  ==  Token.FUNCTION  &&  n.getNext().getType()  ==  Token.VAR;  [CE]  [FE]                                            AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()  ==  Token.FUNCTION  &&  n.getNext().getType()  ==  Token.VAR;  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  ==  Token.FUNCTION  &&  n.getNext().getType()  ==  Token.VAR;	  return    n.getType()    ==    Token.FUNCTION    ||    n.getParent().getType()    ==    Token.VAR;    	non-compiled	[CE]  	17	None	replace
257	[BUG]  [BUGGY]  return  n.getType()!=  Token.EMPTY;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()!=  Token.EMPTY;  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()!=  Token.EMPTY;	  return    n.getType()    ==    Token.EMPTY;    	non-compiled	[CE]  	50	None	replace
258	[BUG]  [BUGGY]  return  n.getFirstChild().getType()  ==  Token.EMPTY;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getFirstChild().getType()  ==  Token.EMPTY;  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getFirstChild().getType()  ==  Token.EMPTY;	  return    n.getType()    ==    Token.EMPTY;    	non-compiled	[CE]  	50	None	replace
259	[BUG]  [BUGGY]  return  n.getType()  ==  Token.EXPR_RESULT;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()  ==  Token.EXPR_RESULT;  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  ==  Token.EXPR_RESULT;	  return    n.getType()    ==    Token.EMPTY;    	non-compiled	[CE]  	50	None	replace
260	[BUG]  [BUGGY]  return  n.getType()  ==  Token.EMPTY  ||  n.getFirstChild().getType()  ==  Token.FUNCTION;  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()  ==  Token.EMPTY  ||  n.getFirstChild().getType()  ==  Token.FUNCTION;  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  ==  Token.EMPTY  ||  n.getFirstChild().getType()  ==  Token.FUNCTION;	  return    n.getType()    ==    Token.EMPTY;    	non-compiled	[CE]  	50	None	replace
261	[BUG]  [BUGGY]  return  n.getType()  ==  Token.EMPTY  ||  n.getFirstChild().getType()  ==  Token.NAME;  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()  ==  Token.EMPTY  ||  n.getFirstChild().getType()  ==  Token.NAME;  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  ==  Token.EMPTY  ||  n.getFirstChild().getType()  ==  Token.NAME;	  return    n.getType()    ==    Token.EMPTY;    	non-compiled	[CE]  	50	None	replace
262	[BUG]  [BUGGY]  return  n.getType()  ==  Token.EMPTY  ||  n.getFirstChild().getType()  ==  Token.STRING;  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()  ==  Token.EMPTY  ||  n.getFirstChild().getType()  ==  Token.STRING;  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  ==  Token.EMPTY  ||  n.getFirstChild().getType()  ==  Token.STRING;	  return    n.getType()    ==    Token.EMPTY;    	non-compiled	[CE]  	50	None	replace
263	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getNext()  :  n.getLastChild();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getNext()  :  n.getLastChild();  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  ==  Token.NAME?  n.getNext()  :  n.getLastChild();	  return    n.getType()    ==    Token.NAME?    n.getFirstChild()    :    n.getLastChild();    	non-compiled	[CE]  	24	None	replace
264	[BUG]  [BUGGY]  For(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0.getNext())  {  Preconditions.checkState(arg0.getNext().getType()  ==  Token.FUNCTION);  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  For(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0.getNext())  {  Preconditions.checkState(arg0.getNext().getType()  ==  Token.FUNCTION);  }  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	For(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0.getNext())  {  Preconditions.checkState(arg0.getNext().getType()  ==  Token.FUNCTION);  }	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0.getNext())    {    Preconditions.checkState(arg0.getNext().getType()    ==    Token.FUNCTION);    }    	non-compiled	[CE]  	1	None	replace
265	[BUG]  [BUGGY]  Preconditions.checkState(n.getNext().getType()  ==  Token.FUNCTION);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  Preconditions.checkState(n.getNext().getType()  ==  Token.FUNCTION);  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	Preconditions.checkState(n.getNext().getType()  ==  Token.FUNCTION);	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0.getNext())    {    Preconditions.checkState(arg0.getNext().getType()    ==    Token.FUNCTION);    }    	non-compiled	[CE]  	1	None	replace
266	[BUG]  [BUGGY]  Preconditions.checkState(arg0.getNext().getType()  ==  Token.FUNCTION);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  Preconditions.checkState(arg0.getNext().getType()  ==  Token.FUNCTION);  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	Preconditions.checkState(arg0.getNext().getType()  ==  Token.FUNCTION);	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0.getNext())    {    Preconditions.checkState(arg0.getNext().getType()    ==    Token.FUNCTION);    }    	non-compiled	[CE]  	1	None	replace
267	[BUG]  [BUGGY]  For(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0.getNext())  {  Preconditions.checkState(arg0.getNext().getType()  ==  Token.FUNCTION);  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  For(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0.getNext())  {  Preconditions.checkState(arg0.getNext().getType()  ==  Token.FUNCTION);  }  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	For(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0.getNext())  {  Preconditions.checkState(arg0.getNext().getType()  ==  Token.FUNCTION);  }	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0.getNext())    {    Preconditions.checkState(arg0.getNext().getType()    ==    Token.FUNCTION);    }    	non-compiled	[CE]  	1	None	replace
268	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0.hasNext())  {  Preconditions.checkState(arg0.getNext().getType()  ==  Token.FUNCTION);  }  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0.hasNext())  {  Preconditions.checkState(arg0.getNext().getType()  ==  Token.FUNCTION);  }  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0.hasNext())  {  Preconditions.checkState(arg0.getNext().getType()  ==  Token.FUNCTION);  }	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0.getNext())    {    Preconditions.checkState(arg0.getNext().getType()    ==    Token.FUNCTION);    }    	non-compiled	[CE]  	1	None	replace
269	[BUG]  [BUGGY]  return  n.getFirstChild().removeChild(n.getLastChild());  [CE]  [FE]            AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getFirstChild().removeChild(n.getLastChild());  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getFirstChild().removeChild(n.getLastChild());	  return    n.removeChild(n.getFirstChild());    	non-compiled	[CE]  	62	None	replace
270	[BUG]  [BUGGY]  return  n.getNext().removeChild(n.getFirstChild());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getNext().removeChild(n.getFirstChild());  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getNext().removeChild(n.getFirstChild());	  return    n.removeChild(n.getFirstChild());    	non-compiled	[CE]  	62	None	replace
271	[BUG]  [BUGGY]  return  n.getFirstChild().removeChild(newLiteralNode);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getFirstChild().removeChild(newLiteralNode);  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getFirstChild().removeChild(newLiteralNode);	  return    n.removeChild(n.getFirstChild());    	non-compiled	[CE]  	62	None	replace
272	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getChildCount()  :  n.getRootNode();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getChildCount()  :  n.getRootNode();  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  ==  Token.NAME?  n.getChildCount()  :  n.getRootNode();	  return    n.getType()    ==    Token.NAME?    n.getChildCount()    :    n.getParent();    	non-compiled	[CE]  	18	None	replace
273	[BUG]  [BUGGY]  return  n.getFirstChild()  ==  null?  n.getLastChild()  :  n.getFirstChild();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getFirstChild()  ==  null?  n.getLastChild()  :  n.getFirstChild();  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getFirstChild()  ==  null?  n.getLastChild()  :  n.getFirstChild();	  return    n.getType()    ==    Token.NAME?    n.getLastChild()    :    n.getFirstChild();    	non-compiled	[CE]  	28	None	replace
274	[BUG]  [BUGGY]  return  n.replaceChild(n,  FoldArrayAction.STANDARD_OBJECT_CONSTRUCTORS);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.replaceChild(n,  FoldArrayAction.STANDARD_OBJECT_CONSTRUCTORS);  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.replaceChild(n,  FoldArrayAction.STANDARD_OBJECT_CONSTRUCTORS);	  return    n.removeLastChild();    	non-compiled	[CE]  	9	None	replace
275	[BUG]  [BUGGY]  return  n.getType()  ==  Token.STRING  ||  n.hasChildren();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()  ==  Token.STRING  ||  n.hasChildren();  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  ==  Token.STRING  ||  n.hasChildren();	  return    n.getType()    ==    Token.STRING;    	non-compiled	[CE]  	51	None	replace
276	[BUG]  [BUGGY]  return  n.getParent().getType()  ==  Token.STRING;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getParent().getType()  ==  Token.STRING;  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getParent().getType()  ==  Token.STRING;	  return    n.getType()    ==    Token.STRING;    	non-compiled	[CE]  	51	None	replace
277	[BUG]  [BUGGY]  return  n.getType()  ==  Token.STRING  +  1;  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()  ==  Token.STRING  +  1;  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  ==  Token.STRING  +  1;	  return    n.getType()    ==    Token.STRING;    	non-compiled	[CE]  	51	None	replace
278	[BUG]  [BUGGY]  return  n.getType()  ==  Token.STRING  ||  n.getChildCount()  ==  1;  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()  ==  Token.STRING  ||  n.getChildCount()  ==  1;  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  ==  Token.STRING  ||  n.getChildCount()  ==  1;	  return    n.getType()    ==    Token.STRING;    	non-compiled	[CE]  	51	None	replace
279	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg  >>  null;  arg0)  {  Node  arg0  =  arg0.getNext();  if(arg0!=  null)  {  reportCodeChange();  }  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg  >>  null;  arg0)  {  Node  arg0  =  arg0.getNext();  if(arg0!=  null)  {  reportCodeChange();  }  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg  >>  null;  arg0)  {  Node  arg0  =  arg0.getNext();  if(arg0!=  null)  {  reportCodeChange();  }	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0)    {    Node    arg0    =    arg0.getNext();    if(arg0!=    null)    {    reportCodeChange();    }    	non-compiled	[CE]  	46	None	replace
280	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0)  {  Node  arg1  =  arg0.getNext();  if(arg1!=  null)  {  reportCodeChange();  }  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0)  {  Node  arg1  =  arg0.getNext();  if(arg1!=  null)  {  reportCodeChange();  }  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0)  {  Node  arg1  =  arg0.getNext();  if(arg1!=  null)  {  reportCodeChange();  }	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0)    {    Node    arg0    =    arg0.getNext();    if(arg0!=    null)    {    reportCodeChange();    }    	non-compiled	[CE]  	46	None	replace
281	[BUG]  [BUGGY]  return  n.getType()  ==  Token.VAR  ||  n.hasChildren();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()  ==  Token.VAR  ||  n.hasChildren();  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  ==  Token.VAR  ||  n.hasChildren();	  return    n.getType()    ==    Token.VAR;    	non-compiled	[CE]  	61	None	replace
282	[BUG]  [BUGGY]  return  n.getType()  ==  Token.VAR  ||  n.getChildCount()  ==  1;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()  ==  Token.VAR  ||  n.getChildCount()  ==  1;  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  ==  Token.VAR  ||  n.getChildCount()  ==  1;	  return    n.getType()    ==    Token.VAR;    	non-compiled	[CE]  	61	None	replace
283	[BUG]  [BUGGY]  return  n.getType()  ==  Token.VAR  ||  n.getFirstChild()!=  null;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()  ==  Token.VAR  ||  n.getFirstChild()!=  null;  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  ==  Token.VAR  ||  n.getFirstChild()!=  null;	  return    n.getType()    ==    Token.VAR;    	non-compiled	[CE]  	61	None	replace
284	[BUG]  [BUGGY]  n.replaceChild(n,  newLiteralNode);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  n.replaceChild(n,  newLiteralNode);  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	n.replaceChild(n,  newLiteralNode);	  n.removeChild(newLiteralNode);    	non-compiled	[CE]  	42	None	replace
285	[BUG]  [BUGGY]  n.removeChild(newNode);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  n.removeChild(newNode);  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	n.removeChild(newNode);	  n.removeChild(newLiteralNode);    	non-compiled	[CE]  	42	None	replace
286	[BUG]  [BUGGY]  return  n.getParent().removeChild(n.getLastChild());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getParent().removeChild(n.getLastChild());  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getParent().removeChild(n.getLastChild());	  return    n.removeChild(n.getLastChild());    	non-compiled	[CE]  	63	None	replace
287	[BUG]  [BUGGY]  return  n.replaceChild(n.getFirstChild(),  newLiteralNode);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.replaceChild(n.getFirstChild(),  newLiteralNode);  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.replaceChild(n.getFirstChild(),  newLiteralNode);	  return    n.removeChild(n.getLastChild());    	non-compiled	[CE]  	63	None	replace
288	[BUG]  [BUGGY]  return  n.getLastChild().removeChild(n);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getLastChild().removeChild(n);  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getLastChild().removeChild(n);	  return    n.removeChild(n.getLastChild());    	non-compiled	[CE]  	63	None	replace
289	[BUG]  [BUGGY]  return  n.getParent().getType()  ==  Token.EMPTY;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getParent().getType()  ==  Token.EMPTY;  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getParent().getType()  ==  Token.EMPTY;	  return    n.getType()    ==    Token.EMPTY;    	non-compiled	[CE]  	50	None	replace
290	[BUG]  [BUGGY]  return  n.getType()  ==  Token.EMPTY  ||  n.getFirstChild()!=  null;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()  ==  Token.EMPTY  ||  n.getFirstChild()!=  null;  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  ==  Token.EMPTY  ||  n.getFirstChild()!=  null;	  return    n.getType()    ==    Token.EMPTY;    	non-compiled	[CE]  	50	None	replace
291	[BUG]  [BUGGY]  return  n.getType()  ==  Token.EMPTY  ||  n.getChildCount()  ==  1;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()  ==  Token.EMPTY  ||  n.getChildCount()  ==  1;  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  ==  Token.EMPTY  ||  n.getChildCount()  ==  1;	  return    n.getType()    ==    Token.EMPTY;    	non-compiled	[CE]  	50	None	replace
292	[BUG]  [BUGGY]  return  n.getType()!=  Token.NAME?  null  :  n.getLastChild();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()!=  Token.NAME?  null  :  n.getLastChild();  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()!=  Token.NAME?  null  :  n.getLastChild();	  return    n.getType()    ==    Token.NAME?    null    :    n.getFirstChild();    	non-compiled	[CE]  	36	None	replace
293	[BUG]  [BUGGY]  return  n.getLastChild().getFirstChild().getString();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getLastChild().getFirstChild().getString();  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getLastChild().getFirstChild().getString();	  return    n.getLastChild().getString();    	non-compiled	[CE]  	34	None	replace
294	[BUG]  [BUGGY]  return  n.getfirstChild().getString();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getfirstChild().getString();  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getfirstChild().getString();	  return    n.getLastChild().getString();    	non-compiled	[CE]  	34	None	replace
295	[BUG]  [BUGGY]  return  n.getNext().getString();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getNext().getString();  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getNext().getString();	  return    n.getLastChild().getString();    	non-compiled	[CE]  	34	None	replace
296	[BUG]  [BUGGY]  return  n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild().getType()!=  Token.EXPR_RESULT;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild().getType()!=  Token.EXPR_RESULT;  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild().getType()!=  Token.EXPR_RESULT;	  return    n.getType()    ==    Token.FUNCTION    ||    n.getFirstChild().getType()    ==    Token.EXPR_RESULT;    	non-compiled	[CE]  	14	None	replace
297	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getParent()  :  n.getFirstChild();  [CE]  [FE]            AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getParent()  :  n.getFirstChild();  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  ==  Token.NAME?  n.getParent()  :  n.getFirstChild();	  return    n.getType()    ==    Token.NAME?    n.getParent()    :    n.getNext();    	non-compiled	[CE]  	64	None	replace
298	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg  >=  null;  arg0)  {  Preconditions.checkState(arg0.getType()  ==  Token.VAR);  newOp  =  arg0.getNext();  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg  >=  null;  arg0)  {  Preconditions.checkState(arg0.getType()  ==  Token.VAR);  newOp  =  arg0.getNext();  }  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg  >=  null;  arg0)  {  Preconditions.checkState(arg0.getType()  ==  Token.VAR);  newOp  =  arg0.getNext();  }	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0)    {    Preconditions.checkState(arg0.getType()    ==    Token.VAR);    newOp    =    arg0.getNext();    }    	non-compiled	[CE]  	55	None	replace
299	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg0  ==  null;  arg0)  {  Node  newOp  =  arg0.getNext();  if(newOp!=  null)  {  return  newOp;  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg0  ==  null;  arg0)  {  Node  newOp  =  arg0.getNext();  if(newOp!=  null)  {  return  newOp;  }  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg0  ==  null;  arg0)  {  Node  newOp  =  arg0.getNext();  if(newOp!=  null)  {  return  newOp;  }	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0)    {    Node    newOp    =    arg0.getNext();    if(newOp!=    null)    {    return    newOp;    }    	non-compiled	[CE]  	43	None	replace
300	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0)  {  newOp  =  arg0.getNext();  if(newOp!=  null)  {  return  newOp;  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0)  {  newOp  =  arg0.getNext();  if(newOp!=  null)  {  return  newOp;  }  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0)  {  newOp  =  arg0.getNext();  if(newOp!=  null)  {  return  newOp;  }	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0)    {    Node    newOp    =    arg0.getNext();    if(newOp!=    null)    {    return    newOp;    }    	non-compiled	[CE]  	43	None	replace
301	[BUG]  [BUGGY]  return  n.getType()!=  Token.NAME?  n.getLastChild()  :  n;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()!=  Token.NAME?  n.getLastChild()  :  n;  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()!=  Token.NAME?  n.getLastChild()  :  n;	  return    n.getType()    ==    Token.NAME?    n.getFirstChild()    :    n;    	non-compiled	[CE]  	65	None	replace
302	[BUG]  [BUGGY]  return  n.getType()  ==  Token.FUNCTION  ||  n.getChildCount()  >  1;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()  ==  Token.FUNCTION  ||  n.getChildCount()  >  1;  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  ==  Token.FUNCTION  ||  n.getChildCount()  >  1;	  return    n.getType()    ==    Token.FUNCTION    ||    n.hasChildren();    	non-compiled	[CE]  	52	None	replace
303	[BUG]  [BUGGY]  return  n.getType()  ==  Token.FUNCTION  ||  n.removeChild(n);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()  ==  Token.FUNCTION  ||  n.removeChild(n);  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  ==  Token.FUNCTION  ||  n.removeChild(n);	  return    n.getType()    ==    Token.FUNCTION    ||    n.hasChildren();    	non-compiled	[CE]  	52	None	replace
304	[BUG]  [BUGGY]  return  n.getFirstChild()  ==  null?  n.getLastChild()  :  n.getLastChild();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getFirstChild()  ==  null?  n.getLastChild()  :  n.getLastChild();  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getFirstChild()  ==  null?  n.getLastChild()  :  n.getLastChild();	  return    n.getType()    ==    Token.NAME?    n.getLastChild()    :    n.getLastChild();    	non-compiled	[CE]  	23	None	replace
305	[BUG]  [BUGGY]  return  n.getFirstChild()  ==  Token.NAME?  n.getLastChild()  :  n.getLastChild();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getFirstChild()  ==  Token.NAME?  n.getLastChild()  :  n.getLastChild();  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getFirstChild()  ==  Token.NAME?  n.getLastChild()  :  n.getLastChild();	  return    n.getType()    ==    Token.NAME?    n.getLastChild()    :    n.getLastChild();    	non-compiled	[CE]  	23	None	replace
306	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME  &&  n.getLastChild().getString().equals( "function ")?  n.getLastChild()  :  n.getLastChild();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()  ==  Token.NAME  &&  n.getLastChild().getString().equals( "function ")?  n.getLastChild()  :  n.getLastChild();  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  ==  Token.NAME  &&  n.getLastChild().getString().equals( "function ")?  n.getLastChild()  :  n.getLastChild();	  return    n.getType()    ==    Token.NAME?    n.getLastChild()    :    n.getLastChild();    	non-compiled	[CE]  	23	None	replace
307	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0.getNext())  {  Preconditions.checkState(arg0.getNext().getType()  ==  Token.FUNCTION);  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0.getNext())  {  Preconditions.checkState(arg0.getNext().getType()  ==  Token.FUNCTION);  }  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0.getNext())  {  Preconditions.checkState(arg0.getNext().getType()  ==  Token.FUNCTION);  }	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0.getNext())    {    Preconditions.checkState(arg0.getNext().getType()    ==    Token.FUNCTION);    }    	non-compiled	[CE]  	1	None	replace
308	[BUG]  [BUGGY]  for(Node  arg0  =  n.getLastChild();  arg0!=  null;  arg0.getNext())  {  Preconditions.checkState(arg0.getNext().getType()  ==  Token.FUNCTION);  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getLastChild();  arg0!=  null;  arg0.getNext())  {  Preconditions.checkState(arg0.getNext().getType()  ==  Token.FUNCTION);  }  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getLastChild();  arg0!=  null;  arg0.getNext())  {  Preconditions.checkState(arg0.getNext().getType()  ==  Token.FUNCTION);  }	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0.getNext())    {    Preconditions.checkState(arg0.getNext().getType()    ==    Token.FUNCTION);    }    	non-compiled	[CE]  	1	None	replace
309	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg0  ==  null;  arg0.getNext())  {  Preconditions.checkState(arg0.getNext().getType()  ==  Token.FUNCTION);  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg0  ==  null;  arg0.getNext())  {  Preconditions.checkState(arg0.getNext().getType()  ==  Token.FUNCTION);  }  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg0  ==  null;  arg0.getNext())  {  Preconditions.checkState(arg0.getNext().getType()  ==  Token.FUNCTION);  }	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0.getNext())    {    Preconditions.checkState(arg0.getNext().getType()    ==    Token.FUNCTION);    }    	non-compiled	[CE]  	1	None	replace
310	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0.hasNext())  {  Preconditions.checkState(arg0.getNext().getType()  ==  Token.FUNCTION);  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0.hasNext())  {  Preconditions.checkState(arg0.getNext().getType()  ==  Token.FUNCTION);  }  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0.hasNext())  {  Preconditions.checkState(arg0.getNext().getType()  ==  Token.FUNCTION);  }	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0.getNext())    {    Preconditions.checkState(arg0.getNext().getType()    ==    Token.FUNCTION);    }    	non-compiled	[CE]  	1	None	replace
311	[BUG]  [BUGGY]  return  n.cloneChildren();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.cloneChildren();  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.cloneChildren();	  return    n.cloneNode();    	non-compiled	[CE]  	40	None	replace
312	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg  ==  null;  arg0)  {  Node  newOp  =  arg0.getNext();  if(newOp!=  null)  {  newOp  =  newOp;  }  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg  ==  null;  arg0)  {  Node  newOp  =  arg0.getNext();  if(newOp!=  null)  {  newOp  =  newOp;  }  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg  ==  null;  arg0)  {  Node  newOp  =  arg0.getNext();  if(newOp!=  null)  {  newOp  =  newOp;  }	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0)    {    Node    newOp    =    arg0.getNext();    if(newOp!=    null)    {    newOp    =    newOp;    }    	non-compiled	[CE]  	48	None	replace
313	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0)  {  Node  newOp  =  arg0.getNext();  if(newOp  ==  null)  {  newOp  =  newOp;  }  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0)  {  Node  newOp  =  arg0.getNext();  if(newOp  ==  null)  {  newOp  =  newOp;  }  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0)  {  Node  newOp  =  arg0.getNext();  if(newOp  ==  null)  {  newOp  =  newOp;  }	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0)    {    Node    newOp    =    arg0.getNext();    if(newOp!=    null)    {    newOp    =    newOp;    }    	non-compiled	[CE]  	48	None	replace
314	[BUG]  [BUGGY]  return  n.getNext().getType()  ==  Token.FUNCTION;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getNext().getType()  ==  Token.FUNCTION;  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getNext().getType()  ==  Token.FUNCTION;	  return    n.getFirstChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	13	None	replace
315	[BUG]  [BUGGY]  return  n.getType()!=  Token.NAME?  n.getLastChild()  :  null;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()!=  Token.NAME?  n.getLastChild()  :  null;  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()!=  Token.NAME?  n.getLastChild()  :  null;	  return    n.getType()    ==    Token.NAME?    n.getFirstChild()    :    null;    	non-compiled	[CE]  	25	None	replace
316	[BUG]  [BUGGY]  return  n.getFirstChild()  ==  null?  n.getLastChild()  :  n.getNext();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getFirstChild()  ==  null?  n.getLastChild()  :  n.getNext();  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getFirstChild()  ==  null?  n.getLastChild()  :  n.getNext();	  return    n.getType()    ==    Token.NAME?    n.getLastChild()    :    n.getNext();    	non-compiled	[CE]  	22	None	replace
317	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0)  {  Preconditions.checkNotNull(arg0);  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0)  {  Preconditions.checkNotNull(arg0);  }  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0)  {  Preconditions.checkNotNull(arg0);  }	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0)    {    Preconditions.checkNotNull(arg0);    }    	non-compiled	[CE]  	45	None	replace
318	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg  <  null;  arg0)  {  Preconditions.checkNotNull(arg0);  }  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg  <  null;  arg0)  {  Preconditions.checkNotNull(arg0);  }  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg  <  null;  arg0)  {  Preconditions.checkNotNull(arg0);  }	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0)    {    Preconditions.checkNotNull(arg0);    }    	non-compiled	[CE]  	45	None	replace
319	[BUG]  [BUGGY]  for(Node  arg0  =  n.getNext();  arg0!=  null;  arg0)  {  Preconditions.checkNotNull(arg0);  }  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getNext();  arg0!=  null;  arg0)  {  Preconditions.checkNotNull(arg0);  }  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getNext();  arg0!=  null;  arg0)  {  Preconditions.checkNotNull(arg0);  }	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0)    {    Preconditions.checkNotNull(arg0);    }    	non-compiled	[CE]  	45	None	replace
320	[BUG]  [BUGGY]  return  n.getNext()!=  null?  null  :  n.getType()  >>  Token.FUNCTION;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getNext()!=  null?  null  :  n.getType()  >>  Token.FUNCTION;  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getNext()!=  null?  null  :  n.getType()  >>  Token.FUNCTION;	  return    n.getType()!=    Token.FUNCTION;    	non-compiled	[CE]  	12	None	replace
321	[BUG]  [BUGGY]  return  n.getFirstChild()!=  Token.FUNCTION;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getFirstChild()!=  Token.FUNCTION;  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getFirstChild()!=  Token.FUNCTION;	  return    n.getType()!=    Token.FUNCTION;    	non-compiled	[CE]  	12	None	replace
322	[BUG]  [BUGGY]  replaceChild(n.getLastChild());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  replaceChild(n.getLastChild());  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	replaceChild(n.getLastChild());	  removeChild(n.getFirstChild());    	non-compiled	[CE]  	10	None	replace
323	[BUG]  [BUGGY]  Preconditions.checkState(n.getFirstChild()!=  null);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  Preconditions.checkState(n.getFirstChild()!=  null);  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	Preconditions.checkState(n.getFirstChild()!=  null);	  removeChild(n.getFirstChild());    	non-compiled	[CE]  	10	None	replace
324	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME  +  1;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()  ==  Token.NAME  +  1;  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  ==  Token.NAME  +  1;	  return    n.getType()    ==    Token.NAME;    	non-compiled	[CE]  	49	None	replace
325	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME  ||  n.getChildCount()  ==  2;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()  ==  Token.NAME  ||  n.getChildCount()  ==  2;  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  ==  Token.NAME  ||  n.getChildCount()  ==  2;	  return    n.getType()    ==    Token.NAME;    	non-compiled	[CE]  	49	None	replace
326	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME  ||  n.hasChildren();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()  ==  Token.NAME  ||  n.hasChildren();  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  ==  Token.NAME  ||  n.hasChildren();	  return    n.getType()    ==    Token.NAME;    	non-compiled	[CE]  	49	None	replace
327	[BUG]  [BUGGY]  return  n.getSyntax();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getSyntax();  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getSyntax();	  return    n.cloneSyntax();    	non-compiled	[CE]  	41	None	replace
328	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getFirstChild()  :  NodeUtil.getLastChild();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getFirstChild()  :  NodeUtil.getLastChild();  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  ==  Token.NAME?  n.getFirstChild()  :  NodeUtil.getLastChild();	  return    n.getType()    ==    Token.NAME?    n.getFirstChild()    :    n.getLastChild();    	non-compiled	[CE]  	24	None	replace
329	[BUG]  [BUGGY]  return  n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild().getType()!=  Token.NAME;  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild().getType()!=  Token.NAME;  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild().getType()!=  Token.NAME;	  return    n.getType()    ==    Token.FUNCTION    ||    n.getFirstChild().getType()    ==    Token.NAME;    	non-compiled	[CE]  	16	None	replace
330	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0.getNext())  {  Preconditions.checkState(arg0.getNext().getType()  ==  Token.VAR);  }  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0.getNext())  {  Preconditions.checkState(arg0.getNext().getType()  ==  Token.VAR);  }  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0.getNext())  {  Preconditions.checkState(arg0.getNext().getType()  ==  Token.VAR);  }	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0.getNext())    {    Preconditions.checkState(arg0.getNext().getType()    ==    Token.VAR);    }    	non-compiled	[CE]  	5	None	replace
331	[BUG]  [BUGGY]  for(Node  arg0  =  n.getLastChild();  arg0!=  null;  arg0.getNext())  {  Preconditions.checkState(arg0.getNext().getType()  ==  Token.VAR);  }  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getLastChild();  arg0!=  null;  arg0.getNext())  {  Preconditions.checkState(arg0.getNext().getType()  ==  Token.VAR);  }  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getLastChild();  arg0!=  null;  arg0.getNext())  {  Preconditions.checkState(arg0.getNext().getType()  ==  Token.VAR);  }	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0.getNext())    {    Preconditions.checkState(arg0.getNext().getType()    ==    Token.VAR);    }    	non-compiled	[CE]  	5	None	replace
332	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg  >=  null;  arg0.getNext())  {  Preconditions.checkState(arg0.getNext().getType()  ==  Token.VAR);  }  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg  >=  null;  arg0.getNext())  {  Preconditions.checkState(arg0.getNext().getType()  ==  Token.VAR);  }  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg  >=  null;  arg0.getNext())  {  Preconditions.checkState(arg0.getNext().getType()  ==  Token.VAR);  }	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0.getNext())    {    Preconditions.checkState(arg0.getNext().getType()    ==    Token.VAR);    }    	non-compiled	[CE]  	5	None	replace
333	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0.hasNext())  {  Preconditions.checkState(arg0.getNext().getType()  ==  Token.VAR);  }  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0.hasNext())  {  Preconditions.checkState(arg0.getNext().getType()  ==  Token.VAR);  }  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0.hasNext())  {  Preconditions.checkState(arg0.getNext().getType()  ==  Token.VAR);  }	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0.getNext())    {    Preconditions.checkState(arg0.getNext().getType()    ==    Token.VAR);    }    	non-compiled	[CE]  	5	None	replace
334	[BUG]  [BUGGY]  return  n.getParent()  ==  null  ||  n.getParent().getType()  ==  Token.EXPR_RESULT;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getParent()  ==  null  ||  n.getParent().getType()  ==  Token.EXPR_RESULT;  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getParent()  ==  null  ||  n.getParent().getType()  ==  Token.EXPR_RESULT;	  return    n.getType()    ==    Token.FUNCTION    ||    n.getParent().getType()    ==    Token.EXPR_RESULT;    	non-compiled	[CE]  	15	None	replace
335	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0.getNext())  {  Node  arg0  =  arg0.getNext();  if(arg0.getNext().getNext().getNext  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0.getNext())  {  Node  arg0  =  arg0.getNext();  if(arg0.getNext().getNext().getNext  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0.getNext())  {  Node  arg0  =  arg0.getNext();  if(arg0.getNext().getNext().getNext	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0.getNext())    {    Node    arg0    =    arg0.getNext();    if(arg0.getNext().getNext().getNext().getNext    	non-compiled	[CE]  	57	None	replace
336	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0.getNext())  {  Node  arg0  =  arg0.getNext();  if(arg0.getNext().getNext().getNext()  ==  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0.getNext())  {  Node  arg0  =  arg0.getNext();  if(arg0.getNext().getNext().getNext()  ==  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0.getNext())  {  Node  arg0  =  arg0.getNext();  if(arg0.getNext().getNext().getNext()  ==	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0.getNext())    {    Node    arg0    =    arg0.getNext();    if(arg0.getNext().getNext().getNext().getNext    	non-compiled	[CE]  	57	None	replace
337	[BUG]  [BUGGY]  for(Node  arg0  =  n.getLastChild();  arg0!=  null;  arg0.getNext())  {  Node  arg0  =  arg0.getNext();  if(arg0.getNext().getNext().getNext  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getLastChild();  arg0!=  null;  arg0.getNext())  {  Node  arg0  =  arg0.getNext();  if(arg0.getNext().getNext().getNext  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getLastChild();  arg0!=  null;  arg0.getNext())  {  Node  arg0  =  arg0.getNext();  if(arg0.getNext().getNext().getNext	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0.getNext())    {    Node    arg0    =    arg0.getNext();    if(arg0.getNext().getNext().getNext().getNext    	non-compiled	[CE]  	57	None	replace
338	[BUG]  [BUGGY]  for(Node  arg0  =  n.getLastChild();  arg0!=  null;  arg0.getNext())  {  Node  arg0  =  arg0.getNext();  if(arg0.getNext().getNext().getNext().getNext().get  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getLastChild();  arg0!=  null;  arg0.getNext())  {  Node  arg0  =  arg0.getNext();  if(arg0.getNext().getNext().getNext().getNext().get  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getLastChild();  arg0!=  null;  arg0.getNext())  {  Node  arg0  =  arg0.getNext();  if(arg0.getNext().getNext().getNext().getNext().get	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0.getNext())    {    Node    arg0    =    arg0.getNext();    if(arg0.getNext().getNext().getNext().getNext().get    	non-compiled	[CE]  	54	None	replace
339	[BUG]  [BUGGY]  for(Node  arg0  =  n.getNext();  arg0!=  null;  arg0.getNext())  {  Node  arg0  =  arg0.getNext();  if(arg0.getNext().getNext().getNext().getNext().get  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getNext();  arg0!=  null;  arg0.getNext())  {  Node  arg0  =  arg0.getNext();  if(arg0.getNext().getNext().getNext().getNext().get  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getNext();  arg0!=  null;  arg0.getNext())  {  Node  arg0  =  arg0.getNext();  if(arg0.getNext().getNext().getNext().getNext().get	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0.getNext())    {    Node    arg0    =    arg0.getNext();    if(arg0.getNext().getNext().getNext().getNext().get    	non-compiled	[CE]  	54	None	replace
340	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0.getNext())  {  Node  arg0  =  arg0.getNext();  if(arg0.getNext().getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0.getNext())  {  Node  arg0  =  arg0.getNext();  if(arg0.getNext().getType()  ==  Token.FUNCTION)  {  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0.getNext())  {  Node  arg0  =  arg0.getNext();  if(arg0.getNext().getType()  ==  Token.FUNCTION)  {	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0.getNext())    {    Node    arg0    =    arg0.getNext();    if(arg0.getNext().getType()    ==    Token.FUNCTION)    {    reportCodeChange    	non-compiled	[CE]  	6	None	replace
341	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0.getNext())  {  Node  arg0  =  arg0.getNext();  if(arg0.getNext().getType()  ==  Token.FUNCTION)  {  reportCode  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0.getNext())  {  Node  arg0  =  arg0.getNext();  if(arg0.getNext().getType()  ==  Token.FUNCTION)  {  reportCode  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0.getNext())  {  Node  arg0  =  arg0.getNext();  if(arg0.getNext().getType()  ==  Token.FUNCTION)  {  reportCode	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0.getNext())    {    Node    arg0    =    arg0.getNext();    if(arg0.getNext().getType()    ==    Token.FUNCTION)    {    reportCodeChange    	non-compiled	[CE]  	6	None	replace
342	[BUG]  [BUGGY]  for(Node  arg0  =  n.getLastChild();  arg0!=  null;  arg0.getNext())  {  Node  arg0  =  arg0.getNext();  if(arg0.getNext().getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getLastChild();  arg0!=  null;  arg0.getNext())  {  Node  arg0  =  arg0.getNext();  if(arg0.getNext().getType()  ==  Token.FUNCTION)  {  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getLastChild();  arg0!=  null;  arg0.getNext())  {  Node  arg0  =  arg0.getNext();  if(arg0.getNext().getType()  ==  Token.FUNCTION)  {	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0.getNext())    {    Node    arg0    =    arg0.getNext();    if(arg0.getNext().getType()    ==    Token.FUNCTION)    {    reportCodeChange    	non-compiled	[CE]  	6	None	replace
343	[BUG]  [BUGGY]  return  n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild().getType()  ==  Token.VAR;  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild().getType()  ==  Token.VAR;  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  ==  Token.FUNCTION  ||  n.getFirstChild().getType()  ==  Token.VAR;	  return    n.getType()    ==    Token.FUNCTION    ||    n.getParent().getType()    ==    Token.VAR;    	non-compiled	[CE]  	17	None	replace
344	[BUG]  [BUGGY]  return  n.getType()  ==  Token.FUNCTION  ||  n.getParent().getType()!=  Token.VAR;  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()  ==  Token.FUNCTION  ||  n.getParent().getType()!=  Token.VAR;  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  ==  Token.FUNCTION  ||  n.getParent().getType()!=  Token.VAR;	  return    n.getType()    ==    Token.FUNCTION    ||    n.getParent().getType()    ==    Token.VAR;    	non-compiled	[CE]  	17	None	replace
345	[BUG]  [BUGGY]  return  n.getfirstChild();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getfirstChild();  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getfirstChild();	  return    n.getLastChild()    +    1;    	non-compiled	[CE]  	30	None	replace
346	[BUG]  [BUGGY]  return  n.getlastChild();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getlastChild();  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getlastChild();	  return    n.getLastChild()    +    1;    	non-compiled	[CE]  	30	None	replace
347	[BUG]  [BUGGY]  return  n.getfirstChild().getNext();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getfirstChild().getNext();  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getfirstChild().getNext();	  return    n.getLastChild().getNext();    	non-compiled	[CE]  	32	None	replace
348	[BUG]  [BUGGY]  for(Node  arg0  =  n.getLastChild();  arg0!=  null;  arg0.getNext())  {  Preconditions.checkNotNull(arg0);  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getLastChild();  arg0!=  null;  arg0.getNext())  {  Preconditions.checkNotNull(arg0);  }  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getLastChild();  arg0!=  null;  arg0.getNext())  {  Preconditions.checkNotNull(arg0);  }	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0.getNext())    {    Preconditions.checkNotNull(arg0);    }    	non-compiled	[CE]  	3	None	replace
349	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg  >=  null;  arg0.getNext())  {  Preconditions.checkNotNull(arg0);  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg  >=  null;  arg0.getNext())  {  Preconditions.checkNotNull(arg0);  }  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg  >=  null;  arg0.getNext())  {  Preconditions.checkNotNull(arg0);  }	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0.getNext())    {    Preconditions.checkNotNull(arg0);    }    	non-compiled	[CE]  	3	None	replace
350	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg  ==  null;  arg0.getNext())  {  Preconditions.checkNotNull(arg0);  }  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg  ==  null;  arg0.getNext())  {  Preconditions.checkNotNull(arg0);  }  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg  ==  null;  arg0.getNext())  {  Preconditions.checkNotNull(arg0);  }	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0.getNext())    {    Preconditions.checkNotNull(arg0);    }    	non-compiled	[CE]  	3	None	replace
351	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0.getNext())  {  Preconditions.checkState(arg0.getType()  ==  Token.FUNCTION);  }  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0.getNext())  {  Preconditions.checkState(arg0.getType()  ==  Token.FUNCTION);  }  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0.getNext())  {  Preconditions.checkState(arg0.getType()  ==  Token.FUNCTION);  }	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0.getNext())    {    Preconditions.checkNotNull(arg0);    }    	non-compiled	[CE]  	3	None	replace
352	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0.getNext())  {  Preconditions.checkArgument(arg0.getNext().getType()  ==  Token.NAME);  }  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0.getNext())  {  Preconditions.checkArgument(arg0.getNext().getType()  ==  Token.NAME);  }  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0.getNext())  {  Preconditions.checkArgument(arg0.getNext().getType()  ==  Token.NAME);  }	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0.getNext())    {    Preconditions.checkArgument(arg0.getNext().getType()    ==    Token.NAME);    }    	non-compiled	[CE]  	7	None	replace
353	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg  >=  null;  arg0.getNext())  {  Preconditions.checkArgument(arg0.getNext().getType()  ==  Token.NAME);  }  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg  >=  null;  arg0.getNext())  {  Preconditions.checkArgument(arg0.getNext().getType()  ==  Token.NAME);  }  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg  >=  null;  arg0.getNext())  {  Preconditions.checkArgument(arg0.getNext().getType()  ==  Token.NAME);  }	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0.getNext())    {    Preconditions.checkArgument(arg0.getNext().getType()    ==    Token.NAME);    }    	non-compiled	[CE]  	7	None	replace
354	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg  ==  null;  arg0.getNext())  {  Preconditions.checkArgument(arg0.getNext().getType()  ==  Token.NAME);  }  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg  ==  null;  arg0.getNext())  {  Preconditions.checkArgument(arg0.getNext().getType()  ==  Token.NAME);  }  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg  ==  null;  arg0.getNext())  {  Preconditions.checkArgument(arg0.getNext().getType()  ==  Token.NAME);  }	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0.getNext())    {    Preconditions.checkArgument(arg0.getNext().getType()    ==    Token.NAME);    }    	non-compiled	[CE]  	7	None	replace
355	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0.hasNext())  {  Preconditions.checkArgument(arg0.getNext().getType()  ==  Token.NAME);  }  [CE]  [FE]                                            AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0.hasNext())  {  Preconditions.checkArgument(arg0.getNext().getType()  ==  Token.NAME);  }  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0.hasNext())  {  Preconditions.checkArgument(arg0.getNext().getType()  ==  Token.NAME);  }	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0.getNext())    {    Preconditions.checkArgument(arg0.getNext().getType()    ==    Token.NAME);    }    	non-compiled	[CE]  	7	None	replace
356	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0.getNext())  {  Node  newOp  =  arg0.getNext();  if(newOp.getType()  ==  Token.FUNCTION)  {  reportCodeChange  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0.getNext())  {  Node  newOp  =  arg0.getNext();  if(newOp.getType()  ==  Token.FUNCTION)  {  reportCodeChange  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0.getNext())  {  Node  newOp  =  arg0.getNext();  if(newOp.getType()  ==  Token.FUNCTION)  {  reportCodeChange	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0.getNext())    {    Node    newOp    =    arg0.getNext();    if(newOp.getType()    ==    Token.FUNCTION)    {    reportCodeChange();    }    	non-compiled	[CE]  	4	None	replace
357	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0.getNext())  {  Node  newOp  =  arg0.getNext();  if(newOp.getType()  ==  Token.FUNCTION)  {  reportCodeCh  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0.getNext())  {  Node  newOp  =  arg0.getNext();  if(newOp.getType()  ==  Token.FUNCTION)  {  reportCodeCh  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0.getNext())  {  Node  newOp  =  arg0.getNext();  if(newOp.getType()  ==  Token.FUNCTION)  {  reportCodeCh	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0.getNext())    {    Node    newOp    =    arg0.getNext();    if(newOp.getType()    ==    Token.FUNCTION)    {    reportCodeChange();    }    	non-compiled	[CE]  	4	None	replace
358	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg  <  null;  arg0.getNext())  {  Node  newOp  =  arg0.getNext();  if(newOp.getType()  ==  Token.FUNCTION)  {  reportCodeChange  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg  <  null;  arg0.getNext())  {  Node  newOp  =  arg0.getNext();  if(newOp.getType()  ==  Token.FUNCTION)  {  reportCodeChange  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg  <  null;  arg0.getNext())  {  Node  newOp  =  arg0.getNext();  if(newOp.getType()  ==  Token.FUNCTION)  {  reportCodeChange	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0.getNext())    {    Node    newOp    =    arg0.getNext();    if(newOp.getType()    ==    Token.FUNCTION)    {    reportCodeChange();    }    	non-compiled	[CE]  	4	None	replace
359	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0.getNext())  {  Node  newOp  =  arg0.getNext();  if(newOp.getType()  ==  Token.FUNCTION)  {  reportCode  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0.getNext())  {  Node  newOp  =  arg0.getNext();  if(newOp.getType()  ==  Token.FUNCTION)  {  reportCode  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0.getNext())  {  Node  newOp  =  arg0.getNext();  if(newOp.getType()  ==  Token.FUNCTION)  {  reportCode	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0.getNext())    {    Node    newOp    =    arg0.getNext();    if(newOp.getType()    ==    Token.FUNCTION)    {    reportCodeChange();    }    	non-compiled	[CE]  	4	None	replace
360	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0  =  arg0.getNext())  {  newOp  =  arg0.getNext();  if(newOp!=  null)  {  return  newOp;  }  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0  =  arg0.getNext())  {  newOp  =  arg0.getNext();  if(newOp!=  null)  {  return  newOp;  }  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0  =  arg0.getNext())  {  newOp  =  arg0.getNext();  if(newOp!=  null)  {  return  newOp;  }	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0    =    arg0.getNext())    {    Node    newOp    =    arg0.getNext();    if(newOp!=    null)    {    return    newOp;    }    	non-compiled	[CE]  	47	None	replace
361	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0  =  arg0.getNext())  {  Node  newOp  =  arg0.getNext();  if(newOp!=  null)  {  return  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0  =  arg0.getNext())  {  Node  newOp  =  arg0.getNext();  if(newOp!=  null)  {  return  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0  =  arg0.getNext())  {  Node  newOp  =  arg0.getNext();  if(newOp!=  null)  {  return	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0    =    arg0.getNext())    {    Node    newOp    =    arg0.getNext();    if(newOp!=    null)    {    return    newOp;    }    	non-compiled	[CE]  	47	None	replace
362	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0  =  arg0.getNext())  {  Node  newOp  =  arg0.getNext();  if(newOp!=  null)  {  return  newO  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0  =  arg0.getNext())  {  Node  newOp  =  arg0.getNext();  if(newOp!=  null)  {  return  newO  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0  =  arg0.getNext())  {  Node  newOp  =  arg0.getNext();  if(newOp!=  null)  {  return  newO	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0    =    arg0.getNext())    {    Node    newOp    =    arg0.getNext();    if(newOp!=    null)    {    return    newOp;    }    	non-compiled	[CE]  	47	None	replace
363	[BUG]  [BUGGY]  for(Node  arg0  =  n.getLastChild();  arg!=  null;  arg0)  {  Preconditions.checkArgument(arg0.getType()  ==  Token.VAR);  newOp  =  arg0.getNext();  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getLastChild();  arg!=  null;  arg0)  {  Preconditions.checkArgument(arg0.getType()  ==  Token.VAR);  newOp  =  arg0.getNext();  }  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getLastChild();  arg!=  null;  arg0)  {  Preconditions.checkArgument(arg0.getType()  ==  Token.VAR);  newOp  =  arg0.getNext();  }	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0)    {    Preconditions.checkArgument(arg0.getType()    ==    Token.VAR);    newOp    =    arg0.getNext();    }    	non-compiled	[CE]  	56	None	replace
364	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0)  {  Preconditions.checkArgument(arg0.getType()  ==  Token.NAME);  newOp  =  arg0.getNext();  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0)  {  Preconditions.checkArgument(arg0.getType()  ==  Token.NAME);  newOp  =  arg0.getNext();  }  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0)  {  Preconditions.checkArgument(arg0.getType()  ==  Token.NAME);  newOp  =  arg0.getNext();  }	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0)    {    Preconditions.checkArgument(arg0.getType()    ==    Token.VAR);    newOp    =    arg0.getNext();    }    	non-compiled	[CE]  	56	None	replace
365	[BUG]  [BUGGY]  return  n.getFirstChild()  ==  Token.NAME?  n.getLastChild()  :  n;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getFirstChild()  ==  Token.NAME?  n.getLastChild()  :  n;  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getFirstChild()  ==  Token.NAME?  n.getLastChild()  :  n;	  return    n.getType()    ==    Token.NAME?    n.getLastChild()    :    n;    	non-compiled	[CE]  	35	None	replace
366	[BUG]  [BUGGY]  return  n.getFirstChild()  ==  null?  n.getLastChild()  :  n;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getFirstChild()  ==  null?  n.getLastChild()  :  n;  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getFirstChild()  ==  null?  n.getLastChild()  :  n;	  return    n.getType()    ==    Token.NAME?    n.getLastChild()    :    n;    	non-compiled	[CE]  	35	None	replace
367	[BUG]  [BUGGY]  for(Node  arg0  =  n.getLastChild();  arg0!=  null;  arg0)  {  Node  arg0  =  arg0.getNext();  if(arg0.getNext().getNext().getNext().getNext().getNext().get  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getLastChild();  arg0!=  null;  arg0)  {  Node  arg0  =  arg0.getNext();  if(arg0.getNext().getNext().getNext().getNext().getNext().get  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getLastChild();  arg0!=  null;  arg0)  {  Node  arg0  =  arg0.getNext();  if(arg0.getNext().getNext().getNext().getNext().getNext().get	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0)    {    Node    arg0    =    arg0.getNext();    if(arg0.getNext().getNext().getNext().getNext().getNext().get    	non-compiled	[CE]  	60	None	replace
368	[BUG]  [BUGGY]  for(Node  arg0  =  n.getLastChild();  arg0!=  null;  arg0)  {  Node  arg0  =  arg0.getNext();  if(arg0.getNext().getNext().getNext().getNext().getNext().  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getLastChild();  arg0!=  null;  arg0)  {  Node  arg0  =  arg0.getNext();  if(arg0.getNext().getNext().getNext().getNext().getNext().  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getLastChild();  arg0!=  null;  arg0)  {  Node  arg0  =  arg0.getNext();  if(arg0.getNext().getNext().getNext().getNext().getNext().	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0)    {    Node    arg0    =    arg0.getNext();    if(arg0.getNext().getNext().getNext().getNext().getNext().get    	non-compiled	[CE]  	60	None	replace
369	[BUG]  [BUGGY]  for(Node  arg0  =  n.getLastChild();  arg0!=  null;  arg0)  {  Preconditions.checkState(arg0.getType()  ==  Token.VAR);  }  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getLastChild();  arg0!=  null;  arg0)  {  Preconditions.checkState(arg0.getType()  ==  Token.VAR);  }  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getLastChild();  arg0!=  null;  arg0)  {  Preconditions.checkState(arg0.getType()  ==  Token.VAR);  }	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0)    {    Preconditions.checkState(arg0.getType()    ==    Token.VAR);    }    	non-compiled	[CE]  	58	None	replace
370	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg  <  null;  arg0)  {  Preconditions.checkState(arg0.getType()  ==  Token.VAR);  }  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg  <  null;  arg0)  {  Preconditions.checkState(arg0.getType()  ==  Token.VAR);  }  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg  <  null;  arg0)  {  Preconditions.checkState(arg0.getType()  ==  Token.VAR);  }	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0)    {    Preconditions.checkState(arg0.getType()    ==    Token.VAR);    }    	non-compiled	[CE]  	58	None	replace
371	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg  >=  null;  arg0)  {  Preconditions.checkState(arg0.getType()  ==  Token.VAR);  }  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg  >=  null;  arg0)  {  Preconditions.checkState(arg0.getType()  ==  Token.VAR);  }  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg  >=  null;  arg0)  {  Preconditions.checkState(arg0.getType()  ==  Token.VAR);  }	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0)    {    Preconditions.checkState(arg0.getType()    ==    Token.VAR);    }    	non-compiled	[CE]  	58	None	replace
372	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getChildCount()  :  null;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getChildCount()  :  null;  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  ==  Token.NAME?  n.getChildCount()  :  null;	  return    n.getType()    ==    Token.NAME?    n.getParent()    :    null;    	non-compiled	[CE]  	20	None	replace
373	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg  <  null;  arg0)  {  Node  newOp  =  arg0.getNext();  if(newOp!=  null)  {  reportCodeChange();  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg  <  null;  arg0)  {  Node  newOp  =  arg0.getNext();  if(newOp!=  null)  {  reportCodeChange();  }  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg  <  null;  arg0)  {  Node  newOp  =  arg0.getNext();  if(newOp!=  null)  {  reportCodeChange();  }	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0)    {    Node    newOp    =    arg0.getNext();    if(newOp!=    null)    {    reportCodeChange();    }    	non-compiled	[CE]  	44	None	replace
374	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0)  {  Node  newOp  =  arg0.getNext();  if(newOp!=  null)  {  reportCodeChange  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0)  {  Node  newOp  =  arg0.getNext();  if(newOp!=  null)  {  reportCodeChange  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0)  {  Node  newOp  =  arg0.getNext();  if(newOp!=  null)  {  reportCodeChange	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0)    {    Node    newOp    =    arg0.getNext();    if(newOp!=    null)    {    reportCodeChange();    }    	non-compiled	[CE]  	44	None	replace
375	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg  >=  null;  arg0)  {  Node  newOp  =  arg0.getNext();  if(newOp!=  null)  {  reportCodeChange();  }  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg  >=  null;  arg0)  {  Node  newOp  =  arg0.getNext();  if(newOp!=  null)  {  reportCodeChange();  }  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg  >=  null;  arg0)  {  Node  newOp  =  arg0.getNext();  if(newOp!=  null)  {  reportCodeChange();  }	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0)    {    Node    newOp    =    arg0.getNext();    if(newOp!=    null)    {    reportCodeChange();    }    	non-compiled	[CE]  	44	None	replace
376	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg  ==  null;  arg0)  {  Node  newOp  =  arg0.getNext();  if(newOp!=  null)  {  reportCodeChange();  }  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg  ==  null;  arg0)  {  Node  newOp  =  arg0.getNext();  if(newOp!=  null)  {  reportCodeChange();  }  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg  ==  null;  arg0)  {  Node  newOp  =  arg0.getNext();  if(newOp!=  null)  {  reportCodeChange();  }	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0)    {    Node    newOp    =    arg0.getNext();    if(newOp!=    null)    {    reportCodeChange();    }    	non-compiled	[CE]  	44	None	replace
377	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getFirstChild()  :  n.getString();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getFirstChild()  :  n.getString();  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  ==  Token.NAME?  n.getFirstChild()  :  n.getString();	  return    n.getType()    ==    Token.NAME?    n.getFirstChild()    :    n.getNext();    	non-compiled	[CE]  	19	None	replace
378	[BUG]  [BUGGY]  return  n.removeChild(arg0);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.removeChild(arg0);  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.removeChild(arg0);	  return    n.replaceChild(n,    newLiteralNode);    	non-compiled	[CE]  	31	None	replace
379	[BUG]  [BUGGY]  return  n.replaceChild(arg0,  newLiteralNode);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.replaceChild(arg0,  newLiteralNode);  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.replaceChild(arg0,  newLiteralNode);	  return    n.replaceChild(n,    newLiteralNode);    	non-compiled	[CE]  	31	None	replace
380	[BUG]  [BUGGY]  return  n.replaceChild(arg0,  n);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.replaceChild(arg0,  n);  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.replaceChild(arg0,  n);	  return    n.replaceChild(n,    newLiteralNode);    	non-compiled	[CE]  	31	None	replace
381	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0.getNext())  {  Preconditions.checkState(arg0.getNext().getType()  ==  Token.NAME);  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0.getNext())  {  Preconditions.checkState(arg0.getNext().getType()  ==  Token.NAME);  }  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0.getNext())  {  Preconditions.checkState(arg0.getNext().getType()  ==  Token.NAME);  }	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0.getNext())    {    Preconditions.checkState(arg0.getNext().getType()    ==    Token.NAME);    }    	non-compiled	[CE]  	2	None	replace
382	[BUG]  [BUGGY]  for(Node  arg0  =  n.getLastChild();  arg0!=  null;  arg0.getNext())  {  Preconditions.checkState(arg0.getNext().getType()  ==  Token.NAME);  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getLastChild();  arg0!=  null;  arg0.getNext())  {  Preconditions.checkState(arg0.getNext().getType()  ==  Token.NAME);  }  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getLastChild();  arg0!=  null;  arg0.getNext())  {  Preconditions.checkState(arg0.getNext().getType()  ==  Token.NAME);  }	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0.getNext())    {    Preconditions.checkState(arg0.getNext().getType()    ==    Token.NAME);    }    	non-compiled	[CE]  	2	None	replace
383	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg  >=  null;  arg0.getNext())  {  Preconditions.checkState(arg0.getNext().getType()  ==  Token.NAME);  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg  >=  null;  arg0.getNext())  {  Preconditions.checkState(arg0.getNext().getType()  ==  Token.NAME);  }  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg  >=  null;  arg0.getNext())  {  Preconditions.checkState(arg0.getNext().getType()  ==  Token.NAME);  }	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0.getNext())    {    Preconditions.checkState(arg0.getNext().getType()    ==    Token.NAME);    }    	non-compiled	[CE]  	2	None	replace
384	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0.hasNext())  {  Preconditions.checkState(arg0.getNext().getType()  ==  Token.NAME);  }  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0.hasNext())  {  Preconditions.checkState(arg0.getNext().getType()  ==  Token.NAME);  }  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0.hasNext())  {  Preconditions.checkState(arg0.getNext().getType()  ==  Token.NAME);  }	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0.getNext())    {    Preconditions.checkState(arg0.getNext().getType()    ==    Token.NAME);    }    	non-compiled	[CE]  	2	None	replace
385	[BUG]  [BUGGY]  return  n.getFirstChild().getType()  ==  Token.GETPROP;  [CE]  [FE]            AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getFirstChild().getType()  ==  Token.GETPROP;  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getFirstChild().getType()  ==  Token.GETPROP;	  return    n.getType()    ==    Token.GETPROP;    	non-compiled	[CE]  	39	None	replace
386	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0.getNext())  {  Node  arg0  =  arg0.getNext();  if(arg0.getNext().getNext().getNext().getNext()  }  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0.getNext())  {  Node  arg0  =  arg0.getNext();  if(arg0.getNext().getNext().getNext().getNext()  }  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0.getNext())  {  Node  arg0  =  arg0.getNext();  if(arg0.getNext().getNext().getNext().getNext()  }	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0.getNext())    {    Node    arg0    =    arg0.getNext();    if(arg0.getNext().getNext().getNext().getNext().getNext    	non-compiled	[CE]  	59	None	replace
387	[BUG]  [BUGGY]  return  n.getOwnerChild();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getOwnerChild();  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getOwnerChild();	  return    n.getPreviousChild();    	non-compiled	[CE]  	33	None	replace
388	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0)  {  arg0  =  arg0.getNext();  if(arg0.getNext().getNext().getNext().getNext().getNext().get  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0)  {  arg0  =  arg0.getNext();  if(arg0.getNext().getNext().getNext().getNext().getNext().get  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0)  {  arg0  =  arg0.getNext();  if(arg0.getNext().getNext().getNext().getNext().getNext().get	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0)    {    Node    arg0    =    arg0.getNext();    if(arg0.getNext().getNext().getNext().getNext().getNext().get    	non-compiled	[CE]  	60	None	replace
389	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0)  {  if(arg0.getNext().getNext().getNext().getNext().getNext().get  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0)  {  if(arg0.getNext().getNext().getNext().getNext().getNext().get  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0)  {  if(arg0.getNext().getNext().getNext().getNext().getNext().get	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0)    {    Node    arg0    =    arg0.getNext();    if(arg0.getNext().getNext().getNext().getNext().getNext().get    	non-compiled	[CE]  	60	None	replace
390	[BUG]  [BUGGY]  For(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0)  {  Node  arg0  =  arg0.getNext();  if(arg0.getNext().getNext().getNext().getNext().getNext().get  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  For(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0)  {  Node  arg0  =  arg0.getNext();  if(arg0.getNext().getNext().getNext().getNext().getNext().get  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	For(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0)  {  Node  arg0  =  arg0.getNext();  if(arg0.getNext().getNext().getNext().getNext().getNext().get	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0)    {    Node    arg0    =    arg0.getNext();    if(arg0.getNext().getNext().getNext().getNext().getNext().get    	non-compiled	[CE]  	60	None	replace
391	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg  <  null;  arg0.getNext())  {  Preconditions.checkArgument(arg0.getNext().getType()  ==  Token.NAME);  }  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg  <  null;  arg0.getNext())  {  Preconditions.checkArgument(arg0.getNext().getType()  ==  Token.NAME);  }  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg  <  null;  arg0.getNext())  {  Preconditions.checkArgument(arg0.getNext().getType()  ==  Token.NAME);  }	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0.getNext())    {    Preconditions.checkArgument(arg0.getNext().getType()    ==    Token.NAME);    }    	non-compiled	[CE]  	7	None	replace
392	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  for(Node  arg0  =  arg0.getFirstChild();  arg0!=  null;  arg0)  {  Node  arg0  =  arg0.getNext();  if(arg0!=  null)  {  reportCodeChange();  }  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  for(Node  arg0  =  arg0.getFirstChild();  arg0!=  null;  arg0)  {  Node  arg0  =  arg0.getNext();  if(arg0!=  null)  {  reportCodeChange();  }  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME);  for(Node  arg0  =  arg0.getFirstChild();  arg0!=  null;  arg0)  {  Node  arg0  =  arg0.getNext();  if(arg0!=  null)  {  reportCodeChange();  }	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0)    {    Node    arg0    =    arg0.getNext();    if(arg0!=    null)    {    reportCodeChange();    }    	non-compiled	[CE]  	46	None	replace
393	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  for(Node  arg0  =  arg0.getFirstChild();  arg0!=  null;  arg0)  {  Node  arg0  =  arg0.getNext();  if(arg0!=  null)  {  reportCodeChange();  }  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  for(Node  arg0  =  arg0.getFirstChild();  arg0!=  null;  arg0)  {  Node  arg0  =  arg0.getNext();  if(arg0!=  null)  {  reportCodeChange();  }  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  for(Node  arg0  =  arg0.getFirstChild();  arg0!=  null;  arg0)  {  Node  arg0  =  arg0.getNext();  if(arg0!=  null)  {  reportCodeChange();  }	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0)    {    Node    arg0    =    arg0.getNext();    if(arg0!=    null)    {    reportCodeChange();    }    	non-compiled	[CE]  	46	None	replace
394	[BUG]  [BUGGY]  return  n.getType()  ==  Token.GETPROP  ||  n.getParent().getType()  ==  Token.VAR;  [CE]  [FE]            AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()  ==  Token.GETPROP  ||  n.getParent().getType()  ==  Token.VAR;  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  ==  Token.GETPROP  ||  n.getParent().getType()  ==  Token.VAR;	  return    n.getType()    ==    Token.GETPROP;    	non-compiled	[CE]  	39	None	replace
395	[BUG]  [BUGGY]  return  n.getFirstChild()  ==  n?  n.getLastChild()  :  n.getNext();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getFirstChild()  ==  n?  n.getLastChild()  :  n.getNext();  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getFirstChild()  ==  n?  n.getLastChild()  :  n.getNext();	  return    n.getType()    ==    Token.NAME?    n.getLastChild()    :    n.getNext();    	non-compiled	[CE]  	22	None	replace
396	[BUG]  [BUGGY]  Preconditions.checkState(n.getFirstChild()  ==  n);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  Preconditions.checkState(n.getFirstChild()  ==  n);  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	Preconditions.checkState(n.getFirstChild()  ==  n);	  removeChild(n.getFirstChild());    	non-compiled	[CE]  	10	None	replace
397	[BUG]  [BUGGY]  replaceChild(n.getFirstChild());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  replaceChild(n.getFirstChild());  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	replaceChild(n.getFirstChild());	  removeChild(n.getFirstChild());    	non-compiled	[CE]  	10	None	replace
398	[BUG]  [BUGGY]  return  n.getNext().getType()  ==  Token.EMPTY;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getNext().getType()  ==  Token.EMPTY;  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getNext().getType()  ==  Token.EMPTY;	  return    n.getType()    ==    Token.EMPTY;    	non-compiled	[CE]  	50	None	replace
399	[BUG]  [BUGGY]  return  n.getType()  ==  Token.EMPTY  ||  n.getChildCount()  >  1;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()  ==  Token.EMPTY  ||  n.getChildCount()  >  1;  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  ==  Token.EMPTY  ||  n.getChildCount()  >  1;	  return    n.getType()    ==    Token.EMPTY;    	non-compiled	[CE]  	50	None	replace
400	[BUG]  [BUGGY]  Node  newOp  =  n.getFirstChild();  if(newOp!=  null)  {  reportCodeChange();  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  Node  newOp  =  n.getFirstChild();  if(newOp!=  null)  {  reportCodeChange();  }  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	Node  newOp  =  n.getFirstChild();  if(newOp!=  null)  {  reportCodeChange();  }	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0)    {    Node    newOp    =    arg0.getNext();    if(newOp!=    null)    {    reportCodeChange();    }    	non-compiled	[CE]  	44	None	replace
401	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0)  {  newOp  =  arg0.getNext();  if(newOp!=  null)  {  reportCodeChange();  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0)  {  newOp  =  arg0.getNext();  if(newOp!=  null)  {  reportCodeChange();  }  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0)  {  newOp  =  arg0.getNext();  if(newOp!=  null)  {  reportCodeChange();  }	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0)    {    Node    newOp    =    arg0.getNext();    if(newOp!=    null)    {    reportCodeChange();    }    	non-compiled	[CE]  	44	None	replace
402	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg  <  null;  arg0.getNext())  {  Preconditions.checkState(arg0.getNext().getType()  ==  Token.VAR);  }  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg  <  null;  arg0.getNext())  {  Preconditions.checkState(arg0.getNext().getType()  ==  Token.VAR);  }  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg  <  null;  arg0.getNext())  {  Preconditions.checkState(arg0.getNext().getType()  ==  Token.VAR);  }	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0.getNext())    {    Preconditions.checkState(arg0.getNext().getType()    ==    Token.VAR);    }    	non-compiled	[CE]  	5	None	replace
403	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg  ==  null;  arg0.getNext())  {  Preconditions.checkState(arg0.getNext().getType()  ==  Token.VAR);  }  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg  ==  null;  arg0.getNext())  {  Preconditions.checkState(arg0.getNext().getType()  ==  Token.VAR);  }  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg  ==  null;  arg0.getNext())  {  Preconditions.checkState(arg0.getNext().getType()  ==  Token.VAR);  }	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0.getNext())    {    Preconditions.checkState(arg0.getNext().getType()    ==    Token.VAR);    }    	non-compiled	[CE]  	5	None	replace
404	[BUG]  [BUGGY]  Preconditions.checkState(n.getFirstChild().getType()  ==  Token.VAR);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  Preconditions.checkState(n.getFirstChild().getType()  ==  Token.VAR);  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	Preconditions.checkState(n.getFirstChild().getType()  ==  Token.VAR);	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0.getNext())    {    Preconditions.checkState(arg0.getNext().getType()    ==    Token.VAR);    }    	non-compiled	[CE]  	5	None	replace
405	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0)  {  node  =  arg0.getNext();  if(newOp!=  null)  {  newOp  =  newOp;  }  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0)  {  node  =  arg0.getNext();  if(newOp!=  null)  {  newOp  =  newOp;  }  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0)  {  node  =  arg0.getNext();  if(newOp!=  null)  {  newOp  =  newOp;  }	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0)    {    Node    newOp    =    arg0.getNext();    if(newOp!=    null)    {    newOp    =    newOp;    }    	non-compiled	[CE]  	48	None	replace
406	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0)  {  Preconditions.checkState(arg0!=  null);  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0)  {  Preconditions.checkState(arg0!=  null);  }  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0)  {  Preconditions.checkState(arg0!=  null);  }	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0)    {    Preconditions.checkNotNull(arg0);    }    	non-compiled	[CE]  	45	None	replace
407	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0)  {  Preconditions.checkState(arg0  ==  null);  }  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0)  {  Preconditions.checkState(arg0  ==  null);  }  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0)  {  Preconditions.checkState(arg0  ==  null);  }	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0)    {    Preconditions.checkNotNull(arg0);    }    	non-compiled	[CE]  	45	None	replace
408	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0)  {  Preconditions.checkArgument(arg0.equals(newLiteralNode));  }  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0)  {  Preconditions.checkArgument(arg0.equals(newLiteralNode));  }  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0)  {  Preconditions.checkArgument(arg0.equals(newLiteralNode));  }	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0)    {    Preconditions.checkNotNull(arg0);    }    	non-compiled	[CE]  	45	None	replace
409	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0)  {  Preconditions.checkArgument(arg0.getType()  ==  Token.FUNCTION);  }  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0)  {  Preconditions.checkArgument(arg0.getType()  ==  Token.FUNCTION);  }  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0)  {  Preconditions.checkArgument(arg0.getType()  ==  Token.FUNCTION);  }	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0)    {    Preconditions.checkNotNull(arg0);    }    	non-compiled	[CE]  	45	None	replace
410	[BUG]  [BUGGY]  return  n.getType()!=  Token.FUNCTION  ||  n.getFirstChild().getType()  ==  Token.NAME;  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()!=  Token.FUNCTION  ||  n.getFirstChild().getType()  ==  Token.NAME;  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()!=  Token.FUNCTION  ||  n.getFirstChild().getType()  ==  Token.NAME;	  return    n.getType()    ==    Token.FUNCTION    ||    n.getFirstChild().getType()    ==    Token.NAME;    	non-compiled	[CE]  	16	None	replace
411	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg  <  null;  arg0.getNext())  {  Preconditions.checkState(arg0.getNext().getType()  ==  Token.FUNCTION);  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg  <  null;  arg0.getNext())  {  Preconditions.checkState(arg0.getNext().getType()  ==  Token.FUNCTION);  }  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg  <  null;  arg0.getNext())  {  Preconditions.checkState(arg0.getNext().getType()  ==  Token.FUNCTION);  }	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0.getNext())    {    Preconditions.checkState(arg0.getNext().getType()    ==    Token.FUNCTION);    }    	non-compiled	[CE]  	1	None	replace
412	[BUG]  [BUGGY]  Preconditions.checkState(n.getFirstChild().getType()  ==  Token.FUNCTION);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  Preconditions.checkState(n.getFirstChild().getType()  ==  Token.FUNCTION);  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	Preconditions.checkState(n.getFirstChild().getType()  ==  Token.FUNCTION);	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0.getNext())    {    Preconditions.checkState(arg0.getNext().getType()    ==    Token.FUNCTION);    }    	non-compiled	[CE]  	1	None	replace
413	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME  &&  n.getChildCount()  :  n.getLastChild();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()  ==  Token.NAME  &&  n.getChildCount()  :  n.getLastChild();  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  ==  Token.NAME  &&  n.getChildCount()  :  n.getLastChild();	  return    n.getType()    ==    Token.NAME?    n.getChildCount()    :    n.getLastChild();    	non-compiled	[CE]  	27	None	replace
414	[BUG]  [BUGGY]  return  n.removeChild(n.getNext());  [CE]  [FE]            AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.removeChild(n.getNext());  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.removeChild(n.getNext());	  return    n.removeChild(n.getFirstChild());    	non-compiled	[CE]  	62	None	replace
415	[BUG]  [BUGGY]  return  n.removeChild(n.getFirstChild(),  newLiteralNode);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.removeChild(n.getFirstChild(),  newLiteralNode);  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.removeChild(n.getFirstChild(),  newLiteralNode);	  return    n.removeChild(n.getFirstChild());    	non-compiled	[CE]  	62	None	replace
416	[BUG]  [BUGGY]  n.removeChild(propertyNode);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  n.removeChild(propertyNode);  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	n.removeChild(propertyNode);	  n.removeChild(newLiteralNode);    	non-compiled	[CE]  	42	None	replace
417	[BUG]  [BUGGY]  n.removeChild(oldNode);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  n.removeChild(oldNode);  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	n.removeChild(oldNode);	  n.removeChild(newLiteralNode);    	non-compiled	[CE]  	42	None	replace
418	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0  =  arg0.getNext())  {  return  newOp;  }  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0  =  arg0.getNext())  {  return  newOp;  }  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0  =  arg0.getNext())  {  return  newOp;  }	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0    =    arg0.getNext())    {    Node    newOp    =    arg0.getNext();    if(newOp!=    null)    {    return    newOp;    }    	non-compiled	[CE]  	47	None	replace
419	[BUG]  [BUGGY]  Node  newOp  =  n.getFirstChild().getNext();  if(newOp!=  null)  {  return  newOp;  }  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  Node  newOp  =  n.getFirstChild().getNext();  if(newOp!=  null)  {  return  newOp;  }  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	Node  newOp  =  n.getFirstChild().getNext();  if(newOp!=  null)  {  return  newOp;  }	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0    =    arg0.getNext())    {    Node    newOp    =    arg0.getNext();    if(newOp!=    null)    {    return    newOp;    }    	non-compiled	[CE]  	47	None	replace
420	[BUG]  [BUGGY]  return  n.getType()  ==  Token.STRING  ||  n.getFirstChild().getType()  ==  Token.THIS;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()  ==  Token.STRING  ||  n.getFirstChild().getType()  ==  Token.THIS;  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  ==  Token.STRING  ||  n.getFirstChild().getType()  ==  Token.THIS;	  return    n.getType()    ==    Token.STRING;    	non-compiled	[CE]  	51	None	replace
421	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg1  =  arg0.getNext())  {  Preconditions.checkState(arg0.getType()  ==  Token.VAR);  newOp  =  arg0.getNext();  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg1  =  arg0.getNext())  {  Preconditions.checkState(arg0.getType()  ==  Token.VAR);  newOp  =  arg0.getNext();  }  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg1  =  arg0.getNext())  {  Preconditions.checkState(arg0.getType()  ==  Token.VAR);  newOp  =  arg0.getNext();  }	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0)    {    Preconditions.checkState(arg0.getType()    ==    Token.VAR);    newOp    =    arg0.getNext();    }    	non-compiled	[CE]  	55	None	replace
422	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0)  {  Preconditions.checkState(newOp.getType()  ==  Token.VAR);  newOp  =  arg0.getNext();  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0)  {  Preconditions.checkState(newOp.getType()  ==  Token.VAR);  newOp  =  arg0.getNext();  }  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0)  {  Preconditions.checkState(newOp.getType()  ==  Token.VAR);  newOp  =  arg0.getNext();  }	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0)    {    Preconditions.checkState(arg0.getType()    ==    Token.VAR);    newOp    =    arg0.getNext();    }    	non-compiled	[CE]  	55	None	replace
423	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg2  =  arg0.getNext())  {  Preconditions.checkState(arg0.getType()  ==  Token.VAR);  newOp  =  arg0.getNext();  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg2  =  arg0.getNext())  {  Preconditions.checkState(arg0.getType()  ==  Token.VAR);  newOp  =  arg0.getNext();  }  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg2  =  arg0.getNext())  {  Preconditions.checkState(arg0.getType()  ==  Token.VAR);  newOp  =  arg0.getNext();  }	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0)    {    Preconditions.checkState(arg0.getType()    ==    Token.VAR);    newOp    =    arg0.getNext();    }    	non-compiled	[CE]  	55	None	replace
424	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg  <  null;  arg0.getNext())  {  Preconditions.checkState(arg0.getNext().getType()  ==  Token.NAME);  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg  <  null;  arg0.getNext())  {  Preconditions.checkState(arg0.getNext().getType()  ==  Token.NAME);  }  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg  <  null;  arg0.getNext())  {  Preconditions.checkState(arg0.getNext().getType()  ==  Token.NAME);  }	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0.getNext())    {    Preconditions.checkState(arg0.getNext().getType()    ==    Token.NAME);    }    	non-compiled	[CE]  	2	None	replace
425	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg  ==  null;  arg0.getNext())  {  Preconditions.checkState(arg0.getNext().getType()  ==  Token.NAME);  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg  ==  null;  arg0.getNext())  {  Preconditions.checkState(arg0.getNext().getType()  ==  Token.NAME);  }  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg  ==  null;  arg0.getNext())  {  Preconditions.checkState(arg0.getNext().getType()  ==  Token.NAME);  }	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0.getNext())    {    Preconditions.checkState(arg0.getNext().getType()    ==    Token.NAME);    }    	non-compiled	[CE]  	2	None	replace
426	[BUG]  [BUGGY]  Preconditions.checkState(n.getFirstChild().getType()  ==  Token.NAME);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  Preconditions.checkState(n.getFirstChild().getType()  ==  Token.NAME);  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	Preconditions.checkState(n.getFirstChild().getType()  ==  Token.NAME);	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0.getNext())    {    Preconditions.checkState(arg0.getNext().getType()    ==    Token.NAME);    }    	non-compiled	[CE]  	2	None	replace
427	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0)  {  Preconditions.checkState(arg0.getType()  ==  Token.FUNCTION);  }  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0)  {  Preconditions.checkState(arg0.getType()  ==  Token.FUNCTION);  }  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0)  {  Preconditions.checkState(arg0.getType()  ==  Token.FUNCTION);  }	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0)    {    Preconditions.checkState(arg0.getType()    ==    Token.VAR);    }    	non-compiled	[CE]  	58	None	replace
428	[BUG]  [BUGGY]  return  n.getFirstChild().replaceChild(n,  newLiteralNode);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getFirstChild().replaceChild(n,  newLiteralNode);  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getFirstChild().replaceChild(n,  newLiteralNode);	  return    n.replaceChild(n,    newLiteralNode);    	non-compiled	[CE]  	31	None	replace
429	[BUG]  [BUGGY]  return  n.getType()!=  Token.FUNCTION  ||  n.getFirstChild().getType()  ==  Token.EXPR_RESULT;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()!=  Token.FUNCTION  ||  n.getFirstChild().getType()  ==  Token.EXPR_RESULT;  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()!=  Token.FUNCTION  ||  n.getFirstChild().getType()  ==  Token.EXPR_RESULT;	  return    n.getType()!=    Token.FUNCTION;    	non-compiled	[CE]  	12	None	replace
430	[BUG]  [BUGGY]  return  n.getType()!=  Token.FUNCTION  ||  n.getParent().getType()  ==  Token.EXPR_RESULT;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()!=  Token.FUNCTION  ||  n.getParent().getType()  ==  Token.EXPR_RESULT;  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()!=  Token.FUNCTION  ||  n.getParent().getType()  ==  Token.EXPR_RESULT;	  return    n.getType()!=    Token.FUNCTION;    	non-compiled	[CE]  	12	None	replace
431	[BUG]  [BUGGY]  return  n.getType()!=  Token.FUNCTION  ||  n.getParent().getType()  ==  Token.VAR;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()!=  Token.FUNCTION  ||  n.getParent().getType()  ==  Token.VAR;  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()!=  Token.FUNCTION  ||  n.getParent().getType()  ==  Token.VAR;	  return    n.getType()!=    Token.FUNCTION;    	non-compiled	[CE]  	12	None	replace
432	[BUG]  [BUGGY]  return  n.getParent().removeLastChild();  [CE]  [FE]            AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getParent().removeLastChild();  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getParent().removeLastChild();	  return    n.removeLastChild();    	non-compiled	[CE]  	9	None	replace
433	[BUG]  [BUGGY]  return  n.getParent().removeFirstChild();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getParent().removeFirstChild();  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getParent().removeFirstChild();	  return    n.removeLastChild();    	non-compiled	[CE]  	9	None	replace
434	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0.getNext())  {  Preconditions.checkArgument(arg0.getType()  ==  Token.FUNCTION);  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0.getNext())  {  Preconditions.checkArgument(arg0.getType()  ==  Token.FUNCTION);  }  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0.getNext())  {  Preconditions.checkArgument(arg0.getType()  ==  Token.FUNCTION);  }	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0.getNext())    {    Preconditions.checkNotNull(arg0);    }    	non-compiled	[CE]  	3	None	replace
435	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0.getNext())  {  Preconditions.checkArgument(arg0.getType()  ==  Token.VAR);  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0.getNext())  {  Preconditions.checkArgument(arg0.getType()  ==  Token.VAR);  }  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0.getNext())  {  Preconditions.checkArgument(arg0.getType()  ==  Token.VAR);  }	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0.getNext())    {    Preconditions.checkNotNull(arg0);    }    	non-compiled	[CE]  	3	None	replace
436	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg  <  null;  arg0.getNext())  {  Preconditions.checkNotNull(arg0);  }  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg  <  null;  arg0.getNext())  {  Preconditions.checkNotNull(arg0);  }  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg  <  null;  arg0.getNext())  {  Preconditions.checkNotNull(arg0);  }	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0.getNext())    {    Preconditions.checkNotNull(arg0);    }    	non-compiled	[CE]  	3	None	replace
437	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0.getNext())  {  Preconditions.checkArgument(arg0.getType()  ==  Token.BLOCK);  }  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0.getNext())  {  Preconditions.checkArgument(arg0.getType()  ==  Token.BLOCK);  }  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0.getNext())  {  Preconditions.checkArgument(arg0.getType()  ==  Token.BLOCK);  }	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0.getNext())    {    Preconditions.checkNotNull(arg0);    }    	non-compiled	[CE]  	3	None	replace
438	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getFirstChild()  :  Node.newString(Token.NAME);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getFirstChild()  :  Node.newString(Token.NAME);  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  ==  Token.NAME?  n.getFirstChild()  :  Node.newString(Token.NAME);	  return    n.getType()    ==    Token.NAME?    n.getLastChild()    :    n;    	non-compiled	[CE]  	35	None	replace
439	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  n.removeFirstChild()  :  n;  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()  ==  Token.NAME?  n.removeFirstChild()  :  n;  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  ==  Token.NAME?  n.removeFirstChild()  :  n;	  return    n.getType()    ==    Token.NAME?    n.getLastChild()    :    n;    	non-compiled	[CE]  	35	None	replace
440	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0.getNext())  {  Node  arg0  =  arg0.getNext();  if(arg0.getNext().getNext().getNext().getNext().  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0.getNext())  {  Node  arg0  =  arg0.getNext();  if(arg0.getNext().getNext().getNext().getNext().  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0.getNext())  {  Node  arg0  =  arg0.getNext();  if(arg0.getNext().getNext().getNext().getNext().	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0.getNext())    {    Node    arg0    =    arg0.getNext();    if(arg0.getNext().getNext().getNext().getNext().getNext    	non-compiled	[CE]  	59	None	replace
441	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0.getNext())  {  Node  arg0  =  arg0.getNext();  if(arg0.getNext().getNext().getNext().getNext()  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0.getNext())  {  Node  arg0  =  arg0.getNext();  if(arg0.getNext().getNext().getNext().getNext()  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0.getNext())  {  Node  arg0  =  arg0.getNext();  if(arg0.getNext().getNext().getNext().getNext()	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0.getNext())    {    Node    arg0    =    arg0.getNext();    if(arg0.getNext().getNext().getNext().getNext().getNext    	non-compiled	[CE]  	59	None	replace
442	[BUG]  [BUGGY]  return  n.getType()!=  Token.NAME?  n.getFirstChild()  :  n.getFirstChild();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()!=  Token.NAME?  n.getFirstChild()  :  n.getFirstChild();  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()!=  Token.NAME?  n.getFirstChild()  :  n.getFirstChild();	  return    n.getType()    ==    Token.NAME?    n.getLastChild()    :    n.getFirstChild();    	non-compiled	[CE]  	28	None	replace
443	[BUG]  [BUGGY]  return  n.getType()!=  Token.NAME?  n.getParent()  :  null;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()!=  Token.NAME?  n.getParent()  :  null;  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()!=  Token.NAME?  n.getParent()  :  null;	  return    n.getType()    ==    Token.NAME?    n.getParent()    :    null;    	non-compiled	[CE]  	20	None	replace
444	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getChildCount()  :  n.getChildCount();  [CE]  [FE]            AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getChildCount()  :  n.getChildCount();  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  ==  Token.NAME?  n.getChildCount()  :  n.getChildCount();	  return    n.getType()    ==    Token.NAME?    n.getChildCount()    :    n.getNext();    	non-compiled	[CE]  	21	None	replace
445	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getChildCount()  :  n.getOp();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getChildCount()  :  n.getOp();  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  ==  Token.NAME?  n.getChildCount()  :  n.getOp();	  return    n.getType()    ==    Token.NAME?    n.getChildCount()    :    n.getNext();    	non-compiled	[CE]  	21	None	replace
446	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0)  {  Node  newOp  =  arg0.getNext();  if(newOp  ==  null)  {  return  newOp;  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0)  {  Node  newOp  =  arg0.getNext();  if(newOp  ==  null)  {  return  newOp;  }  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0)  {  Node  newOp  =  arg0.getNext();  if(newOp  ==  null)  {  return  newOp;  }	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0)    {    Node    newOp    =    arg0.getNext();    if(newOp!=    null)    {    return    newOp;    }    	non-compiled	[CE]  	43	None	replace
447	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0)  {  Node  newOp  =  arg0.getParent();  if(newOp!=  null)  {  return  newOp;  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0)  {  Node  newOp  =  arg0.getParent();  if(newOp!=  null)  {  return  newOp;  }  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0)  {  Node  newOp  =  arg0.getParent();  if(newOp!=  null)  {  return  newOp;  }	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0)    {    Node    newOp    =    arg0.getNext();    if(newOp!=    null)    {    return    newOp;    }    	non-compiled	[CE]  	43	None	replace
448	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getParent()  :  n.getChildCount();  [CE]  [FE]            AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getParent()  :  n.getChildCount();  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  ==  Token.NAME?  n.getParent()  :  n.getChildCount();	  return    n.getType()    ==    Token.NAME?    n.getParent()    :    n.getNext();    	non-compiled	[CE]  	64	None	replace
449	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  n.removeFirstChild()  :  n.getLastChild();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()  ==  Token.NAME?  n.removeFirstChild()  :  n.getLastChild();  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  ==  Token.NAME?  n.removeFirstChild()  :  n.getLastChild();	  return    n.getType()    ==    Token.NAME?    n.getFirstChild()    :    n.getLastChild();    	non-compiled	[CE]  	24	None	replace
450	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg  ==  null;  arg0.getNext())  {  Node  arg0  =  arg0.getNext();  if(arg0.getNext().getNext().getNext().getNext  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg  ==  null;  arg0.getNext())  {  Node  arg0  =  arg0.getNext();  if(arg0.getNext().getNext().getNext().getNext  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg  ==  null;  arg0.getNext())  {  Node  arg0  =  arg0.getNext();  if(arg0.getNext().getNext().getNext().getNext	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0.getNext())    {    Node    arg0    =    arg0.getNext();    if(arg0.getNext().getNext().getNext().getNext    	non-compiled	[CE]  	57	None	replace
451	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0.getNext())  {  arg0  =  arg0.getNext();  if(arg0.getNext().getNext().getNext().getNext  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0.getNext())  {  arg0  =  arg0.getNext();  if(arg0.getNext().getNext().getNext().getNext  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0.getNext())  {  arg0  =  arg0.getNext();  if(arg0.getNext().getNext().getNext().getNext	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0.getNext())    {    Node    arg0    =    arg0.getNext();    if(arg0.getNext().getNext().getNext().getNext    	non-compiled	[CE]  	57	None	replace
452	[BUG]  [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  for(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0.getNext())  {  arg0  =  arg0.getNext();  if(arg0.getNext().getNext().get  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  if(n.getType()  ==  Token.FUNCTION)  {  for(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0.getNext())  {  arg0  =  arg0.getNext();  if(arg0.getNext().getNext().get  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	if(n.getType()  ==  Token.FUNCTION)  {  for(Node  arg0  =  n.getFirstChild();  arg0!=  null;  arg0.getNext())  {  arg0  =  arg0.getNext();  if(arg0.getNext().getNext().get	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0.getNext())    {    Node    arg0    =    arg0.getNext();    if(arg0.getNext().getNext().getNext().getNext    	non-compiled	[CE]  	57	None	replace
453	[BUG]  [BUGGY]  return  n.getType()  ==  Token.FUNCTION  ||  n.getParent().getType()!=  Token.EXPR_RESULT;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()  ==  Token.FUNCTION  ||  n.getParent().getType()!=  Token.EXPR_RESULT;  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  ==  Token.FUNCTION  ||  n.getParent().getType()!=  Token.EXPR_RESULT;	  return    n.getType()    ==    Token.FUNCTION    ||    n.getParent().getType()    ==    Token.EXPR_RESULT;    	non-compiled	[CE]  	15	None	replace
454	[BUG]  [BUGGY]  return  n.getFirstChild().getNext().getType()  ==  Token.FUNCTION;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getFirstChild().getNext().getType()  ==  Token.FUNCTION;  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getFirstChild().getNext().getType()  ==  Token.FUNCTION;	  return    n.getFirstChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	13	None	replace
455	[BUG]  [BUGGY]  return  n.getFirstChild().getType()  ==  Token.FUNCTION  ||  n.getLastChild().getString().equals( "function ")||  n.getLastChild().getString().equals( "function "));  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getFirstChild().getType()  ==  Token.FUNCTION  ||  n.getLastChild().getString().equals( "function ")||  n.getLastChild().getString().equals( "function "));  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getFirstChild().getType()  ==  Token.FUNCTION  ||  n.getLastChild().getString().equals( "function ")||  n.getLastChild().getString().equals( "function "));	  return    n.getFirstChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	13	None	replace
456	[BUG]  [BUGGY]  return  n.getFirstChild().getType()  ==  Token.FUNCTION  ||  n.getLastChild().getString().equals( "function ")||  n.getLastChild().getString().equals( "function ")||  n.getFirstChild  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getFirstChild().getType()  ==  Token.FUNCTION  ||  n.getLastChild().getString().equals( "function ")||  n.getLastChild().getString().equals( "function ")||  n.getFirstChild  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getFirstChild().getType()  ==  Token.FUNCTION  ||  n.getLastChild().getString().equals( "function ")||  n.getLastChild().getString().equals( "function ")||  n.getFirstChild	  return    n.getFirstChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  	13	None	replace
457	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0.getNext())  {  Node  arg0  =  arg0.getNext();  if(arg0.getNext().getType()  ==  Token.FUNCTION)  {  report  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0.getNext())  {  Node  arg0  =  arg0.getNext();  if(arg0.getNext().getType()  ==  Token.FUNCTION)  {  report  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0.getNext())  {  Node  arg0  =  arg0.getNext();  if(arg0.getNext().getType()  ==  Token.FUNCTION)  {  report	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0.getNext())    {    Node    arg0    =    arg0.getNext();    if(arg0.getNext().getType()    ==    Token.FUNCTION)    {    reportCodeChange    	non-compiled	[CE]  	6	None	replace
458	[BUG]  [BUGGY]  for(Node  arg0  =  n.getLastChild();  arg!=  null;  arg0.getNext())  {  Node  arg0  =  arg0.getNext();  if(arg0.getNext().getType()  ==  Token.FUNCTION)  {  reportCodeChange  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getLastChild();  arg!=  null;  arg0.getNext())  {  Node  arg0  =  arg0.getNext();  if(arg0.getNext().getType()  ==  Token.FUNCTION)  {  reportCodeChange  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getLastChild();  arg!=  null;  arg0.getNext())  {  Node  arg0  =  arg0.getNext();  if(arg0.getNext().getType()  ==  Token.FUNCTION)  {  reportCodeChange	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0.getNext())    {    Node    arg0    =    arg0.getNext();    if(arg0.getNext().getType()    ==    Token.FUNCTION)    {    reportCodeChange    	non-compiled	[CE]  	6	None	replace
459	[BUG]  [BUGGY]  for(Node  arg1  =  n.getFirstChild();  arg0!=  null;  arg0.getNext())  {  Node  arg0  =  arg0.getNext();  if(arg0.getNext().getType()  ==  Token.FUNCTION)  {  reportCodeChange  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg1  =  n.getFirstChild();  arg0!=  null;  arg0.getNext())  {  Node  arg0  =  arg0.getNext();  if(arg0.getNext().getType()  ==  Token.FUNCTION)  {  reportCodeChange  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg1  =  n.getFirstChild();  arg0!=  null;  arg0.getNext())  {  Node  arg0  =  arg0.getNext();  if(arg0.getNext().getType()  ==  Token.FUNCTION)  {  reportCodeChange	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0.getNext())    {    Node    arg0    =    arg0.getNext();    if(arg0.getNext().getType()    ==    Token.FUNCTION)    {    reportCodeChange    	non-compiled	[CE]  	6	None	replace
460	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0.getNext())  {  Node  arg0  =  arg0.getNext();  if(arg0.getNext().getType()  ==  Token.FUNCTION)  {  reportCodeCh  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0.getNext())  {  Node  arg0  =  arg0.getNext();  if(arg0.getNext().getType()  ==  Token.FUNCTION)  {  reportCodeCh  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0.getNext())  {  Node  arg0  =  arg0.getNext();  if(arg0.getNext().getType()  ==  Token.FUNCTION)  {  reportCodeCh	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0.getNext())    {    Node    arg0    =    arg0.getNext();    if(arg0.getNext().getType()    ==    Token.FUNCTION)    {    reportCodeChange    	non-compiled	[CE]  	6	None	replace
461	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  this  :  n.getFirstChild();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()  ==  Token.NAME?  this  :  n.getFirstChild();  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  ==  Token.NAME?  this  :  n.getFirstChild();	  return    n.getType()    ==    Token.NAME?    null    :    n.getFirstChild();    	non-compiled	[CE]  	36	None	replace
462	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  1  :  n.getFirstChild();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()  ==  Token.NAME?  1  :  n.getFirstChild();  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  ==  Token.NAME?  1  :  n.getFirstChild();	  return    n.getType()    ==    Token.NAME?    null    :    n.getFirstChild();    	non-compiled	[CE]  	36	None	replace
463	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getString()  :  n.removeFirstChild();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getString()  :  n.removeFirstChild();  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  ==  Token.NAME?  n.getString()  :  n.removeFirstChild();	  return    n.getType()    ==    Token.NAME?    n.getString()    :    n.getLastChild();    	non-compiled	[CE]  	29	None	replace
464	[BUG]  [BUGGY]  return  n.getType()  ==  Token.VAR  ||  n.getChildCount()  >  1;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()  ==  Token.VAR  ||  n.getChildCount()  >  1;  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  ==  Token.VAR  ||  n.getChildCount()  >  1;	  return    n.getType()    ==    Token.VAR;    	non-compiled	[CE]  	61	None	replace
465	[BUG]  [BUGGY]  return  n.getType()  ==  Token.VAR  ||  n.getParent().getType()  ==  Token.CATCH;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()  ==  Token.VAR  ||  n.getParent().getType()  ==  Token.CATCH;  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  ==  Token.VAR  ||  n.getParent().getType()  ==  Token.CATCH;	  return    n.getType()    ==    Token.VAR;    	non-compiled	[CE]  	61	None	replace
466	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME  ||  n.getParent().getType()  ==  Token.VAR;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()  ==  Token.NAME  ||  n.getParent().getType()  ==  Token.VAR;  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  ==  Token.NAME  ||  n.getParent().getType()  ==  Token.VAR;	  return    n.getType()    ==    Token.NAME;    	non-compiled	[CE]  	49	None	replace
467	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME  ||  n.getParent().getType()  ==  Token.EXPR_RESULT;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()  ==  Token.NAME  ||  n.getParent().getType()  ==  Token.EXPR_RESULT;  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  ==  Token.NAME  ||  n.getParent().getType()  ==  Token.EXPR_RESULT;	  return    n.getType()    ==    Token.NAME;    	non-compiled	[CE]  	49	None	replace
468	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME  ||  n.getChildCount()  >  1;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()  ==  Token.NAME  ||  n.getChildCount()  >  1;  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  ==  Token.NAME  ||  n.getChildCount()  >  1;	  return    n.getType()    ==    Token.NAME;    	non-compiled	[CE]  	49	None	replace
469	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg1  =  arg0.getNext())  {  Preconditions.checkArgument(arg0.getType()  ==  Token.VAR);  newOp  =  arg0.getNext();  }  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg1  =  arg0.getNext())  {  Preconditions.checkArgument(arg0.getType()  ==  Token.VAR);  newOp  =  arg0.getNext();  }  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg1  =  arg0.getNext())  {  Preconditions.checkArgument(arg0.getType()  ==  Token.VAR);  newOp  =  arg0.getNext();  }	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0)    {    Preconditions.checkArgument(arg0.getType()    ==    Token.VAR);    newOp    =    arg0.getNext();    }    	non-compiled	[CE]  	56	None	replace
470	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg2  =  arg0.getNext())  {  Preconditions.checkArgument(arg0.getType()  ==  Token.VAR);  newOp  =  arg0.getNext();  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg2  =  arg0.getNext())  {  Preconditions.checkArgument(arg0.getType()  ==  Token.VAR);  newOp  =  arg0.getNext();  }  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg2  =  arg0.getNext())  {  Preconditions.checkArgument(arg0.getType()  ==  Token.VAR);  newOp  =  arg0.getNext();  }	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0)    {    Preconditions.checkArgument(arg0.getType()    ==    Token.VAR);    newOp    =    arg0.getNext();    }    	non-compiled	[CE]  	56	None	replace
471	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0)  {  Preconditions.checkArgument(arg0.getType()  ==  Token.VAR);  newOp  =  arg0.getParent();  }  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0)  {  Preconditions.checkArgument(arg0.getType()  ==  Token.VAR);  newOp  =  arg0.getParent();  }  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0)  {  Preconditions.checkArgument(arg0.getType()  ==  Token.VAR);  newOp  =  arg0.getParent();  }	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0)    {    Preconditions.checkArgument(arg0.getType()    ==    Token.VAR);    newOp    =    arg0.getNext();    }    	non-compiled	[CE]  	56	None	replace
472	[BUG]  [BUGGY]  return  n.getFirstChild().getNext().getString();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getFirstChild().getNext().getString();  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getFirstChild().getNext().getString();	  return    n.getLastChild().getString();    	non-compiled	[CE]  	34	None	replace
473	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0.getNext())  {  Node  newOp  =  arg0.getNext();  if(newOp.getType()  ==  Token.FUNCTION)  {  reportCodeChange();  }  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0.getNext())  {  Node  newOp  =  arg0.getNext();  if(newOp.getType()  ==  Token.FUNCTION)  {  reportCodeChange();  }  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0.getNext())  {  Node  newOp  =  arg0.getNext();  if(newOp.getType()  ==  Token.FUNCTION)  {  reportCodeChange();  }	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0.getNext())    {    Node    newOp    =    arg0.getNext();    if(newOp.getType()    ==    Token.FUNCTION)    {    reportCodeChange();    }    	non-compiled	[CE]  	4	None	replace
474	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0.getNext())  {  Node  newOp  =  arg0.getNext();  if(newOp.getType()  ==  Token.FUNCTION)  {  reportCodeChange()  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0.getNext())  {  Node  newOp  =  arg0.getNext();  if(newOp.getType()  ==  Token.FUNCTION)  {  reportCodeChange()  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0.getNext())  {  Node  newOp  =  arg0.getNext();  if(newOp.getType()  ==  Token.FUNCTION)  {  reportCodeChange()	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0.getNext())    {    Node    newOp    =    arg0.getNext();    if(newOp.getType()    ==    Token.FUNCTION)    {    reportCodeChange();    }    	non-compiled	[CE]  	4	None	replace
475	[BUG]  [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0.getNext())  {  newOp  =  arg0.getNext();  if(newOp.getType()  ==  Token.FUNCTION)  {  reportCodeChange();  }  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0.getNext())  {  newOp  =  arg0.getNext();  if(newOp.getType()  ==  Token.FUNCTION)  {  reportCodeChange();  }  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	for(Node  arg0  =  n.getFirstChild();  arg!=  null;  arg0.getNext())  {  newOp  =  arg0.getNext();  if(newOp.getType()  ==  Token.FUNCTION)  {  reportCodeChange();  }	  for(Node    arg0    =    n.getFirstChild();    arg0!=    null;    arg0.getNext())    {    Node    newOp    =    arg0.getNext();    if(newOp.getType()    ==    Token.FUNCTION)    {    reportCodeChange();    }    	non-compiled	[CE]  	4	None	replace
476	[BUG]  [BUGGY]  return  n.getString();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getString();  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getString();	  return    n.getNameNode();    	non-compiled	[CE]  	38	None	replace
477	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getFirstChild()  :  NodeUtil.EMPTY;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getFirstChild()  :  NodeUtil.EMPTY;  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  ==  Token.NAME?  n.getFirstChild()  :  NodeUtil.EMPTY;	  return    n.getType()    ==    Token.NAME?    n.getFirstChild()    :    null;    	non-compiled	[CE]  	25	None	replace
478	[BUG]  [BUGGY]  return  n.getType()!=  Token.NAME?  n.getChildCount()  :  n.getParent();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()!=  Token.NAME?  n.getChildCount()  :  n.getParent();  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()!=  Token.NAME?  n.getChildCount()  :  n.getParent();	  return    n.getType()    ==    Token.NAME?    n.getChildCount()    :    n.getParent();    	non-compiled	[CE]  	18	None	replace
479	[BUG]  [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getChildCount()  :  n.removeFirstChild();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      }  }  if  (newLiteralNode  !=  null)  {  n.getParent().replaceChild(n,  newLiteralNode);  reportCodeChange();  return  newLiteralNode;  }  }  }      [BUGGY]  return  n.getType()  ==  Token.NAME?  n.getChildCount()  :  n.removeFirstChild();  [BUGGY]      }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryFoldLiteralConstructor  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  action  boolean  constructorHasArgs  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  arg0  constructorNameNode  n  newLiteralNode  String  className  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.23570226039551587	913	913	1	replace	return  n.getType()  ==  Token.NAME?  n.getChildCount()  :  n.removeFirstChild();	  return    n.getType()    ==    Token.NAME?    n.getChildCount()    :    n.getParent();    	non-compiled	[CE]  	18	None	replace
