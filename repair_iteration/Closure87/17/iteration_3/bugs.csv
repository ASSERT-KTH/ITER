bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newNode,  true);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  newNode,  true);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	NodeTraversal.traverse(compiler,  newNode,  true);	  NodeTraversal.traverse(compiler,    newNode,    false);    	non-compiled	[CE]  	8	None	replace
2	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  false);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  false);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	NodeTraversal.traverse(compiler,  n,  false);	  NodeTraversal.traverse(compiler,    newNode,    false);    	non-compiled	[CE]  	8	None	replace
3	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  false);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  false);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	NodeTraversal.traverse(compiler,  parent,  false);	  NodeTraversal.traverse(compiler,    newNode,    false);    	non-compiled	[CE]  	8	None	replace
4	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newNode,  false,  num);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  newNode,  false,  num);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	NodeTraversal.traverse(compiler,  newNode,  false,  num);	  NodeTraversal.traverse(compiler,    newNode,    false);    	non-compiled	[CE]  	8	None	replace
5	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newNode,  false,  parent);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  newNode,  false,  parent);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	NodeTraversal.traverse(compiler,  newNode,  false,  parent);	  NodeTraversal.traverse(compiler,    newNode,    false);    	non-compiled	[CE]  	8	None	replace
6	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  false);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  node,  false);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	NodeTraversal.traverse(compiler,  node,  false);	  NodeTraversal.traverse(compiler,    newNode,    false);    	non-compiled	[CE]  	8	None	replace
7	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  newNode);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  newNode);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	NodeTraversal.traverse(compiler,  n,  this,  newNode);	  NodeTraversal.traverse(compiler,    newNode,    this,    n);    	non-compiled	[CE]  	15	None	replace
8	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this,  n);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this,  n);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	NodeTraversal.traverse(compiler,  parent,  this,  n);	  NodeTraversal.traverse(compiler,    newNode,    this,    n);    	non-compiled	[CE]  	15	None	replace
9	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newNode,  this,  n,  parent);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  newNode,  this,  n,  parent);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	NodeTraversal.traverse(compiler,  newNode,  this,  n,  parent);	  NodeTraversal.traverse(compiler,    newNode,    this,    n);    	non-compiled	[CE]  	15	None	replace
10	[BUG]  [BUGGY]  newNode.setType(Token.FUNCTION  |  Token.NAME);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  newNode.setType(Token.FUNCTION  |  Token.NAME);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	newNode.setType(Token.FUNCTION  |  Token.NAME);	  newNode.setType(Token.FUNCTION);    	non-compiled	[CE]  	4	None	replace
11	[BUG]  [BUGGY]  newNode.setType(Token.FUNCTION  |  Token.EXPR_RESULT);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  newNode.setType(Token.FUNCTION  |  Token.EXPR_RESULT);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	newNode.setType(Token.FUNCTION  |  Token.EXPR_RESULT);	  newNode.setType(Token.FUNCTION);    	non-compiled	[CE]  	4	None	replace
12	[BUG]  [BUGGY]  newNode.setType(Token.FUNCTION  |  Token.VAR);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  newNode.setType(Token.FUNCTION  |  Token.VAR);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	newNode.setType(Token.FUNCTION  |  Token.VAR);	  newNode.setType(Token.FUNCTION);    	non-compiled	[CE]  	4	None	replace
13	[BUG]  [BUGGY]  newNode.setType(Token.EMPTY);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  newNode.setType(Token.EMPTY);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	newNode.setType(Token.EMPTY);	  newNode.setType(Token.FUNCTION);    	non-compiled	[CE]  	4	None	replace
14	[BUG]  [BUGGY]  newNode.setType(Token.FUNCTION  |  Token.SCRIPT);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  newNode.setType(Token.FUNCTION  |  Token.SCRIPT);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	newNode.setType(Token.FUNCTION  |  Token.SCRIPT);	  newNode.setType(Token.FUNCTION);    	non-compiled	[CE]  	4	None	replace
15	[BUG]  [BUGGY]  newNode.setType(Token.EXPR_RESULT);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  newNode.setType(Token.EXPR_RESULT);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	newNode.setType(Token.EXPR_RESULT);	  newNode.setType(Token.FUNCTION);    	non-compiled	[CE]  	4	None	replace
16	[BUG]  [BUGGY]  newNode.setType(Token.VAR,  num);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  newNode.setType(Token.VAR,  num);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	newNode.setType(Token.VAR,  num);	  newNode.setType(Token.VAR);    	non-compiled	[CE]  	25	None	replace
17	[BUG]  [BUGGY]  newNode.setType(Token.VAR  |  Token.NAME);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  newNode.setType(Token.VAR  |  Token.NAME);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	newNode.setType(Token.VAR  |  Token.NAME);	  newNode.setType(Token.VAR);    	non-compiled	[CE]  	25	None	replace
18	[BUG]  [BUGGY]  newNode.setType(Token.VAR,  n);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  newNode.setType(Token.VAR,  n);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	newNode.setType(Token.VAR,  n);	  newNode.setType(Token.VAR);    	non-compiled	[CE]  	25	None	replace
19	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  newNode,  true);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  newNode,  true);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	NodeTraversal.traverse(compiler,  parent,  newNode,  true);	  NodeTraversal.traverse(compiler,    parent,    newNode,    false);    	non-compiled	[CE]  	7	None	replace
20	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  newNode,  false);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  node,  newNode,  false);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	NodeTraversal.traverse(compiler,  node,  newNode,  false);	  NodeTraversal.traverse(compiler,    parent,    newNode,    false);    	non-compiled	[CE]  	7	None	replace
21	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  n,  false);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  n,  false);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	NodeTraversal.traverse(compiler,  parent,  n,  false);	  NodeTraversal.traverse(compiler,    parent,    newNode,    false);    	non-compiled	[CE]  	7	None	replace
22	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  newNode);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  newNode);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  newNode);	  NodeTraversal.traverse(compiler,    n,    parent,    this);    	non-compiled	[CE]  	31	None	replace
23	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this,  newNode);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this,  newNode);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  this,  newNode);	  NodeTraversal.traverse(compiler,    n,    parent,    this);    	non-compiled	[CE]  	31	None	replace
24	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  null);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  null);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  null);	  NodeTraversal.traverse(compiler,    n,    parent,    this);    	non-compiled	[CE]  	31	None	replace
25	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this,  num);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this,  num);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  this,  num);	  NodeTraversal.traverse(compiler,    n,    parent,    this);    	non-compiled	[CE]  	31	None	replace
26	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newNode,  parent,  this);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  newNode,  parent,  this);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	NodeTraversal.traverse(compiler,  newNode,  parent,  this);	  NodeTraversal.traverse(compiler,    n,    parent,    this);    	non-compiled	[CE]  	31	None	replace
27	[BUG]  [BUGGY]  Node  newNode  =  Node.newNumber(0);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  Node  newNode  =  Node.newNumber(0);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	Node  newNode  =  Node.newNumber(0);	  Node    newNode    =    Node.newNumber(num);    	non-compiled	[CE]  	24	None	replace
28	[BUG]  [BUGGY]  Node  newNode  =  Node.newNumber(parent);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  Node  newNode  =  Node.newNumber(parent);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	Node  newNode  =  Node.newNumber(parent);	  Node    newNode    =    Node.newNumber(num);    	non-compiled	[CE]  	24	None	replace
29	[BUG]  [BUGGY]  Node  newNode  =  Node.newNumber(num  +  1);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  Node  newNode  =  Node.newNumber(num  +  1);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	Node  newNode  =  Node.newNumber(num  +  1);	  Node    newNode    =    Node.newNumber(num);    	non-compiled	[CE]  	24	None	replace
30	[BUG]  [BUGGY]  Node  newNode  =  Node.newNumber(parent,  num);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  Node  newNode  =  Node.newNumber(parent,  num);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	Node  newNode  =  Node.newNumber(parent,  num);	  Node    newNode    =    Node.newNumber(num);    	non-compiled	[CE]  	24	None	replace
31	[BUG]  [BUGGY]  Node  newNode  =  Node.newNumber(parent.getType());  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  Node  newNode  =  Node.newNumber(parent.getType());  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	Node  newNode  =  Node.newNumber(parent.getType());	  Node    newNode    =    Node.newNumber(num);    	non-compiled	[CE]  	24	None	replace
32	[BUG]  [BUGGY]  Node  newNode  =  Node.newNumber(n);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  Node  newNode  =  Node.newNumber(n);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	Node  newNode  =  Node.newNumber(n);	  Node    newNode    =    Node.newNumber(num);    	non-compiled	[CE]  	24	None	replace
33	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this,  null);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this,  null);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  this,  null);	  NodeTraversal.traverse(compiler,    n,    newNode,    this,    null);    	non-compiled	[CE]  	60	None	replace
34	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNode,  parent,  this,  null);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNode,  parent,  this,  null);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	NodeTraversal.traverse(compiler,  n,  newNode,  parent,  this,  null);	  NodeTraversal.traverse(compiler,    n,    newNode,    this,    null);    	non-compiled	[CE]  	60	None	replace
35	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNode,  this,  parent,  null);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNode,  this,  parent,  null);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	NodeTraversal.traverse(compiler,  n,  newNode,  this,  parent,  null);	  NodeTraversal.traverse(compiler,    n,    newNode,    this,    null);    	non-compiled	[CE]  	60	None	replace
36	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  newNode,  null);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  newNode,  null);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  newNode,  null);	  NodeTraversal.traverse(compiler,    n,    newNode,    this,    null);    	non-compiled	[CE]  	60	None	replace
37	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  newNode,  this,  null);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  newNode,  this,  null);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	NodeTraversal.traverse(compiler,  parent,  newNode,  this,  null);	  NodeTraversal.traverse(compiler,    n,    newNode,    this,    null);    	non-compiled	[CE]  	60	None	replace
38	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNode,  parent,  null);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNode,  parent,  null);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	NodeTraversal.traverse(compiler,  n,  newNode,  parent,  null);	  NodeTraversal.traverse(compiler,    n,    newNode,    this,    null);    	non-compiled	[CE]  	60	None	replace
39	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  null);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  null);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	NodeTraversal.traverse(compiler,  n,  null);	  NodeTraversal.traverse(compiler,    newNode,    null);    	non-compiled	[CE]  	16	None	replace
40	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  newNode,  null);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  newNode,  null);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	NodeTraversal.traverse(compiler,  parent,  newNode,  null);	  NodeTraversal.traverse(compiler,    newNode,    null);    	non-compiled	[CE]  	16	None	replace
41	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  null);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  null);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	NodeTraversal.traverse(compiler,  parent,  null);	  NodeTraversal.traverse(compiler,    newNode,    null);    	non-compiled	[CE]  	16	None	replace
42	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newNode,  parent);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  newNode,  parent);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	NodeTraversal.traverse(compiler,  newNode,  parent);	  NodeTraversal.traverse(compiler,    newNode,    null);    	non-compiled	[CE]  	16	None	replace
43	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  newNode,  this,  num);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  newNode,  this,  num);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	NodeTraversal.traverse(compiler,  parent,  newNode,  this,  num);	  NodeTraversal.traverse(compiler,    n,    newNode,    this,    num);    	non-compiled	[CE]  	33	None	replace
44	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNode,  parent,  num);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNode,  parent,  num);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	NodeTraversal.traverse(compiler,  n,  newNode,  parent,  num);	  NodeTraversal.traverse(compiler,    n,    newNode,    this,    num);    	non-compiled	[CE]  	33	None	replace
45	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNode,  this,  num,  parent);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNode,  this,  num,  parent);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	NodeTraversal.traverse(compiler,  n,  newNode,  this,  num,  parent);	  NodeTraversal.traverse(compiler,    n,    newNode,    this,    num);    	non-compiled	[CE]  	33	None	replace
46	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNode,  this,  parent,  num);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNode,  this,  parent,  num);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	NodeTraversal.traverse(compiler,  n,  newNode,  this,  parent,  num);	  NodeTraversal.traverse(compiler,    n,    newNode,    this,    num);    	non-compiled	[CE]  	33	None	replace
47	[BUG]  [BUGGY]  Node  newNode  =  Node.newNumber(0);  parent.replaceChild(n,  newNode);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  Node  newNode  =  Node.newNumber(0);  parent.replaceChild(n,  newNode);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	Node  newNode  =  Node.newNumber(0);  parent.replaceChild(n,  newNode);	  Node    newNode    =    Node.newNumber(num);    parent.replaceChild(n,    newNode);    	non-compiled	[CE]  	22	None	replace
48	[BUG]  [BUGGY]  Node  newNode  =  Node.newNumber(num  +  1);  parent.replaceChild(n,  newNode);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  Node  newNode  =  Node.newNumber(num  +  1);  parent.replaceChild(n,  newNode);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	Node  newNode  =  Node.newNumber(num  +  1);  parent.replaceChild(n,  newNode);	  Node    newNode    =    Node.newNumber(num);    parent.replaceChild(n,    newNode);    	non-compiled	[CE]  	22	None	replace
49	[BUG]  [BUGGY]  Node  newNode  =  Node.newString(num);  parent.replaceChild(n,  newNode);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  Node  newNode  =  Node.newString(num);  parent.replaceChild(n,  newNode);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	Node  newNode  =  Node.newString(num);  parent.replaceChild(n,  newNode);	  Node    newNode    =    Node.newNumber(num);    parent.replaceChild(n,    newNode);    	non-compiled	[CE]  	22	None	replace
50	[BUG]  [BUGGY]  Node  newNode  =  Node.newString(Token.NAME,  n);  parent.replaceChild(n,  newNode);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  Node  newNode  =  Node.newString(Token.NAME,  n);  parent.replaceChild(n,  newNode);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	Node  newNode  =  Node.newString(Token.NAME,  n);  parent.replaceChild(n,  newNode);	  Node    newNode    =    Node.newNumber(num);    parent.replaceChild(n,    newNode);    	non-compiled	[CE]  	22	None	replace
51	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this,  num);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this,  num);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	NodeTraversal.traverse(compiler,  parent,  this,  num);	  NodeTraversal.traverse(compiler,    parent,    this);    	non-compiled	[CE]  	14	None	replace
52	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  node,  this);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	NodeTraversal.traverse(compiler,  node,  this);	  NodeTraversal.traverse(compiler,    parent,    this);    	non-compiled	[CE]  	14	None	replace
53	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNode,  null,  num);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNode,  null,  num);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	NodeTraversal.traverse(compiler,  n,  newNode,  null,  num);	  NodeTraversal.traverse(compiler,    n,    newNode,    null);    	non-compiled	[CE]  	35	None	replace
54	[BUG]  [BUGGY]  Node  newNode  =  Node.newString(Token.NAME,  num  +  1);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  Node  newNode  =  Node.newString(Token.NAME,  num  +  1);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	Node  newNode  =  Node.newString(Token.NAME,  num  +  1);	  Node    newNode    =    Node.newString(Token.NAME,    num);    	non-compiled	[CE]  	21	None	replace
55	[BUG]  [BUGGY]  Node  newNode  =  Node.newString(Token.NAME,  n);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  Node  newNode  =  Node.newString(Token.NAME,  n);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	Node  newNode  =  Node.newString(Token.NAME,  n);	  Node    newNode    =    Node.newString(Token.NAME,    num);    	non-compiled	[CE]  	21	None	replace
56	[BUG]  [BUGGY]  Node  newNode  =  Node.newString(Token.NAME,  parent.getType());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  Node  newNode  =  Node.newString(Token.NAME,  parent.getType());  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	Node  newNode  =  Node.newString(Token.NAME,  parent.getType());	  Node    newNode    =    Node.newString(Token.NAME,    num);    	non-compiled	[CE]  	21	None	replace
57	[BUG]  [BUGGY]  Node  newNode  =  Node.newString(Token.NAME,  parent.num);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  Node  newNode  =  Node.newString(Token.NAME,  parent.num);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	Node  newNode  =  Node.newString(Token.NAME,  parent.num);	  Node    newNode    =    Node.newString(Token.NAME,    num);    	non-compiled	[CE]  	21	None	replace
58	[BUG]  [BUGGY]  Node  newNode  =  Node.newString(Token.NAME,  parent);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  Node  newNode  =  Node.newString(Token.NAME,  parent);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	Node  newNode  =  Node.newString(Token.NAME,  parent);	  Node    newNode    =    Node.newString(Token.NAME,    num);    	non-compiled	[CE]  	21	None	replace
59	[BUG]  [BUGGY]  Node  newNode  =  Node.newString(Token.NAME,  parent.name);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  Node  newNode  =  Node.newString(Token.NAME,  parent.name);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	Node  newNode  =  Node.newString(Token.NAME,  parent.name);	  Node    newNode    =    Node.newString(Token.NAME,    num);    	non-compiled	[CE]  	21	None	replace
60	[BUG]  [BUGGY]  Node  newNode  =  Node.newNumber(Token.NAME,  num);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  Node  newNode  =  Node.newNumber(Token.NAME,  num);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	Node  newNode  =  Node.newNumber(Token.NAME,  num);	  Node    newNode    =    Node.newString(Token.NAME,    num);    	non-compiled	[CE]  	21	None	replace
61	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  num);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  num);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	NodeTraversal.traverse(compiler,  n,  this,  num);	  NodeTraversal.traverse(compiler,    newNode,    this,    num);    	non-compiled	[CE]  	12	None	replace
62	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newNode,  this,  num,  parent);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  newNode,  this,  num,  parent);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	NodeTraversal.traverse(compiler,  newNode,  this,  num,  parent);	  NodeTraversal.traverse(compiler,    newNode,    this,    num);    	non-compiled	[CE]  	12	None	replace
63	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newNode,  this,  parent,  num);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  newNode,  this,  parent,  num);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	NodeTraversal.traverse(compiler,  newNode,  this,  parent,  num);	  NodeTraversal.traverse(compiler,    newNode,    this,    num);    	non-compiled	[CE]  	12	None	replace
64	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  newNode,  true);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  newNode,  true);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  newNode,  true);	  NodeTraversal.traverse(compiler,    n,    parent,    newNode,    false);    	non-compiled	[CE]  	57	None	replace
65	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  newNode,  false,  num);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  newNode,  false,  num);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  newNode,  false,  num);	  NodeTraversal.traverse(compiler,    n,    parent,    newNode,    false);    	non-compiled	[CE]  	57	None	replace
66	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newNode,  parent,  false);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  newNode,  parent,  false);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	NodeTraversal.traverse(compiler,  newNode,  parent,  false);	  NodeTraversal.traverse(compiler,    n,    parent,    newNode,    false);    	non-compiled	[CE]  	57	None	replace
67	[BUG]  [BUGGY]  newNode.getType()  ==  Token.VAR  &&  newNode.getType()  ==  Token.NAME)  {  reportCodeChange();  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  newNode.getType()  ==  Token.VAR  &&  newNode.getType()  ==  Token.NAME)  {  reportCodeChange();  }  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	newNode.getType()  ==  Token.VAR  &&  newNode.getType()  ==  Token.NAME)  {  reportCodeChange();  }	  if(newNode.getType()    ==    Token.VAR    ||    newNode.getType()    ==    Token.NAME)    {    reportCodeChange();    }    	non-compiled	[CE]  	50	None	replace
68	[BUG]  [BUGGY]  newNode.getType()  ==  Token.VAR  ||  newNode.getType()  ==  Token.NAME)  {  reportCodeChange();  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  newNode.getType()  ==  Token.VAR  ||  newNode.getType()  ==  Token.NAME)  {  reportCodeChange();  }  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	newNode.getType()  ==  Token.VAR  ||  newNode.getType()  ==  Token.NAME)  {  reportCodeChange();  }	  if(newNode.getType()    ==    Token.VAR    ||    newNode.getType()    ==    Token.NAME)    {    reportCodeChange();    }    	non-compiled	[CE]  	50	None	replace
69	[BUG]  [BUGGY]  ||  newNode.getType()  ==  Token.NAME)  {  reportCodeChange();  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  ||  newNode.getType()  ==  Token.NAME)  {  reportCodeChange();  }  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	||  newNode.getType()  ==  Token.NAME)  {  reportCodeChange();  }	  if(newNode.getType()    ==    Token.VAR    ||    newNode.getType()    ==    Token.NAME)    {    reportCodeChange();    }    	non-compiled	[CE]  	50	None	replace
70	[BUG]  [BUGGY]  newNode.getType()  ==  Token.VAR  ||  newNode.getType()!=  Token.NAME)  {  reportCodeChange();  }  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  newNode.getType()  ==  Token.VAR  ||  newNode.getType()!=  Token.NAME)  {  reportCodeChange();  }  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	newNode.getType()  ==  Token.VAR  ||  newNode.getType()!=  Token.NAME)  {  reportCodeChange();  }	  if(newNode.getType()    ==    Token.VAR    ||    newNode.getType()    ==    Token.NAME)    {    reportCodeChange();    }    	non-compiled	[CE]  	50	None	replace
71	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  newNode,  num);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  newNode,  num);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	NodeTraversal.traverse(compiler,  parent,  newNode,  num);	  NodeTraversal.traverse(compiler,    parent,    newNode,    this);    	non-compiled	[CE]  	34	None	replace
72	[BUG]  [BUGGY]  Node  n  =  parent.getFirstChild();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  Node  n  =  parent.getFirstChild();  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	Node  n  =  parent.getFirstChild();	  Node    n    =    newNode.getFirstChild();    	non-compiled	[CE]  	41	None	replace
73	[BUG]  [BUGGY]  Node  n  =  newNode.getLastChild();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  Node  n  =  newNode.getLastChild();  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	Node  n  =  newNode.getLastChild();	  Node    n    =    newNode.getFirstChild();    	non-compiled	[CE]  	41	None	replace
74	[BUG]  [BUGGY]  Node  n  =  parent.getLastChild();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  Node  n  =  parent.getLastChild();  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	Node  n  =  parent.getLastChild();	  Node    n    =    newNode.getFirstChild();    	non-compiled	[CE]  	41	None	replace
75	[BUG]  [BUGGY]  Node  n  =  newNode.getNext();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  Node  n  =  newNode.getNext();  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	Node  n  =  newNode.getNext();	  Node    n    =    newNode.getFirstChild();    	non-compiled	[CE]  	41	None	replace
76	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  num);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  num);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  num);	  NodeTraversal.traverse(compiler,    n,    newNode,    parents);    	non-compiled	[CE]  	56	None	replace
77	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNode,  parents,  num);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNode,  parents,  num);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	NodeTraversal.traverse(compiler,  n,  newNode,  parents,  num);	  NodeTraversal.traverse(compiler,    n,    newNode,    parents);    	non-compiled	[CE]  	56	None	replace
78	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  newNode,  n);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  newNode,  n);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	NodeTraversal.traverse(compiler,  parent,  newNode,  n);	  NodeTraversal.traverse(compiler,    n,    newNode,    parents);    	non-compiled	[CE]  	56	None	replace
79	[BUG]  [BUGGY]  Node  newNode  =  n.replaceChild(parent,  newNode);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  Node  newNode  =  n.replaceChild(parent,  newNode);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	Node  newNode  =  n.replaceChild(parent,  newNode);	  Node    newNode    =    parent.replaceChild(n,    newNode);    	non-compiled	[CE]  	46	None	replace
80	[BUG]  [BUGGY]  Node  newNode  =  parent.replaceChild(n,  newNode,  num);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  Node  newNode  =  parent.replaceChild(n,  newNode,  num);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	Node  newNode  =  parent.replaceChild(n,  newNode,  num);	  Node    newNode    =    parent.replaceChild(n,    newNode);    	non-compiled	[CE]  	46	None	replace
81	[BUG]  [BUGGY]  Node  newNode  =  n.removeFirstChild();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  Node  newNode  =  n.removeFirstChild();  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	Node  newNode  =  n.removeFirstChild();	  Node    newNode    =    parent.replaceChild(n,    newNode);    	non-compiled	[CE]  	46	None	replace
82	[BUG]  [BUGGY]  Node  newNode  =  node.replaceChild(n,  newNode);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  Node  newNode  =  node.replaceChild(n,  newNode);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	Node  newNode  =  node.replaceChild(n,  newNode);	  Node    newNode    =    parent.replaceChild(n,    newNode);    	non-compiled	[CE]  	46	None	replace
83	[BUG]  [BUGGY]  Node  newNode  =  n.removeChild(parent);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  Node  newNode  =  n.removeChild(parent);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	Node  newNode  =  n.removeChild(parent);	  Node    newNode    =    parent.replaceChild(n,    newNode);    	non-compiled	[CE]  	46	None	replace
84	[BUG]  [BUGGY]  Node  newNode  =  parent.removeChild(n);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  Node  newNode  =  parent.removeChild(n);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	Node  newNode  =  parent.removeChild(n);	  Node    newNode    =    parent.replaceChild(n,    newNode);    	non-compiled	[CE]  	46	None	replace
85	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  parent);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  parent);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	NodeTraversal.traverse(compiler,  n,  this,  parent);	  NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  	11	None	replace
86	[BUG]  [BUGGY]  ||  newNode.getType()  ==  Token.FUNCTION)  {  reportCodeChange();  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  ||  newNode.getType()  ==  Token.FUNCTION)  {  reportCodeChange();  }  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	||  newNode.getType()  ==  Token.FUNCTION)  {  reportCodeChange();  }	  if(newNode.getType()    ==    Token.VAR    ||    newNode.getType()    ==    Token.FUNCTION)    {    reportCodeChange();    }    	non-compiled	[CE]  	47	None	replace
87	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  num);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  num);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	NodeTraversal.traverse(compiler,  parent,  num);	  NodeTraversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  	27	None	replace
88	[BUG]  [BUGGY]  Traversal.traverse(compiler,  n,  newNode);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  Traversal.traverse(compiler,  n,  newNode);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	Traversal.traverse(compiler,  n,  newNode);	  NodeTraversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  	27	None	replace
89	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNode,  true,  parent);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNode,  true,  parent);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	NodeTraversal.traverse(compiler,  n,  newNode,  true,  parent);	  NodeTraversal.traverse(compiler,    n,    newNode,    false,    parent);    	non-compiled	[CE]  	9	None	replace
90	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  false,  num);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  false,  num);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  false,  num);	  NodeTraversal.traverse(compiler,    n,    newNode,    false,    parent);    	non-compiled	[CE]  	9	None	replace
91	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  false,  newNode);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  false,  newNode);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  false,  newNode);	  NodeTraversal.traverse(compiler,    n,    newNode,    false,    parent);    	non-compiled	[CE]  	9	None	replace
92	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNode,  false,  parent,  num);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNode,  false,  parent,  num);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	NodeTraversal.traverse(compiler,  n,  newNode,  false,  parent,  num);	  NodeTraversal.traverse(compiler,    n,    newNode,    false,    parent);    	non-compiled	[CE]  	9	None	replace
93	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNode,  true,  false);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNode,  true,  false);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	NodeTraversal.traverse(compiler,  n,  newNode,  true,  false);	  NodeTraversal.traverse(compiler,    n,    newNode,    false,    parent);    	non-compiled	[CE]  	9	None	replace
94	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNode,  true,  null);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNode,  true,  null);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	NodeTraversal.traverse(compiler,  n,  newNode,  true,  null);	  NodeTraversal.traverse(compiler,    n,    newNode,    false,    parent);    	non-compiled	[CE]  	9	None	replace
95	[BUG]  [BUGGY]  newNode.setType(Token.FUNCTION  |  Token.NAME)  {  reportCodeChange();  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  newNode.setType(Token.FUNCTION  |  Token.NAME)  {  reportCodeChange();  }  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	newNode.setType(Token.FUNCTION  |  Token.NAME)  {  reportCodeChange();  }	  newNode.setType(Token.FUNCTION)    {    reportCodeChange();    }    	non-compiled	[CE]  	38	None	replace
96	[BUG]  [BUGGY]  newNode.setType(Token.GETPROP)  {  reportCodeChange();  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  newNode.setType(Token.GETPROP)  {  reportCodeChange();  }  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	newNode.setType(Token.GETPROP)  {  reportCodeChange();  }	  newNode.setType(Token.FUNCTION)    {    reportCodeChange();    }    	non-compiled	[CE]  	38	None	replace
97	[BUG]  [BUGGY]  newNode.setType(Token.EMPTY)  {  reportCodeChange();  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  newNode.setType(Token.EMPTY)  {  reportCodeChange();  }  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	newNode.setType(Token.EMPTY)  {  reportCodeChange();  }	  newNode.setType(Token.FUNCTION)    {    reportCodeChange();    }    	non-compiled	[CE]  	38	None	replace
98	[BUG]  [BUGGY]  newNode.setType(Token.FUNCTION  |  Token.VAR)  {  reportCodeChange();  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  newNode.setType(Token.FUNCTION  |  Token.VAR)  {  reportCodeChange();  }  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	newNode.setType(Token.FUNCTION  |  Token.VAR)  {  reportCodeChange();  }	  newNode.setType(Token.FUNCTION)    {    reportCodeChange();    }    	non-compiled	[CE]  	38	None	replace
99	[BUG]  [BUGGY]  newNode.setType(Token.FUNCTION)  {  reportError();  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  newNode.setType(Token.FUNCTION)  {  reportError();  }  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	newNode.setType(Token.FUNCTION)  {  reportError();  }	  newNode.setType(Token.FUNCTION)    {    reportCodeChange();    }    	non-compiled	[CE]  	38	None	replace
100	[BUG]  [BUGGY]  NodeUtil.removeChild(newNode,  parent);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  NodeUtil.removeChild(newNode,  parent);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	NodeUtil.removeChild(newNode,  parent);	  NodeUtil.removeChild(parent,    newNode);    	non-compiled	[CE]  	43	None	replace
101	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  num);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  NodeUtil.removeChild(parent,  num);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	NodeUtil.removeChild(parent,  num);	  NodeUtil.removeChild(parent,    newNode);    	non-compiled	[CE]  	43	None	replace
102	[BUG]  [BUGGY]  NodeUtil.removeChild(newNode);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  NodeUtil.removeChild(newNode);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	NodeUtil.removeChild(newNode);	  NodeUtil.removeChild(parent,    newNode);    	non-compiled	[CE]  	43	None	replace
103	[BUG]  [BUGGY]  NodeUtil.removeChild(n,  newNode);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  NodeUtil.removeChild(n,  newNode);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	NodeUtil.removeChild(n,  newNode);	  NodeUtil.removeChild(parent,    newNode);    	non-compiled	[CE]  	43	None	replace
104	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  newNode,  num);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  NodeUtil.removeChild(parent,  newNode,  num);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	NodeUtil.removeChild(parent,  newNode,  num);	  NodeUtil.removeChild(parent,    newNode);    	non-compiled	[CE]  	43	None	replace
105	[BUG]  [BUGGY]  parent.replaceChild(n,  num);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  parent.replaceChild(n,  num);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	parent.replaceChild(n,  num);	  parent.replaceChild(newNode,    num);    	non-compiled	[CE]  	36	None	replace
106	[BUG]  [BUGGY]  NodeUtil.removeChild(newNode,  n);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  NodeUtil.removeChild(newNode,  n);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	NodeUtil.removeChild(newNode,  n);	  NodeUtil.removeChild(parent,    n);    	non-compiled	[CE]  	51	None	replace
107	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  n,  newNode);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  NodeUtil.removeChild(parent,  n,  newNode);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	NodeUtil.removeChild(parent,  n,  newNode);	  NodeUtil.removeChild(parent,    n);    	non-compiled	[CE]  	51	None	replace
108	[BUG]  [BUGGY]  NodeUtil.removeChild(n,  parent);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  NodeUtil.removeChild(n,  parent);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	NodeUtil.removeChild(n,  parent);	  NodeUtil.removeChild(parent,    n);    	non-compiled	[CE]  	51	None	replace
109	[BUG]  [BUGGY]  Node  newNode  =  n.getFirstChild();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  Node  newNode  =  n.getFirstChild();  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	Node  newNode  =  n.getFirstChild();	  Node    newNode    =    newNode.getFirstChild();    	non-compiled	[CE]  	19	None	replace
110	[BUG]  [BUGGY]  Node  newNode  =  parent.getLastChild();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  Node  newNode  =  parent.getLastChild();  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	Node  newNode  =  parent.getLastChild();	  Node    newNode    =    newNode.getFirstChild();    	non-compiled	[CE]  	19	None	replace
111	[BUG]  [BUGGY]  Node  newNode  =  node.getFirstChild();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  Node  newNode  =  node.getFirstChild();  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	Node  newNode  =  node.getFirstChild();	  Node    newNode    =    newNode.getFirstChild();    	non-compiled	[CE]  	19	None	replace
112	[BUG]  [BUGGY]  Node  newNode  =  n.getLastChild();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  Node  newNode  =  n.getLastChild();  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	Node  newNode  =  n.getLastChild();	  Node    newNode    =    newNode.getFirstChild();    	non-compiled	[CE]  	19	None	replace
113	[BUG]  [BUGGY]  newNode.getType()  ==  Token.VAR  &&  newNode.getType()  ==  Token.CATCH)  {  reportCodeChange();  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  newNode.getType()  ==  Token.VAR  &&  newNode.getType()  ==  Token.CATCH)  {  reportCodeChange();  }  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	newNode.getType()  ==  Token.VAR  &&  newNode.getType()  ==  Token.CATCH)  {  reportCodeChange();  }	  if(newNode.getType()    ==    Token.VAR    ||    newNode.getType()    ==    Token.CATCH)    {    reportCodeChange();    }    	non-compiled	[CE]  	48	None	replace
114	[BUG]  [BUGGY]  newNode.getType()  ==  Token.VAR  ||  newNode.getType()  ==  Token.CATCH)  {  reportCodeChange();  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  newNode.getType()  ==  Token.VAR  ||  newNode.getType()  ==  Token.CATCH)  {  reportCodeChange();  }  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	newNode.getType()  ==  Token.VAR  ||  newNode.getType()  ==  Token.CATCH)  {  reportCodeChange();  }	  if(newNode.getType()    ==    Token.VAR    ||    newNode.getType()    ==    Token.CATCH)    {    reportCodeChange();    }    	non-compiled	[CE]  	48	None	replace
115	[BUG]  [BUGGY]  newNode.setType(Token.VAR,  n)||  newNode.getType()  ==  Token.CATCH)  {  reportCodeChange();  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  newNode.setType(Token.VAR,  n)||  newNode.getType()  ==  Token.CATCH)  {  reportCodeChange();  }  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	newNode.setType(Token.VAR,  n)||  newNode.getType()  ==  Token.CATCH)  {  reportCodeChange();  }	  if(newNode.getType()    ==    Token.VAR    ||    newNode.getType()    ==    Token.CATCH)    {    reportCodeChange();    }    	non-compiled	[CE]  	48	None	replace
116	[BUG]  [BUGGY]  newNode.setType(Token.VAR);  newNode.setType(Token.CATCH)  {  reportCodeChange();  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  newNode.setType(Token.VAR);  newNode.setType(Token.CATCH)  {  reportCodeChange();  }  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	newNode.setType(Token.VAR);  newNode.setType(Token.CATCH)  {  reportCodeChange();  }	  if(newNode.getType()    ==    Token.VAR    ||    newNode.getType()    ==    Token.CATCH)    {    reportCodeChange();    }    	non-compiled	[CE]  	48	None	replace
117	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this,  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this,  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  this,  INVALID_REGULAR_EXPRESSION_FLAGS);	  NodeTraversal.traverse(compiler,    n,    newNode,    this,    INVALID_REGULAR_EXPRESSION_FLAGS);    	non-compiled	[CE]  	59	None	replace
118	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNode,  this,  INVALID_REGULAR_EXPRESSION_FLAGS,  parent);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNode,  this,  INVALID_REGULAR_EXPRESSION_FLAGS,  parent);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	NodeTraversal.traverse(compiler,  n,  newNode,  this,  INVALID_REGULAR_EXPRESSION_FLAGS,  parent);	  NodeTraversal.traverse(compiler,    n,    newNode,    this,    INVALID_REGULAR_EXPRESSION_FLAGS);    	non-compiled	[CE]  	59	None	replace
119	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNode,  this,  STANDARD_OBJECT_CONSTRUCTORS);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNode,  this,  STANDARD_OBJECT_CONSTRUCTORS);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	NodeTraversal.traverse(compiler,  n,  newNode,  this,  STANDARD_OBJECT_CONSTRUCTORS);	  NodeTraversal.traverse(compiler,    n,    newNode,    this,    INVALID_REGULAR_EXPRESSION_FLAGS);    	non-compiled	[CE]  	59	None	replace
120	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNode,  INVALID_REGULAR_EXPRESSION_FLAGS,  parent);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNode,  INVALID_REGULAR_EXPRESSION_FLAGS,  parent);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	NodeTraversal.traverse(compiler,  n,  newNode,  INVALID_REGULAR_EXPRESSION_FLAGS,  parent);	  NodeTraversal.traverse(compiler,    n,    newNode,    this,    INVALID_REGULAR_EXPRESSION_FLAGS);    	non-compiled	[CE]  	59	None	replace
121	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNode,  parent,  this,  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNode,  parent,  this,  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	NodeTraversal.traverse(compiler,  n,  newNode,  parent,  this,  INVALID_REGULAR_EXPRESSION_FLAGS);	  NodeTraversal.traverse(compiler,    n,    newNode,    this,    INVALID_REGULAR_EXPRESSION_FLAGS);    	non-compiled	[CE]  	59	None	replace
122	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  newNode,  this,  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  newNode,  this,  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	NodeTraversal.traverse(compiler,  parent,  newNode,  this,  INVALID_REGULAR_EXPRESSION_FLAGS);	  NodeTraversal.traverse(compiler,    n,    newNode,    this,    INVALID_REGULAR_EXPRESSION_FLAGS);    	non-compiled	[CE]  	59	None	replace
123	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNode,  this,  INVALID_REGULAR_EXPRESSION_FLAGS,  num);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNode,  this,  INVALID_REGULAR_EXPRESSION_FLAGS,  num);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	NodeTraversal.traverse(compiler,  n,  newNode,  this,  INVALID_REGULAR_EXPRESSION_FLAGS,  num);	  NodeTraversal.traverse(compiler,    n,    newNode,    this,    INVALID_REGULAR_EXPRESSION_FLAGS);    	non-compiled	[CE]  	59	None	replace
124	[BUG]  [BUGGY]  newNode.setType(Token.NAME)  {  reportError();  }  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  newNode.setType(Token.NAME)  {  reportError();  }  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	newNode.setType(Token.NAME)  {  reportError();  }	  newNode.setType(Token.NAME)    {    reportCodeChange();    }    	non-compiled	[CE]  	45	None	replace
125	[BUG]  [BUGGY]  newNode.setType(Token.NAME  -  1)  {  reportCodeChange();  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  newNode.setType(Token.NAME  -  1)  {  reportCodeChange();  }  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	newNode.setType(Token.NAME  -  1)  {  reportCodeChange();  }	  newNode.setType(Token.NAME)    {    reportCodeChange();    }    	non-compiled	[CE]  	45	None	replace
126	[BUG]  [BUGGY]  newNode.setType(Token.NAME,  num)  {  reportCodeChange();  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  newNode.setType(Token.NAME,  num)  {  reportCodeChange();  }  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	newNode.setType(Token.NAME,  num)  {  reportCodeChange();  }	  newNode.setType(Token.NAME)    {    reportCodeChange();    }    	non-compiled	[CE]  	45	None	replace
127	[BUG]  [BUGGY]  node.setType(Token.NAME)  {  reportCodeChange();  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  node.setType(Token.NAME)  {  reportCodeChange();  }  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	node.setType(Token.NAME)  {  reportCodeChange();  }	  newNode.setType(Token.NAME)    {    reportCodeChange();    }    	non-compiled	[CE]  	45	None	replace
128	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  n);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  n);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	NodeTraversal.traverse(compiler,  parent,  n);	  NodeTraversal.traverse(compiler,    newNode,    n);    	non-compiled	[CE]  	37	None	replace
129	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newNode,  n,  parent);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  newNode,  n,  parent);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	NodeTraversal.traverse(compiler,  newNode,  n,  parent);	  NodeTraversal.traverse(compiler,    newNode,    n);    	non-compiled	[CE]  	37	None	replace
130	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this,  parents);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  this,  parents);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  this,  parents);	  NodeTraversal.traverse(compiler,    n,    newNode,    this,    parents);    	non-compiled	[CE]  	61	None	replace
131	[BUG]  [BUGGY]  Node  newNode  =  parent.removeFirstChild();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  Node  newNode  =  parent.removeFirstChild();  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	Node  newNode  =  parent.removeFirstChild();	  Node    newNode    =    parent.getFirstChild();    	non-compiled	[CE]  	23	None	replace
132	[BUG]  [BUGGY]  Node  newNode  =  parent.getNext();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  Node  newNode  =  parent.getNext();  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	Node  newNode  =  parent.getNext();	  Node    newNode    =    parent.getFirstChild();    	non-compiled	[CE]  	23	None	replace
133	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  null);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  null);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	NodeTraversal.traverse(compiler,  n,  this,  null);	  NodeTraversal.traverse(compiler,    newNode,    this,    null);    	non-compiled	[CE]  	58	None	replace
134	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this,  null);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this,  null);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	NodeTraversal.traverse(compiler,  parent,  this,  null);	  NodeTraversal.traverse(compiler,    newNode,    this,    null);    	non-compiled	[CE]  	58	None	replace
135	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newNode,  this,  null,  num);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  newNode,  this,  null,  num);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	NodeTraversal.traverse(compiler,  newNode,  this,  null,  num);	  NodeTraversal.traverse(compiler,    newNode,    this,    null);    	non-compiled	[CE]  	58	None	replace
136	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newNode,  parent,  this,  null);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  newNode,  parent,  this,  null);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	NodeTraversal.traverse(compiler,  newNode,  parent,  this,  null);	  NodeTraversal.traverse(compiler,    newNode,    this,    null);    	non-compiled	[CE]  	58	None	replace
137	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNode,  null,  parent);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNode,  null,  parent);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	NodeTraversal.traverse(compiler,  n,  newNode,  null,  parent);	  NodeTraversal.traverse(compiler,    n,    newNode,    this,    parent);    	non-compiled	[CE]  	32	None	replace
138	[BUG]  [BUGGY]  Node  newNode  =  Node.newString(Token.NAME,  num  +  1);  parent.replaceChild(n,  newNode);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  Node  newNode  =  Node.newString(Token.NAME,  num  +  1);  parent.replaceChild(n,  newNode);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	Node  newNode  =  Node.newString(Token.NAME,  num  +  1);  parent.replaceChild(n,  newNode);	  Node    newNode    =    Node.newString(Token.NAME,    num);    parent.replaceChild(n,    newNode);    	non-compiled	[CE]  	20	None	replace
139	[BUG]  [BUGGY]  Node  newNode  =  Node.newString(Token.NAME,  num  +  2);  parent.replaceChild(n,  newNode);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  Node  newNode  =  Node.newString(Token.NAME,  num  +  2);  parent.replaceChild(n,  newNode);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	Node  newNode  =  Node.newString(Token.NAME,  num  +  2);  parent.replaceChild(n,  newNode);	  Node    newNode    =    Node.newString(Token.NAME,    num);    parent.replaceChild(n,    newNode);    	non-compiled	[CE]  	20	None	replace
140	[BUG]  [BUGGY]  parent.replaceChild(n,  newNode,  num  +  1);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  parent.replaceChild(n,  newNode,  num  +  1);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	parent.replaceChild(n,  newNode,  num  +  1);	  parent.replaceChild(n,    newNode,    num);    	non-compiled	[CE]  	26	None	replace
141	[BUG]  [BUGGY]  parent.replaceChild(n,  newNode,  num,  false);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  parent.replaceChild(n,  newNode,  num,  false);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	parent.replaceChild(n,  newNode,  num,  false);	  parent.replaceChild(n,    newNode,    num);    	non-compiled	[CE]  	26	None	replace
142	[BUG]  [BUGGY]  parent.replaceChild(n,  newNode,  num  *  2);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  parent.replaceChild(n,  newNode,  num  *  2);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	parent.replaceChild(n,  newNode,  num  *  2);	  parent.replaceChild(n,    newNode,    num);    	non-compiled	[CE]  	26	None	replace
143	[BUG]  [BUGGY]  parent.replaceChild(n,  newNode,  0);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  parent.replaceChild(n,  newNode,  0);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	parent.replaceChild(n,  newNode,  0);	  parent.replaceChild(n,    newNode,    num);    	non-compiled	[CE]  	26	None	replace
144	[BUG]  [BUGGY]  newNode.getType()  ==  Token.VAR  &&  newNode.getType()  ==  Token.BLOCK)  {  reportCodeChange();  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  newNode.getType()  ==  Token.VAR  &&  newNode.getType()  ==  Token.BLOCK)  {  reportCodeChange();  }  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	newNode.getType()  ==  Token.VAR  &&  newNode.getType()  ==  Token.BLOCK)  {  reportCodeChange();  }	  if(newNode.getType()    ==    Token.VAR    ||    newNode.getType()    ==    Token.BLOCK)    {    reportCodeChange();    }    	non-compiled	[CE]  	49	None	replace
145	[BUG]  [BUGGY]  ||  newNode.getType()  ==  Token.BLOCK)  {  reportCodeChange();  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  ||  newNode.getType()  ==  Token.BLOCK)  {  reportCodeChange();  }  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	||  newNode.getType()  ==  Token.BLOCK)  {  reportCodeChange();  }	  if(newNode.getType()    ==    Token.VAR    ||    newNode.getType()    ==    Token.BLOCK)    {    reportCodeChange();    }    	non-compiled	[CE]  	49	None	replace
146	[BUG]  [BUGGY]  newNode.getType()  ==  Token.VAR  ||  newNode.getType()  ==  Token.BLOCK)  {  reportCodeChange();  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  newNode.getType()  ==  Token.VAR  ||  newNode.getType()  ==  Token.BLOCK)  {  reportCodeChange();  }  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	newNode.getType()  ==  Token.VAR  ||  newNode.getType()  ==  Token.BLOCK)  {  reportCodeChange();  }	  if(newNode.getType()    ==    Token.VAR    ||    newNode.getType()    ==    Token.BLOCK)    {    reportCodeChange();    }    	non-compiled	[CE]  	49	None	replace
147	[BUG]  [BUGGY]  newNode.setType(Token.VAR,  n)||  newNode.getType()  ==  Token.BLOCK)  {  reportCodeChange();  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  newNode.setType(Token.VAR,  n)||  newNode.getType()  ==  Token.BLOCK)  {  reportCodeChange();  }  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	newNode.setType(Token.VAR,  n)||  newNode.getType()  ==  Token.BLOCK)  {  reportCodeChange();  }	  if(newNode.getType()    ==    Token.VAR    ||    newNode.getType()    ==    Token.BLOCK)    {    reportCodeChange();    }    	non-compiled	[CE]  	49	None	replace
148	[BUG]  [BUGGY]  newNode.putBooleanProp(Node.SOURCENAME_PROP,  false);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  newNode.putBooleanProp(Node.SOURCENAME_PROP,  false);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	newNode.putBooleanProp(Node.SOURCENAME_PROP,  false);	  newNode.putBooleanProp(Node.SOURCENAME_PROP,    true);    	non-compiled	[CE]  	52	None	replace
149	[BUG]  [BUGGY]  Node.putBooleanProp(Node.SOURCENAME_PROP,  false);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  Node.putBooleanProp(Node.SOURCENAME_PROP,  false);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	Node.putBooleanProp(Node.SOURCENAME_PROP,  false);	  newNode.putBooleanProp(Node.SOURCENAME_PROP,    true);    	non-compiled	[CE]  	52	None	replace
150	[BUG]  [BUGGY]  node.putBooleanProp(Node.SOURCENAME_PROP,  false);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  node.putBooleanProp(Node.SOURCENAME_PROP,  false);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	node.putBooleanProp(Node.SOURCENAME_PROP,  false);	  newNode.putBooleanProp(Node.SOURCENAME_PROP,    true);    	non-compiled	[CE]  	52	None	replace
151	[BUG]  [BUGGY]  newNode.putBooleanProp(Node.SOURCEENAME_PROP,  false);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  newNode.putBooleanProp(Node.SOURCEENAME_PROP,  false);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	newNode.putBooleanProp(Node.SOURCEENAME_PROP,  false);	  newNode.putBooleanProp(Node.SOURCENAME_PROP,    true);    	non-compiled	[CE]  	52	None	replace
152	[BUG]  [BUGGY]  n.putBooleanProp(Node.SOURCENAME_PROP,  false);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  n.putBooleanProp(Node.SOURCENAME_PROP,  false);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	n.putBooleanProp(Node.SOURCENAME_PROP,  false);	  newNode.putBooleanProp(Node.SOURCENAME_PROP,    true);    	non-compiled	[CE]  	52	None	replace
153	[BUG]  [BUGGY]  n.removeChild(parent,  newNode);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  n.removeChild(parent,  newNode);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	n.removeChild(parent,  newNode);	  n.replaceChild(newNode,    newNode);    	non-compiled	[CE]  	42	None	replace
154	[BUG]  [BUGGY]  n.replaceChild(newNode,  parent);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  n.replaceChild(newNode,  parent);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	n.replaceChild(newNode,  parent);	  n.replaceChild(newNode,    newNode);    	non-compiled	[CE]  	42	None	replace
155	[BUG]  [BUGGY]  newNode.putProp(Node.SOURCENAME_PROP,  n.getType());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  newNode.putProp(Node.SOURCENAME_PROP,  n.getType());  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	newNode.putProp(Node.SOURCENAME_PROP,  n.getType());	  newNode.putProp(Node.SOURCENAME_PROP,    parent.getType());    	non-compiled	[CE]  	53	None	replace
156	[BUG]  [BUGGY]  newNode.putProp(Node.SOURCENAME_PROP,  parent.getType()  -  1);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  newNode.putProp(Node.SOURCENAME_PROP,  parent.getType()  -  1);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	newNode.putProp(Node.SOURCENAME_PROP,  parent.getType()  -  1);	  newNode.putProp(Node.SOURCENAME_PROP,    parent.getType());    	non-compiled	[CE]  	53	None	replace
157	[BUG]  [BUGGY]  newNode.putProp(Node.SOURCENAME_PROP,  num);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  newNode.putProp(Node.SOURCENAME_PROP,  num);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	newNode.putProp(Node.SOURCENAME_PROP,  num);	  newNode.putProp(Node.SOURCENAME_PROP,    parent.getType());    	non-compiled	[CE]  	53	None	replace
158	[BUG]  [BUGGY]  newNode.putProp(Node.SOURCENAME_PROP,  parent.getString());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  newNode.putProp(Node.SOURCENAME_PROP,  parent.getString());  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	newNode.putProp(Node.SOURCENAME_PROP,  parent.getString());	  newNode.putProp(Node.SOURCENAME_PROP,    parent.getType());    	non-compiled	[CE]  	53	None	replace
159	[BUG]  [BUGGY]  newNode.putProp(Node.SOURCENAME_PROP,  parent.getLastChild());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  newNode.putProp(Node.SOURCENAME_PROP,  parent.getLastChild());  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	newNode.putProp(Node.SOURCENAME_PROP,  parent.getLastChild());	  newNode.putProp(Node.SOURCENAME_PROP,    parent.getType());    	non-compiled	[CE]  	53	None	replace
160	[BUG]  [BUGGY]  newNode.putProp(Node.SOURCENAME_PROP,  parent.getFirstChild());  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  newNode.putProp(Node.SOURCENAME_PROP,  parent.getFirstChild());  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	newNode.putProp(Node.SOURCENAME_PROP,  parent.getFirstChild());	  newNode.putProp(Node.SOURCENAME_PROP,    parent.getType());    	non-compiled	[CE]  	53	None	replace
161	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  num);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  num);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	NodeTraversal.traverse(compiler,  n,  num);	  NodeTraversal.traverse(compiler,    newNode,    num);    	non-compiled	[CE]  	17	None	replace
162	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newNode,  num,  parent);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  newNode,  num,  parent);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	NodeTraversal.traverse(compiler,  newNode,  num,  parent);	  NodeTraversal.traverse(compiler,    newNode,    num);    	non-compiled	[CE]  	17	None	replace
163	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newNode,  parent,  num);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  newNode,  parent,  num);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	NodeTraversal.traverse(compiler,  newNode,  parent,  num);	  NodeTraversal.traverse(compiler,    newNode,    num);    	non-compiled	[CE]  	17	None	replace
164	[BUG]  [BUGGY]  newNode.setType(Token.NAME,  num);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  newNode.setType(Token.NAME,  num);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	newNode.setType(Token.NAME,  num);	  newNode.setType(Token.NAME);    	non-compiled	[CE]  	18	None	replace
165	[BUG]  [BUGGY]  newNode.setType(Token.NAME  -  1);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  newNode.setType(Token.NAME  -  1);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	newNode.setType(Token.NAME  -  1);	  newNode.setType(Token.NAME);    	non-compiled	[CE]  	18	None	replace
166	[BUG]  [BUGGY]  newNode.setType(Token.NAME  +  num);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  newNode.setType(Token.NAME  +  num);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	newNode.setType(Token.NAME  +  num);	  newNode.setType(Token.NAME);    	non-compiled	[CE]  	18	None	replace
167	[BUG]  [BUGGY]  newNode.setType(Token.NAME  |  Token.VAR);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  newNode.setType(Token.NAME  |  Token.VAR);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	newNode.setType(Token.NAME  |  Token.VAR);	  newNode.setType(Token.NAME);    	non-compiled	[CE]  	18	None	replace
168	[BUG]  [BUGGY]  newNode.setType(Token.NAME  +  1);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  newNode.setType(Token.NAME  +  1);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	newNode.setType(Token.NAME  +  1);	  newNode.setType(Token.NAME);    	non-compiled	[CE]  	18	None	replace
169	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  newNode,  compiler);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  newNode,  compiler);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	NodeTraversal.traverse(compiler,  parent,  newNode,  compiler);	  NodeTraversal.traverse(compiler,    n,    newNode,    compiler);    	non-compiled	[CE]  	55	None	replace
170	[BUG]  [BUGGY]  newNode.removeChild(n);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  newNode.removeChild(n);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	newNode.removeChild(n);	  newNode.removeChild(parent);    	non-compiled	[CE]  	1	None	replace
171	[BUG]  [BUGGY]  newNode.removeChild(newNode);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  newNode.removeChild(newNode);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	newNode.removeChild(newNode);	  newNode.removeChild(parent);    	non-compiled	[CE]  	1	None	replace
172	[BUG]  [BUGGY]  newNode.addChildToBack(newNode);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  newNode.addChildToBack(newNode);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	newNode.addChildToBack(newNode);	  newNode.removeChild(parent);    	non-compiled	[CE]  	1	None	replace
173	[BUG]  [BUGGY]  newNode.addChildToFront(newNode);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  newNode.addChildToFront(newNode);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	newNode.addChildToFront(newNode);	  newNode.removeChild(parent);    	non-compiled	[CE]  	1	None	replace
174	[BUG]  [BUGGY]  NodeUtil.removeChild(parent);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  NodeUtil.removeChild(parent);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	NodeUtil.removeChild(parent);	  newNode.removeChild(parent);    	non-compiled	[CE]  	1	None	replace
175	[BUG]  [BUGGY]  Node.removeChild(newNode);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  Node.removeChild(newNode);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	Node.removeChild(newNode);	  newNode.removeChild(parent);    	non-compiled	[CE]  	1	None	replace
176	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNode,  true,  num);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNode,  true,  num);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	NodeTraversal.traverse(compiler,  n,  newNode,  true,  num);	  NodeTraversal.traverse(compiler,    n,    newNode,    false,    num);    	non-compiled	[CE]  	44	None	replace
177	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  newNode,  false,  num);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  newNode,  false,  num);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	NodeTraversal.traverse(compiler,  parent,  newNode,  false,  num);	  NodeTraversal.traverse(compiler,    n,    newNode,    false,    num);    	non-compiled	[CE]  	44	None	replace
178	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNode,  false,  num,  parent);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNode,  false,  num,  parent);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	NodeTraversal.traverse(compiler,  n,  newNode,  false,  num,  parent);	  NodeTraversal.traverse(compiler,    n,    newNode,    false,    num);    	non-compiled	[CE]  	44	None	replace
179	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNode,  false,  num  +  1);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNode,  false,  num  +  1);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	NodeTraversal.traverse(compiler,  n,  newNode,  false,  num  +  1);	  NodeTraversal.traverse(compiler,    n,    newNode,    false,    num);    	non-compiled	[CE]  	44	None	replace
180	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this,  newNode);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  this,  newNode);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	NodeTraversal.traverse(compiler,  parent,  this,  newNode);	  NodeTraversal.traverse(compiler,    newNode,    this,    parent);    	non-compiled	[CE]  	13	None	replace
181	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newNode,  this,  parent,  n);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  newNode,  this,  parent,  n);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	NodeTraversal.traverse(compiler,  newNode,  this,  parent,  n);	  NodeTraversal.traverse(compiler,    newNode,    this,    parent);    	non-compiled	[CE]  	13	None	replace
182	[BUG]  [BUGGY]  n.removeChild(parent,  num);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  n.removeChild(parent,  num);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	n.removeChild(parent,  num);	  n.replaceChild(parent,    newNode);    	non-compiled	[CE]  	39	None	replace
183	[BUG]  [BUGGY]  n.replaceChild(n,  newNode);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  n.replaceChild(n,  newNode);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	n.replaceChild(n,  newNode);	  n.replaceChild(parent,    newNode);    	non-compiled	[CE]  	39	None	replace
184	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newNode,  num,  true);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  newNode,  num,  true);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	NodeTraversal.traverse(compiler,  newNode,  num,  true);	  NodeTraversal.traverse(compiler,    newNode,    num,    false);    	non-compiled	[CE]  	10	None	replace
185	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  num,  false);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  num,  false);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	NodeTraversal.traverse(compiler,  parent,  num,  false);	  NodeTraversal.traverse(compiler,    newNode,    num,    false);    	non-compiled	[CE]  	10	None	replace
186	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newNode,  parent,  num,  false);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  newNode,  parent,  num,  false);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	NodeTraversal.traverse(compiler,  newNode,  parent,  num,  false);	  NodeTraversal.traverse(compiler,    newNode,    num,    false);    	non-compiled	[CE]  	10	None	replace
187	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newNode,  n,  false);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  newNode,  n,  false);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	NodeTraversal.traverse(compiler,  newNode,  n,  false);	  NodeTraversal.traverse(compiler,    newNode,    num,    false);    	non-compiled	[CE]  	10	None	replace
188	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  newNode);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  node,  newNode);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	NodeTraversal.traverse(compiler,  node,  newNode);	  NodeTraversal.traverse(compiler,    parent,    newNode);    	non-compiled	[CE]  	30	None	replace
189	[BUG]  [BUGGY]  n.addChildToFront(parent);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  n.addChildToFront(parent);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	n.addChildToFront(parent);	  n.addChildToFront(newNode);    	non-compiled	[CE]  	40	None	replace
190	[BUG]  [BUGGY]  n.addChildToFront(newNode,  parent);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  n.addChildToFront(newNode,  parent);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	n.addChildToFront(newNode,  parent);	  n.addChildToFront(newNode);    	non-compiled	[CE]  	40	None	replace
191	[BUG]  [BUGGY]  n.addChildToBack(newNode);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  n.addChildToBack(newNode);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	n.addChildToBack(newNode);	  n.addChildToFront(newNode);    	non-compiled	[CE]  	40	None	replace
192	[BUG]  [BUGGY]  n.addChildToFront(newNode,  num);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  n.addChildToFront(newNode,  num);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	n.addChildToFront(newNode,  num);	  n.addChildToFront(newNode);    	non-compiled	[CE]  	40	None	replace
193	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  true);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  true);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  true);	  NodeTraversal.traverse(compiler,    n,    parent,    false);    	non-compiled	[CE]  	6	None	replace
194	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNode,  parent.num);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNode,  parent.num);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	NodeTraversal.traverse(compiler,  n,  newNode,  parent.num);	  NodeTraversal.traverse(compiler,    n,    newNode,    num);    	non-compiled	[CE]  	29	None	replace
195	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNode,  num,  parent);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNode,  num,  parent);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	NodeTraversal.traverse(compiler,  n,  newNode,  num,  parent);	  NodeTraversal.traverse(compiler,    n,    newNode,    num);    	non-compiled	[CE]  	29	None	replace
196	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNode,  parent.getType());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNode,  parent.getType());  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	NodeTraversal.traverse(compiler,  n,  newNode,  parent.getType());	  NodeTraversal.traverse(compiler,    n,    newNode,    num);    	non-compiled	[CE]  	29	None	replace
197	[BUG]  [BUGGY]  newNode.putBooleanProp(Node.SYNTHETIC_PROP,  false);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  newNode.putBooleanProp(Node.SYNTHETIC_PROP,  false);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	newNode.putBooleanProp(Node.SYNTHETIC_PROP,  false);	  newNode.putBooleanProp(Node.SYNTHETIC_PROP,    true);    	non-compiled	[CE]  	54	None	replace
198	[BUG]  [BUGGY]  Node.putBooleanProp(Node.SYNTHETIC_PROP,  false);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  Node.putBooleanProp(Node.SYNTHETIC_PROP,  false);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	Node.putBooleanProp(Node.SYNTHETIC_PROP,  false);	  newNode.putBooleanProp(Node.SYNTHETIC_PROP,    true);    	non-compiled	[CE]  	54	None	replace
199	[BUG]  [BUGGY]  node.putBooleanProp(Node.SYNTHETIC_PROP,  false);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  node.putBooleanProp(Node.SYNTHETIC_PROP,  false);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	node.putBooleanProp(Node.SYNTHETIC_PROP,  false);	  newNode.putBooleanProp(Node.SYNTHETIC_PROP,    true);    	non-compiled	[CE]  	54	None	replace
200	[BUG]  [BUGGY]  n.putBooleanProp(Node.SYNTHETIC_PROP,  false);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  n.putBooleanProp(Node.SYNTHETIC_PROP,  false);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	n.putBooleanProp(Node.SYNTHETIC_PROP,  false);	  newNode.putBooleanProp(Node.SYNTHETIC_PROP,    true);    	non-compiled	[CE]  	54	None	replace
201	[BUG]  [BUGGY]  newNode.setType(Token.VAR  ||  newNode.getType()  ==  Token.CATCH)  {  reportCodeChange();  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  newNode.setType(Token.VAR  ||  newNode.getType()  ==  Token.CATCH)  {  reportCodeChange();  }  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	newNode.setType(Token.VAR  ||  newNode.getType()  ==  Token.CATCH)  {  reportCodeChange();  }	  if(newNode.getType()    ==    Token.VAR    ||    newNode.getType()    ==    Token.CATCH)    {    reportCodeChange();    }    	non-compiled	[CE]  	48	None	replace
202	[BUG]  [BUGGY]  newNode.setType(Token.VAR  &&  newNode.getType()  ==  Token.CATCH)  {  reportCodeChange();  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  newNode.setType(Token.VAR  &&  newNode.getType()  ==  Token.CATCH)  {  reportCodeChange();  }  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	newNode.setType(Token.VAR  &&  newNode.getType()  ==  Token.CATCH)  {  reportCodeChange();  }	  if(newNode.getType()    ==    Token.VAR    ||    newNode.getType()    ==    Token.CATCH)    {    reportCodeChange();    }    	non-compiled	[CE]  	48	None	replace
203	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  oldNode);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  oldNode);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  oldNode);	  NodeTraversal.traverse(compiler,    n,    parent);    	non-compiled	[CE]  	27	None	replace
204	[BUG]  [BUGGY]  newNode.setType(Token.VAR  &&  newNode.getType()  ==  Token.FUNCTION)  {  reportCodeChange();  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  newNode.setType(Token.VAR  &&  newNode.getType()  ==  Token.FUNCTION)  {  reportCodeChange();  }  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	newNode.setType(Token.VAR  &&  newNode.getType()  ==  Token.FUNCTION)  {  reportCodeChange();  }	  if(newNode.getType()    ==    Token.VAR    ||    newNode.getType()    ==    Token.FUNCTION)    {    reportCodeChange();    }    	non-compiled	[CE]  	47	None	replace
205	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  num,  false);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  num,  false);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	NodeTraversal.traverse(compiler,  n,  num,  false);	  NodeTraversal.traverse(compiler,    newNode,    num,    false);    	non-compiled	[CE]  	10	None	replace
206	[BUG]  [BUGGY]  newNode.setBooleanProp(Node.SOURCENAME_PROP,  false);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  newNode.setBooleanProp(Node.SOURCENAME_PROP,  false);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	newNode.setBooleanProp(Node.SOURCENAME_PROP,  false);	  newNode.putBooleanProp(Node.SOURCENAME_PROP,    true);    	non-compiled	[CE]  	52	None	replace
207	[BUG]  [BUGGY]  newNode.removeBooleanProp(Node.SOURCENAME_PROP,  false);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  newNode.removeBooleanProp(Node.SOURCENAME_PROP,  false);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	newNode.removeBooleanProp(Node.SOURCENAME_PROP,  false);	  newNode.putBooleanProp(Node.SOURCENAME_PROP,    true);    	non-compiled	[CE]  	52	None	replace
208	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  oldNode,  false);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  oldNode,  false);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	NodeTraversal.traverse(compiler,  n,  oldNode,  false);	  NodeTraversal.traverse(compiler,    n,    parent,    false);    	non-compiled	[CE]  	6	None	replace
209	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNode,  this.parents);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNode,  this.parents);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	NodeTraversal.traverse(compiler,  n,  newNode,  this.parents);	  NodeTraversal.traverse(compiler,    n,    newNode,    parents);    	non-compiled	[CE]  	56	None	replace
210	[BUG]  [BUGGY]  parent.replaceChild(newNode,  num  +  1);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  parent.replaceChild(newNode,  num  +  1);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	parent.replaceChild(newNode,  num  +  1);	  parent.replaceChild(newNode,    num);    	non-compiled	[CE]  	36	None	replace
211	[BUG]  [BUGGY]  Node  newNode  =  Node.newNumber(parent);  parent.replaceChild(n,  newNode);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  Node  newNode  =  Node.newNumber(parent);  parent.replaceChild(n,  newNode);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	Node  newNode  =  Node.newNumber(parent);  parent.replaceChild(n,  newNode);	  Node    newNode    =    Node.newNumber(num);    parent.replaceChild(n,    newNode);    	non-compiled	[CE]  	22	None	replace
212	[BUG]  [BUGGY]  Node  newNode  =  Node.newNumber(parent,  num);  parent.replaceChild(n,  newNode);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  Node  newNode  =  Node.newNumber(parent,  num);  parent.replaceChild(n,  newNode);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	Node  newNode  =  Node.newNumber(parent,  num);  parent.replaceChild(n,  newNode);	  Node    newNode    =    Node.newNumber(num);    parent.replaceChild(n,    newNode);    	non-compiled	[CE]  	22	None	replace
213	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newNode,  this,  num  +  1);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  newNode,  this,  num  +  1);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	NodeTraversal.traverse(compiler,  newNode,  this,  num  +  1);	  NodeTraversal.traverse(compiler,    newNode,    this,    num);    	non-compiled	[CE]  	12	None	replace
214	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  oldNode,  this);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  oldNode,  this);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	NodeTraversal.traverse(compiler,  oldNode,  this);	  NodeTraversal.traverse(compiler,    parent,    this);    	non-compiled	[CE]  	14	None	replace
215	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  newNode,  this);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  node,  newNode,  this);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	NodeTraversal.traverse(compiler,  node,  newNode,  this);	  NodeTraversal.traverse(compiler,    parent,    newNode,    this);    	non-compiled	[CE]  	34	None	replace
216	[BUG]  [BUGGY]  newNode.setBooleanProp(Node.SYNTHETIC_PROP,  false);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  newNode.setBooleanProp(Node.SYNTHETIC_PROP,  false);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	newNode.setBooleanProp(Node.SYNTHETIC_PROP,  false);	  newNode.putBooleanProp(Node.SYNTHETIC_PROP,    true);    	non-compiled	[CE]  	54	None	replace
217	[BUG]  [BUGGY]  newNode.removeBooleanProp(Node.SYNTHETIC_PROP,  false);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  newNode.removeBooleanProp(Node.SYNTHETIC_PROP,  false);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	newNode.removeBooleanProp(Node.SYNTHETIC_PROP,  false);	  newNode.putBooleanProp(Node.SYNTHETIC_PROP,    true);    	non-compiled	[CE]  	54	None	replace
218	[BUG]  [BUGGY]  newNode.putIntProp(Node.SYNTHETIC_PROP,  num);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  newNode.putIntProp(Node.SYNTHETIC_PROP,  num);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	newNode.putIntProp(Node.SYNTHETIC_PROP,  num);	  newNode.putBooleanProp(Node.SYNTHETIC_PROP,    true);    	non-compiled	[CE]  	54	None	replace
219	[BUG]  [BUGGY]  Node  newNode  =  Node.newString(Token.NAME,  n,  num);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  Node  newNode  =  Node.newString(Token.NAME,  n,  num);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	Node  newNode  =  Node.newString(Token.NAME,  n,  num);	  Node    newNode    =    Node.newString(Token.NAME,    num);    	non-compiled	[CE]  	21	None	replace
220	[BUG]  [BUGGY]  Node  newNode  =  Node.newString(Token.NAME,  parent,  num);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  Node  newNode  =  Node.newString(Token.NAME,  parent,  num);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	Node  newNode  =  Node.newString(Token.NAME,  parent,  num);	  Node    newNode    =    Node.newString(Token.NAME,    num);    	non-compiled	[CE]  	21	None	replace
221	[BUG]  [BUGGY]  Node  newNode  =  Node.newString(Token.NAME,  name);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  Node  newNode  =  Node.newString(Token.NAME,  name);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	Node  newNode  =  Node.newString(Token.NAME,  name);	  Node    newNode    =    Node.newString(Token.NAME,    num);    	non-compiled	[CE]  	21	None	replace
222	[BUG]  [BUGGY]  newNode.setType(Token.VAR  ||  newNode.getType()  ==  Token.NAME)  {  reportCodeChange();  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  newNode.setType(Token.VAR  ||  newNode.getType()  ==  Token.NAME)  {  reportCodeChange();  }  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	newNode.setType(Token.VAR  ||  newNode.getType()  ==  Token.NAME)  {  reportCodeChange();  }	  if(newNode.getType()    ==    Token.VAR    ||    newNode.getType()    ==    Token.NAME)    {    reportCodeChange();    }    	non-compiled	[CE]  	50	None	replace
223	[BUG]  [BUGGY]  Node  newNode  =  node.replaceChild(parent,  newNode);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  Node  newNode  =  node.replaceChild(parent,  newNode);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	Node  newNode  =  node.replaceChild(parent,  newNode);	  Node    newNode    =    parent.replaceChild(n,    newNode);    	non-compiled	[CE]  	46	None	replace
224	[BUG]  [BUGGY]  Node  newNode  =  parent.replaceChild(n,  newNode  -  1);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  Node  newNode  =  parent.replaceChild(n,  newNode  -  1);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	Node  newNode  =  parent.replaceChild(n,  newNode  -  1);	  Node    newNode    =    parent.replaceChild(n,    newNode);    	non-compiled	[CE]  	46	None	replace
225	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newNode,  null,  num);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  newNode,  null,  num);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	NodeTraversal.traverse(compiler,  newNode,  null,  num);	  NodeTraversal.traverse(compiler,    newNode,    null);    	non-compiled	[CE]  	16	None	replace
226	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newNode,  num  +  1);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  newNode,  num  +  1);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	NodeTraversal.traverse(compiler,  newNode,  num  +  1);	  NodeTraversal.traverse(compiler,    newNode,    num);    	non-compiled	[CE]  	17	None	replace
227	[BUG]  [BUGGY]  newNode.setType(Token.NUMBER)  {  reportCodeChange();  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  newNode.setType(Token.NUMBER)  {  reportCodeChange();  }  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	newNode.setType(Token.NUMBER)  {  reportCodeChange();  }	  newNode.setType(Token.FUNCTION)    {    reportCodeChange();    }    	non-compiled	[CE]  	38	None	replace
228	[BUG]  [BUGGY]  newNode.setType(Token.OBJECTLIT)  {  reportCodeChange();  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  newNode.setType(Token.OBJECTLIT)  {  reportCodeChange();  }  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	newNode.setType(Token.OBJECTLIT)  {  reportCodeChange();  }	  newNode.setType(Token.FUNCTION)    {    reportCodeChange();    }    	non-compiled	[CE]  	38	None	replace
229	[BUG]  [BUGGY]  newNode.setType(Token.OBJECTLIT);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  newNode.setType(Token.OBJECTLIT);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	newNode.setType(Token.OBJECTLIT);	  newNode.setType(Token.FUNCTION);    	non-compiled	[CE]  	4	None	replace
230	[BUG]  [BUGGY]  newNode.setType(Token.NUMBER);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  newNode.setType(Token.NUMBER);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	newNode.setType(Token.NUMBER);	  newNode.setType(Token.FUNCTION);    	non-compiled	[CE]  	4	None	replace
231	[BUG]  [BUGGY]  newNode.setType(Token.GETPROP);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  newNode.setType(Token.GETPROP);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	newNode.setType(Token.GETPROP);	  newNode.setType(Token.FUNCTION);    	non-compiled	[CE]  	4	None	replace
232	[BUG]  [BUGGY]  newNode.addChildToFront(parent);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  newNode.addChildToFront(parent);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	newNode.addChildToFront(parent);	  newNode.removeChild(parent);    	non-compiled	[CE]  	1	None	replace
233	[BUG]  [BUGGY]  newNode.removeChild(parent,  num);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  newNode.removeChild(parent,  num);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	newNode.removeChild(parent,  num);	  newNode.removeChild(parent);    	non-compiled	[CE]  	1	None	replace
234	[BUG]  [BUGGY]  newNode.addChildToBack(parent);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  newNode.addChildToBack(parent);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	newNode.addChildToBack(parent);	  newNode.removeChild(parent);    	non-compiled	[CE]  	1	None	replace
235	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNode,  this,  num  +  1);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNode,  this,  num  +  1);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	NodeTraversal.traverse(compiler,  n,  newNode,  this,  num  +  1);	  NodeTraversal.traverse(compiler,    n,    newNode,    this,    num);    	non-compiled	[CE]  	33	None	replace
236	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  newNode,  this,  num);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  newNode,  this,  num);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  newNode,  this,  num);	  NodeTraversal.traverse(compiler,    n,    newNode,    this,    num);    	non-compiled	[CE]  	33	None	replace
237	[BUG]  [BUGGY]  Node  newNode  =  Node.newString(Token.NAME,  name);  parent.replaceChild(n,  newNode);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  Node  newNode  =  Node.newString(Token.NAME,  name);  parent.replaceChild(n,  newNode);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	Node  newNode  =  Node.newString(Token.NAME,  name);  parent.replaceChild(n,  newNode);	  Node    newNode    =    Node.newString(Token.NAME,    num);    parent.replaceChild(n,    newNode);    	non-compiled	[CE]  	20	None	replace
238	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNode,  this,  parents,  num);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNode,  this,  parents,  num);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	NodeTraversal.traverse(compiler,  n,  newNode,  this,  parents,  num);	  NodeTraversal.traverse(compiler,    n,    newNode,    this,    parents);    	non-compiled	[CE]  	61	None	replace
239	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNode,  parent,  this);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNode,  parent,  this);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	NodeTraversal.traverse(compiler,  n,  newNode,  parent,  this);	  NodeTraversal.traverse(compiler,    n,    newNode,    this,    parents);    	non-compiled	[CE]  	61	None	replace
240	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNode,  num  +  1);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNode,  num  +  1);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	NodeTraversal.traverse(compiler,  n,  newNode,  num  +  1);	  NodeTraversal.traverse(compiler,    n,    newNode,    num);    	non-compiled	[CE]  	29	None	replace
241	[BUG]  [BUGGY]  Node  n  =  newNode.removeFirstChild();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  Node  n  =  newNode.removeFirstChild();  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	Node  n  =  newNode.removeFirstChild();	  Node    n    =    newNode.getFirstChild();    	non-compiled	[CE]  	41	None	replace
242	[BUG]  [BUGGY]  NodeUtil.replaceChild(parent,  newNode);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  NodeUtil.replaceChild(parent,  newNode);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	NodeUtil.replaceChild(parent,  newNode);	  NodeUtil.removeChild(parent,    newNode);    	non-compiled	[CE]  	43	None	replace
243	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  newNode  -  1);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  NodeUtil.removeChild(parent,  newNode  -  1);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	NodeUtil.removeChild(parent,  newNode  -  1);	  NodeUtil.removeChild(parent,    newNode);    	non-compiled	[CE]  	43	None	replace
244	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  newNode,  this,  null);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  newNode,  this,  null);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  newNode,  this,  null);	  NodeTraversal.traverse(compiler,    n,    newNode,    this,    null);    	non-compiled	[CE]  	60	None	replace
245	[BUG]  [BUGGY]  newNode.setType(Token.VAR  ||  newNode.getType()  ==  Token.BLOCK)  {  reportCodeChange();  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  newNode.setType(Token.VAR  ||  newNode.getType()  ==  Token.BLOCK)  {  reportCodeChange();  }  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	newNode.setType(Token.VAR  ||  newNode.getType()  ==  Token.BLOCK)  {  reportCodeChange();  }	  if(newNode.getType()    ==    Token.VAR    ||    newNode.getType()    ==    Token.BLOCK)    {    reportCodeChange();    }    	non-compiled	[CE]  	49	None	replace
246	[BUG]  [BUGGY]  newNode.setType(Token.VAR  &&  newNode.getType()  ==  Token.BLOCK)  {  reportCodeChange();  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  newNode.setType(Token.VAR  &&  newNode.getType()  ==  Token.BLOCK)  {  reportCodeChange();  }  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	newNode.setType(Token.VAR  &&  newNode.getType()  ==  Token.BLOCK)  {  reportCodeChange();  }	  if(newNode.getType()    ==    Token.VAR    ||    newNode.getType()    ==    Token.BLOCK)    {    reportCodeChange();    }    	non-compiled	[CE]  	49	None	replace
247	[BUG]  [BUGGY]  newNode.setType(Token.VAR);  newNode.setType(Token.BLOCK)  {  reportCodeChange();  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  newNode.setType(Token.VAR);  newNode.setType(Token.BLOCK)  {  reportCodeChange();  }  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	newNode.setType(Token.VAR);  newNode.setType(Token.BLOCK)  {  reportCodeChange();  }	  if(newNode.getType()    ==    Token.VAR    ||    newNode.getType()    ==    Token.BLOCK)    {    reportCodeChange();    }    	non-compiled	[CE]  	49	None	replace
248	[BUG]  [BUGGY]  newNode.setType(Token.VAR  ||  newNode.getType()!=  Token.BLOCK)  {  reportCodeChange();  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  newNode.setType(Token.VAR  ||  newNode.getType()!=  Token.BLOCK)  {  reportCodeChange();  }  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	newNode.setType(Token.VAR  ||  newNode.getType()!=  Token.BLOCK)  {  reportCodeChange();  }	  if(newNode.getType()    ==    Token.VAR    ||    newNode.getType()    ==    Token.BLOCK)    {    reportCodeChange();    }    	non-compiled	[CE]  	49	None	replace
249	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  oldNode,  newNode,  false);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  oldNode,  newNode,  false);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	NodeTraversal.traverse(compiler,  oldNode,  newNode,  false);	  NodeTraversal.traverse(compiler,    parent,    newNode,    false);    	non-compiled	[CE]  	7	None	replace
250	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNode,  STANDARD_OBJECT_CONSTRUCTORS,  this,  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNode,  STANDARD_OBJECT_CONSTRUCTORS,  this,  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	NodeTraversal.traverse(compiler,  n,  newNode,  STANDARD_OBJECT_CONSTRUCTORS,  this,  INVALID_REGULAR_EXPRESSION_FLAGS);	  NodeTraversal.traverse(compiler,    n,    newNode,    this,    INVALID_REGULAR_EXPRESSION_FLAGS);    	non-compiled	[CE]  	59	None	replace
251	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNode,  this,  INVALID_REGULAR_EXPRESSION_FLAGS,  STANDARD_OBJECT_CONSTRUCTORS);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNode,  this,  INVALID_REGULAR_EXPRESSION_FLAGS,  STANDARD_OBJECT_CONSTRUCTORS);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	NodeTraversal.traverse(compiler,  n,  newNode,  this,  INVALID_REGULAR_EXPRESSION_FLAGS,  STANDARD_OBJECT_CONSTRUCTORS);	  NodeTraversal.traverse(compiler,    n,    newNode,    this,    INVALID_REGULAR_EXPRESSION_FLAGS);    	non-compiled	[CE]  	59	None	replace
252	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  n  +  1);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  NodeUtil.removeChild(parent,  n  +  1);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	NodeUtil.removeChild(parent,  n  +  1);	  NodeUtil.removeChild(parent,    n);    	non-compiled	[CE]  	51	None	replace
253	[BUG]  [BUGGY]  parent.replaceChild(n,  newNode,  num  -  1);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  parent.replaceChild(n,  newNode,  num  -  1);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	parent.replaceChild(n,  newNode,  num  -  1);	  parent.replaceChild(n,    newNode,    num);    	non-compiled	[CE]  	26	None	replace
254	[BUG]  [BUGGY]  newNode.setType(Token.VAR  |  Token.FUNCTION);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  newNode.setType(Token.VAR  |  Token.FUNCTION);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	newNode.setType(Token.VAR  |  Token.FUNCTION);	  newNode.setType(Token.VAR);    	non-compiled	[CE]  	25	None	replace
255	[BUG]  [BUGGY]  newNode.setType(Token.NAME).reportCodeChange();  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  newNode.setType(Token.NAME).reportCodeChange();  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	newNode.setType(Token.NAME).reportCodeChange();	  newNode.setType(Token.NAME)    {    reportCodeChange();    }    	non-compiled	[CE]  	45	None	replace
256	[BUG]  [BUGGY]  newNode.setType(Token.NAME)  {  reportReplaceChange();  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  newNode.setType(Token.NAME)  {  reportReplaceChange();  }  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	newNode.setType(Token.NAME)  {  reportReplaceChange();  }	  newNode.setType(Token.NAME)    {    reportCodeChange();    }    	non-compiled	[CE]  	45	None	replace
257	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  null,  newNode);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  null,  newNode);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	NodeTraversal.traverse(compiler,  n,  null,  newNode);	  NodeTraversal.traverse(compiler,    newNode,    this,    n);    	non-compiled	[CE]  	15	None	replace
258	[BUG]  [BUGGY]  newNode.setType(Token.VAR,  num  +  1);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  newNode.setType(Token.VAR,  num  +  1);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	newNode.setType(Token.VAR,  num  +  1);	  newNode.setType(Token.VAR);    	non-compiled	[CE]  	25	None	replace
259	[BUG]  [BUGGY]  newNode.setType(Token.VAR,  0);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  newNode.setType(Token.VAR,  0);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	newNode.setType(Token.VAR,  0);	  newNode.setType(Token.VAR);    	non-compiled	[CE]  	25	None	replace
260	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNode,  this,  null,  parent);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNode,  this,  null,  parent);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	NodeTraversal.traverse(compiler,  n,  newNode,  this,  null,  parent);	  NodeTraversal.traverse(compiler,    n,    newNode,    this,    null);    	non-compiled	[CE]  	60	None	replace
261	[BUG]  [BUGGY]  Node  newNode  =  maybeReplaceChildWithNumber(n,  parent);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  Node  newNode  =  maybeReplaceChildWithNumber(n,  parent);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	Node  newNode  =  maybeReplaceChildWithNumber(n,  parent);	  Node    newNode    =    parent.replaceChild(n,    newNode);    	non-compiled	[CE]  	46	None	replace
262	[BUG]  [BUGGY]  newNode.setType(Token.NAME  /  2);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  newNode.setType(Token.NAME  /  2);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	newNode.setType(Token.NAME  /  2);	  newNode.setType(Token.NAME);    	non-compiled	[CE]  	18	None	replace
263	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  newNode,  num);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  newNode,  num);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  newNode,  num);	  NodeTraversal.traverse(compiler,    n,    newNode,    this,    num);    	non-compiled	[CE]  	33	None	replace
264	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  newNode,  false,  null);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  newNode,  false,  null);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  newNode,  false,  null);	  NodeTraversal.traverse(compiler,    n,    parent,    newNode,    false);    	non-compiled	[CE]  	57	None	replace
265	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  newNode,  false,  this);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  newNode,  false,  this);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  newNode,  false,  this);	  NodeTraversal.traverse(compiler,    n,    parent,    newNode,    false);    	non-compiled	[CE]  	57	None	replace
266	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  newNode,  false,  true);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  newNode,  false,  true);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  newNode,  false,  true);	  NodeTraversal.traverse(compiler,    n,    parent,    newNode,    false);    	non-compiled	[CE]  	57	None	replace
267	[BUG]  [BUGGY]  Node  n  =  parent.removeFirstChild();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  Node  n  =  parent.removeFirstChild();  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	Node  n  =  parent.removeFirstChild();	  Node    n    =    newNode.getFirstChild();    	non-compiled	[CE]  	41	None	replace
268	[BUG]  [BUGGY]  Node  n  =  parent.replaceChild(n,  newNode);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  Node  n  =  parent.replaceChild(n,  newNode);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	Node  n  =  parent.replaceChild(n,  newNode);	  Node    n    =    newNode.getFirstChild();    	non-compiled	[CE]  	41	None	replace
269	[BUG]  [BUGGY]  if(newNode.getType()  ==  Token.VAR  &&  newNode.getType()  ==  Token.CATCH)  {  reportCodeChange();  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  if(newNode.getType()  ==  Token.VAR  &&  newNode.getType()  ==  Token.CATCH)  {  reportCodeChange();  }  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	if(newNode.getType()  ==  Token.VAR  &&  newNode.getType()  ==  Token.CATCH)  {  reportCodeChange();  }	  if(newNode.getType()    ==    Token.VAR    ||    newNode.getType()    ==    Token.CATCH)    {    reportCodeChange();    }    	non-compiled	[CE]  	48	None	replace
270	[BUG]  [BUGGY]  if(newNode.getType()  ==  Token.VAR  &&  newNode.getType()  ==  Token.NAME)  {  reportCodeChange();  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  if(newNode.getType()  ==  Token.VAR  &&  newNode.getType()  ==  Token.NAME)  {  reportCodeChange();  }  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	if(newNode.getType()  ==  Token.VAR  &&  newNode.getType()  ==  Token.NAME)  {  reportCodeChange();  }	  if(newNode.getType()    ==    Token.VAR    ||    newNode.getType()    ==    Token.NAME)    {    reportCodeChange();    }    	non-compiled	[CE]  	50	None	replace
271	[BUG]  [BUGGY]  newNode.setType(Token.VAR  &&  newNode.getType()  ==  Token.NAME)  {  reportCodeChange();  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  newNode.setType(Token.VAR  &&  newNode.getType()  ==  Token.NAME)  {  reportCodeChange();  }  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	newNode.setType(Token.VAR  &&  newNode.getType()  ==  Token.NAME)  {  reportCodeChange();  }	  if(newNode.getType()    ==    Token.VAR    ||    newNode.getType()    ==    Token.NAME)    {    reportCodeChange();    }    	non-compiled	[CE]  	50	None	replace
272	[BUG]  [BUGGY]  if(newNode.getType()  ==  Token.VAR  ||  newNode.getType()!=  Token.NAME)  {  reportCodeChange();  }  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  if(newNode.getType()  ==  Token.VAR  ||  newNode.getType()!=  Token.NAME)  {  reportCodeChange();  }  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	if(newNode.getType()  ==  Token.VAR  ||  newNode.getType()!=  Token.NAME)  {  reportCodeChange();  }	  if(newNode.getType()    ==    Token.VAR    ||    newNode.getType()    ==    Token.NAME)    {    reportCodeChange();    }    	non-compiled	[CE]  	50	None	replace
273	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  newNode;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  newNode;  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  newNode;	  NodeTraversal.traverse(compiler,    n,    parent,    this);    	non-compiled	[CE]  	31	None	replace
274	[BUG]  [BUGGY]  if(newNode.getType()  ==  Token.VAR  &&  newNode.getType()  ==  Token.BLOCK)  {  reportCodeChange();  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  if(newNode.getType()  ==  Token.VAR  &&  newNode.getType()  ==  Token.BLOCK)  {  reportCodeChange();  }  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	if(newNode.getType()  ==  Token.VAR  &&  newNode.getType()  ==  Token.BLOCK)  {  reportCodeChange();  }	  if(newNode.getType()    ==    Token.VAR    ||    newNode.getType()    ==    Token.BLOCK)    {    reportCodeChange();    }    	non-compiled	[CE]  	49	None	replace
275	[BUG]  [BUGGY]  if(newNode.getType()  ==  Token.VAR  ||  newNode.getType()!=  Token.BLOCK)  {  reportCodeChange();  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  if(newNode.getType()  ==  Token.VAR  ||  newNode.getType()!=  Token.BLOCK)  {  reportCodeChange();  }  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	if(newNode.getType()  ==  Token.VAR  ||  newNode.getType()!=  Token.BLOCK)  {  reportCodeChange();  }	  if(newNode.getType()    ==    Token.VAR    ||    newNode.getType()    ==    Token.BLOCK)    {    reportCodeChange();    }    	non-compiled	[CE]  	49	None	replace
276	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  newNode,  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  newNode,  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  newNode,  INVALID_REGULAR_EXPRESSION_FLAGS);	  NodeTraversal.traverse(compiler,    n,    newNode,    this,    INVALID_REGULAR_EXPRESSION_FLAGS);    	non-compiled	[CE]  	59	None	replace
277	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNode,  this,  NOT_SAFE_TO_FOLD_WITHOUT_ARGS);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNode,  this,  NOT_SAFE_TO_FOLD_WITHOUT_ARGS);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	NodeTraversal.traverse(compiler,  n,  newNode,  this,  NOT_SAFE_TO_FOLD_WITHOUT_ARGS);	  NodeTraversal.traverse(compiler,    n,    newNode,    this,    INVALID_REGULAR_EXPRESSION_FLAGS);    	non-compiled	[CE]  	59	None	replace
278	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNode,  this,  INVALID_REGULAR_EXPRESSION_FLAGS,  parents);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNode,  this,  INVALID_REGULAR_EXPRESSION_FLAGS,  parents);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	NodeTraversal.traverse(compiler,  n,  newNode,  this,  INVALID_REGULAR_EXPRESSION_FLAGS,  parents);	  NodeTraversal.traverse(compiler,    n,    newNode,    this,    INVALID_REGULAR_EXPRESSION_FLAGS);    	non-compiled	[CE]  	59	None	replace
279	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  newNode,  parents);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  newNode,  parents);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	NodeTraversal.traverse(compiler,  parent,  newNode,  parents);	  NodeTraversal.traverse(compiler,    n,    newNode,    parents);    	non-compiled	[CE]  	56	None	replace
280	[BUG]  [BUGGY]  Node  newNode  =  Node.newNumber(Token.NAME,  num);  parent.replaceChild(n,  newNode);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  Node  newNode  =  Node.newNumber(Token.NAME,  num);  parent.replaceChild(n,  newNode);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	Node  newNode  =  Node.newNumber(Token.NAME,  num);  parent.replaceChild(n,  newNode);	  Node    newNode    =    Node.newString(Token.NAME,    num);    parent.replaceChild(n,    newNode);    	non-compiled	[CE]  	20	None	replace
281	[BUG]  [BUGGY]  Node  newNode  =  Node.newString(Token.NAME,  num  +  1,  parent.replaceChild(n,  newNode);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  Node  newNode  =  Node.newString(Token.NAME,  num  +  1,  parent.replaceChild(n,  newNode);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	Node  newNode  =  Node.newString(Token.NAME,  num  +  1,  parent.replaceChild(n,  newNode);	  Node    newNode    =    Node.newString(Token.NAME,    num);    parent.replaceChild(n,    newNode);    	non-compiled	[CE]  	20	None	replace
282	[BUG]  [BUGGY]  NodeUtil.redeclareVarsInsideBranch(n,  parent);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  NodeUtil.redeclareVarsInsideBranch(n,  parent);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	NodeUtil.redeclareVarsInsideBranch(n,  parent);	  NodeUtil.removeChild(parent,    n);    	non-compiled	[CE]  	51	None	replace
283	[BUG]  [BUGGY]  NodeUtil.redeclareVarsInsideBranch(parent,  n);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  NodeUtil.redeclareVarsInsideBranch(parent,  n);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	NodeUtil.redeclareVarsInsideBranch(parent,  n);	  NodeUtil.removeChild(parent,    n);    	non-compiled	[CE]  	51	None	replace
284	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  newNode,  false,  n);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  newNode,  false,  n);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	NodeTraversal.traverse(compiler,  parent,  newNode,  false,  n);	  NodeTraversal.traverse(compiler,    parent,    newNode,    false);    	non-compiled	[CE]  	7	None	replace
285	[BUG]  [BUGGY]  newNode.putProp(Node.SYNTHETIC_PROP,  num);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  newNode.putProp(Node.SYNTHETIC_PROP,  num);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	newNode.putProp(Node.SYNTHETIC_PROP,  num);	  newNode.putBooleanProp(Node.SYNTHETIC_PROP,    true);    	non-compiled	[CE]  	54	None	replace
286	[BUG]  [BUGGY]  newNode.putProp(Node.SYNTHETIC_PROP,  0);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  newNode.putProp(Node.SYNTHETIC_PROP,  0);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	newNode.putProp(Node.SYNTHETIC_PROP,  0);	  newNode.putBooleanProp(Node.SYNTHETIC_PROP,    true);    	non-compiled	[CE]  	54	None	replace
287	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  parent,  newNode,  this,  n);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  parent,  newNode,  this,  n);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	NodeTraversal.traverse(compiler,  parent,  newNode,  this,  n);	  NodeTraversal.traverse(compiler,    parent,    newNode,    this);    	non-compiled	[CE]  	34	None	replace
288	[BUG]  [BUGGY]  newNode.putBooleanProp(Node.SOURCE_PROP,  false);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  newNode.putBooleanProp(Node.SOURCE_PROP,  false);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	newNode.putBooleanProp(Node.SOURCE_PROP,  false);	  newNode.putBooleanProp(Node.SOURCENAME_PROP,    true);    	non-compiled	[CE]  	52	None	replace
289	[BUG]  [BUGGY]  newNode.setType(Token.NAME)&&  reportCodeChange();  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  newNode.setType(Token.NAME)&&  reportCodeChange();  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	newNode.setType(Token.NAME)&&  reportCodeChange();	  newNode.setType(Token.NAME)    {    reportCodeChange();    }    	non-compiled	[CE]  	45	None	replace
290	[BUG]  [BUGGY]  newNode.setType(Token.NAME)&&  parent.getType()  ==  Token.VAR;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  newNode.setType(Token.NAME)&&  parent.getType()  ==  Token.VAR;  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	newNode.setType(Token.NAME)&&  parent.getType()  ==  Token.VAR;	  newNode.setType(Token.NAME)    {    reportCodeChange();    }    	non-compiled	[CE]  	45	None	replace
291	[BUG]  [BUGGY]  newNode.setType(Token.NAME)&&  parent.removeChild(parent);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  newNode.setType(Token.NAME)&&  parent.removeChild(parent);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	newNode.setType(Token.NAME)&&  parent.removeChild(parent);	  newNode.setType(Token.NAME)    {    reportCodeChange();    }    	non-compiled	[CE]  	45	None	replace
292	[BUG]  [BUGGY]  Node  newNode  =  Node.newNumber(0);  parent.replaceChild(parent,  newNode);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  Node  newNode  =  Node.newNumber(0);  parent.replaceChild(parent,  newNode);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	Node  newNode  =  Node.newNumber(0);  parent.replaceChild(parent,  newNode);	  Node    newNode    =    Node.newNumber(num);    parent.replaceChild(n,    newNode);    	non-compiled	[CE]  	22	None	replace
293	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newNode,  this,  null,  n);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  newNode,  this,  null,  n);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	NodeTraversal.traverse(compiler,  newNode,  this,  null,  n);	  NodeTraversal.traverse(compiler,    newNode,    this,    null);    	non-compiled	[CE]  	58	None	replace
294	[BUG]  [BUGGY]  newNode.putProp(Node.SOURCENAME_PROP,  n.getString());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  newNode.putProp(Node.SOURCENAME_PROP,  n.getString());  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	newNode.putProp(Node.SOURCENAME_PROP,  n.getString());	  newNode.putProp(Node.SOURCENAME_PROP,    parent.getType());    	non-compiled	[CE]  	53	None	replace
295	[BUG]  [BUGGY]  newNode.putProp(Node.SOURCENAME_PROP,  n.getFirstChild());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  newNode.putProp(Node.SOURCENAME_PROP,  n.getFirstChild());  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	newNode.putProp(Node.SOURCENAME_PROP,  n.getFirstChild());	  newNode.putProp(Node.SOURCENAME_PROP,    parent.getType());    	non-compiled	[CE]  	53	None	replace
296	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newNode,  false,  n);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  newNode,  false,  n);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	NodeTraversal.traverse(compiler,  newNode,  false,  n);	  NodeTraversal.traverse(compiler,    newNode,    false);    	non-compiled	[CE]  	8	None	replace
297	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNode,  this,  newNode);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  newNode,  this,  newNode);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	NodeTraversal.traverse(compiler,  n,  newNode,  this,  newNode);	  NodeTraversal.traverse(compiler,    n,    newNode,    this,    parent);    	non-compiled	[CE]  	32	None	replace
298	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  false,  null);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  false,  null);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  false,  null);	  NodeTraversal.traverse(compiler,    n,    newNode,    false,    parent);    	non-compiled	[CE]  	9	None	replace
299	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  true,  false);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  NodeTraversal.traverse(compiler,  n,  parent,  true,  false);  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	NodeTraversal.traverse(compiler,  n,  parent,  true,  false);	  NodeTraversal.traverse(compiler,    n,    newNode,    false,    parent);    	non-compiled	[CE]  	9	None	replace
300	[BUG]  [BUGGY]  if(newNode.getType()  ==  Token.VAR  &&  newNode.getType()  ==  Token.FUNCTION)  {  reportCodeChange();  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  if(newNode.getType()  ==  Token.VAR  &&  newNode.getType()  ==  Token.FUNCTION)  {  reportCodeChange();  }  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	if(newNode.getType()  ==  Token.VAR  &&  newNode.getType()  ==  Token.FUNCTION)  {  reportCodeChange();  }	  if(newNode.getType()    ==    Token.VAR    ||    newNode.getType()    ==    Token.FUNCTION)    {    reportCodeChange();    }    	non-compiled	[CE]  	47	None	replace
301	[BUG]  [BUGGY]  if(newNode.getType()  ==  Token.VAR  ||  newNode.getType()!=  Token.FUNCTION)  {  reportCodeChange();  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  if(newNode.getType()  ==  Token.VAR  ||  newNode.getType()!=  Token.FUNCTION)  {  reportCodeChange();  }  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	if(newNode.getType()  ==  Token.VAR  ||  newNode.getType()!=  Token.FUNCTION)  {  reportCodeChange();  }	  if(newNode.getType()    ==    Token.VAR    ||    newNode.getType()    ==    Token.FUNCTION)    {    reportCodeChange();    }    	non-compiled	[CE]  	47	None	replace
302	[BUG]  [BUGGY]  newNode.setType(Token.EXPR_RESULT)  {  reportCodeChange();  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  newNode.setType(Token.EXPR_RESULT)  {  reportCodeChange();  }  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	newNode.setType(Token.EXPR_RESULT)  {  reportCodeChange();  }	  newNode.setType(Token.FUNCTION)    {    reportCodeChange();    }    	non-compiled	[CE]  	38	None	replace
303	[BUG]  [BUGGY]  newNode.setType(Token.VAR)  {  reportCodeChange();  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  newNode.setType(Token.VAR)  {  reportCodeChange();  }  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	newNode.setType(Token.VAR)  {  reportCodeChange();  }	  newNode.setType(Token.FUNCTION)    {    reportCodeChange();    }    	non-compiled	[CE]  	38	None	replace
304	[BUG]  [BUGGY]  newNode.setType(Token.FUNCTION)  {  reportPropertyChange();  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {  Node  newNode  =  Node.newNumber(num);  if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);      [BUGGY]  newNode.setType(Token.FUNCTION)  {  reportPropertyChange();  }  [BUGGY]        return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.4082482904638631	821	821	1	replace	newNode.setType(Token.FUNCTION)  {  reportPropertyChange();  }	  newNode.setType(Token.FUNCTION)    {    reportCodeChange();    }    	non-compiled	[CE]  	38	None	replace
