bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(thenBranch))  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]      if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {    [BUGGY]  if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(thenBranch))  {  [BUGGY]    Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(thenBranch))  {	  if(isLowerPrecedenceInExpression(cond))    {    	non-compiled	[CE]  	13	None	replace
2	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpression(thenBranch)&&  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE))  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]      if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {    [BUGGY]  if(isPropertyAssignmentInExpression(thenBranch)&&  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE))  {  [BUGGY]    Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isPropertyAssignmentInExpression(thenBranch)&&  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(cond))    {    	non-compiled	[CE]  	13	None	replace
3	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]      if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {    [BUGGY]  if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]    Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(elseBranch))  {	  if(isLowerPrecedenceInExpression(cond))    {    	non-compiled	[CE]  	13	None	replace
4	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpression(thenBranch)||  isLowerPrecedenceInExpression(cond))  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]      if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {    [BUGGY]  if(isPropertyAssignmentInExpression(thenBranch)||  isLowerPrecedenceInExpression(cond))  {  [BUGGY]    Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isPropertyAssignmentInExpression(thenBranch)||  isLowerPrecedenceInExpression(cond))  {	  if(isLowerPrecedenceInExpression(cond))    {    	non-compiled	[CE]  	13	None	replace
5	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)||  isPropertyAssignmentInExpression(thenBranch))  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]      if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {    [BUGGY]  if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)||  isPropertyAssignmentInExpression(thenBranch))  {  [BUGGY]    Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)||  isPropertyAssignmentInExpression(thenBranch))  {	  if(isLowerPrecedenceInExpression(cond))    {    	non-compiled	[CE]  	13	None	replace
6	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)||  isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]                  AssertionFailedError    [CONTEXT]      if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {    [BUGGY]  if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)||  isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]    Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)||  isPropertyAssignmentInExpression(elseBranch))  {	  if(isLowerPrecedenceInExpression(cond))    {    	non-compiled	[CE]  	13	None	replace
7	[BUG]  [BUGGY]  if(getBlockExpression(elseBranch)!=  null)  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]      if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {    [BUGGY]  if(getBlockExpression(elseBranch)!=  null)  {  [BUGGY]    Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(getBlockExpression(elseBranch)!=  null)  {	  if(getBlockExpression(thenBranch)    ==    null)    {    	non-compiled	[CE]  	10	None	replace
8	[BUG]  [BUGGY]  if(getBlockExpression(elseBranch)  ==  null)  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]      if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {    [BUGGY]  if(getBlockExpression(elseBranch)  ==  null)  {  [BUGGY]    Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(getBlockExpression(elseBranch)  ==  null)  {	  if(getBlockExpression(thenBranch)    ==    null)    {    	non-compiled	[CE]  	10	None	replace
9	[BUG]  [BUGGY]  if(getPropertyAssignmentInExpression(thenBranch)  ==  null)  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]      if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {    [BUGGY]  if(getPropertyAssignmentInExpression(thenBranch)  ==  null)  {  [BUGGY]    Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(getPropertyAssignmentInExpression(thenBranch)  ==  null)  {	  if(getBlockExpression(thenBranch)    ==    null)    {    	non-compiled	[CE]  	10	None	replace
10	[BUG]  [BUGGY]  if(getPropertyAssignmentInExpression(thenBranch)!=  null)  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]      if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {    [BUGGY]  if(getPropertyAssignmentInExpression(thenBranch)!=  null)  {  [BUGGY]    Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(getPropertyAssignmentInExpression(thenBranch)!=  null)  {	  if(getBlockExpression(thenBranch)    ==    null)    {    	non-compiled	[CE]  	10	None	replace
11	[BUG]  [BUGGY]  if(isBlockExpression(thenBranch))  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]      if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {    [BUGGY]  if(isBlockExpression(thenBranch))  {  [BUGGY]    Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isBlockExpression(thenBranch))  {	  if(isPropertyAssignmentInExpression(cond))    {    	non-compiled	[CE]  	14	None	replace
12	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(thenBranch)||  isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]      if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {    [BUGGY]  if(isLowerPrecedenceInExpression(thenBranch)||  isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]    Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(thenBranch)||  isPropertyAssignmentInExpression(elseBranch))  {	  if(isPropertyAssignmentInExpression(cond))    {    	non-compiled	[CE]  	14	None	replace
13	[BUG]  [BUGGY]  if(isBlockExpression(thenBranch)||  isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]      if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {    [BUGGY]  if(isBlockExpression(thenBranch)||  isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]    Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isBlockExpression(thenBranch)||  isPropertyAssignmentInExpression(elseBranch))  {	  if(isPropertyAssignmentInExpression(cond))    {    	non-compiled	[CE]  	14	None	replace
14	[BUG]  [BUGGY]  if(getBlockExpression(thenBranch)!=  null  &&  isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]      if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {    [BUGGY]  if(getBlockExpression(thenBranch)!=  null  &&  isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]    Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(getBlockExpression(thenBranch)!=  null  &&  isPropertyAssignmentInExpression(elseBranch))  {	  if(isPropertyAssignmentInExpression(cond))    {    	non-compiled	[CE]  	14	None	replace
15	[BUG]  [BUGGY]  Node  thenBranch  =  elseBranch.getNext();  [CE]  [FE]                      AssertionFailedError    [CONTEXT]      if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {    [BUGGY]  Node  thenBranch  =  elseBranch.getNext();  [BUGGY]    Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	Node  thenBranch  =  elseBranch.getNext();	      	non-compiled	[CE]  	8	None	replace
16	[BUG]  [BUGGY]  Node  thenBranch  =  cond.getNext();  [CE]  [FE]                        AssertionFailedError    [CONTEXT]      if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {    [BUGGY]  Node  thenBranch  =  cond.getNext();  [BUGGY]    Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	Node  thenBranch  =  cond.getNext();	      	non-compiled	[CE]  	8	None	replace
17	[BUG]  [BUGGY]  thenBranch  =  elseBranch.getNext();  [CE]  [FE]                          AssertionFailedError    [CONTEXT]      if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {    [BUGGY]  thenBranch  =  elseBranch.getNext();  [BUGGY]    Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	thenBranch  =  elseBranch.getNext();	      	non-compiled	[CE]  	8	None	replace
18	[BUG]  [BUGGY]  Node  thenBranch  =  getBlockExpression(thenBranch);  [CE]  [FE]                            AssertionFailedError    [CONTEXT]      if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {    [BUGGY]  Node  thenBranch  =  getBlockExpression(thenBranch);  [BUGGY]    Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	Node  thenBranch  =  getBlockExpression(thenBranch);	      	non-compiled	[CE]  	8	None	replace
19	[BUG]  [BUGGY]  Node  thenBranchIsExpressionBlock  =  elseBranch.getNext();  [CE]  [FE]                              AssertionFailedError    [CONTEXT]      if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {    [BUGGY]  Node  thenBranchIsExpressionBlock  =  elseBranch.getNext();  [BUGGY]    Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	Node  thenBranchIsExpressionBlock  =  elseBranch.getNext();	      	non-compiled	[CE]  	8	None	replace
20	[BUG]  [BUGGY]  Node  thenBranch  =  cond.getNext();  elseBranch  =  elseBranch.getNext();  [CE]  [FE]                                AssertionFailedError    [CONTEXT]      if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {    [BUGGY]  Node  thenBranch  =  cond.getNext();  elseBranch  =  elseBranch.getNext();  [BUGGY]    Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	Node  thenBranch  =  cond.getNext();  elseBranch  =  elseBranch.getNext();	      	non-compiled	[CE]  	8	None	replace
21	[BUG]  [BUGGY]  Node  thenBranch  =  thenBranch.getNext();  [CE]  [FE]                                  AssertionFailedError    [CONTEXT]      if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {    [BUGGY]  Node  thenBranch  =  thenBranch.getNext();  [BUGGY]    Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	Node  thenBranch  =  thenBranch.getNext();	      	non-compiled	[CE]  	8	None	replace
22	[BUG]  [BUGGY]  if(getBlockExpression(thenBranch)!=  null  &&  isPropertyAssignmentInExpression(thenBranch))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]      if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {    [BUGGY]  if(getBlockExpression(thenBranch)!=  null  &&  isPropertyAssignmentInExpression(thenBranch))  {  [BUGGY]    Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(getBlockExpression(thenBranch)!=  null  &&  isPropertyAssignmentInExpression(thenBranch))  {	  if(isPropertyAssignmentInExpression(propertyBranch))    {    	non-compiled	[CE]  	11	None	replace
23	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond)||  isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]      if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {    [BUGGY]  if(isLowerPrecedenceInExpression(cond)||  isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]    Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(cond)||  isPropertyAssignmentInExpression(elseBranch))  {	  if(isPropertyAssignmentInExpression(thenBranch))    {    	non-compiled	[CE]  	1	None	replace
24	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond)||  isPropertyAssignmentInExpression(thenBranch))  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]      if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {    [BUGGY]  if(isLowerPrecedenceInExpression(cond)||  isPropertyAssignmentInExpression(thenBranch))  {  [BUGGY]    Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(cond)||  isPropertyAssignmentInExpression(thenBranch))  {	  if(isPropertyAssignmentInExpression(thenBranch))    {    	non-compiled	[CE]  	1	None	replace
25	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond)||  isFoldableExpressBlock(elseBranch))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]      if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {    [BUGGY]  if(isLowerPrecedenceInExpression(cond)||  isFoldableExpressBlock(elseBranch))  {  [BUGGY]    Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(cond)||  isFoldableExpressBlock(elseBranch))  {	  if(isLowerPrecedenceInExpression(thenBranch)||    isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	3	None	replace
26	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpression(cond)||  isLowerPrecedenceInExpression(thenBranch)||  isFoldableExpressBlock(elseBranch))  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]      if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {    [BUGGY]  if(isPropertyAssignmentInExpression(cond)||  isLowerPrecedenceInExpression(thenBranch)||  isFoldableExpressBlock(elseBranch))  {  [BUGGY]    Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isPropertyAssignmentInExpression(cond)||  isLowerPrecedenceInExpression(thenBranch)||  isFoldableExpressBlock(elseBranch))  {	  if(isLowerPrecedenceInExpression(thenBranch)||    isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	3	None	replace
27	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond)&&  isFoldableExpressBlock(elseBranch))  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]      if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {    [BUGGY]  if(isLowerPrecedenceInExpression(cond)&&  isFoldableExpressBlock(elseBranch))  {  [BUGGY]    Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(cond)&&  isFoldableExpressBlock(elseBranch))  {	  if(isLowerPrecedenceInExpression(thenBranch)||    isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	3	None	replace
28	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpression(cond)||  isLowerPrecedenceInExpression(thenBranch)&&  isFoldableExpressBlock(elseBranch))  {  [CE]  [FE]                  AssertionFailedError    [CONTEXT]      if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {    [BUGGY]  if(isPropertyAssignmentInExpression(cond)||  isLowerPrecedenceInExpression(thenBranch)&&  isFoldableExpressBlock(elseBranch))  {  [BUGGY]    Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isPropertyAssignmentInExpression(cond)||  isLowerPrecedenceInExpression(thenBranch)&&  isFoldableExpressBlock(elseBranch))  {	  if(isLowerPrecedenceInExpression(thenBranch)||    isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	3	None	replace
29	[BUG]  [BUGGY]  if(getBlockExpression(thenBranch)||  isLowerPrecedenceInExpression(thenBranch)||  isFoldableExpressBlock(elseBranch))  {  [CE]  [FE]                    AssertionFailedError    [CONTEXT]      if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {    [BUGGY]  if(getBlockExpression(thenBranch)||  isLowerPrecedenceInExpression(thenBranch)||  isFoldableExpressBlock(elseBranch))  {  [BUGGY]    Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(getBlockExpression(thenBranch)||  isLowerPrecedenceInExpression(thenBranch)||  isFoldableExpressBlock(elseBranch))  {	  if(isLowerPrecedenceInExpression(thenBranch)||    isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	3	None	replace
30	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond)&&  isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]                  AssertionFailedError    [CONTEXT]      if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {    [BUGGY]  if(isLowerPrecedenceInExpression(cond)&&  isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]    Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(cond)&&  isPropertyAssignmentInExpression(elseBranch))  {	  if(isLowerPrecedenceInExpression(thenBranch)&&    isPropertyAssignmentInExpression(elseBranch))    {    	non-compiled	[CE]  	6	None	replace
31	[BUG]  [BUGGY]  if(getBlockExpression(thenBranch)!=  null  &&  isLowerPrecedenceInExpression(thenBranch)&&  isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]                    AssertionFailedError    [CONTEXT]      if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {    [BUGGY]  if(getBlockExpression(thenBranch)!=  null  &&  isLowerPrecedenceInExpression(thenBranch)&&  isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]    Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(getBlockExpression(thenBranch)!=  null  &&  isLowerPrecedenceInExpression(thenBranch)&&  isPropertyAssignmentInExpression(elseBranch))  {	  if(isLowerPrecedenceInExpression(thenBranch)&&    isPropertyAssignmentInExpression(elseBranch))    {    	non-compiled	[CE]  	6	None	replace
32	[BUG]  [BUGGY]  if(isBlockExpression(thenBranch)&&  isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]                      AssertionFailedError    [CONTEXT]      if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {    [BUGGY]  if(isBlockExpression(thenBranch)&&  isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]    Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isBlockExpression(thenBranch)&&  isPropertyAssignmentInExpression(elseBranch))  {	  if(isLowerPrecedenceInExpression(thenBranch)&&    isPropertyAssignmentInExpression(elseBranch))    {    	non-compiled	[CE]  	6	None	replace
33	[BUG]  [BUGGY]  if(isBlockExpression(cond)&&  isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]                        AssertionFailedError    [CONTEXT]      if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {    [BUGGY]  if(isBlockExpression(cond)&&  isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]    Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isBlockExpression(cond)&&  isPropertyAssignmentInExpression(elseBranch))  {	  if(isLowerPrecedenceInExpression(thenBranch)&&    isPropertyAssignmentInExpression(elseBranch))    {    	non-compiled	[CE]  	6	None	replace
34	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(otherBranch))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]      if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {    [BUGGY]  if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(otherBranch))  {  [BUGGY]    Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(otherBranch))  {	  if(isLowerPrecedenceInExpression(thenBranch))    {    	non-compiled	[CE]  	15	None	replace
35	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE))  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]      if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {    [BUGGY]  if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE))  {  [BUGGY]    Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(thenBranch))    {    	non-compiled	[CE]  	15	None	replace
36	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)||  isLowerPrecedenceInExpression(thenBranch))  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]      if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {    [BUGGY]  if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)||  isLowerPrecedenceInExpression(thenBranch))  {  [BUGGY]    Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)||  isLowerPrecedenceInExpression(thenBranch))  {	  if(isLowerPrecedenceInExpression(thenBranch))    {    	non-compiled	[CE]  	15	None	replace
37	[BUG]  [BUGGY]  if(getBlockExpression(thenBranch)!=  null  ||  isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]      if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {    [BUGGY]  if(getBlockExpression(thenBranch)!=  null  ||  isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]    Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(getBlockExpression(thenBranch)!=  null  ||  isPropertyAssignmentInExpression(elseBranch))  {	  if(getBlockExpression(thenBranch)!=    null)    {    	non-compiled	[CE]  	9	None	replace
38	[BUG]  [BUGGY]  if(getBlockExpression(thenBranch)!=  null  ||  getBlockExpression(thenBranch)!=  null)  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]      if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {    [BUGGY]  if(getBlockExpression(thenBranch)!=  null  ||  getBlockExpression(thenBranch)!=  null)  {  [BUGGY]    Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(getBlockExpression(thenBranch)!=  null  ||  getBlockExpression(thenBranch)!=  null)  {	  if(getBlockExpression(thenBranch)!=    null)    {    	non-compiled	[CE]  	9	None	replace
39	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpression(thenBranch)||  isFoldableExpressBlock(elseBranch))  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]      if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {    [BUGGY]  if(isPropertyAssignmentInExpression(thenBranch)||  isFoldableExpressBlock(elseBranch))  {  [BUGGY]    Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isPropertyAssignmentInExpression(thenBranch)||  isFoldableExpressBlock(elseBranch))  {	  if(isPropertyAssignmentInExpression(propertyBranch)&&    isFoldableExpressBlock(thenBranch))    {    	non-compiled	[CE]  	4	None	replace
40	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpression(thenBranch)&&  isFoldableExpressBlock(cond))  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]      if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {    [BUGGY]  if(isPropertyAssignmentInExpression(thenBranch)&&  isFoldableExpressBlock(cond))  {  [BUGGY]    Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isPropertyAssignmentInExpression(thenBranch)&&  isFoldableExpressBlock(cond))  {	  if(isPropertyAssignmentInExpression(propertyBranch)&&    isFoldableExpressBlock(thenBranch))    {    	non-compiled	[CE]  	4	None	replace
41	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpression(cond)&&  isFoldableExpressBlock(thenBranch))  {  [CE]  [FE]                  AssertionFailedError    [CONTEXT]      if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {    [BUGGY]  if(isPropertyAssignmentInExpression(cond)&&  isFoldableExpressBlock(thenBranch))  {  [BUGGY]    Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isPropertyAssignmentInExpression(cond)&&  isFoldableExpressBlock(thenBranch))  {	  if(isPropertyAssignmentInExpression(propertyBranch)&&    isFoldableExpressBlock(thenBranch))    {    	non-compiled	[CE]  	4	None	replace
42	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond)&&  isFoldableExpressBlock(thenBranch))  {  [CE]  [FE]                    AssertionFailedError    [CONTEXT]      if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {    [BUGGY]  if(isLowerPrecedenceInExpression(cond)&&  isFoldableExpressBlock(thenBranch))  {  [BUGGY]    Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(cond)&&  isFoldableExpressBlock(thenBranch))  {	  if(isPropertyAssignmentInExpression(propertyBranch)&&    isFoldableExpressBlock(thenBranch))    {    	non-compiled	[CE]  	4	None	replace
43	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpression(thenBranch)||  isFoldableExpressBlock(thenBranch))  {  [CE]  [FE]                      AssertionFailedError    [CONTEXT]      if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {    [BUGGY]  if(isPropertyAssignmentInExpression(thenBranch)||  isFoldableExpressBlock(thenBranch))  {  [BUGGY]    Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isPropertyAssignmentInExpression(thenBranch)||  isFoldableExpressBlock(thenBranch))  {	  if(isPropertyAssignmentInExpression(propertyBranch)&&    isFoldableExpressBlock(thenBranch))    {    	non-compiled	[CE]  	4	None	replace
44	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpression(cond)&&  isLowerPrecedenceInExpression(thenBranch)&&  isFoldableExpressBlock(elseBranch))  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]      if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {    [BUGGY]  if(isPropertyAssignmentInExpression(cond)&&  isLowerPrecedenceInExpression(thenBranch)&&  isFoldableExpressBlock(elseBranch))  {  [BUGGY]    Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isPropertyAssignmentInExpression(cond)&&  isLowerPrecedenceInExpression(thenBranch)&&  isFoldableExpressBlock(elseBranch))  {	  if(isLowerPrecedenceInExpression(thenBranch)&&    isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	2	None	replace
45	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(thenBranch)&&  elseBranchIsExpressionBlock(elseBranch))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]      if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {    [BUGGY]  if(isLowerPrecedenceInExpression(thenBranch)&&  elseBranchIsExpressionBlock(elseBranch))  {  [BUGGY]    Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(thenBranch)&&  elseBranchIsExpressionBlock(elseBranch))  {	  if(isLowerPrecedenceInExpression(thenBranch)&&    isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	2	None	replace
46	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(thenBranch)&&  isPropertyAssignmentBlock(elseBranch))  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]      if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {    [BUGGY]  if(isLowerPrecedenceInExpression(thenBranch)&&  isPropertyAssignmentBlock(elseBranch))  {  [BUGGY]    Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(thenBranch)&&  isPropertyAssignmentBlock(elseBranch))  {	  if(isLowerPrecedenceInExpression(thenBranch)&&    isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	2	None	replace
47	[BUG]  [BUGGY]  if(isBlockExpression(thenBranch)&&  isFoldableExpressBlock(elseBranch))  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]      if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {    [BUGGY]  if(isBlockExpression(thenBranch)&&  isFoldableExpressBlock(elseBranch))  {  [BUGGY]    Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isBlockExpression(thenBranch)&&  isFoldableExpressBlock(elseBranch))  {	  if(isPropertyAssignmentInExpression(thenBranch)&&    isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	5	None	replace
48	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpression(thenBranch)&&  elseBranchIsExpressionBlock(elseBranch))  {  [CE]  [FE]                  AssertionFailedError    [CONTEXT]      if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {    [BUGGY]  if(isPropertyAssignmentInExpression(thenBranch)&&  elseBranchIsExpressionBlock(elseBranch))  {  [BUGGY]    Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isPropertyAssignmentInExpression(thenBranch)&&  elseBranchIsExpressionBlock(elseBranch))  {	  if(isPropertyAssignmentInExpression(thenBranch)&&    isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	5	None	replace
49	[BUG]  [BUGGY]  if(isAssignmentInExpression(thenBranch)&&  isFoldableExpressBlock(elseBranch))  {  [CE]  [FE]                    AssertionFailedError    [CONTEXT]      if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {    [BUGGY]  if(isAssignmentInExpression(thenBranch)&&  isFoldableExpressBlock(elseBranch))  {  [BUGGY]    Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isAssignmentInExpression(thenBranch)&&  isFoldableExpressBlock(elseBranch))  {	  if(isPropertyAssignmentInExpression(thenBranch)&&    isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	5	None	replace
50	[BUG]  [BUGGY]  if(thenBranch!=  null  &&!isFoldableExpressBlock(elseBranch))  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]      if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {    [BUGGY]  if(thenBranch!=  null  &&!isFoldableExpressBlock(elseBranch))  {  [BUGGY]    Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(thenBranch!=  null  &&!isFoldableExpressBlock(elseBranch))  {	  if(!isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	12	None	replace
51	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpression(thenBranch)||!isFoldableExpressBlock(elseBranch))  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]      if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {    [BUGGY]  if(isPropertyAssignmentInExpression(thenBranch)||!isFoldableExpressBlock(elseBranch))  {  [BUGGY]    Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isPropertyAssignmentInExpression(thenBranch)||!isFoldableExpressBlock(elseBranch))  {	  if(!isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	12	None	replace
52	[BUG]  [BUGGY]  if(!isPropertyAssignmentInExpression(thenBranch))  {  [CE]  [FE]                  AssertionFailedError    [CONTEXT]      if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {    [BUGGY]  if(!isPropertyAssignmentInExpression(thenBranch))  {  [BUGGY]    Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(!isPropertyAssignmentInExpression(thenBranch))  {	  if(!isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	12	None	replace
53	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpression(thenBranch)&&!isFoldableExpressBlock(elseBranch))  {  [CE]  [FE]                    AssertionFailedError    [CONTEXT]      if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {    [BUGGY]  if(isPropertyAssignmentInExpression(thenBranch)&&!isFoldableExpressBlock(elseBranch))  {  [BUGGY]    Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isPropertyAssignmentInExpression(thenBranch)&&!isFoldableExpressBlock(elseBranch))  {	  if(!isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	12	None	replace
54	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(thenBranch)||!isFoldableExpressBlock(elseBranch))  {  [CE]  [FE]                      AssertionFailedError    [CONTEXT]      if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {    [BUGGY]  if(isLowerPrecedenceInExpression(thenBranch)||!isFoldableExpressBlock(elseBranch))  {  [BUGGY]    Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(thenBranch)||!isFoldableExpressBlock(elseBranch))  {	  if(!isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	12	None	replace
55	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(thenBranch)&&!isFoldableExpressBlock(elseBranch))  {  [CE]  [FE]                        AssertionFailedError    [CONTEXT]      if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {    [BUGGY]  if(isLowerPrecedenceInExpression(thenBranch)&&!isFoldableExpressBlock(elseBranch))  {  [BUGGY]    Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(thenBranch)&&!isFoldableExpressBlock(elseBranch))  {	  if(!isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	12	None	replace
56	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(thenBranch)&&  isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]                    AssertionFailedError    [CONTEXT]      if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {    [BUGGY]  if(!isLowerPrecedenceInExpression(thenBranch)&&  isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]    Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(!isLowerPrecedenceInExpression(thenBranch)&&  isPropertyAssignmentInExpression(elseBranch))  {	  if(isPropertyAssignmentInExpression(elseBranch))    {    	non-compiled	[CE]  	7	None	replace
57	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpression(thenBranch)||  isLowerPrecedenceInExpression(thenBranch))  {  [CE]  [FE]                      AssertionFailedError    [CONTEXT]      if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {    [BUGGY]  if(isPropertyAssignmentInExpression(thenBranch)||  isLowerPrecedenceInExpression(thenBranch))  {  [BUGGY]    Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isPropertyAssignmentInExpression(thenBranch)||  isLowerPrecedenceInExpression(thenBranch))  {	  if(isPropertyAssignmentInExpression(elseBranch))    {    	non-compiled	[CE]  	7	None	replace
58	[BUG]  [BUGGY]  if(thenBranch!=  null  &&  isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]      if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {    [BUGGY]  if(thenBranch!=  null  &&  isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]    Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(thenBranch!=  null  &&  isPropertyAssignmentInExpression(elseBranch))  {	  if(isPropertyAssignmentInExpression(propertyBranch))    {    	non-compiled	[CE]  	11	None	replace
59	[BUG]  [BUGGY]  if(!NodeUtil.isLiteralValue(thenBranch)&&  isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]      if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {    [BUGGY]  if(!NodeUtil.isLiteralValue(thenBranch)&&  isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]    Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(!NodeUtil.isLiteralValue(thenBranch)&&  isPropertyAssignmentInExpression(elseBranch))  {	  if(isPropertyAssignmentInExpression(propertyBranch))    {    	non-compiled	[CE]  	11	None	replace
60	[BUG]  [BUGGY]  if(thenBranch  ==  null  ||  isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]      if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {    [BUGGY]  if(thenBranch  ==  null  ||  isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]    Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(thenBranch  ==  null  ||  isPropertyAssignmentInExpression(elseBranch))  {	  if(isPropertyAssignmentInExpression(propertyBranch))    {    	non-compiled	[CE]  	11	None	replace
61	[BUG]  [BUGGY]  if(thenBranch!=  null  &&  isPropertyAssignmentInExpression(propertyBranch))  {  [CE]  [FE]                  AssertionFailedError    [CONTEXT]      if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {    [BUGGY]  if(thenBranch!=  null  &&  isPropertyAssignmentInExpression(propertyBranch))  {  [BUGGY]    Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(thenBranch!=  null  &&  isPropertyAssignmentInExpression(propertyBranch))  {	  if(isPropertyAssignmentInExpression(propertyBranch))    {    	non-compiled	[CE]  	11	None	replace
62	[BUG]  [BUGGY]  if(NodeUtil.isBlockExpression(thenBranch)&&  isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]      if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {    [BUGGY]  if(NodeUtil.isBlockExpression(thenBranch)&&  isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]    Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(NodeUtil.isBlockExpression(thenBranch)&&  isPropertyAssignmentInExpression(elseBranch))  {	  if(isPropertyAssignmentInExpression(thenBranch))    {    	non-compiled	[CE]  	1	None	replace
63	[BUG]  [BUGGY]  if(getPropertyAssignmentInExpression(elseBranch)!=  null)  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]      if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {    [BUGGY]  if(getPropertyAssignmentInExpression(elseBranch)!=  null)  {  [BUGGY]    Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(getPropertyAssignmentInExpression(elseBranch)!=  null)  {	  if(getBlockExpression(thenBranch)!=    null)    {    	non-compiled	[CE]  	9	None	replace
64	[BUG]  [BUGGY]  if(getPropertyAssignmentInExpression(elseBranch)  ==  null)  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]      if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {    [BUGGY]  if(getPropertyAssignmentInExpression(elseBranch)  ==  null)  {  [BUGGY]    Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(getPropertyAssignmentInExpression(elseBranch)  ==  null)  {	  if(getBlockExpression(thenBranch)!=    null)    {    	non-compiled	[CE]  	9	None	replace
65	[BUG]  [BUGGY]  if(getAssignmentInExpression(elseBranch)!=  null)  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]      if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {    [BUGGY]  if(getAssignmentInExpression(elseBranch)!=  null)  {  [BUGGY]    Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(getAssignmentInExpression(elseBranch)!=  null)  {	  if(getBlockExpression(thenBranch)!=    null)    {    	non-compiled	[CE]  	9	None	replace
66	[BUG]  [BUGGY]  if(isBlockExpression(cond)&&  isLowerPrecedenceInExpression(thenBranch)&&  isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]                  AssertionFailedError    [CONTEXT]      if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {    [BUGGY]  if(isBlockExpression(cond)&&  isLowerPrecedenceInExpression(thenBranch)&&  isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]    Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isBlockExpression(cond)&&  isLowerPrecedenceInExpression(thenBranch)&&  isPropertyAssignmentInExpression(elseBranch))  {	  if(isLowerPrecedenceInExpression(thenBranch)&&    isPropertyAssignmentInExpression(elseBranch))    {    	non-compiled	[CE]  	6	None	replace
67	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(thenBranch)&&  isPropertyAssignmentInExpression(elseBranch)||  getBlockExpression(thenBranch))  {  [CE]  [FE]                    AssertionFailedError    [CONTEXT]      if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {    [BUGGY]  if(isLowerPrecedenceInExpression(thenBranch)&&  isPropertyAssignmentInExpression(elseBranch)||  getBlockExpression(thenBranch))  {  [BUGGY]    Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(thenBranch)&&  isPropertyAssignmentInExpression(elseBranch)||  getBlockExpression(thenBranch))  {	  if(isLowerPrecedenceInExpression(thenBranch)&&    isPropertyAssignmentInExpression(elseBranch))    {    	non-compiled	[CE]  	6	None	replace
68	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(elseBranch)&&  isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]                      AssertionFailedError    [CONTEXT]      if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {    [BUGGY]  if(isLowerPrecedenceInExpression(elseBranch)&&  isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]    Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(elseBranch)&&  isPropertyAssignmentInExpression(elseBranch))  {	  if(isLowerPrecedenceInExpression(thenBranch)&&    isPropertyAssignmentInExpression(elseBranch))    {    	non-compiled	[CE]  	6	None	replace
69	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(thenBranch,  OR_PRECEDENCE))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]      if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {    [BUGGY]  if(isLowerPrecedenceInExpression(thenBranch,  OR_PRECEDENCE))  {  [BUGGY]    Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(thenBranch,  OR_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(thenBranch))    {    	non-compiled	[CE]  	15	None	replace
70	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(thenBranch,  OR_PRECEDENCE)||  isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]      if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {    [BUGGY]  if(isLowerPrecedenceInExpression(thenBranch,  OR_PRECEDENCE)||  isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]    Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(thenBranch,  OR_PRECEDENCE)||  isPropertyAssignmentInExpression(elseBranch))  {	  if(isLowerPrecedenceInExpression(thenBranch))    {    	non-compiled	[CE]  	15	None	replace
71	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(thenBranch,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]      if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {    [BUGGY]  if(isLowerPrecedenceInExpression(thenBranch,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]    Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(thenBranch,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(elseBranch))  {	  if(isLowerPrecedenceInExpression(thenBranch))    {    	non-compiled	[CE]  	15	None	replace
72	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(thenBranch)&&  isFoldableExpressBlock(elseBranch))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]      if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {    [BUGGY]  if(!isLowerPrecedenceInExpression(thenBranch)&&  isFoldableExpressBlock(elseBranch))  {  [BUGGY]    Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(!isLowerPrecedenceInExpression(thenBranch)&&  isFoldableExpressBlock(elseBranch))  {	  if(isLowerPrecedenceInExpression(thenBranch)||    isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	3	None	replace
73	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(elseBranch)&&  isFoldableExpressBlock(elseBranch))  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]      if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {    [BUGGY]  if(isLowerPrecedenceInExpression(elseBranch)&&  isFoldableExpressBlock(elseBranch))  {  [BUGGY]    Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(elseBranch)&&  isFoldableExpressBlock(elseBranch))  {	  if(isLowerPrecedenceInExpression(thenBranch)||    isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	3	None	replace
74	[BUG]  [BUGGY]  if(isBlockExpression(thenBranch)||  isLowerPrecedenceInExpression(elseBranch))  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]      if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {    [BUGGY]  if(isBlockExpression(thenBranch)||  isLowerPrecedenceInExpression(elseBranch))  {  [BUGGY]    Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isBlockExpression(thenBranch)||  isLowerPrecedenceInExpression(elseBranch))  {	  if(isLowerPrecedenceInExpression(thenBranch)||    isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	3	None	replace
75	[BUG]  [BUGGY]  Node  thenBranch  =  getBlockExpression(elseBranch);  [CE]  [FE]                      AssertionFailedError    [CONTEXT]      if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {    [BUGGY]  Node  thenBranch  =  getBlockExpression(elseBranch);  [BUGGY]    Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	Node  thenBranch  =  getBlockExpression(elseBranch);	      	non-compiled	[CE]  	8	None	replace
76	[BUG]  [BUGGY]  Node  thenBranch  =  cond.getFirstChild();  [CE]  [FE]                        AssertionFailedError    [CONTEXT]      if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {    [BUGGY]  Node  thenBranch  =  cond.getFirstChild();  [BUGGY]    Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	Node  thenBranch  =  cond.getFirstChild();	      	non-compiled	[CE]  	8	None	replace
77	[BUG]  [BUGGY]  if(isBlockExpression(thenBranch)&&  isFoldableExpressBlock(propertyBranch))  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]      if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {    [BUGGY]  if(isBlockExpression(thenBranch)&&  isFoldableExpressBlock(propertyBranch))  {  [BUGGY]    Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isBlockExpression(thenBranch)&&  isFoldableExpressBlock(propertyBranch))  {	  if(isPropertyAssignmentInExpression(propertyBranch)&&    isFoldableExpressBlock(thenBranch))    {    	non-compiled	[CE]  	4	None	replace
78	[BUG]  [BUGGY]  if(isBlockExpression(thenBranch)&&  isPropertyAssignmentInExpression(propertyBranch))  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]      if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {    [BUGGY]  if(isBlockExpression(thenBranch)&&  isPropertyAssignmentInExpression(propertyBranch))  {  [BUGGY]    Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isBlockExpression(thenBranch)&&  isPropertyAssignmentInExpression(propertyBranch))  {	  if(isPropertyAssignmentInExpression(propertyBranch)&&    isFoldableExpressBlock(thenBranch))    {    	non-compiled	[CE]  	4	None	replace
79	[BUG]  [BUGGY]  if(thenBranch!=  null  &&  isLowerPrecedenceInExpression(cond))  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]      if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {    [BUGGY]  if(thenBranch!=  null  &&  isLowerPrecedenceInExpression(cond))  {  [BUGGY]    Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(thenBranch!=  null  &&  isLowerPrecedenceInExpression(cond))  {	  if(isLowerPrecedenceInExpression(cond))    {    	non-compiled	[CE]  	13	None	replace
80	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpression(elseBranch)&&  isFoldableExpressBlock(elseBranch))  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]      if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {    [BUGGY]  if(isPropertyAssignmentInExpression(elseBranch)&&  isFoldableExpressBlock(elseBranch))  {  [BUGGY]    Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isPropertyAssignmentInExpression(elseBranch)&&  isFoldableExpressBlock(elseBranch))  {	  if(isPropertyAssignmentInExpression(thenBranch)&&    isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	5	None	replace
81	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpression(thenBranch)&&  elseBranch!=  getBlockExpression(elseBranch))  {  [CE]  [FE]                  AssertionFailedError    [CONTEXT]      if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {    [BUGGY]  if(isPropertyAssignmentInExpression(thenBranch)&&  elseBranch!=  getBlockExpression(elseBranch))  {  [BUGGY]    Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isPropertyAssignmentInExpression(thenBranch)&&  elseBranch!=  getBlockExpression(elseBranch))  {	  if(isPropertyAssignmentInExpression(thenBranch)&&    isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	5	None	replace
82	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(thenBranch)&&  elseBranchIsExpressionBlock  ||  isFoldableExpressBlock(elseBranch))  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]      if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {    [BUGGY]  if(isLowerPrecedenceInExpression(thenBranch)&&  elseBranchIsExpressionBlock  ||  isFoldableExpressBlock(elseBranch))  {  [BUGGY]    Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(thenBranch)&&  elseBranchIsExpressionBlock  ||  isFoldableExpressBlock(elseBranch))  {	  if(isLowerPrecedenceInExpression(thenBranch)&&    isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	2	None	replace
83	[BUG]  [BUGGY]  if(!isFoldableExpressBlock(thenBranch)&&!isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]      if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {    [BUGGY]  if(!isFoldableExpressBlock(thenBranch)&&!isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]    Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(!isFoldableExpressBlock(thenBranch)&&!isPropertyAssignmentInExpression(elseBranch))  {	  if(!isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	12	None	replace
84	[BUG]  [BUGGY]  if(!isPropertyAssignmentBlock(thenBranch))  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]      if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {    [BUGGY]  if(!isPropertyAssignmentBlock(thenBranch))  {  [BUGGY]    Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(!isPropertyAssignmentBlock(thenBranch))  {	  if(!isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	12	None	replace
85	[BUG]  [BUGGY]  if(!isFoldableExpressBlock(thenBranch)||!isPropertyAssignmentBlock(elseBranch))  {  [CE]  [FE]                  AssertionFailedError    [CONTEXT]      if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {    [BUGGY]  if(!isFoldableExpressBlock(thenBranch)||!isPropertyAssignmentBlock(elseBranch))  {  [BUGGY]    Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(!isFoldableExpressBlock(thenBranch)||!isPropertyAssignmentBlock(elseBranch))  {	  if(!isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	12	None	replace
86	[BUG]  [BUGGY]  if(isBlockExpression(thenBranch)||  isPropertyAssignmentInExpression(cond))  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]      if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {    [BUGGY]  if(isBlockExpression(thenBranch)||  isPropertyAssignmentInExpression(cond))  {  [BUGGY]    Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isBlockExpression(thenBranch)||  isPropertyAssignmentInExpression(cond))  {	  if(isPropertyAssignmentInExpression(cond))    {    	non-compiled	[CE]  	14	None	replace
87	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(thenBranch)&&!isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]                  AssertionFailedError    [CONTEXT]      if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {    [BUGGY]  if(!isLowerPrecedenceInExpression(thenBranch)&&!isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]    Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(!isLowerPrecedenceInExpression(thenBranch)&&!isPropertyAssignmentInExpression(elseBranch))  {	  if(isLowerPrecedenceInExpression(thenBranch)&&    isPropertyAssignmentInExpression(elseBranch))    {    	non-compiled	[CE]  	6	None	replace
88	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]      if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {    [BUGGY]  if(!isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]    Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(!isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(elseBranch))  {	  if(isPropertyAssignmentInExpression(thenBranch))    {    	non-compiled	[CE]  	1	None	replace
89	[BUG]  [BUGGY]  if(isBlockExpression(cond))  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]      if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {    [BUGGY]  if(isBlockExpression(cond))  {  [BUGGY]    Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isBlockExpression(cond))  {	  if(isPropertyAssignmentInExpression(thenBranch))    {    	non-compiled	[CE]  	1	None	replace
90	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(thenBranch)||  isPropertyAssignmentBlock(elseBranch))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]      if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {    [BUGGY]  if(isLowerPrecedenceInExpression(thenBranch)||  isPropertyAssignmentBlock(elseBranch))  {  [BUGGY]    Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(thenBranch)||  isPropertyAssignmentBlock(elseBranch))  {	  if(isLowerPrecedenceInExpression(thenBranch)||    isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	3	None	replace
91	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(thenBranch))  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]      if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {    [BUGGY]  if(!isLowerPrecedenceInExpression(thenBranch))  {  [BUGGY]    Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(!isLowerPrecedenceInExpression(thenBranch))  {	  if(!isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	12	None	replace
92	[BUG]  [BUGGY]  if(!isFoldableExpressBlock(thenBranch))  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]      if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {    [BUGGY]  if(!isFoldableExpressBlock(thenBranch))  {  [BUGGY]    Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(!isFoldableExpressBlock(thenBranch))  {	  if(!isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	12	None	replace
93	[BUG]  [BUGGY]  if(!isExpressionBlock(thenBranch))  {  [CE]  [FE]                  AssertionFailedError    [CONTEXT]      if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {    [BUGGY]  if(!isExpressionBlock(thenBranch))  {  [BUGGY]    Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(!isExpressionBlock(thenBranch))  {	  if(!isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	12	None	replace
94	[BUG]  [BUGGY]  Node  thenAssign  =  getBlockExpression(thenBranch);  [CE]  [FE]                      AssertionFailedError    [CONTEXT]      if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {    [BUGGY]  Node  thenAssign  =  getBlockExpression(thenBranch);  [BUGGY]    Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	Node  thenAssign  =  getBlockExpression(thenBranch);	      	non-compiled	[CE]  	8	None	replace
95	[BUG]  [BUGGY]  Node  thenAssign  =  elseBranch.getNext();  [CE]  [FE]                        AssertionFailedError    [CONTEXT]      if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {    [BUGGY]  Node  thenAssign  =  elseBranch.getNext();  [BUGGY]    Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	Node  thenAssign  =  elseBranch.getNext();	      	non-compiled	[CE]  	8	None	replace
96	[BUG]  [BUGGY]  Node  thenOp  =  getBlockExpression(thenBranch);  [CE]  [FE]                          AssertionFailedError    [CONTEXT]      if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {    [BUGGY]  Node  thenOp  =  getBlockExpression(thenBranch);  [BUGGY]    Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	Node  thenOp  =  getBlockExpression(thenBranch);	      	non-compiled	[CE]  	8	None	replace
97	[BUG]  [BUGGY]  Node  thenAssign  =  cond.getFirstChild();  [CE]  [FE]                            AssertionFailedError    [CONTEXT]      if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {    [BUGGY]  Node  thenAssign  =  cond.getFirstChild();  [BUGGY]    Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	Node  thenAssign  =  cond.getFirstChild();	      	non-compiled	[CE]  	8	None	replace
98	[BUG]  [BUGGY]  Node  thenAssign  =  n.getFirstChild();  [CE]  [FE]                              AssertionFailedError    [CONTEXT]      if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {    [BUGGY]  Node  thenAssign  =  n.getFirstChild();  [BUGGY]    Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	Node  thenAssign  =  n.getFirstChild();	      	non-compiled	[CE]  	8	None	replace
99	[BUG]  [BUGGY]  Node  thenAssign  =  getBlockExpression(elseBranch);  [CE]  [FE]                                AssertionFailedError    [CONTEXT]      if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {    [BUGGY]  Node  thenAssign  =  getBlockExpression(elseBranch);  [BUGGY]    Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	Node  thenAssign  =  getBlockExpression(elseBranch);	      	non-compiled	[CE]  	8	None	replace
100	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)||  isPropertyAssignmentInExpression(cond))  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]      if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {    [BUGGY]  if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)||  isPropertyAssignmentInExpression(cond))  {  [BUGGY]    Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)||  isPropertyAssignmentInExpression(cond))  {	  if(isPropertyAssignmentInExpression(cond))    {    	non-compiled	[CE]  	14	None	replace
101	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(cond))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]      if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {    [BUGGY]  if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(cond))  {  [BUGGY]    Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(cond))  {	  if(isPropertyAssignmentInExpression(cond))    {    	non-compiled	[CE]  	14	None	replace
102	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(cond))  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]      if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {    [BUGGY]  if(!isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(cond))  {  [BUGGY]    Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(!isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(cond))  {	  if(isPropertyAssignmentInExpression(cond))    {    	non-compiled	[CE]  	14	None	replace
103	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE))  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]      if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {    [BUGGY]  if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE))  {  [BUGGY]    Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE))  {	  if(isPropertyAssignmentInExpression(cond))    {    	non-compiled	[CE]  	14	None	replace
104	[BUG]  [BUGGY]  if(NodeUtil.isBlockExpression(thenBranch)&&  isPropertyAssignmentInExpression(cond))  {  [CE]  [FE]                  AssertionFailedError    [CONTEXT]      if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {    [BUGGY]  if(NodeUtil.isBlockExpression(thenBranch)&&  isPropertyAssignmentInExpression(cond))  {  [BUGGY]    Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(NodeUtil.isBlockExpression(thenBranch)&&  isPropertyAssignmentInExpression(cond))  {	  if(isPropertyAssignmentInExpression(cond))    {    	non-compiled	[CE]  	14	None	replace
105	[BUG]  [BUGGY]  if(NodeUtil.isBlockExpression(thenBranch)||  isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]      if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {    [BUGGY]  if(NodeUtil.isBlockExpression(thenBranch)||  isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]    Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(NodeUtil.isBlockExpression(thenBranch)||  isPropertyAssignmentInExpression(elseBranch))  {	  if(isPropertyAssignmentInExpression(propertyBranch))    {    	non-compiled	[CE]  	11	None	replace
106	[BUG]  [BUGGY]  if(getBlockExpression(thenBranch)!=  null  &&  isLowerPrecedenceInExpression(thenBranch))  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]      if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {    [BUGGY]  if(getBlockExpression(thenBranch)!=  null  &&  isLowerPrecedenceInExpression(thenBranch))  {  [BUGGY]    Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(getBlockExpression(thenBranch)!=  null  &&  isLowerPrecedenceInExpression(thenBranch))  {	  if(getBlockExpression(thenBranch)!=    null)    {    	non-compiled	[CE]  	9	None	replace
107	[BUG]  [BUGGY]  if(getBlockExpression(thenBranch)!=  null  &&  elseBranch.getType()  ==  Token.VAR)  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]      if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {    [BUGGY]  if(getBlockExpression(thenBranch)!=  null  &&  elseBranch.getType()  ==  Token.VAR)  {  [BUGGY]    Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(getBlockExpression(thenBranch)!=  null  &&  elseBranch.getType()  ==  Token.VAR)  {	  if(getBlockExpression(thenBranch)!=    null)    {    	non-compiled	[CE]  	9	None	replace
108	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpression(thenBranch)&&  elseBranchIsExpressionBlock)  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]      if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {    [BUGGY]  if(isPropertyAssignmentInExpression(thenBranch)&&  elseBranchIsExpressionBlock)  {  [BUGGY]    Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isPropertyAssignmentInExpression(thenBranch)&&  elseBranchIsExpressionBlock)  {	  if(isPropertyAssignmentInExpression(thenBranch)&&    isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	5	None	replace
109	[BUG]  [BUGGY]  if(isLowerBlockExpression(thenBranch)&&  isFoldableExpressBlock(elseBranch))  {  [CE]  [FE]                  AssertionFailedError    [CONTEXT]      if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {    [BUGGY]  if(isLowerBlockExpression(thenBranch)&&  isFoldableExpressBlock(elseBranch))  {  [BUGGY]    Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerBlockExpression(thenBranch)&&  isFoldableExpressBlock(elseBranch))  {	  if(isPropertyAssignmentInExpression(thenBranch)&&    isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	5	None	replace
110	[BUG]  [BUGGY]  if(isBlockExpression(cond,  OR_PRECEDENCE)&&  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]      if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {    [BUGGY]  if(isBlockExpression(cond,  OR_PRECEDENCE)&&  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE))  {  [BUGGY]    Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isBlockExpression(cond,  OR_PRECEDENCE)&&  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(thenBranch))    {    	non-compiled	[CE]  	15	None	replace
111	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(expr))  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]      if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {    [BUGGY]  if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(expr))  {  [BUGGY]    Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(expr))  {	  if(isLowerPrecedenceInExpression(thenBranch))    {    	non-compiled	[CE]  	15	None	replace
112	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  [CE]  [FE]                AssertionFailedError    [CONTEXT]      if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {    [BUGGY]  if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  [BUGGY]    Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&	  if(isLowerPrecedenceInExpression(thenBranch))    {    	non-compiled	[CE]  	15	None	replace
113	[BUG]  [BUGGY]  if(thenBranch!=  null  &&  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE))  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]      if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {    [BUGGY]  if(thenBranch!=  null  &&  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE))  {  [BUGGY]    Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(thenBranch!=  null  &&  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(cond))    {    	non-compiled	[CE]  	13	None	replace
114	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(thenBranch)&&  elseBranchIsExpressionBlock)  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]      if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {    [BUGGY]  if(isLowerPrecedenceInExpression(thenBranch)&&  elseBranchIsExpressionBlock)  {  [BUGGY]    Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(thenBranch)&&  elseBranchIsExpressionBlock)  {	  if(isLowerPrecedenceInExpression(thenBranch)&&    isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	2	None	replace
115	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond)&&  isPropertyAssignmentInExpression(propertyBranch)&&  isFoldableExpressBlock(elseBranch))  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]      if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {    [BUGGY]  if(isLowerPrecedenceInExpression(cond)&&  isPropertyAssignmentInExpression(propertyBranch)&&  isFoldableExpressBlock(elseBranch))  {  [BUGGY]    Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(cond)&&  isPropertyAssignmentInExpression(propertyBranch)&&  isFoldableExpressBlock(elseBranch))  {	  if(isPropertyAssignmentInExpression(propertyBranch)&&    isFoldableExpressBlock(thenBranch))    {    	non-compiled	[CE]  	4	None	replace
116	[BUG]  [BUGGY]  if(isBlockExpression(thenBranch)&&  isPropertyAssignmentInExpression(propertyBranch)&&  isFoldableExpressBlock(elseBranch))  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]      if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {    [BUGGY]  if(isBlockExpression(thenBranch)&&  isPropertyAssignmentInExpression(propertyBranch)&&  isFoldableExpressBlock(elseBranch))  {  [BUGGY]    Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isBlockExpression(thenBranch)&&  isPropertyAssignmentInExpression(propertyBranch)&&  isFoldableExpressBlock(elseBranch))  {	  if(isPropertyAssignmentInExpression(propertyBranch)&&    isFoldableExpressBlock(thenBranch))    {    	non-compiled	[CE]  	4	None	replace
117	[BUG]  [BUGGY]  if(getBlockExpression(thenBranch)  ==  null  ||  getBlockExpression(thenBranch)!=  null)  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]      if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {    [BUGGY]  if(getBlockExpression(thenBranch)  ==  null  ||  getBlockExpression(thenBranch)!=  null)  {  [BUGGY]    Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(getBlockExpression(thenBranch)  ==  null  ||  getBlockExpression(thenBranch)!=  null)  {	  if(getBlockExpression(thenBranch)    ==    null)    {    	non-compiled	[CE]  	10	None	replace
118	[BUG]  [BUGGY]  if(getBlockExpression(thenBranch)  ==  null  ||  isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]      if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {    [BUGGY]  if(getBlockExpression(thenBranch)  ==  null  ||  isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]    Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(getBlockExpression(thenBranch)  ==  null  ||  isPropertyAssignmentInExpression(elseBranch))  {	  if(getBlockExpression(thenBranch)    ==    null)    {    	non-compiled	[CE]  	10	None	replace
119	[BUG]  [BUGGY]  if(getBlockExpression(thenBranch)  ==  null  ||  isLowerPrecedenceInExpression(thenBranch))  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]      if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {    [BUGGY]  if(getBlockExpression(thenBranch)  ==  null  ||  isLowerPrecedenceInExpression(thenBranch))  {  [BUGGY]    Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(getBlockExpression(thenBranch)  ==  null  ||  isLowerPrecedenceInExpression(thenBranch))  {	  if(getBlockExpression(thenBranch)    ==    null)    {    	non-compiled	[CE]  	10	None	replace
120	[BUG]  [BUGGY]  if(getBlockExpression(thenBranch)  ==  null  &&  isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]                AssertionFailedError    [CONTEXT]      if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {    [BUGGY]  if(getBlockExpression(thenBranch)  ==  null  &&  isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]    Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(getBlockExpression(thenBranch)  ==  null  &&  isPropertyAssignmentInExpression(elseBranch))  {	  if(getBlockExpression(thenBranch)    ==    null)    {    	non-compiled	[CE]  	10	None	replace
