bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpression(cond)||  isFoldableExpressBlock(thenBranch))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isPropertyAssignmentInExpression(cond)||  isFoldableExpressBlock(thenBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isPropertyAssignmentInExpression(cond)||  isFoldableExpressBlock(thenBranch))  {	  if(isPropertyAssignmentInExpression(cond)&&    isFoldableExpressBlock(thenBranch))    {    	non-compiled	[CE]  	41	None	replace
2	[BUG]  [BUGGY]  if(isBlockExpression(cond)&&  isFoldableExpressBlock(thenBranch))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isBlockExpression(cond)&&  isFoldableExpressBlock(thenBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isBlockExpression(cond)&&  isFoldableExpressBlock(thenBranch))  {	  if(isPropertyAssignmentInExpression(cond)&&    isFoldableExpressBlock(thenBranch))    {    	non-compiled	[CE]  	41	None	replace
3	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpression(cond)&&  isFoldableExpressBlock(elseBranch))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isPropertyAssignmentInExpression(cond)&&  isFoldableExpressBlock(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isPropertyAssignmentInExpression(cond)&&  isFoldableExpressBlock(elseBranch))  {	  if(isPropertyAssignmentInExpression(cond)&&    isFoldableExpressBlock(thenBranch))    {    	non-compiled	[CE]  	41	None	replace
4	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond)||  isFoldableExpressBlock(thenBranch))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(cond)||  isFoldableExpressBlock(thenBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(cond)||  isFoldableExpressBlock(thenBranch))  {	  if(isPropertyAssignmentInExpression(cond)&&    isFoldableExpressBlock(thenBranch))    {    	non-compiled	[CE]  	41	None	replace
5	[BUG]  [BUGGY]  if(isBlockExpression(cond)&&  isFoldableExpressBlock(elseBranch))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isBlockExpression(cond)&&  isFoldableExpressBlock(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isBlockExpression(cond)&&  isFoldableExpressBlock(elseBranch))  {	  if(isPropertyAssignmentInExpression(cond)&&    isFoldableExpressBlock(thenBranch))    {    	non-compiled	[CE]  	41	None	replace
6	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(thenBranch)&&  elseBranchIsVar)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(thenBranch)&&  elseBranchIsVar)  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(thenBranch)&&  elseBranchIsVar)  {	  if(isLowerPrecedenceInExpression(thenBranch)&&    elseBranchIsExpressionBlock)    {    	non-compiled	[CE]  	114	None	replace
7	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond)&&  elseBranchIsExpressionBlock)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(cond)&&  elseBranchIsExpressionBlock)  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(cond)&&  elseBranchIsExpressionBlock)  {	  if(isLowerPrecedenceInExpression(thenBranch)&&    elseBranchIsExpressionBlock)    {    	non-compiled	[CE]  	114	None	replace
8	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(thenBranch)||  elseBranchIsExpressionBlock)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(thenBranch)||  elseBranchIsExpressionBlock)  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(thenBranch)||  elseBranchIsExpressionBlock)  {	  if(isLowerPrecedenceInExpression(thenBranch)&&    elseBranchIsExpressionBlock)    {    	non-compiled	[CE]  	114	None	replace
9	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpression(cond)||  isLowerPrecedenceInExpression(thenBranch)&&  elseBranchIsExpressionBlock)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isPropertyAssignmentInExpression(cond)||  isLowerPrecedenceInExpression(thenBranch)&&  elseBranchIsExpressionBlock)  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isPropertyAssignmentInExpression(cond)||  isLowerPrecedenceInExpression(thenBranch)&&  elseBranchIsExpressionBlock)  {	  if(isLowerPrecedenceInExpression(thenBranch)&&    elseBranchIsExpressionBlock)    {    	non-compiled	[CE]  	114	None	replace
10	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpression(cond)&&  elseBranchIsExpressionBlock)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isPropertyAssignmentInExpression(cond)&&  elseBranchIsExpressionBlock)  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isPropertyAssignmentInExpression(cond)&&  elseBranchIsExpressionBlock)  {	  if(isLowerPrecedenceInExpression(thenBranch)&&    elseBranchIsExpressionBlock)    {    	non-compiled	[CE]  	114	None	replace
11	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(thenBranch)&&  elseBranchIsExpressionBlock)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(!isLowerPrecedenceInExpression(thenBranch)&&  elseBranchIsExpressionBlock)  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(!isLowerPrecedenceInExpression(thenBranch)&&  elseBranchIsExpressionBlock)  {	  if(isLowerPrecedenceInExpression(thenBranch)&&    elseBranchIsExpressionBlock)    {    	non-compiled	[CE]  	114	None	replace
12	[BUG]  [BUGGY]  if(getBlockExpression(thenBranch)||  isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(getBlockExpression(thenBranch)||  isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(getBlockExpression(thenBranch)||  isPropertyAssignmentInExpression(elseBranch))  {	  if(isBlockExpression(thenBranch)&&    isPropertyAssignmentInExpression(elseBranch))    {    	non-compiled	[CE]  	32	None	replace
13	[BUG]  [BUGGY]  if(getBlockExpression(thenBranch)&&  isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(getBlockExpression(thenBranch)&&  isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(getBlockExpression(thenBranch)&&  isPropertyAssignmentInExpression(elseBranch))  {	  if(isBlockExpression(thenBranch)&&    isPropertyAssignmentInExpression(elseBranch))    {    	non-compiled	[CE]  	32	None	replace
14	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond)&&  isPropertyAssignmentInExpression(thenBranch))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(cond)&&  isPropertyAssignmentInExpression(thenBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(cond)&&  isPropertyAssignmentInExpression(thenBranch))  {	  if(isBlockExpression(cond)&&    isPropertyAssignmentInExpression(elseBranch))    {    	non-compiled	[CE]  	33	None	replace
15	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(cond)&&  isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(!isLowerPrecedenceInExpression(cond)&&  isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(!isLowerPrecedenceInExpression(cond)&&  isPropertyAssignmentInExpression(elseBranch))  {	  if(isBlockExpression(cond)&&    isPropertyAssignmentInExpression(elseBranch))    {    	non-compiled	[CE]  	33	None	replace
16	[BUG]  [BUGGY]  if(getBlockExpression(thenBranch)!=  null  ||  elseBranch.getType()  ==  Token.VAR)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(getBlockExpression(thenBranch)!=  null  ||  elseBranch.getType()  ==  Token.VAR)  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(getBlockExpression(thenBranch)!=  null  ||  elseBranch.getType()  ==  Token.VAR)  {	  if(getBlockExpression(thenBranch)!=    null    &&    elseBranch.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  	107	None	replace
17	[BUG]  [BUGGY]  if(getBlockExpression(elseBranch)!=  null  &&  elseBranch.getType()  ==  Token.VAR)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(getBlockExpression(elseBranch)!=  null  &&  elseBranch.getType()  ==  Token.VAR)  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(getBlockExpression(elseBranch)!=  null  &&  elseBranch.getType()  ==  Token.VAR)  {	  if(getBlockExpression(thenBranch)!=    null    &&    elseBranch.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  	107	None	replace
18	[BUG]  [BUGGY]  if(getBlockExpression(thenBranch)  ==  null  &&  elseBranch.getType()  ==  Token.VAR)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(getBlockExpression(thenBranch)  ==  null  &&  elseBranch.getType()  ==  Token.VAR)  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(getBlockExpression(thenBranch)  ==  null  &&  elseBranch.getType()  ==  Token.VAR)  {	  if(getBlockExpression(thenBranch)!=    null    &&    elseBranch.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  	107	None	replace
19	[BUG]  [BUGGY]  if(getBlockExpression(cond)!=  null  &&  elseBranch.getType()  ==  Token.VAR)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(getBlockExpression(cond)!=  null  &&  elseBranch.getType()  ==  Token.VAR)  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(getBlockExpression(cond)!=  null  &&  elseBranch.getType()  ==  Token.VAR)  {	  if(getBlockExpression(thenBranch)!=    null    &&    elseBranch.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  	107	None	replace
20	[BUG]  [BUGGY]  if(getBlockExpression(thenBranch)!=  null  &&  elseBranch.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(getBlockExpression(thenBranch)!=  null  &&  elseBranch.getType()  ==  Token.FUNCTION)  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(getBlockExpression(thenBranch)!=  null  &&  elseBranch.getType()  ==  Token.FUNCTION)  {	  if(getBlockExpression(thenBranch)!=    null    &&    elseBranch.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  	107	None	replace
21	[BUG]  [BUGGY]  if(getBlockExpression(thenBranch)  ==  null  ||  elseBranch.getType()  ==  Token.VAR)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(getBlockExpression(thenBranch)  ==  null  ||  elseBranch.getType()  ==  Token.VAR)  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(getBlockExpression(thenBranch)  ==  null  ||  elseBranch.getType()  ==  Token.VAR)  {	  if(getBlockExpression(thenBranch)!=    null    &&    elseBranch.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  	107	None	replace
22	[BUG]  [BUGGY]  if(isBlockExpression(thenBranch,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isBlockExpression(thenBranch,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isBlockExpression(thenBranch,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(elseBranch))  {	  if(isLowerPrecedenceInExpression(thenBranch,    OR_PRECEDENCE)&&    isPropertyAssignmentInExpression(elseBranch))    {    	non-compiled	[CE]  	71	None	replace
23	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(thenBranch,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(!isLowerPrecedenceInExpression(thenBranch,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(!isLowerPrecedenceInExpression(thenBranch,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(elseBranch))  {	  if(isLowerPrecedenceInExpression(thenBranch,    OR_PRECEDENCE)&&    isPropertyAssignmentInExpression(elseBranch))    {    	non-compiled	[CE]  	71	None	replace
24	[BUG]  [BUGGY]  if(isBlockExpression(thenBranch)||  isPropertyAssignmentInExpression(propertyBranch))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isBlockExpression(thenBranch)||  isPropertyAssignmentInExpression(propertyBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isBlockExpression(thenBranch)||  isPropertyAssignmentInExpression(propertyBranch))  {	  if(isBlockExpression(thenBranch)&&    isPropertyAssignmentInExpression(propertyBranch))    {    	non-compiled	[CE]  	78	None	replace
25	[BUG]  [BUGGY]  if(isBlockExpression(cond)&&  isPropertyAssignmentInExpression(propertyBranch))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isBlockExpression(cond)&&  isPropertyAssignmentInExpression(propertyBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isBlockExpression(cond)&&  isPropertyAssignmentInExpression(propertyBranch))  {	  if(isBlockExpression(thenBranch)&&    isPropertyAssignmentInExpression(propertyBranch))    {    	non-compiled	[CE]  	78	None	replace
26	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond)&&  isPropertyAssignmentInExpression(propertyBranch))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(cond)&&  isPropertyAssignmentInExpression(propertyBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(cond)&&  isPropertyAssignmentInExpression(propertyBranch))  {	  if(isBlockExpression(thenBranch)&&    isPropertyAssignmentInExpression(propertyBranch))    {    	non-compiled	[CE]  	78	None	replace
27	[BUG]  [BUGGY]  if(getBlockExpression(thenBranch)||  isPropertyAssignmentInExpression(propertyBranch))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(getBlockExpression(thenBranch)||  isPropertyAssignmentInExpression(propertyBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(getBlockExpression(thenBranch)||  isPropertyAssignmentInExpression(propertyBranch))  {	  if(isBlockExpression(thenBranch)&&    isPropertyAssignmentInExpression(propertyBranch))    {    	non-compiled	[CE]  	78	None	replace
28	[BUG]  [BUGGY]  if(isBlockExpression(thenBranch)&&  isPropertyAssignmentInExpression(otherBranch))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isBlockExpression(thenBranch)&&  isPropertyAssignmentInExpression(otherBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isBlockExpression(thenBranch)&&  isPropertyAssignmentInExpression(otherBranch))  {	  if(isBlockExpression(thenBranch)&&    isPropertyAssignmentInExpression(propertyBranch))    {    	non-compiled	[CE]  	78	None	replace
29	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpression(elseBranch)&&!isFoldableExpressBlock(elseBranch))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isPropertyAssignmentInExpression(elseBranch)&&!isFoldableExpressBlock(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isPropertyAssignmentInExpression(elseBranch)&&!isFoldableExpressBlock(elseBranch))  {	  if(isPropertyAssignmentInExpression(thenBranch)||!isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	51	None	replace
30	[BUG]  [BUGGY]  if(isBlockExpression(thenBranch)||!isFoldableExpressBlock(elseBranch))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isBlockExpression(thenBranch)||!isFoldableExpressBlock(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isBlockExpression(thenBranch)||!isFoldableExpressBlock(elseBranch))  {	  if(isPropertyAssignmentInExpression(thenBranch)||!isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	51	None	replace
31	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond)&&  isPropertyAssignmentInExpression(elseBranch)||  getBlockExpression(elseBranch))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(cond)&&  isPropertyAssignmentInExpression(elseBranch)||  getBlockExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(cond)&&  isPropertyAssignmentInExpression(elseBranch)||  getBlockExpression(elseBranch))  {	  if(isLowerPrecedenceInExpression(thenBranch)&&    isPropertyAssignmentInExpression(elseBranch)||    getBlockExpression(thenBranch))    {    	non-compiled	[CE]  	67	None	replace
32	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond)&&  isPropertyAssignmentInExpression(elseBranch)||  getBlockExpression(thenBranch))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(cond)&&  isPropertyAssignmentInExpression(elseBranch)||  getBlockExpression(thenBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(cond)&&  isPropertyAssignmentInExpression(elseBranch)||  getBlockExpression(thenBranch))  {	  if(isLowerPrecedenceInExpression(thenBranch)&&    isPropertyAssignmentInExpression(elseBranch)||    getBlockExpression(thenBranch))    {    	non-compiled	[CE]  	67	None	replace
33	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(thenBranch)||  isPropertyAssignmentInExpression(elseBranch)||  getBlockExpression(thenBranch))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(thenBranch)||  isPropertyAssignmentInExpression(elseBranch)||  getBlockExpression(thenBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(thenBranch)||  isPropertyAssignmentInExpression(elseBranch)||  getBlockExpression(thenBranch))  {	  if(isLowerPrecedenceInExpression(thenBranch)&&    isPropertyAssignmentInExpression(elseBranch)||    getBlockExpression(thenBranch))    {    	non-compiled	[CE]  	67	None	replace
34	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond)&&  isPropertyAssignmentInExpression(thenBranch)||  getBlockExpression(thenBranch))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(cond)&&  isPropertyAssignmentInExpression(thenBranch)||  getBlockExpression(thenBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(cond)&&  isPropertyAssignmentInExpression(thenBranch)||  getBlockExpression(thenBranch))  {	  if(isLowerPrecedenceInExpression(thenBranch)&&    isPropertyAssignmentInExpression(elseBranch)||    getBlockExpression(thenBranch))    {    	non-compiled	[CE]  	67	None	replace
35	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(thenBranch)&&  isPropertyAssignmentInExpression(elseBranch)||  getBlockExpression(elseBranch))  {  [CE]  [FE]                                AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(thenBranch)&&  isPropertyAssignmentInExpression(elseBranch)||  getBlockExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(thenBranch)&&  isPropertyAssignmentInExpression(elseBranch)||  getBlockExpression(elseBranch))  {	  if(isLowerPrecedenceInExpression(thenBranch)&&    isPropertyAssignmentInExpression(elseBranch)||    getBlockExpression(thenBranch))    {    	non-compiled	[CE]  	67	None	replace
36	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(thenBranch)&&  isPropertyAssignmentInExpression(elseBranch)||  getBlockExpression(thenBranch))  {  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(!isLowerPrecedenceInExpression(thenBranch)&&  isPropertyAssignmentInExpression(elseBranch)||  getBlockExpression(thenBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(!isLowerPrecedenceInExpression(thenBranch)&&  isPropertyAssignmentInExpression(elseBranch)||  getBlockExpression(thenBranch))  {	  if(isLowerPrecedenceInExpression(thenBranch)&&    isPropertyAssignmentInExpression(elseBranch)||    getBlockExpression(thenBranch))    {    	non-compiled	[CE]  	67	None	replace
37	[BUG]  [BUGGY]  Node  thenAssign  =  thenBranch.getNext();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  Node  thenAssign  =  thenBranch.getNext();  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	Node  thenAssign  =  thenBranch.getNext();	  Node    thenAssign    =    elseBranch.getNext();    	non-compiled	[CE]  	95	None	replace
38	[BUG]  [BUGGY]  Node  thenAssign  =  cond.getNext();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  Node  thenAssign  =  cond.getNext();  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	Node  thenAssign  =  cond.getNext();	  Node    thenAssign    =    elseBranch.getNext();    	non-compiled	[CE]  	95	None	replace
39	[BUG]  [BUGGY]  Node  thenAssign  =  thenBranch.getParent();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  Node  thenAssign  =  thenBranch.getParent();  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	Node  thenAssign  =  thenBranch.getParent();	  Node    thenAssign    =    elseBranch.getNext();    	non-compiled	[CE]  	95	None	replace
40	[BUG]  [BUGGY]  Node  thenAssign  =  firstBranch.getNext();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  Node  thenAssign  =  firstBranch.getNext();  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	Node  thenAssign  =  firstBranch.getNext();	  Node    thenAssign    =    elseBranch.getNext();    	non-compiled	[CE]  	95	None	replace
41	[BUG]  [BUGGY]  Node  thenAssign  =  secondBranch.getNext();  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  Node  thenAssign  =  secondBranch.getNext();  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	Node  thenAssign  =  secondBranch.getNext();	  Node    thenAssign    =    elseBranch.getNext();    	non-compiled	[CE]  	95	None	replace
42	[BUG]  [BUGGY]  Node  thenAssign  =  node.getNext();  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  Node  thenAssign  =  node.getNext();  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	Node  thenAssign  =  node.getNext();	  Node    thenAssign    =    elseBranch.getNext();    	non-compiled	[CE]  	95	None	replace
43	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)||  isPropertyAssignmentInExpression(expr))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)||  isPropertyAssignmentInExpression(expr))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)||  isPropertyAssignmentInExpression(expr))  {	  if(isLowerPrecedenceInExpression(cond,    OR_PRECEDENCE)&&    isPropertyAssignmentInExpression(expr))    {    	non-compiled	[CE]  	111	None	replace
44	[BUG]  [BUGGY]  if(isBlockExpression(thenBranch)&&  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(expr))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isBlockExpression(thenBranch)&&  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(expr))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isBlockExpression(thenBranch)&&  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(expr))  {	  if(isLowerPrecedenceInExpression(cond,    OR_PRECEDENCE)&&    isPropertyAssignmentInExpression(expr))    {    	non-compiled	[CE]  	111	None	replace
45	[BUG]  [BUGGY]  if(thenBranch!=  null  &&  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(expr))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(thenBranch!=  null  &&  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(expr))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(thenBranch!=  null  &&  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(expr))  {	  if(isLowerPrecedenceInExpression(cond,    OR_PRECEDENCE)&&    isPropertyAssignmentInExpression(expr))    {    	non-compiled	[CE]  	111	None	replace
46	[BUG]  [BUGGY]  if(isBlockExpression(thenBranch,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(expr))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isBlockExpression(thenBranch,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(expr))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isBlockExpression(thenBranch,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(expr))  {	  if(isLowerPrecedenceInExpression(cond,    OR_PRECEDENCE)&&    isPropertyAssignmentInExpression(expr))    {    	non-compiled	[CE]  	111	None	replace
47	[BUG]  [BUGGY]  if(getBlockExpression(thenBranch)!=  null  &&  isLowerPrecedenceInExpression(elseBranch))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(getBlockExpression(thenBranch)!=  null  &&  isLowerPrecedenceInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(getBlockExpression(thenBranch)!=  null  &&  isLowerPrecedenceInExpression(elseBranch))  {	  if(getBlockExpression(thenBranch)!=    null    &&    isLowerPrecedenceInExpression(thenBranch))    {    	non-compiled	[CE]  	106	None	replace
48	[BUG]  [BUGGY]  if(getBlockExpression(elseBranch)!=  null  &&  isLowerPrecedenceInExpression(elseBranch))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(getBlockExpression(elseBranch)!=  null  &&  isLowerPrecedenceInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(getBlockExpression(elseBranch)!=  null  &&  isLowerPrecedenceInExpression(elseBranch))  {	  if(getBlockExpression(thenBranch)!=    null    &&    isLowerPrecedenceInExpression(thenBranch))    {    	non-compiled	[CE]  	106	None	replace
49	[BUG]  [BUGGY]  if(getBlockExpression(thenBranch)  ==  null  &&  isLowerPrecedenceInExpression(elseBranch))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(getBlockExpression(thenBranch)  ==  null  &&  isLowerPrecedenceInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(getBlockExpression(thenBranch)  ==  null  &&  isLowerPrecedenceInExpression(elseBranch))  {	  if(getBlockExpression(thenBranch)!=    null    &&    isLowerPrecedenceInExpression(thenBranch))    {    	non-compiled	[CE]  	106	None	replace
50	[BUG]  [BUGGY]  if(getBlockExpression(thenBranch)!=  null  ||  isLowerPrecedenceInExpression(thenBranch))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(getBlockExpression(thenBranch)!=  null  ||  isLowerPrecedenceInExpression(thenBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(getBlockExpression(thenBranch)!=  null  ||  isLowerPrecedenceInExpression(thenBranch))  {	  if(getBlockExpression(thenBranch)!=    null    &&    isLowerPrecedenceInExpression(thenBranch))    {    	non-compiled	[CE]  	106	None	replace
51	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond)&&!isFoldableExpressBlock(elseBranch))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(cond)&&!isFoldableExpressBlock(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(cond)&&!isFoldableExpressBlock(elseBranch))  {	  if(isLowerPrecedenceInExpression(thenBranch)&&!isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	55	None	replace
52	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(thenBranch)&&!isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(thenBranch)&&!isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(thenBranch)&&!isPropertyAssignmentInExpression(elseBranch))  {	  if(isLowerPrecedenceInExpression(thenBranch)&&!isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	55	None	replace
53	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(thenBranch)&&!isFoldableExpressBlock(elseBranch))  {  [CE]  [FE]                                AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(!isLowerPrecedenceInExpression(thenBranch)&&!isFoldableExpressBlock(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(!isLowerPrecedenceInExpression(thenBranch)&&!isFoldableExpressBlock(elseBranch))  {	  if(isLowerPrecedenceInExpression(thenBranch)&&!isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	55	None	replace
54	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(thenBranch)&&!isPropertyAssignmentBlock(elseBranch))  {  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(thenBranch)&&!isPropertyAssignmentBlock(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(thenBranch)&&!isPropertyAssignmentBlock(elseBranch))  {	  if(isLowerPrecedenceInExpression(thenBranch)&&!isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	55	None	replace
55	[BUG]  [BUGGY]  if(isLowerBlockExpression(thenBranch)||  isFoldableExpressBlock(elseBranch))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerBlockExpression(thenBranch)||  isFoldableExpressBlock(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerBlockExpression(thenBranch)||  isFoldableExpressBlock(elseBranch))  {	  if(isLowerBlockExpression(thenBranch)&&    isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	109	None	replace
56	[BUG]  [BUGGY]  if(isLowerBlockExpression(thenBranch)&&  isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerBlockExpression(thenBranch)&&  isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerBlockExpression(thenBranch)&&  isPropertyAssignmentInExpression(elseBranch))  {	  if(isLowerBlockExpression(thenBranch)&&    isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	109	None	replace
57	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpression(cond)&&  isLowerBlockExpression(thenBranch)&&  isFoldableExpressBlock(elseBranch))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isPropertyAssignmentInExpression(cond)&&  isLowerBlockExpression(thenBranch)&&  isFoldableExpressBlock(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isPropertyAssignmentInExpression(cond)&&  isLowerBlockExpression(thenBranch)&&  isFoldableExpressBlock(elseBranch))  {	  if(isLowerBlockExpression(thenBranch)&&    isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	109	None	replace
58	[BUG]  [BUGGY]  if(isLowerBlockExpression(thenBranch)&&  elseBranchIsExpressionBlock(elseBranch))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerBlockExpression(thenBranch)&&  elseBranchIsExpressionBlock(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerBlockExpression(thenBranch)&&  elseBranchIsExpressionBlock(elseBranch))  {	  if(isLowerBlockExpression(thenBranch)&&    isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	109	None	replace
59	[BUG]  [BUGGY]  if(elseBranch!=  null  &&!isFoldableExpressBlock(elseBranch))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(elseBranch!=  null  &&!isFoldableExpressBlock(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(elseBranch!=  null  &&!isFoldableExpressBlock(elseBranch))  {	  if(thenBranch!=    null    &&!isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	50	None	replace
60	[BUG]  [BUGGY]  if(elseBranch!=  null  ||!isFoldableExpressBlock(elseBranch))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(elseBranch!=  null  ||!isFoldableExpressBlock(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(elseBranch!=  null  ||!isFoldableExpressBlock(elseBranch))  {	  if(thenBranch!=    null    &&!isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	50	None	replace
61	[BUG]  [BUGGY]  if(thenBranch!=  null  ||!isFoldableExpressBlock(elseBranch))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(thenBranch!=  null  ||!isFoldableExpressBlock(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(thenBranch!=  null  ||!isFoldableExpressBlock(elseBranch))  {	  if(thenBranch!=    null    &&!isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	50	None	replace
62	[BUG]  [BUGGY]  if(elseBranch  ==  null  &&!isFoldableExpressBlock(elseBranch))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(elseBranch  ==  null  &&!isFoldableExpressBlock(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(elseBranch  ==  null  &&!isFoldableExpressBlock(elseBranch))  {	  if(thenBranch!=    null    &&!isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	50	None	replace
63	[BUG]  [BUGGY]  if(thenBranch  ==  null  &&!isFoldableExpressBlock(elseBranch))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(thenBranch  ==  null  &&!isFoldableExpressBlock(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(thenBranch  ==  null  &&!isFoldableExpressBlock(elseBranch))  {	  if(thenBranch!=    null    &&!isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	50	None	replace
64	[BUG]  [BUGGY]  if(elseBranch!=  null  &&!isFoldableExpressBlock(thenBranch))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(elseBranch!=  null  &&!isFoldableExpressBlock(thenBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(elseBranch!=  null  &&!isFoldableExpressBlock(thenBranch))  {	  if(thenBranch!=    null    &&!isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	50	None	replace
65	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpression(thenBranch)||  elseBranch!=  getBlockExpression(elseBranch))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isPropertyAssignmentInExpression(thenBranch)||  elseBranch!=  getBlockExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isPropertyAssignmentInExpression(thenBranch)||  elseBranch!=  getBlockExpression(elseBranch))  {	  if(isPropertyAssignmentInExpression(thenBranch)&&    elseBranch!=    getBlockExpression(elseBranch))    {    	non-compiled	[CE]  	81	None	replace
66	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpression(thenBranch)&&  elseBranch  ==  getBlockExpression(elseBranch))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isPropertyAssignmentInExpression(thenBranch)&&  elseBranch  ==  getBlockExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isPropertyAssignmentInExpression(thenBranch)&&  elseBranch  ==  getBlockExpression(elseBranch))  {	  if(isPropertyAssignmentInExpression(thenBranch)&&    elseBranch!=    getBlockExpression(elseBranch))    {    	non-compiled	[CE]  	81	None	replace
67	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(thenBranch)&&  elseBranch!=  getBlockExpression(elseBranch))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(thenBranch)&&  elseBranch!=  getBlockExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(thenBranch)&&  elseBranch!=  getBlockExpression(elseBranch))  {	  if(isPropertyAssignmentInExpression(thenBranch)&&    elseBranch!=    getBlockExpression(elseBranch))    {    	non-compiled	[CE]  	81	None	replace
68	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpression(thenBranch)&&  elseBranch!=  getBlockExpression(thenBranch))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isPropertyAssignmentInExpression(thenBranch)&&  elseBranch!=  getBlockExpression(thenBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isPropertyAssignmentInExpression(thenBranch)&&  elseBranch!=  getBlockExpression(thenBranch))  {	  if(isPropertyAssignmentInExpression(thenBranch)&&    elseBranch!=    getBlockExpression(elseBranch))    {    	non-compiled	[CE]  	81	None	replace
69	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpression(thenBranch)&&  elseBranch!=  getBlockExpression(elseBranch)||  isLowerPrecedenceInExpression(cond))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isPropertyAssignmentInExpression(thenBranch)&&  elseBranch!=  getBlockExpression(elseBranch)||  isLowerPrecedenceInExpression(cond))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isPropertyAssignmentInExpression(thenBranch)&&  elseBranch!=  getBlockExpression(elseBranch)||  isLowerPrecedenceInExpression(cond))  {	  if(isPropertyAssignmentInExpression(thenBranch)&&    elseBranch!=    getBlockExpression(elseBranch))    {    	non-compiled	[CE]  	81	None	replace
70	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpression(thenBranch)&&  elseBranch!=  getBlockExpression(otherBranch))  {  [CE]  [FE]                                AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isPropertyAssignmentInExpression(thenBranch)&&  elseBranch!=  getBlockExpression(otherBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isPropertyAssignmentInExpression(thenBranch)&&  elseBranch!=  getBlockExpression(otherBranch))  {	  if(isPropertyAssignmentInExpression(thenBranch)&&    elseBranch!=    getBlockExpression(elseBranch))    {    	non-compiled	[CE]  	81	None	replace
71	[BUG]  [BUGGY]  if(isBlockExpression(cond)||  isLowerPrecedenceInExpression(thenBranch)||  isFoldableExpressBlock(elseBranch))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isBlockExpression(cond)||  isLowerPrecedenceInExpression(thenBranch)||  isFoldableExpressBlock(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isBlockExpression(cond)||  isLowerPrecedenceInExpression(thenBranch)||  isFoldableExpressBlock(elseBranch))  {	  if(isPropertyAssignmentInExpression(cond)||    isLowerPrecedenceInExpression(thenBranch)||    isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	26	None	replace
72	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpression(cond)||  isLowerPrecedenceInExpression(elseBranch)||  isFoldableExpressBlock(elseBranch))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isPropertyAssignmentInExpression(cond)||  isLowerPrecedenceInExpression(elseBranch)||  isFoldableExpressBlock(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isPropertyAssignmentInExpression(cond)||  isLowerPrecedenceInExpression(elseBranch)||  isFoldableExpressBlock(elseBranch))  {	  if(isPropertyAssignmentInExpression(cond)||    isLowerPrecedenceInExpression(thenBranch)||    isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	26	None	replace
73	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond)&&  isLowerPrecedenceInExpression(thenBranch)&&  isFoldableExpressBlock(elseBranch))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(cond)&&  isLowerPrecedenceInExpression(thenBranch)&&  isFoldableExpressBlock(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(cond)&&  isLowerPrecedenceInExpression(thenBranch)&&  isFoldableExpressBlock(elseBranch))  {	  if(isPropertyAssignmentInExpression(cond)||    isLowerPrecedenceInExpression(thenBranch)||    isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	26	None	replace
74	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond)||  isPropertyAssignmentInExpression(elseBranch)||  isFoldableExpressBlock(elseBranch))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(cond)||  isPropertyAssignmentInExpression(elseBranch)||  isFoldableExpressBlock(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(cond)||  isPropertyAssignmentInExpression(elseBranch)||  isFoldableExpressBlock(elseBranch))  {	  if(isPropertyAssignmentInExpression(cond)||    isLowerPrecedenceInExpression(thenBranch)||    isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	26	None	replace
75	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond)||  isLowerPrecedenceInExpression(elseBranch)||  isFoldableExpressBlock(elseBranch))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(cond)||  isLowerPrecedenceInExpression(elseBranch)||  isFoldableExpressBlock(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(cond)||  isLowerPrecedenceInExpression(elseBranch)||  isFoldableExpressBlock(elseBranch))  {	  if(isPropertyAssignmentInExpression(cond)||    isLowerPrecedenceInExpression(thenBranch)||    isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	26	None	replace
76	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isLowerPrecedenceInExpression(thenBranch))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isLowerPrecedenceInExpression(thenBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isLowerPrecedenceInExpression(thenBranch))  {	  if(isLowerPrecedenceInExpression(cond,    OR_PRECEDENCE)||    isLowerPrecedenceInExpression(thenBranch))    {    	non-compiled	[CE]  	36	None	replace
77	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpression(cond,  OR_PRECEDENCE)||  isLowerPrecedenceInExpression(thenBranch))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isPropertyAssignmentInExpression(cond,  OR_PRECEDENCE)||  isLowerPrecedenceInExpression(thenBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isPropertyAssignmentInExpression(cond,  OR_PRECEDENCE)||  isLowerPrecedenceInExpression(thenBranch))  {	  if(isLowerPrecedenceInExpression(cond,    OR_PRECEDENCE)||    isLowerPrecedenceInExpression(thenBranch))    {    	non-compiled	[CE]  	36	None	replace
78	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)||  isLowerPrecedenceInExpression(elseBranch))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)||  isLowerPrecedenceInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)||  isLowerPrecedenceInExpression(elseBranch))  {	  if(isLowerPrecedenceInExpression(cond,    OR_PRECEDENCE)||    isLowerPrecedenceInExpression(thenBranch))    {    	non-compiled	[CE]  	36	None	replace
79	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpression(cond,  OR_PRECEDENCE)||  isLowerPrecedenceInExpression(elseBranch))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isPropertyAssignmentInExpression(cond,  OR_PRECEDENCE)||  isLowerPrecedenceInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isPropertyAssignmentInExpression(cond,  OR_PRECEDENCE)||  isLowerPrecedenceInExpression(elseBranch))  {	  if(isLowerPrecedenceInExpression(cond,    OR_PRECEDENCE)||    isLowerPrecedenceInExpression(thenBranch))    {    	non-compiled	[CE]  	36	None	replace
80	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)||  isLowerPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)||  isLowerPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)||  isLowerPropertyAssignmentInExpression(elseBranch))  {	  if(isLowerPrecedenceInExpression(cond,    OR_PRECEDENCE)||    isLowerPrecedenceInExpression(thenBranch))    {    	non-compiled	[CE]  	36	None	replace
81	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpression(cond,  OR_PRECEDENCE)&&  isLowerPrecedenceInExpression(thenBranch))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isPropertyAssignmentInExpression(cond,  OR_PRECEDENCE)&&  isLowerPrecedenceInExpression(thenBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isPropertyAssignmentInExpression(cond,  OR_PRECEDENCE)&&  isLowerPrecedenceInExpression(thenBranch))  {	  if(isLowerPrecedenceInExpression(cond,    OR_PRECEDENCE)||    isLowerPrecedenceInExpression(thenBranch))    {    	non-compiled	[CE]  	36	None	replace
82	[BUG]  [BUGGY]  if(elseBranch!=  null  &&  isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(elseBranch!=  null  &&  isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(elseBranch!=  null  &&  isPropertyAssignmentInExpression(elseBranch))  {	  if(thenBranch!=    null    &&    isPropertyAssignmentInExpression(elseBranch))    {    	non-compiled	[CE]  	58	None	replace
83	[BUG]  [BUGGY]  if(thenBranch!=  null  ||  isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(thenBranch!=  null  ||  isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(thenBranch!=  null  ||  isPropertyAssignmentInExpression(elseBranch))  {	  if(thenBranch!=    null    &&    isPropertyAssignmentInExpression(elseBranch))    {    	non-compiled	[CE]  	58	None	replace
84	[BUG]  [BUGGY]  if(elseBranch!=  null  ||  isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(elseBranch!=  null  ||  isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(elseBranch!=  null  ||  isPropertyAssignmentInExpression(elseBranch))  {	  if(thenBranch!=    null    &&    isPropertyAssignmentInExpression(elseBranch))    {    	non-compiled	[CE]  	58	None	replace
85	[BUG]  [BUGGY]  if(thenBranch  ==  null  &&  isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(thenBranch  ==  null  &&  isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(thenBranch  ==  null  &&  isPropertyAssignmentInExpression(elseBranch))  {	  if(thenBranch!=    null    &&    isPropertyAssignmentInExpression(elseBranch))    {    	non-compiled	[CE]  	58	None	replace
86	[BUG]  [BUGGY]  if(elseBranch!=  null  &&  isPropertyAssignmentInExpression(thenBranch))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(elseBranch!=  null  &&  isPropertyAssignmentInExpression(thenBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(elseBranch!=  null  &&  isPropertyAssignmentInExpression(thenBranch))  {	  if(thenBranch!=    null    &&    isPropertyAssignmentInExpression(elseBranch))    {    	non-compiled	[CE]  	58	None	replace
87	[BUG]  [BUGGY]  if(isBlockExpression(thenBranch)&&!isFoldableExpressBlock(elseBranch))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isBlockExpression(thenBranch)&&!isFoldableExpressBlock(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isBlockExpression(thenBranch)&&!isFoldableExpressBlock(elseBranch))  {	  if(isPropertyAssignmentInExpression(thenBranch)&&!isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	53	None	replace
88	[BUG]  [BUGGY]  if(isAssignmentInExpression(thenBranch)&&!isFoldableExpressBlock(elseBranch))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isAssignmentInExpression(thenBranch)&&!isFoldableExpressBlock(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isAssignmentInExpression(thenBranch)&&!isFoldableExpressBlock(elseBranch))  {	  if(isPropertyAssignmentInExpression(thenBranch)&&!isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	53	None	replace
89	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpression(thenBranch)&&  elseBranchIsExpressionBlock  ||  isFoldableExpressBlock(elseBranch))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isPropertyAssignmentInExpression(thenBranch)&&  elseBranchIsExpressionBlock  ||  isFoldableExpressBlock(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isPropertyAssignmentInExpression(thenBranch)&&  elseBranchIsExpressionBlock  ||  isFoldableExpressBlock(elseBranch))  {	  if(isPropertyAssignmentInExpression(thenBranch)&&!isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	53	None	replace
90	[BUG]  [BUGGY]  Node  thenBranchIsExpressionBlock  =  thenBranch.getNext();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  Node  thenBranchIsExpressionBlock  =  thenBranch.getNext();  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	Node  thenBranchIsExpressionBlock  =  thenBranch.getNext();	  Node    thenBranchIsExpressionBlock    =    elseBranch.getNext();    	non-compiled	[CE]  	19	None	replace
91	[BUG]  [BUGGY]  Node  thenBranchIsExpressionBlock  =  cond.getNext();  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  Node  thenBranchIsExpressionBlock  =  cond.getNext();  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	Node  thenBranchIsExpressionBlock  =  cond.getNext();	  Node    thenBranchIsExpressionBlock    =    elseBranch.getNext();    	non-compiled	[CE]  	19	None	replace
92	[BUG]  [BUGGY]  Node  thenBranchIsExpressionBlock  =  thenBranch.getParent();  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  Node  thenBranchIsExpressionBlock  =  thenBranch.getParent();  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	Node  thenBranchIsExpressionBlock  =  thenBranch.getParent();	  Node    thenBranchIsExpressionBlock    =    elseBranch.getNext();    	non-compiled	[CE]  	19	None	replace
93	[BUG]  [BUGGY]  Node  thenBranchIsExpressionBlock  =  thenBranch.getFirstChild();  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  Node  thenBranchIsExpressionBlock  =  thenBranch.getFirstChild();  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	Node  thenBranchIsExpressionBlock  =  thenBranch.getFirstChild();	  Node    thenBranchIsExpressionBlock    =    elseBranch.getNext();    	non-compiled	[CE]  	19	None	replace
94	[BUG]  [BUGGY]  Node  thenBranchIsExpressionBlock  =  secondBranch.getNext();  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  Node  thenBranchIsExpressionBlock  =  secondBranch.getNext();  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	Node  thenBranchIsExpressionBlock  =  secondBranch.getNext();	  Node    thenBranchIsExpressionBlock    =    elseBranch.getNext();    	non-compiled	[CE]  	19	None	replace
95	[BUG]  [BUGGY]  Node  thenBranchIsExpressionBlock  =  firstBranch.getNext();  [CE]  [FE]                                            AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  Node  thenBranchIsExpressionBlock  =  firstBranch.getNext();  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	Node  thenBranchIsExpressionBlock  =  firstBranch.getNext();	  Node    thenBranchIsExpressionBlock    =    elseBranch.getNext();    	non-compiled	[CE]  	19	None	replace
96	[BUG]  [BUGGY]  if(getBlockExpression(thenBranch)  ==  null  &&  isLowerPrecedenceInExpression(thenBranch))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(getBlockExpression(thenBranch)  ==  null  &&  isLowerPrecedenceInExpression(thenBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(getBlockExpression(thenBranch)  ==  null  &&  isLowerPrecedenceInExpression(thenBranch))  {	  if(getBlockExpression(thenBranch)    ==    null    ||    isLowerPrecedenceInExpression(thenBranch))    {    	non-compiled	[CE]  	119	None	replace
97	[BUG]  [BUGGY]  if(getBlockExpression(thenBranch)  ==  null  ||  isLowerPrecedenceInExpression(elseBranch))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(getBlockExpression(thenBranch)  ==  null  ||  isLowerPrecedenceInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(getBlockExpression(thenBranch)  ==  null  ||  isLowerPrecedenceInExpression(elseBranch))  {	  if(getBlockExpression(thenBranch)    ==    null    ||    isLowerPrecedenceInExpression(thenBranch))    {    	non-compiled	[CE]  	119	None	replace
98	[BUG]  [BUGGY]  if(getBlockExpression(thenBranch)  ==  null  ||  isPropertyAssignmentInExpression(thenBranch))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(getBlockExpression(thenBranch)  ==  null  ||  isPropertyAssignmentInExpression(thenBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(getBlockExpression(thenBranch)  ==  null  ||  isPropertyAssignmentInExpression(thenBranch))  {	  if(getBlockExpression(thenBranch)    ==    null    ||    isLowerPrecedenceInExpression(thenBranch))    {    	non-compiled	[CE]  	119	None	replace
99	[BUG]  [BUGGY]  if(getBlockExpression(thenBranch)!=  null  ||  isLowerPrecedenceInExpression(elseBranch))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(getBlockExpression(thenBranch)!=  null  ||  isLowerPrecedenceInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(getBlockExpression(thenBranch)!=  null  ||  isLowerPrecedenceInExpression(elseBranch))  {	  if(getBlockExpression(thenBranch)    ==    null    ||    isLowerPrecedenceInExpression(thenBranch))    {    	non-compiled	[CE]  	119	None	replace
100	[BUG]  [BUGGY]  if(getBlockExpression(thenBranch)!=  null  ||  isPropertyAssignmentInExpression(thenBranch))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(getBlockExpression(thenBranch)!=  null  ||  isPropertyAssignmentInExpression(thenBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(getBlockExpression(thenBranch)!=  null  ||  isPropertyAssignmentInExpression(thenBranch))  {	  if(getBlockExpression(thenBranch)    ==    null    ||    isLowerPrecedenceInExpression(thenBranch))    {    	non-compiled	[CE]  	119	None	replace
101	[BUG]  [BUGGY]  if(getBlockExpression(elseBranch)  ==  null  ||  isLowerPrecedenceInExpression(elseBranch))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(getBlockExpression(elseBranch)  ==  null  ||  isLowerPrecedenceInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(getBlockExpression(elseBranch)  ==  null  ||  isLowerPrecedenceInExpression(elseBranch))  {	  if(getBlockExpression(thenBranch)    ==    null    ||    isLowerPrecedenceInExpression(thenBranch))    {    	non-compiled	[CE]  	119	None	replace
102	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(thenBranch)||  isFoldableExpressBlock(elseBranch))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(!isLowerPrecedenceInExpression(thenBranch)||  isFoldableExpressBlock(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(!isLowerPrecedenceInExpression(thenBranch)||  isFoldableExpressBlock(elseBranch))  {	  if(!isLowerPrecedenceInExpression(thenBranch)&&    isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	72	None	replace
103	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(cond)&&  isFoldableExpressBlock(elseBranch))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(!isLowerPrecedenceInExpression(cond)&&  isFoldableExpressBlock(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(!isLowerPrecedenceInExpression(cond)&&  isFoldableExpressBlock(elseBranch))  {	  if(!isLowerPrecedenceInExpression(thenBranch)&&    isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	72	None	replace
104	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(thenBranch)&&  elseBranchIsExpressionBlock(elseBranch))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(!isLowerPrecedenceInExpression(thenBranch)&&  elseBranchIsExpressionBlock(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(!isLowerPrecedenceInExpression(thenBranch)&&  elseBranchIsExpressionBlock(elseBranch))  {	  if(!isLowerPrecedenceInExpression(thenBranch)&&    isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	72	None	replace
105	[BUG]  [BUGGY]  if(isBlockExpression(thenBranch)||  isFoldableExpressBlock(elseBranch))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isBlockExpression(thenBranch)||  isFoldableExpressBlock(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isBlockExpression(thenBranch)||  isFoldableExpressBlock(elseBranch))  {	  if(isBlockExpression(thenBranch)&&    isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	47	None	replace
106	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpression(otherBranch)&&  isFoldableExpressBlock(elseBranch))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isPropertyAssignmentInExpression(otherBranch)&&  isFoldableExpressBlock(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isPropertyAssignmentInExpression(otherBranch)&&  isFoldableExpressBlock(elseBranch))  {	  if(isBlockExpression(thenBranch)&&    isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	47	None	replace
107	[BUG]  [BUGGY]  if(!NodeUtil.isLiteralValue(cond)&&  isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(!NodeUtil.isLiteralValue(cond)&&  isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(!NodeUtil.isLiteralValue(cond)&&  isPropertyAssignmentInExpression(elseBranch))  {	  if(!NodeUtil.isLiteralValue(thenBranch)&&    isPropertyAssignmentInExpression(elseBranch))    {    	non-compiled	[CE]  	59	None	replace
108	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond)||!NodeUtil.isLiteralValue(thenBranch)&&  isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(cond)||!NodeUtil.isLiteralValue(thenBranch)&&  isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(cond)||!NodeUtil.isLiteralValue(thenBranch)&&  isPropertyAssignmentInExpression(elseBranch))  {	  if(!NodeUtil.isLiteralValue(thenBranch)&&    isPropertyAssignmentInExpression(elseBranch))    {    	non-compiled	[CE]  	59	None	replace
109	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond)&&!NodeUtil.isLiteralValue(thenBranch)&&  isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(cond)&&!NodeUtil.isLiteralValue(thenBranch)&&  isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(cond)&&!NodeUtil.isLiteralValue(thenBranch)&&  isPropertyAssignmentInExpression(elseBranch))  {	  if(!NodeUtil.isLiteralValue(thenBranch)&&    isPropertyAssignmentInExpression(elseBranch))    {    	non-compiled	[CE]  	59	None	replace
110	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(cond)&&  isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(NodeUtil.isLiteralValue(cond)&&  isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(NodeUtil.isLiteralValue(cond)&&  isPropertyAssignmentInExpression(elseBranch))  {	  if(!NodeUtil.isLiteralValue(thenBranch)&&    isPropertyAssignmentInExpression(elseBranch))    {    	non-compiled	[CE]  	59	None	replace
111	[BUG]  [BUGGY]  if(NodeUtil.isImmutableValue(cond)&&  isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(NodeUtil.isImmutableValue(cond)&&  isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(NodeUtil.isImmutableValue(cond)&&  isPropertyAssignmentInExpression(elseBranch))  {	  if(!NodeUtil.isLiteralValue(thenBranch)&&    isPropertyAssignmentInExpression(elseBranch))    {    	non-compiled	[CE]  	59	None	replace
112	[BUG]  [BUGGY]  if(!NodeUtil.isLiteralValue(cond)&&  isPropertyAssignmentInExpression(thenBranch))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(!NodeUtil.isLiteralValue(cond)&&  isPropertyAssignmentInExpression(thenBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(!NodeUtil.isLiteralValue(cond)&&  isPropertyAssignmentInExpression(thenBranch))  {	  if(!NodeUtil.isLiteralValue(thenBranch)&&    isPropertyAssignmentInExpression(elseBranch))    {    	non-compiled	[CE]  	59	None	replace
113	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond)||  isPropertyAssignmentBlock(elseBranch))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(cond)||  isPropertyAssignmentBlock(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(cond)||  isPropertyAssignmentBlock(elseBranch))  {	  if(isLowerPrecedenceInExpression(thenBranch)||    isPropertyAssignmentBlock(elseBranch))    {    	non-compiled	[CE]  	90	None	replace
114	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond)&&  isPropertyAssignmentBlock(elseBranch))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(cond)&&  isPropertyAssignmentBlock(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(cond)&&  isPropertyAssignmentBlock(elseBranch))  {	  if(isLowerPrecedenceInExpression(thenBranch)||    isPropertyAssignmentBlock(elseBranch))    {    	non-compiled	[CE]  	90	None	replace
115	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(thenBranch)||  isPropertyAssignmentBlock(otherBranch))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(thenBranch)||  isPropertyAssignmentBlock(otherBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(thenBranch)||  isPropertyAssignmentBlock(otherBranch))  {	  if(isLowerPrecedenceInExpression(thenBranch)||    isPropertyAssignmentBlock(elseBranch))    {    	non-compiled	[CE]  	90	None	replace
116	[BUG]  [BUGGY]  if(isBlockExpression(thenBranch)||  isPropertyAssignmentBlock(elseBranch))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isBlockExpression(thenBranch)||  isPropertyAssignmentBlock(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isBlockExpression(thenBranch)||  isPropertyAssignmentBlock(elseBranch))  {	  if(isLowerPrecedenceInExpression(thenBranch)||    isPropertyAssignmentBlock(elseBranch))    {    	non-compiled	[CE]  	90	None	replace
117	[BUG]  [BUGGY]  if(getBlockExpression(thenBranch)||  isPropertyAssignmentBlock(elseBranch))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(getBlockExpression(thenBranch)||  isPropertyAssignmentBlock(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(getBlockExpression(thenBranch)||  isPropertyAssignmentBlock(elseBranch))  {	  if(isLowerPrecedenceInExpression(thenBranch)||    isPropertyAssignmentBlock(elseBranch))    {    	non-compiled	[CE]  	90	None	replace
118	[BUG]  [BUGGY]  if(isBlockExpression(cond)&&  isLowerPrecedenceInExpression(thenBranch)&&  isFoldableExpressBlock(elseBranch))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isBlockExpression(cond)&&  isLowerPrecedenceInExpression(thenBranch)&&  isFoldableExpressBlock(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isBlockExpression(cond)&&  isLowerPrecedenceInExpression(thenBranch)&&  isFoldableExpressBlock(elseBranch))  {	  if(isPropertyAssignmentInExpression(cond)&&    isLowerPrecedenceInExpression(thenBranch)&&    isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	44	None	replace
119	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond)&&  isLowerPrecedenceInExpression(elseBranch)&&  isFoldableExpressBlock(elseBranch))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(cond)&&  isLowerPrecedenceInExpression(elseBranch)&&  isFoldableExpressBlock(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(cond)&&  isLowerPrecedenceInExpression(elseBranch)&&  isFoldableExpressBlock(elseBranch))  {	  if(isPropertyAssignmentInExpression(cond)&&    isLowerPrecedenceInExpression(thenBranch)&&    isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	44	None	replace
120	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond)&&  elseBranchIsExpressionBlock  &&  isFoldableExpressBlock(elseBranch))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(cond)&&  elseBranchIsExpressionBlock  &&  isFoldableExpressBlock(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(cond)&&  elseBranchIsExpressionBlock  &&  isFoldableExpressBlock(elseBranch))  {	  if(isPropertyAssignmentInExpression(cond)&&    isLowerPrecedenceInExpression(thenBranch)&&    isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	44	None	replace
121	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond)||  isLowerPrecedenceInExpression(thenBranch)&&  isFoldableExpressBlock(elseBranch))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(cond)||  isLowerPrecedenceInExpression(thenBranch)&&  isFoldableExpressBlock(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(cond)||  isLowerPrecedenceInExpression(thenBranch)&&  isFoldableExpressBlock(elseBranch))  {	  if(isPropertyAssignmentInExpression(cond)&&    isLowerPrecedenceInExpression(thenBranch)&&    isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	44	None	replace
122	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpression(cond)&&  isLowerPrecedenceInExpression(elseBranch)&&  isFoldableExpressBlock(elseBranch))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isPropertyAssignmentInExpression(cond)&&  isLowerPrecedenceInExpression(elseBranch)&&  isFoldableExpressBlock(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isPropertyAssignmentInExpression(cond)&&  isLowerPrecedenceInExpression(elseBranch)&&  isFoldableExpressBlock(elseBranch))  {	  if(isPropertyAssignmentInExpression(cond)&&    isLowerPrecedenceInExpression(thenBranch)&&    isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	44	None	replace
123	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond)&&  isFoldableExpressBlock(cond))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(cond)&&  isFoldableExpressBlock(cond))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(cond)&&  isFoldableExpressBlock(cond))  {	  if(isPropertyAssignmentInExpression(thenBranch)&&    isFoldableExpressBlock(cond))    {    	non-compiled	[CE]  	40	None	replace
124	[BUG]  [BUGGY]  if(isBlockExpression(thenBranch)&&  isFoldableExpressBlock(cond))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isBlockExpression(thenBranch)&&  isFoldableExpressBlock(cond))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isBlockExpression(thenBranch)&&  isFoldableExpressBlock(cond))  {	  if(isPropertyAssignmentInExpression(thenBranch)&&    isFoldableExpressBlock(cond))    {    	non-compiled	[CE]  	40	None	replace
125	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpression(thenBranch)||  isFoldableExpressBlock(cond))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isPropertyAssignmentInExpression(thenBranch)||  isFoldableExpressBlock(cond))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isPropertyAssignmentInExpression(thenBranch)||  isFoldableExpressBlock(cond))  {	  if(isPropertyAssignmentInExpression(thenBranch)&&    isFoldableExpressBlock(cond))    {    	non-compiled	[CE]  	40	None	replace
126	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(thenBranch)&&  isFoldableExpressBlock(cond))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(thenBranch)&&  isFoldableExpressBlock(cond))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(thenBranch)&&  isFoldableExpressBlock(cond))  {	  if(isPropertyAssignmentInExpression(thenBranch)&&    isFoldableExpressBlock(cond))    {    	non-compiled	[CE]  	40	None	replace
127	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpression(thenBranch)&&  elseBranchIsExpressionBlock(cond))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isPropertyAssignmentInExpression(thenBranch)&&  elseBranchIsExpressionBlock(cond))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isPropertyAssignmentInExpression(thenBranch)&&  elseBranchIsExpressionBlock(cond))  {	  if(isPropertyAssignmentInExpression(thenBranch)&&    isFoldableExpressBlock(cond))    {    	non-compiled	[CE]  	40	None	replace
128	[BUG]  [BUGGY]  if(getBlockExpression(thenBranch)!=  null  ||  getPropertyAssignmentInExpression(elseBranch)!=  null)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(getBlockExpression(thenBranch)!=  null  ||  getPropertyAssignmentInExpression(elseBranch)!=  null)  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(getBlockExpression(thenBranch)!=  null  ||  getPropertyAssignmentInExpression(elseBranch)!=  null)  {	  if(getPropertyAssignmentInExpression(thenBranch)!=    null)    {    	non-compiled	[CE]  	10	None	replace
129	[BUG]  [BUGGY]  if(getBlockExpression(thenBranch)!=  null  ||  getPropertyAssignmentInExpression(thenBranch)!=  null)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(getBlockExpression(thenBranch)!=  null  ||  getPropertyAssignmentInExpression(thenBranch)!=  null)  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(getBlockExpression(thenBranch)!=  null  ||  getPropertyAssignmentInExpression(thenBranch)!=  null)  {	  if(getPropertyAssignmentInExpression(thenBranch)!=    null)    {    	non-compiled	[CE]  	10	None	replace
130	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond)||  getPropertyAssignmentInExpression(elseBranch)!=  null)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(cond)||  getPropertyAssignmentInExpression(elseBranch)!=  null)  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(cond)||  getPropertyAssignmentInExpression(elseBranch)!=  null)  {	  if(getPropertyAssignmentInExpression(thenBranch)!=    null)    {    	non-compiled	[CE]  	10	None	replace
131	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond)||  isLowerPrecedenceInExpression(cond))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(cond)||  isLowerPrecedenceInExpression(cond))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(cond)||  isLowerPrecedenceInExpression(cond))  {	  if(getPropertyAssignmentInExpression(thenBranch)!=    null)    {    	non-compiled	[CE]  	10	None	replace
132	[BUG]  [BUGGY]  if(isBlockExpression(thenBranch)&&  isLowerPrecedenceInExpression(cond)&&  isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isBlockExpression(thenBranch)&&  isLowerPrecedenceInExpression(cond)&&  isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isBlockExpression(thenBranch)&&  isLowerPrecedenceInExpression(cond)&&  isPropertyAssignmentInExpression(elseBranch))  {	  if(isLowerPrecedenceInExpression(cond)&&    isPropertyAssignmentInExpression(elseBranch))    {    	non-compiled	[CE]  	30	None	replace
133	[BUG]  [BUGGY]  if(getBlockExpression(thenBranch)!=  null  &&  isLowerPrecedenceInExpression(cond)&&  isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(getBlockExpression(thenBranch)!=  null  &&  isLowerPrecedenceInExpression(cond)&&  isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(getBlockExpression(thenBranch)!=  null  &&  isLowerPrecedenceInExpression(cond)&&  isPropertyAssignmentInExpression(elseBranch))  {	  if(isLowerPrecedenceInExpression(cond)&&    isPropertyAssignmentInExpression(elseBranch))    {    	non-compiled	[CE]  	30	None	replace
134	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(thenBranch)||  elseBranchIsExpressionBlock  ||  isFoldableExpressBlock(elseBranch))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(thenBranch)||  elseBranchIsExpressionBlock  ||  isFoldableExpressBlock(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(thenBranch)||  elseBranchIsExpressionBlock  ||  isFoldableExpressBlock(elseBranch))  {	  if(isLowerPrecedenceInExpression(thenBranch)&&    elseBranchIsExpressionBlock    ||    isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	82	None	replace
135	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(thenBranch)&&  elseBranchIsExpressionBlock  ||  isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(thenBranch)&&  elseBranchIsExpressionBlock  ||  isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(thenBranch)&&  elseBranchIsExpressionBlock  ||  isPropertyAssignmentInExpression(elseBranch))  {	  if(isLowerPrecedenceInExpression(thenBranch)&&    elseBranchIsExpressionBlock    ||    isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	82	None	replace
136	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(thenBranch)&&  elseBranchIsExpressionBlock  ||  isFoldableExpressBlock(cond))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(thenBranch)&&  elseBranchIsExpressionBlock  ||  isFoldableExpressBlock(cond))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(thenBranch)&&  elseBranchIsExpressionBlock  ||  isFoldableExpressBlock(cond))  {	  if(isLowerPrecedenceInExpression(thenBranch)&&    elseBranchIsExpressionBlock    ||    isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	82	None	replace
137	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(thenBranch)&&  elseBranchIsExpressionBlock  ||  isFoldableExpressBlock(elseBranch))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(!isLowerPrecedenceInExpression(thenBranch)&&  elseBranchIsExpressionBlock  ||  isFoldableExpressBlock(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(!isLowerPrecedenceInExpression(thenBranch)&&  elseBranchIsExpressionBlock  ||  isFoldableExpressBlock(elseBranch))  {	  if(isLowerPrecedenceInExpression(thenBranch)&&    elseBranchIsExpressionBlock    ||    isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	82	None	replace
138	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond)&&  elseBranchIsExpressionBlock  ||  isFoldableExpressBlock(elseBranch))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(cond)&&  elseBranchIsExpressionBlock  ||  isFoldableExpressBlock(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(cond)&&  elseBranchIsExpressionBlock  ||  isFoldableExpressBlock(elseBranch))  {	  if(isLowerPrecedenceInExpression(thenBranch)&&    elseBranchIsExpressionBlock    ||    isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	82	None	replace
139	[BUG]  [BUGGY]  if(isBlockExpression(thenBranch)&&  elseBranchIsExpressionBlock  ||  isFoldableExpressBlock(elseBranch))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isBlockExpression(thenBranch)&&  elseBranchIsExpressionBlock  ||  isFoldableExpressBlock(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isBlockExpression(thenBranch)&&  elseBranchIsExpressionBlock  ||  isFoldableExpressBlock(elseBranch))  {	  if(isLowerPrecedenceInExpression(thenBranch)&&    elseBranchIsExpressionBlock    ||    isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	82	None	replace
140	[BUG]  [BUGGY]  if(isBlockExpression(cond)||  isLowerPrecedenceInExpression(thenBranch)&&  isFoldableExpressBlock(elseBranch))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isBlockExpression(cond)||  isLowerPrecedenceInExpression(thenBranch)&&  isFoldableExpressBlock(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isBlockExpression(cond)||  isLowerPrecedenceInExpression(thenBranch)&&  isFoldableExpressBlock(elseBranch))  {	  if(isPropertyAssignmentInExpression(cond)||    isLowerPrecedenceInExpression(thenBranch)&&    isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	28	None	replace
141	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond)||  isLowerPrecedenceInExpression(elseBranch)&&  isFoldableExpressBlock(elseBranch))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(cond)||  isLowerPrecedenceInExpression(elseBranch)&&  isFoldableExpressBlock(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(cond)||  isLowerPrecedenceInExpression(elseBranch)&&  isFoldableExpressBlock(elseBranch))  {	  if(isPropertyAssignmentInExpression(cond)||    isLowerPrecedenceInExpression(thenBranch)&&    isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	28	None	replace
142	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpression(cond)||  isLowerPrecedenceInExpression(elseBranch)&&  isFoldableExpressBlock(elseBranch))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isPropertyAssignmentInExpression(cond)||  isLowerPrecedenceInExpression(elseBranch)&&  isFoldableExpressBlock(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isPropertyAssignmentInExpression(cond)||  isLowerPrecedenceInExpression(elseBranch)&&  isFoldableExpressBlock(elseBranch))  {	  if(isPropertyAssignmentInExpression(cond)||    isLowerPrecedenceInExpression(thenBranch)&&    isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	28	None	replace
143	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpression(thenBranch)||  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isPropertyAssignmentInExpression(thenBranch)||  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isPropertyAssignmentInExpression(thenBranch)||  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&	  if(isLowerPrecedenceInExpression(cond,    OR_PRECEDENCE)&&    	non-compiled	[CE]  	112	None	replace
144	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)||  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)||  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)||	  if(isLowerPrecedenceInExpression(cond,    OR_PRECEDENCE)&&    	non-compiled	[CE]  	112	None	replace
145	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpression(thenBranch)&&  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isPropertyAssignmentInExpression(thenBranch)&&  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isPropertyAssignmentInExpression(thenBranch)&&	  if(isLowerPrecedenceInExpression(cond,    OR_PRECEDENCE)&&    	non-compiled	[CE]  	112	None	replace
146	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpression(thenBranch,  OR_PRECEDENCE)||  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isPropertyAssignmentInExpression(thenBranch,  OR_PRECEDENCE)||  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isPropertyAssignmentInExpression(thenBranch,  OR_PRECEDENCE)||  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&	  if(isLowerPrecedenceInExpression(cond,    OR_PRECEDENCE)&&    	non-compiled	[CE]  	112	None	replace
147	[BUG]  [BUGGY]  if(thenBranch!=  null  &&  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  [CE]  [FE]                            AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(thenBranch!=  null  &&  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(thenBranch!=  null  &&  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&	  if(isLowerPrecedenceInExpression(cond,    OR_PRECEDENCE)&&    	non-compiled	[CE]  	112	None	replace
148	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(thenBranch,  OR_PRECEDENCE)&&  [CE]  [FE]                              AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(thenBranch,  OR_PRECEDENCE)&&  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(thenBranch,  OR_PRECEDENCE)&&	  if(isLowerPrecedenceInExpression(cond,    OR_PRECEDENCE)&&    	non-compiled	[CE]  	112	None	replace
149	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(thenBranch)||  isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(!isLowerPrecedenceInExpression(thenBranch)||  isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(!isLowerPrecedenceInExpression(thenBranch)||  isPropertyAssignmentInExpression(elseBranch))  {	  if(!isLowerPrecedenceInExpression(thenBranch)&&    isPropertyAssignmentInExpression(elseBranch))    {    	non-compiled	[CE]  	56	None	replace
150	[BUG]  [BUGGY]  if(NodeUtil.isBlockExpression(thenBranch)||  isPropertyAssignmentInExpression(cond))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(NodeUtil.isBlockExpression(thenBranch)||  isPropertyAssignmentInExpression(cond))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(NodeUtil.isBlockExpression(thenBranch)||  isPropertyAssignmentInExpression(cond))  {	  if(NodeUtil.isBlockExpression(thenBranch)&&    isPropertyAssignmentInExpression(cond))    {    	non-compiled	[CE]  	104	None	replace
151	[BUG]  [BUGGY]  if(NodeUtil.isBlockExpression(cond)&&  isPropertyAssignmentInExpression(thenBranch))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(NodeUtil.isBlockExpression(cond)&&  isPropertyAssignmentInExpression(thenBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(NodeUtil.isBlockExpression(cond)&&  isPropertyAssignmentInExpression(thenBranch))  {	  if(NodeUtil.isBlockExpression(thenBranch)&&    isPropertyAssignmentInExpression(cond))    {    	non-compiled	[CE]  	104	None	replace
152	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(cond)&&  isPropertyAssignmentInExpression(cond))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(NodeUtil.isLiteralValue(cond)&&  isPropertyAssignmentInExpression(cond))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(NodeUtil.isLiteralValue(cond)&&  isPropertyAssignmentInExpression(cond))  {	  if(NodeUtil.isBlockExpression(thenBranch)&&    isPropertyAssignmentInExpression(cond))    {    	non-compiled	[CE]  	104	None	replace
153	[BUG]  [BUGGY]  if(NodeUtil.isBlockExpression(cond)&&  isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(NodeUtil.isBlockExpression(cond)&&  isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(NodeUtil.isBlockExpression(cond)&&  isPropertyAssignmentInExpression(elseBranch))  {	  if(NodeUtil.isBlockExpression(thenBranch)&&    isPropertyAssignmentInExpression(cond))    {    	non-compiled	[CE]  	104	None	replace
154	[BUG]  [BUGGY]  if(NodeUtil.isImmutableValue(cond)&&  isPropertyAssignmentInExpression(cond))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(NodeUtil.isImmutableValue(cond)&&  isPropertyAssignmentInExpression(cond))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(NodeUtil.isImmutableValue(cond)&&  isPropertyAssignmentInExpression(cond))  {	  if(NodeUtil.isBlockExpression(thenBranch)&&    isPropertyAssignmentInExpression(cond))    {    	non-compiled	[CE]  	104	None	replace
155	[BUG]  [BUGGY]  Node  thenAssign  =  getBlockExpression(thenBranch,  elseBranch);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  Node  thenAssign  =  getBlockExpression(thenBranch,  elseBranch);  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	Node  thenAssign  =  getBlockExpression(thenBranch,  elseBranch);	  Node    thenAssign    =    getBlockExpression(elseBranch);    	non-compiled	[CE]  	99	None	replace
156	[BUG]  [BUGGY]  Node  thenAssign  =  getPropertyAssignmentInExpression(thenBranch);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  Node  thenAssign  =  getPropertyAssignmentInExpression(thenBranch);  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	Node  thenAssign  =  getPropertyAssignmentInExpression(thenBranch);	  Node    thenAssign    =    getBlockExpression(elseBranch);    	non-compiled	[CE]  	99	None	replace
157	[BUG]  [BUGGY]  Node  thenAssign  =  getOwnExpression(thenBranch);  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  Node  thenAssign  =  getOwnExpression(thenBranch);  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	Node  thenAssign  =  getOwnExpression(thenBranch);	  Node    thenAssign    =    getBlockExpression(elseBranch);    	non-compiled	[CE]  	99	None	replace
158	[BUG]  [BUGGY]  Node  thenAssign  =  getOwnExpression(elseBranch);  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  Node  thenAssign  =  getOwnExpression(elseBranch);  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	Node  thenAssign  =  getOwnExpression(elseBranch);	  Node    thenAssign    =    getBlockExpression(elseBranch);    	non-compiled	[CE]  	99	None	replace
159	[BUG]  [BUGGY]  Node  thenAssign  =  getPropertyAssignment(thenBranch);  [CE]  [FE]                                            AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  Node  thenAssign  =  getPropertyAssignment(thenBranch);  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	Node  thenAssign  =  getPropertyAssignment(thenBranch);	  Node    thenAssign    =    getBlockExpression(elseBranch);    	non-compiled	[CE]  	99	None	replace
160	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpression(thenBranch)&&  isLowerPrecedenceInExpression(cond))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isPropertyAssignmentInExpression(thenBranch)&&  isLowerPrecedenceInExpression(cond))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isPropertyAssignmentInExpression(thenBranch)&&  isLowerPrecedenceInExpression(cond))  {	  if(isPropertyAssignmentInExpression(thenBranch)||    isLowerPrecedenceInExpression(cond))    {    	non-compiled	[CE]  	4	None	replace
161	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(thenBranch)||  isPropertyAssignmentInExpression(cond))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(thenBranch)||  isPropertyAssignmentInExpression(cond))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(thenBranch)||  isPropertyAssignmentInExpression(cond))  {	  if(isPropertyAssignmentInExpression(thenBranch)||    isLowerPrecedenceInExpression(cond))    {    	non-compiled	[CE]  	4	None	replace
162	[BUG]  [BUGGY]  if(isBlockExpression(thenBranch)||  isLowerPrecedenceInExpression(cond))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isBlockExpression(thenBranch)||  isLowerPrecedenceInExpression(cond))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isBlockExpression(thenBranch)||  isLowerPrecedenceInExpression(cond))  {	  if(isPropertyAssignmentInExpression(thenBranch)||    isLowerPrecedenceInExpression(cond))    {    	non-compiled	[CE]  	4	None	replace
163	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpression(cond)||  isLowerPrecedenceInExpression(thenBranch))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isPropertyAssignmentInExpression(cond)||  isLowerPrecedenceInExpression(thenBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isPropertyAssignmentInExpression(cond)||  isLowerPrecedenceInExpression(thenBranch))  {	  if(isPropertyAssignmentInExpression(thenBranch)||    isLowerPrecedenceInExpression(cond))    {    	non-compiled	[CE]  	4	None	replace
164	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(thenBranch)&&  isLowerPrecedenceInExpression(cond))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(thenBranch)&&  isLowerPrecedenceInExpression(cond))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(thenBranch)&&  isLowerPrecedenceInExpression(cond))  {	  if(isPropertyAssignmentInExpression(thenBranch)||    isLowerPrecedenceInExpression(cond))    {    	non-compiled	[CE]  	4	None	replace
165	[BUG]  [BUGGY]  Node  thenBranch  =  firstBranch.getNext();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  Node  thenBranch  =  firstBranch.getNext();  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	Node  thenBranch  =  firstBranch.getNext();	  Node    thenBranch    =    elseBranch.getNext();    	non-compiled	[CE]  	15	None	replace
166	[BUG]  [BUGGY]  Node  thenBranch  =  secondBranch.getNext();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  Node  thenBranch  =  secondBranch.getNext();  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	Node  thenBranch  =  secondBranch.getNext();	  Node    thenBranch    =    elseBranch.getNext();    	non-compiled	[CE]  	15	None	replace
167	[BUG]  [BUGGY]  Node  thenBranch  =  thenBranch.getParent();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  Node  thenBranch  =  thenBranch.getParent();  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	Node  thenBranch  =  thenBranch.getParent();	  Node    thenBranch    =    elseBranch.getNext();    	non-compiled	[CE]  	15	None	replace
168	[BUG]  [BUGGY]  Node  thenBranch  =  n.getNext();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  Node  thenBranch  =  n.getNext();  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	Node  thenBranch  =  n.getNext();	  Node    thenBranch    =    elseBranch.getNext();    	non-compiled	[CE]  	15	None	replace
169	[BUG]  [BUGGY]  if(thenBranch!=  null  &&  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(cond))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(thenBranch!=  null  &&  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(cond))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(thenBranch!=  null  &&  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(cond))  {	  if(isLowerPrecedenceInExpression(cond,    OR_PRECEDENCE)&&    isPropertyAssignmentInExpression(cond))    {    	non-compiled	[CE]  	101	None	replace
170	[BUG]  [BUGGY]  if(getBlockExpression(thenBranch)!=  null  &&  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(getBlockExpression(thenBranch)!=  null  &&  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(getBlockExpression(thenBranch)!=  null  &&  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(elseBranch))  {	  if(isLowerPrecedenceInExpression(cond,    OR_PRECEDENCE)&&    isPropertyAssignmentInExpression(cond))    {    	non-compiled	[CE]  	101	None	replace
171	[BUG]  [BUGGY]  if(isBlockExpression(thenBranch)&&  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(cond))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isBlockExpression(thenBranch)&&  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(cond))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isBlockExpression(thenBranch)&&  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(cond))  {	  if(isLowerPrecedenceInExpression(cond,    OR_PRECEDENCE)&&    isPropertyAssignmentInExpression(cond))    {    	non-compiled	[CE]  	101	None	replace
172	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(cond)&&!isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(!isLowerPrecedenceInExpression(cond)&&!isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(!isLowerPrecedenceInExpression(cond)&&!isPropertyAssignmentInExpression(elseBranch))  {	  if(!isFoldableExpressBlock(thenBranch)&&!isPropertyAssignmentInExpression(elseBranch))    {    	non-compiled	[CE]  	83	None	replace
173	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond)&&!isFoldableExpressBlock(thenBranch)&&!isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(cond)&&!isFoldableExpressBlock(thenBranch)&&!isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(cond)&&!isFoldableExpressBlock(thenBranch)&&!isPropertyAssignmentInExpression(elseBranch))  {	  if(!isFoldableExpressBlock(thenBranch)&&!isPropertyAssignmentInExpression(elseBranch))    {    	non-compiled	[CE]  	83	None	replace
174	[BUG]  [BUGGY]  if(!isFoldableExpressBlock(thenBranch)||!isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(!isFoldableExpressBlock(thenBranch)||!isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(!isFoldableExpressBlock(thenBranch)||!isPropertyAssignmentInExpression(elseBranch))  {	  if(!isFoldableExpressBlock(thenBranch)&&!isPropertyAssignmentInExpression(elseBranch))    {    	non-compiled	[CE]  	83	None	replace
175	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond)&&!isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(cond)&&!isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(cond)&&!isPropertyAssignmentInExpression(elseBranch))  {	  if(!isFoldableExpressBlock(thenBranch)&&!isPropertyAssignmentInExpression(elseBranch))    {    	non-compiled	[CE]  	83	None	replace
176	[BUG]  [BUGGY]  if(!isFoldableExpressBlock(thenBranch)&&!isPropertyAssignmentInExpression(elseBranch)||  getBlockExpression(thenBranch))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(!isFoldableExpressBlock(thenBranch)&&!isPropertyAssignmentInExpression(elseBranch)||  getBlockExpression(thenBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(!isFoldableExpressBlock(thenBranch)&&!isPropertyAssignmentInExpression(elseBranch)||  getBlockExpression(thenBranch))  {	  if(!isFoldableExpressBlock(thenBranch)&&!isPropertyAssignmentInExpression(elseBranch))    {    	non-compiled	[CE]  	83	None	replace
177	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpression(thenBranch)&&  isLowerPrecedenceInExpression(elseBranch))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isPropertyAssignmentInExpression(thenBranch)&&  isLowerPrecedenceInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isPropertyAssignmentInExpression(thenBranch)&&  isLowerPrecedenceInExpression(elseBranch))  {	  if(isLowerPrecedenceInExpression(elseBranch)&&    isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	73	None	replace
178	[BUG]  [BUGGY]  if(getBlockExpression(thenBranch)  ==  null  ||  getBlockExpression(elseBranch)!=  null)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(getBlockExpression(thenBranch)  ==  null  ||  getBlockExpression(elseBranch)!=  null)  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(getBlockExpression(thenBranch)  ==  null  ||  getBlockExpression(elseBranch)!=  null)  {	  if(getBlockExpression(elseBranch)    ==    null)    {    	non-compiled	[CE]  	8	None	replace
179	[BUG]  [BUGGY]  if(getBlockExpression(thenBranch)!=  null  ||  getBlockExpression(elseBranch)  ==  null)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(getBlockExpression(thenBranch)!=  null  ||  getBlockExpression(elseBranch)  ==  null)  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(getBlockExpression(thenBranch)!=  null  ||  getBlockExpression(elseBranch)  ==  null)  {	  if(getBlockExpression(elseBranch)    ==    null)    {    	non-compiled	[CE]  	8	None	replace
180	[BUG]  [BUGGY]  if(getBlockExpression(thenBranch)!=  null  ||  getBlockExpression(thenBranch)  ==  null)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(getBlockExpression(thenBranch)!=  null  ||  getBlockExpression(thenBranch)  ==  null)  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(getBlockExpression(thenBranch)!=  null  ||  getBlockExpression(thenBranch)  ==  null)  {	  if(getBlockExpression(elseBranch)    ==    null)    {    	non-compiled	[CE]  	8	None	replace
181	[BUG]  [BUGGY]  if(getBlockExpression(thenBranch)!=  null  ||  getBlockExpression(elseBranch)!=  null)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(getBlockExpression(thenBranch)!=  null  ||  getBlockExpression(elseBranch)!=  null)  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(getBlockExpression(thenBranch)!=  null  ||  getBlockExpression(elseBranch)!=  null)  {	  if(getBlockExpression(elseBranch)    ==    null)    {    	non-compiled	[CE]  	8	None	replace
182	[BUG]  [BUGGY]  if(NodeUtil.isAssignmentOp(thenBranch)&&  isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(NodeUtil.isAssignmentOp(thenBranch)&&  isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(NodeUtil.isAssignmentOp(thenBranch)&&  isPropertyAssignmentInExpression(elseBranch))  {	  if(NodeUtil.isBlockExpression(thenBranch)&&    isPropertyAssignmentInExpression(elseBranch))    {    	non-compiled	[CE]  	62	None	replace
183	[BUG]  [BUGGY]  if(NodeUtil.isAssignmentOp(elseBranch)&&  isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(NodeUtil.isAssignmentOp(elseBranch)&&  isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(NodeUtil.isAssignmentOp(elseBranch)&&  isPropertyAssignmentInExpression(elseBranch))  {	  if(NodeUtil.isBlockExpression(thenBranch)&&    isPropertyAssignmentInExpression(elseBranch))    {    	non-compiled	[CE]  	62	None	replace
184	[BUG]  [BUGGY]  if(isBlockExpression(thenBranch)||  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)||  isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isBlockExpression(thenBranch)||  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)||  isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isBlockExpression(thenBranch)||  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)||  isPropertyAssignmentInExpression(elseBranch))  {	  if(isLowerPrecedenceInExpression(cond,    OR_PRECEDENCE)||    isPropertyAssignmentInExpression(elseBranch))    {    	non-compiled	[CE]  	6	None	replace
185	[BUG]  [BUGGY]  if(isBlockExpression(thenBranch,  OR_PRECEDENCE)||  isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isBlockExpression(thenBranch,  OR_PRECEDENCE)||  isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isBlockExpression(thenBranch,  OR_PRECEDENCE)||  isPropertyAssignmentInExpression(elseBranch))  {	  if(isLowerPrecedenceInExpression(cond,    OR_PRECEDENCE)||    isPropertyAssignmentInExpression(elseBranch))    {    	non-compiled	[CE]  	6	None	replace
186	[BUG]  [BUGGY]  Node  thenBranch  =  cond.getLastChild();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  Node  thenBranch  =  cond.getLastChild();  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	Node  thenBranch  =  cond.getLastChild();	  Node    thenBranch    =    cond.getFirstChild();    	non-compiled	[CE]  	76	None	replace
187	[BUG]  [BUGGY]  Node  thenBranch  =  elseBranch.getFirstChild();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  Node  thenBranch  =  elseBranch.getFirstChild();  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	Node  thenBranch  =  elseBranch.getFirstChild();	  Node    thenBranch    =    cond.getFirstChild();    	non-compiled	[CE]  	76	None	replace
188	[BUG]  [BUGGY]  Node  thenBranch  =  cond.getPreviousChild();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  Node  thenBranch  =  cond.getPreviousChild();  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	Node  thenBranch  =  cond.getPreviousChild();	  Node    thenBranch    =    cond.getFirstChild();    	non-compiled	[CE]  	76	None	replace
189	[BUG]  [BUGGY]  Node  thenBranch  =  cond.getParent();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  Node  thenBranch  =  cond.getParent();  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	Node  thenBranch  =  cond.getParent();	  Node    thenBranch    =    cond.getFirstChild();    	non-compiled	[CE]  	76	None	replace
190	[BUG]  [BUGGY]  Node  thenBranch  =  cond.getOwnerChild();  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  Node  thenBranch  =  cond.getOwnerChild();  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	Node  thenBranch  =  cond.getOwnerChild();	  Node    thenBranch    =    cond.getFirstChild();    	non-compiled	[CE]  	76	None	replace
191	[BUG]  [BUGGY]  if(getBlockExpression(thenBranch)!=  null  &&  isLowerPrecedenceInExpression(elseBranch)&&  isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(getBlockExpression(thenBranch)!=  null  &&  isLowerPrecedenceInExpression(elseBranch)&&  isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(getBlockExpression(thenBranch)!=  null  &&  isLowerPrecedenceInExpression(elseBranch)&&  isPropertyAssignmentInExpression(elseBranch))  {	  if(isLowerPrecedenceInExpression(elseBranch)&&    isPropertyAssignmentInExpression(elseBranch))    {    	non-compiled	[CE]  	68	None	replace
192	[BUG]  [BUGGY]  if(getBlockExpression(thenBranch)  ==  null  &&  isLowerPrecedenceInExpression(elseBranch)&&  isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(getBlockExpression(thenBranch)  ==  null  &&  isLowerPrecedenceInExpression(elseBranch)&&  isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(getBlockExpression(thenBranch)  ==  null  &&  isLowerPrecedenceInExpression(elseBranch)&&  isPropertyAssignmentInExpression(elseBranch))  {	  if(isLowerPrecedenceInExpression(elseBranch)&&    isPropertyAssignmentInExpression(elseBranch))    {    	non-compiled	[CE]  	68	None	replace
193	[BUG]  [BUGGY]  if(isBlockExpression(thenBranch)||  isLowerPrecedenceInExpression(elseBranch)&&  isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isBlockExpression(thenBranch)||  isLowerPrecedenceInExpression(elseBranch)&&  isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isBlockExpression(thenBranch)||  isLowerPrecedenceInExpression(elseBranch)&&  isPropertyAssignmentInExpression(elseBranch))  {	  if(isLowerPrecedenceInExpression(elseBranch)&&    isPropertyAssignmentInExpression(elseBranch))    {    	non-compiled	[CE]  	68	None	replace
194	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpression(thenBranch)&&  isBlockExpression(cond))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isPropertyAssignmentInExpression(thenBranch)&&  isBlockExpression(cond))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isPropertyAssignmentInExpression(thenBranch)&&  isBlockExpression(cond))  {	  if(isBlockExpression(cond))    {    	non-compiled	[CE]  	89	None	replace
195	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(thenBranch)&&  isBlockExpression(cond))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(thenBranch)&&  isBlockExpression(cond))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(thenBranch)&&  isBlockExpression(cond))  {	  if(isBlockExpression(cond))    {    	non-compiled	[CE]  	89	None	replace
196	[BUG]  [BUGGY]  if(thenBranch!=  null  &&  isBlockExpression(cond))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(thenBranch!=  null  &&  isBlockExpression(cond))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(thenBranch!=  null  &&  isBlockExpression(cond))  {	  if(isBlockExpression(cond))    {    	non-compiled	[CE]  	89	None	replace
197	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpression(thenBranch)||  isBlockExpression(cond))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isPropertyAssignmentInExpression(thenBranch)||  isBlockExpression(cond))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isPropertyAssignmentInExpression(thenBranch)||  isBlockExpression(cond))  {	  if(isBlockExpression(cond))    {    	non-compiled	[CE]  	89	None	replace
198	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(thenBranch)||  isBlockExpression(cond))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(thenBranch)||  isBlockExpression(cond))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(thenBranch)||  isBlockExpression(cond))  {	  if(isBlockExpression(cond))    {    	non-compiled	[CE]  	89	None	replace
199	[BUG]  [BUGGY]  if(getBlockExpression(elseBranch)!=  null  &&  isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(getBlockExpression(elseBranch)!=  null  &&  isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(getBlockExpression(elseBranch)!=  null  &&  isPropertyAssignmentInExpression(elseBranch))  {	  if(getBlockExpression(thenBranch)!=    null    &&    isPropertyAssignmentInExpression(elseBranch))    {    	non-compiled	[CE]  	14	None	replace
200	[BUG]  [BUGGY]  if(getBlockExpression(thenBranch)!=  null  &&  isPropertyAssignmentInExpression(otherBranch))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(getBlockExpression(thenBranch)!=  null  &&  isPropertyAssignmentInExpression(otherBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(getBlockExpression(thenBranch)!=  null  &&  isPropertyAssignmentInExpression(otherBranch))  {	  if(getBlockExpression(thenBranch)!=    null    &&    isPropertyAssignmentInExpression(elseBranch))    {    	non-compiled	[CE]  	14	None	replace
201	[BUG]  [BUGGY]  if(getBlockExpression(thenBranch)!=  null  &&  isPropertyAssignmentInExpression(elseBranch)||  isLowerPrecedenceInExpression(cond))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(getBlockExpression(thenBranch)!=  null  &&  isPropertyAssignmentInExpression(elseBranch)||  isLowerPrecedenceInExpression(cond))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(getBlockExpression(thenBranch)!=  null  &&  isPropertyAssignmentInExpression(elseBranch)||  isLowerPrecedenceInExpression(cond))  {	  if(getBlockExpression(thenBranch)!=    null    &&    isPropertyAssignmentInExpression(elseBranch))    {    	non-compiled	[CE]  	14	None	replace
202	[BUG]  [BUGGY]  if(getBlockExpression(thenBranch)!=  null  &&  isPropertyAssignmentInExpression(elseBranch)||  isLowerPrecedenceInExpression(elseBranch))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(getBlockExpression(thenBranch)!=  null  &&  isPropertyAssignmentInExpression(elseBranch)||  isLowerPrecedenceInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(getBlockExpression(thenBranch)!=  null  &&  isPropertyAssignmentInExpression(elseBranch)||  isLowerPrecedenceInExpression(elseBranch))  {	  if(getBlockExpression(thenBranch)!=    null    &&    isPropertyAssignmentInExpression(elseBranch))    {    	non-compiled	[CE]  	14	None	replace
203	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpression(thenBranch)||  getBlockExpression(thenBranch)!=  null)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isPropertyAssignmentInExpression(thenBranch)||  getBlockExpression(thenBranch)!=  null)  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isPropertyAssignmentInExpression(thenBranch)||  getBlockExpression(thenBranch)!=  null)  {	  if(getBlockExpression(elseBranch)!=    null)    {    	non-compiled	[CE]  	7	None	replace
204	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpression(thenBranch)&&  getBlockExpression(thenBranch)!=  null)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isPropertyAssignmentInExpression(thenBranch)&&  getBlockExpression(thenBranch)!=  null)  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isPropertyAssignmentInExpression(thenBranch)&&  getBlockExpression(thenBranch)!=  null)  {	  if(getBlockExpression(elseBranch)!=    null)    {    	non-compiled	[CE]  	7	None	replace
205	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpression(thenBranch)&&  elseBranchIsVar)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isPropertyAssignmentInExpression(thenBranch)&&  elseBranchIsVar)  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isPropertyAssignmentInExpression(thenBranch)&&  elseBranchIsVar)  {	  if(isPropertyAssignmentInExpression(thenBranch)&&    elseBranchIsExpressionBlock)    {    	non-compiled	[CE]  	108	None	replace
206	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpression(thenBranch)||  elseBranchIsExpressionBlock)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isPropertyAssignmentInExpression(thenBranch)||  elseBranchIsExpressionBlock)  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isPropertyAssignmentInExpression(thenBranch)||  elseBranchIsExpressionBlock)  {	  if(isPropertyAssignmentInExpression(thenBranch)&&    elseBranchIsExpressionBlock)    {    	non-compiled	[CE]  	108	None	replace
207	[BUG]  [BUGGY]  if(isBlockExpression(thenBranch)&&  elseBranchIsExpressionBlock)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isBlockExpression(thenBranch)&&  elseBranchIsExpressionBlock)  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isBlockExpression(thenBranch)&&  elseBranchIsExpressionBlock)  {	  if(isPropertyAssignmentInExpression(thenBranch)&&    elseBranchIsExpressionBlock)    {    	non-compiled	[CE]  	108	None	replace
208	[BUG]  [BUGGY]  if(isAssignmentInExpression(thenBranch)&&  elseBranchIsVar)  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isAssignmentInExpression(thenBranch)&&  elseBranchIsVar)  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isAssignmentInExpression(thenBranch)&&  elseBranchIsVar)  {	  if(isPropertyAssignmentInExpression(thenBranch)&&    elseBranchIsExpressionBlock)    {    	non-compiled	[CE]  	108	None	replace
209	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpression(cond)||  isLowerPrecedenceInExpression(cond))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isPropertyAssignmentInExpression(cond)||  isLowerPrecedenceInExpression(cond))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isPropertyAssignmentInExpression(cond)||  isLowerPrecedenceInExpression(cond))  {	  if(isPropertyAssignmentInExpression(thenBranch)||    isLowerPrecedenceInExpression(thenBranch))    {    	non-compiled	[CE]  	57	None	replace
210	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpression(thenBranch)&&  isLowerPrecedenceInExpression(thenBranch))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isPropertyAssignmentInExpression(thenBranch)&&  isLowerPrecedenceInExpression(thenBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isPropertyAssignmentInExpression(thenBranch)&&  isLowerPrecedenceInExpression(thenBranch))  {	  if(isPropertyAssignmentInExpression(thenBranch)||    isLowerPrecedenceInExpression(thenBranch))    {    	non-compiled	[CE]  	57	None	replace
211	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(thenBranch)||  isPropertyAssignmentInExpression(thenBranch))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(thenBranch)||  isPropertyAssignmentInExpression(thenBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(thenBranch)||  isPropertyAssignmentInExpression(thenBranch))  {	  if(isPropertyAssignmentInExpression(thenBranch)||    isLowerPrecedenceInExpression(thenBranch))    {    	non-compiled	[CE]  	57	None	replace
212	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(thenBranch)&&  isPropertyAssignmentInExpression(thenBranch))  {  [CE]  [FE]                                AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(thenBranch)&&  isPropertyAssignmentInExpression(thenBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(thenBranch)&&  isPropertyAssignmentInExpression(thenBranch))  {	  if(isPropertyAssignmentInExpression(thenBranch)||    isLowerPrecedenceInExpression(thenBranch))    {    	non-compiled	[CE]  	57	None	replace
213	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpression(thenBranch)||  isLowerPrecedenceInExpression(elseBranch))  {  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isPropertyAssignmentInExpression(thenBranch)||  isLowerPrecedenceInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isPropertyAssignmentInExpression(thenBranch)||  isLowerPrecedenceInExpression(elseBranch))  {	  if(isPropertyAssignmentInExpression(thenBranch)||    isLowerPrecedenceInExpression(thenBranch))    {    	non-compiled	[CE]  	57	None	replace
214	[BUG]  [BUGGY]  if(getBlockExpression(thenBranch)!=  null  &&  getBlockExpression(thenBranch)!=  null)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(getBlockExpression(thenBranch)!=  null  &&  getBlockExpression(thenBranch)!=  null)  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(getBlockExpression(thenBranch)!=  null  &&  getBlockExpression(thenBranch)!=  null)  {	  if(getBlockExpression(thenBranch)!=    null    ||    getBlockExpression(thenBranch)!=    null)    {    	non-compiled	[CE]  	38	None	replace
215	[BUG]  [BUGGY]  if(getBlockExpression(thenBranch)  ==  null  &&  getBlockExpression(thenBranch)!=  null)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(getBlockExpression(thenBranch)  ==  null  &&  getBlockExpression(thenBranch)!=  null)  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(getBlockExpression(thenBranch)  ==  null  &&  getBlockExpression(thenBranch)!=  null)  {	  if(getBlockExpression(thenBranch)!=    null    ||    getBlockExpression(thenBranch)!=    null)    {    	non-compiled	[CE]  	38	None	replace
216	[BUG]  [BUGGY]  if(getBlockExpression(elseBranch)!=  null  ||  getBlockExpression(elseBranch)!=  null)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(getBlockExpression(elseBranch)!=  null  ||  getBlockExpression(elseBranch)!=  null)  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(getBlockExpression(elseBranch)!=  null  ||  getBlockExpression(elseBranch)!=  null)  {	  if(getBlockExpression(thenBranch)!=    null    ||    getBlockExpression(thenBranch)!=    null)    {    	non-compiled	[CE]  	38	None	replace
217	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond)&&  isPropertyAssignmentInExpression(thenBranch)&&  isFoldableExpressBlock(elseBranch))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(cond)&&  isPropertyAssignmentInExpression(thenBranch)&&  isFoldableExpressBlock(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(cond)&&  isPropertyAssignmentInExpression(thenBranch)&&  isFoldableExpressBlock(elseBranch))  {	  if(isLowerPrecedenceInExpression(cond)&&    isPropertyAssignmentInExpression(propertyBranch)&&    isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	115	None	replace
218	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(thenBranch)&&  isPropertyAssignmentInExpression(propertyBranch)&&  isFoldableExpressBlock(elseBranch))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(thenBranch)&&  isPropertyAssignmentInExpression(propertyBranch)&&  isFoldableExpressBlock(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(thenBranch)&&  isPropertyAssignmentInExpression(propertyBranch)&&  isFoldableExpressBlock(elseBranch))  {	  if(isLowerPrecedenceInExpression(cond)&&    isPropertyAssignmentInExpression(propertyBranch)&&    isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	115	None	replace
219	[BUG]  [BUGGY]  if(getBlockExpression(thenBranch)!=  null  &&  isLowerPrecedenceInExpression(cond)&&  isPropertyAssignmentInExpression(propertyBranch)&&  isFoldableExpressBlock(elseBranch))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(getBlockExpression(thenBranch)!=  null  &&  isLowerPrecedenceInExpression(cond)&&  isPropertyAssignmentInExpression(propertyBranch)&&  isFoldableExpressBlock(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(getBlockExpression(thenBranch)!=  null  &&  isLowerPrecedenceInExpression(cond)&&  isPropertyAssignmentInExpression(propertyBranch)&&  isFoldableExpressBlock(elseBranch))  {	  if(isLowerPrecedenceInExpression(cond)&&    isPropertyAssignmentInExpression(propertyBranch)&&    isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	115	None	replace
220	[BUG]  [BUGGY]  if(isBlockExpression(thenBranch)&&  isLowerPrecedenceInExpression(cond)&&  isPropertyAssignmentInExpression(propertyBranch)&&  isFoldableExpressBlock(elseBranch))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isBlockExpression(thenBranch)&&  isLowerPrecedenceInExpression(cond)&&  isPropertyAssignmentInExpression(propertyBranch)&&  isFoldableExpressBlock(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isBlockExpression(thenBranch)&&  isLowerPrecedenceInExpression(cond)&&  isPropertyAssignmentInExpression(propertyBranch)&&  isFoldableExpressBlock(elseBranch))  {	  if(isLowerPrecedenceInExpression(cond)&&    isPropertyAssignmentInExpression(propertyBranch)&&    isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	115	None	replace
221	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond)&&  isPropertyAssignmentInExpression(propertyBranch)&&  isFoldableExpressBlock(thenBranch))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(cond)&&  isPropertyAssignmentInExpression(propertyBranch)&&  isFoldableExpressBlock(thenBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(cond)&&  isPropertyAssignmentInExpression(propertyBranch)&&  isFoldableExpressBlock(thenBranch))  {	  if(isLowerPrecedenceInExpression(cond)&&    isPropertyAssignmentInExpression(propertyBranch)&&    isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	115	None	replace
222	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond)||  isPropertyAssignmentInExpression(propertyBranch)&&  isFoldableExpressBlock(elseBranch))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(cond)||  isPropertyAssignmentInExpression(propertyBranch)&&  isFoldableExpressBlock(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(cond)||  isPropertyAssignmentInExpression(propertyBranch)&&  isFoldableExpressBlock(elseBranch))  {	  if(isLowerPrecedenceInExpression(cond)&&    isPropertyAssignmentInExpression(propertyBranch)&&    isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	115	None	replace
223	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpression(otherBranch))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isPropertyAssignmentInExpression(otherBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isPropertyAssignmentInExpression(otherBranch))  {	  if(isBlockExpression(thenBranch))    {    	non-compiled	[CE]  	11	None	replace
224	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpression(protoBranch))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isPropertyAssignmentInExpression(protoBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isPropertyAssignmentInExpression(protoBranch))  {	  if(isBlockExpression(thenBranch))    {    	non-compiled	[CE]  	11	None	replace
225	[BUG]  [BUGGY]  if(elseBranch!=  null  &&  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(elseBranch!=  null  &&  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(elseBranch!=  null  &&  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE))  {	  if(thenBranch!=    null    &&    isLowerPrecedenceInExpression(cond,    OR_PRECEDENCE))    {    	non-compiled	[CE]  	113	None	replace
226	[BUG]  [BUGGY]  if(thenBranch!=  null  ||  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(thenBranch!=  null  ||  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(thenBranch!=  null  ||  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE))  {	  if(thenBranch!=    null    &&    isLowerPrecedenceInExpression(cond,    OR_PRECEDENCE))    {    	non-compiled	[CE]  	113	None	replace
227	[BUG]  [BUGGY]  if(thenBranch  ==  null  &&  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(thenBranch  ==  null  &&  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(thenBranch  ==  null  &&  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE))  {	  if(thenBranch!=    null    &&    isLowerPrecedenceInExpression(cond,    OR_PRECEDENCE))    {    	non-compiled	[CE]  	113	None	replace
228	[BUG]  [BUGGY]  if(thenBranch!=  null  &&  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)||  isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(thenBranch!=  null  &&  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)||  isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(thenBranch!=  null  &&  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)||  isPropertyAssignmentInExpression(elseBranch))  {	  if(thenBranch!=    null    &&    isLowerPrecedenceInExpression(cond,    OR_PRECEDENCE))    {    	non-compiled	[CE]  	113	None	replace
229	[BUG]  [BUGGY]  if(elseBranch  ==  null  &&  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(elseBranch  ==  null  &&  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(elseBranch  ==  null  &&  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE))  {	  if(thenBranch!=    null    &&    isLowerPrecedenceInExpression(cond,    OR_PRECEDENCE))    {    	non-compiled	[CE]  	113	None	replace
230	[BUG]  [BUGGY]  if(otherBranch!=  null  &&  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(otherBranch!=  null  &&  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(otherBranch!=  null  &&  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE))  {	  if(thenBranch!=    null    &&    isLowerPrecedenceInExpression(cond,    OR_PRECEDENCE))    {    	non-compiled	[CE]  	113	None	replace
231	[BUG]  [BUGGY]  if(getBlockExpression(elseBranch)  ==  null  &&  isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(getBlockExpression(elseBranch)  ==  null  &&  isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(getBlockExpression(elseBranch)  ==  null  &&  isPropertyAssignmentInExpression(elseBranch))  {	  if(getBlockExpression(thenBranch)    ==    null    ||    isPropertyAssignmentInExpression(elseBranch))    {    	non-compiled	[CE]  	118	None	replace
232	[BUG]  [BUGGY]  if(getBlockExpression(elseBranch)  ==  null  ||  isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(getBlockExpression(elseBranch)  ==  null  ||  isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(getBlockExpression(elseBranch)  ==  null  ||  isPropertyAssignmentInExpression(elseBranch))  {	  if(getBlockExpression(thenBranch)    ==    null    ||    isPropertyAssignmentInExpression(elseBranch))    {    	non-compiled	[CE]  	118	None	replace
233	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond)||!isPropertyAssignmentBlock(elseBranch))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(cond)||!isPropertyAssignmentBlock(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(cond)||!isPropertyAssignmentBlock(elseBranch))  {	  if(!isPropertyAssignmentBlock(thenBranch))    {    	non-compiled	[CE]  	84	None	replace
234	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(thenBranch)||!isPropertyAssignmentBlock(elseBranch))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(thenBranch)||!isPropertyAssignmentBlock(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(thenBranch)||!isPropertyAssignmentBlock(elseBranch))  {	  if(!isPropertyAssignmentBlock(thenBranch))    {    	non-compiled	[CE]  	84	None	replace
235	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond)&&!isPropertyAssignmentBlock(elseBranch))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(cond)&&!isPropertyAssignmentBlock(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(cond)&&!isPropertyAssignmentBlock(elseBranch))  {	  if(!isPropertyAssignmentBlock(thenBranch))    {    	non-compiled	[CE]  	84	None	replace
236	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond)||!isPropertyAssignmentBlock(thenBranch))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(cond)||!isPropertyAssignmentBlock(thenBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(cond)||!isPropertyAssignmentBlock(thenBranch))  {	  if(!isPropertyAssignmentBlock(thenBranch))    {    	non-compiled	[CE]  	84	None	replace
237	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond)&&!isPropertyAssignmentBlock(thenBranch))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(cond)&&!isPropertyAssignmentBlock(thenBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(cond)&&!isPropertyAssignmentBlock(thenBranch))  {	  if(!isPropertyAssignmentBlock(thenBranch))    {    	non-compiled	[CE]  	84	None	replace
238	[BUG]  [BUGGY]  if(getBlockExpression(elseBranch)!=  null  &&  isLowerPrecedenceInExpression(elseBranch)&&  isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(getBlockExpression(elseBranch)!=  null  &&  isLowerPrecedenceInExpression(elseBranch)&&  isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(getBlockExpression(elseBranch)!=  null  &&  isLowerPrecedenceInExpression(elseBranch)&&  isPropertyAssignmentInExpression(elseBranch))  {	  if(getBlockExpression(thenBranch)!=    null    &&    isLowerPrecedenceInExpression(thenBranch)&&    isPropertyAssignmentInExpression(elseBranch))    {    	non-compiled	[CE]  	31	None	replace
239	[BUG]  [BUGGY]  if(getBlockExpression(thenBranch)!=  null  &&  isLowerPrecedenceInExpression(elseBranch)||  isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(getBlockExpression(thenBranch)!=  null  &&  isLowerPrecedenceInExpression(elseBranch)||  isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(getBlockExpression(thenBranch)!=  null  &&  isLowerPrecedenceInExpression(elseBranch)||  isPropertyAssignmentInExpression(elseBranch))  {	  if(getBlockExpression(thenBranch)!=    null    &&    isLowerPrecedenceInExpression(thenBranch)&&    isPropertyAssignmentInExpression(elseBranch))    {    	non-compiled	[CE]  	31	None	replace
240	[BUG]  [BUGGY]  if(getBlockExpression(thenBranch)!=  null  &&  isLowerPrecedenceInExpression(thenBranch)||  isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(getBlockExpression(thenBranch)!=  null  &&  isLowerPrecedenceInExpression(thenBranch)||  isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(getBlockExpression(thenBranch)!=  null  &&  isLowerPrecedenceInExpression(thenBranch)||  isPropertyAssignmentInExpression(elseBranch))  {	  if(getBlockExpression(thenBranch)!=    null    &&    isLowerPrecedenceInExpression(thenBranch)&&    isPropertyAssignmentInExpression(elseBranch))    {    	non-compiled	[CE]  	31	None	replace
241	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpression(thenBranch)&&  isFoldableExpressBlock(thenBranch))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isPropertyAssignmentInExpression(thenBranch)&&  isFoldableExpressBlock(thenBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isPropertyAssignmentInExpression(thenBranch)&&  isFoldableExpressBlock(thenBranch))  {	  if(isPropertyAssignmentInExpression(thenBranch)||    isFoldableExpressBlock(thenBranch))    {    	non-compiled	[CE]  	43	None	replace
242	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(thenBranch)&&  isFoldableExpressBlock(thenBranch))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(thenBranch)&&  isFoldableExpressBlock(thenBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(thenBranch)&&  isFoldableExpressBlock(thenBranch))  {	  if(isPropertyAssignmentInExpression(thenBranch)||    isFoldableExpressBlock(thenBranch))    {    	non-compiled	[CE]  	43	None	replace
243	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpression(cond)||  isFoldableExpressBlock(cond))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isPropertyAssignmentInExpression(cond)||  isFoldableExpressBlock(cond))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isPropertyAssignmentInExpression(cond)||  isFoldableExpressBlock(cond))  {	  if(isPropertyAssignmentInExpression(thenBranch)||    isFoldableExpressBlock(thenBranch))    {    	non-compiled	[CE]  	43	None	replace
244	[BUG]  [BUGGY]  if(getBlockExpression(thenBranch)||  isPropertyAssignmentInExpression(thenBranch))  {  [CE]  [FE]                                AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(getBlockExpression(thenBranch)||  isPropertyAssignmentInExpression(thenBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(getBlockExpression(thenBranch)||  isPropertyAssignmentInExpression(thenBranch))  {	  if(isPropertyAssignmentInExpression(thenBranch)||    isFoldableExpressBlock(thenBranch))    {    	non-compiled	[CE]  	43	None	replace
245	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpression(thenBranch)&&  isLowerPrecedenceInExpression(cond)&&  isFoldableExpressBlock(elseBranch))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isPropertyAssignmentInExpression(thenBranch)&&  isLowerPrecedenceInExpression(cond)&&  isFoldableExpressBlock(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isPropertyAssignmentInExpression(thenBranch)&&  isLowerPrecedenceInExpression(cond)&&  isFoldableExpressBlock(elseBranch))  {	  if(isLowerPrecedenceInExpression(cond)&&    isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	27	None	replace
246	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond)&&  elseBranchIsExpressionBlock(elseBranch))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(cond)&&  elseBranchIsExpressionBlock(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(cond)&&  elseBranchIsExpressionBlock(elseBranch))  {	  if(isLowerPrecedenceInExpression(cond)&&    isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	27	None	replace
247	[BUG]  [BUGGY]  if(isBlockExpression(thenBranch)||  isPropertyAssignmentInExpression(propertyBranch)&&  isFoldableExpressBlock(elseBranch))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isBlockExpression(thenBranch)||  isPropertyAssignmentInExpression(propertyBranch)&&  isFoldableExpressBlock(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isBlockExpression(thenBranch)||  isPropertyAssignmentInExpression(propertyBranch)&&  isFoldableExpressBlock(elseBranch))  {	  if(isBlockExpression(thenBranch)&&    isPropertyAssignmentInExpression(propertyBranch)&&    isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	116	None	replace
248	[BUG]  [BUGGY]  if(isBlockExpression(thenBranch)&&  isPropertyAssignmentInExpression(otherBranch)&&  isFoldableExpressBlock(elseBranch))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isBlockExpression(thenBranch)&&  isPropertyAssignmentInExpression(otherBranch)&&  isFoldableExpressBlock(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isBlockExpression(thenBranch)&&  isPropertyAssignmentInExpression(otherBranch)&&  isFoldableExpressBlock(elseBranch))  {	  if(isBlockExpression(thenBranch)&&    isPropertyAssignmentInExpression(propertyBranch)&&    isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	116	None	replace
249	[BUG]  [BUGGY]  if(getBlockExpression(thenBranch)&&  isPropertyAssignmentInExpression(propertyBranch)&&  isFoldableExpressBlock(elseBranch))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(getBlockExpression(thenBranch)&&  isPropertyAssignmentInExpression(propertyBranch)&&  isFoldableExpressBlock(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(getBlockExpression(thenBranch)&&  isPropertyAssignmentInExpression(propertyBranch)&&  isFoldableExpressBlock(elseBranch))  {	  if(isBlockExpression(thenBranch)&&    isPropertyAssignmentInExpression(propertyBranch)&&    isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	116	None	replace
250	[BUG]  [BUGGY]  if(getBlockExpression(thenBranch)||  isPropertyAssignmentInExpression(propertyBranch)&&  isFoldableExpressBlock(elseBranch))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(getBlockExpression(thenBranch)||  isPropertyAssignmentInExpression(propertyBranch)&&  isFoldableExpressBlock(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(getBlockExpression(thenBranch)||  isPropertyAssignmentInExpression(propertyBranch)&&  isFoldableExpressBlock(elseBranch))  {	  if(isBlockExpression(thenBranch)&&    isPropertyAssignmentInExpression(propertyBranch)&&    isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	116	None	replace
251	[BUG]  [BUGGY]  if(isBlockExpression(cond)&&  isPropertyAssignmentInExpression(propertyBranch)&&  isFoldableExpressBlock(elseBranch))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isBlockExpression(cond)&&  isPropertyAssignmentInExpression(propertyBranch)&&  isFoldableExpressBlock(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isBlockExpression(cond)&&  isPropertyAssignmentInExpression(propertyBranch)&&  isFoldableExpressBlock(elseBranch))  {	  if(isBlockExpression(thenBranch)&&    isPropertyAssignmentInExpression(propertyBranch)&&    isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	116	None	replace
252	[BUG]  [BUGGY]  if(elseBranch!=  null  &&  isLowerPrecedenceInExpression(cond))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(elseBranch!=  null  &&  isLowerPrecedenceInExpression(cond))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(elseBranch!=  null  &&  isLowerPrecedenceInExpression(cond))  {	  if(thenBranch!=    null    &&    isLowerPrecedenceInExpression(cond))    {    	non-compiled	[CE]  	79	None	replace
253	[BUG]  [BUGGY]  if(thenBranch!=  null  ||  isLowerPrecedenceInExpression(cond))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(thenBranch!=  null  ||  isLowerPrecedenceInExpression(cond))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(thenBranch!=  null  ||  isLowerPrecedenceInExpression(cond))  {	  if(thenBranch!=    null    &&    isLowerPrecedenceInExpression(cond))    {    	non-compiled	[CE]  	79	None	replace
254	[BUG]  [BUGGY]  if(thenBranch  ==  null  &&  isLowerPrecedenceInExpression(cond))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(thenBranch  ==  null  &&  isLowerPrecedenceInExpression(cond))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(thenBranch  ==  null  &&  isLowerPrecedenceInExpression(cond))  {	  if(thenBranch!=    null    &&    isLowerPrecedenceInExpression(cond))    {    	non-compiled	[CE]  	79	None	replace
255	[BUG]  [BUGGY]  if(thenBranch!=  null  &&  isLowerPrecedenceInExpression(cond)||  isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(thenBranch!=  null  &&  isLowerPrecedenceInExpression(cond)||  isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(thenBranch!=  null  &&  isLowerPrecedenceInExpression(cond)||  isPropertyAssignmentInExpression(elseBranch))  {	  if(thenBranch!=    null    &&    isLowerPrecedenceInExpression(cond))    {    	non-compiled	[CE]  	79	None	replace
256	[BUG]  [BUGGY]  if(elseBranch  ==  null  &&  isLowerPrecedenceInExpression(cond))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(elseBranch  ==  null  &&  isLowerPrecedenceInExpression(cond))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(elseBranch  ==  null  &&  isLowerPrecedenceInExpression(cond))  {	  if(thenBranch!=    null    &&    isLowerPrecedenceInExpression(cond))    {    	non-compiled	[CE]  	79	None	replace
257	[BUG]  [BUGGY]  if(getBlockExpression(thenBranch)!=  null  &&  isLowerPrecedenceInExpression(thenBranch,  OR_PRECEDENCE))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(getBlockExpression(thenBranch)!=  null  &&  isLowerPrecedenceInExpression(thenBranch,  OR_PRECEDENCE))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(getBlockExpression(thenBranch)!=  null  &&  isLowerPrecedenceInExpression(thenBranch,  OR_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(thenBranch,    OR_PRECEDENCE))    {    	non-compiled	[CE]  	69	None	replace
258	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)||  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)||  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)||  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(thenBranch,    OR_PRECEDENCE))    {    	non-compiled	[CE]  	69	None	replace
259	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(thenBranch,  OR_PRECEDENCE))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(!isLowerPrecedenceInExpression(thenBranch,  OR_PRECEDENCE))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(!isLowerPrecedenceInExpression(thenBranch,  OR_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(thenBranch,    OR_PRECEDENCE))    {    	non-compiled	[CE]  	69	None	replace
260	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpression(thenBranch)||  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isPropertyAssignmentInExpression(thenBranch)||  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isPropertyAssignmentInExpression(thenBranch)||  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(cond,    OR_PRECEDENCE))    {    	non-compiled	[CE]  	35	None	replace
261	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpression(cond)||  isLowerPrecedenceInExpression(elseBranch))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isPropertyAssignmentInExpression(cond)||  isLowerPrecedenceInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isPropertyAssignmentInExpression(cond)||  isLowerPrecedenceInExpression(elseBranch))  {	  if(isBlockExpression(thenBranch)||    isLowerPrecedenceInExpression(elseBranch))    {    	non-compiled	[CE]  	74	None	replace
262	[BUG]  [BUGGY]  if(isBlockExpression(thenBranch)&&  isLowerPrecedenceInExpression(elseBranch))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isBlockExpression(thenBranch)&&  isLowerPrecedenceInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isBlockExpression(thenBranch)&&  isLowerPrecedenceInExpression(elseBranch))  {	  if(isBlockExpression(thenBranch)||    isLowerPrecedenceInExpression(elseBranch))    {    	non-compiled	[CE]  	74	None	replace
263	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(thenBranch)&&  isLowerPrecedenceInExpression(elseBranch))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(thenBranch)&&  isLowerPrecedenceInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(thenBranch)&&  isLowerPrecedenceInExpression(elseBranch))  {	  if(isBlockExpression(thenBranch)||    isLowerPrecedenceInExpression(elseBranch))    {    	non-compiled	[CE]  	74	None	replace
264	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpression(cond)&&  isLowerPrecedenceInExpression(elseBranch))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isPropertyAssignmentInExpression(cond)&&  isLowerPrecedenceInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isPropertyAssignmentInExpression(cond)&&  isLowerPrecedenceInExpression(elseBranch))  {	  if(isBlockExpression(thenBranch)||    isLowerPrecedenceInExpression(elseBranch))    {    	non-compiled	[CE]  	74	None	replace
265	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(thenBranch)||  isBlockExpression(elseBranch))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(thenBranch)||  isBlockExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(thenBranch)||  isBlockExpression(elseBranch))  {	  if(isBlockExpression(thenBranch)||    isLowerPrecedenceInExpression(elseBranch))    {    	non-compiled	[CE]  	74	None	replace
266	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)||  isPropertyAssignmentInExpression(otherBranch))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)||  isPropertyAssignmentInExpression(otherBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)||  isPropertyAssignmentInExpression(otherBranch))  {	  if(isLowerPrecedenceInExpression(cond,    OR_PRECEDENCE)&&    isPropertyAssignmentInExpression(otherBranch))    {    	non-compiled	[CE]  	34	None	replace
267	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(thenBranch,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(otherBranch))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(thenBranch,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(otherBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(thenBranch,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(otherBranch))  {	  if(isLowerPrecedenceInExpression(cond,    OR_PRECEDENCE)&&    isPropertyAssignmentInExpression(otherBranch))    {    	non-compiled	[CE]  	34	None	replace
268	[BUG]  [BUGGY]  if(isBlockExpression(thenBranch)&&  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(otherBranch))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isBlockExpression(thenBranch)&&  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(otherBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isBlockExpression(thenBranch)&&  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(otherBranch))  {	  if(isLowerPrecedenceInExpression(cond,    OR_PRECEDENCE)&&    isPropertyAssignmentInExpression(otherBranch))    {    	non-compiled	[CE]  	34	None	replace
269	[BUG]  [BUGGY]  if(thenBranch!=  null  &&  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(otherBranch))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(thenBranch!=  null  &&  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(otherBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(thenBranch!=  null  &&  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(otherBranch))  {	  if(isLowerPrecedenceInExpression(cond,    OR_PRECEDENCE)&&    isPropertyAssignmentInExpression(otherBranch))    {    	non-compiled	[CE]  	34	None	replace
270	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)||!isLowerPrecedenceInExpression(thenBranch))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)||!isLowerPrecedenceInExpression(thenBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)||!isLowerPrecedenceInExpression(thenBranch))  {	  if(!isLowerPrecedenceInExpression(thenBranch))    {    	non-compiled	[CE]  	91	None	replace
271	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(cond))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(!isLowerPrecedenceInExpression(cond))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(!isLowerPrecedenceInExpression(cond))  {	  if(!isLowerPrecedenceInExpression(thenBranch))    {    	non-compiled	[CE]  	91	None	replace
272	[BUG]  [BUGGY]  Node  thenOp  =  getBlockExpression(elseBranch);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  Node  thenOp  =  getBlockExpression(elseBranch);  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	Node  thenOp  =  getBlockExpression(elseBranch);	  Node    thenOp    =    getBlockExpression(thenBranch);    	non-compiled	[CE]  	96	None	replace
273	[BUG]  [BUGGY]  Node  thenOp  =  getBlockExpression(thenBranch,  elseBranch);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  Node  thenOp  =  getBlockExpression(thenBranch,  elseBranch);  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	Node  thenOp  =  getBlockExpression(thenBranch,  elseBranch);	  Node    thenOp    =    getBlockExpression(thenBranch);    	non-compiled	[CE]  	96	None	replace
274	[BUG]  [BUGGY]  Node  thenOp  =  getPropertyAssignmentInExpression(thenBranch);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  Node  thenOp  =  getPropertyAssignmentInExpression(thenBranch);  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	Node  thenOp  =  getPropertyAssignmentInExpression(thenBranch);	  Node    thenOp    =    getBlockExpression(thenBranch);    	non-compiled	[CE]  	96	None	replace
275	[BUG]  [BUGGY]  Node  thenOp  =  getOwnExpression(thenBranch);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  Node  thenOp  =  getOwnExpression(thenBranch);  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	Node  thenOp  =  getOwnExpression(thenBranch);	  Node    thenOp    =    getBlockExpression(thenBranch);    	non-compiled	[CE]  	96	None	replace
276	[BUG]  [BUGGY]  Node  thenOp  =  getAndClearBlockExpression(thenBranch);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  Node  thenOp  =  getAndClearBlockExpression(thenBranch);  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	Node  thenOp  =  getAndClearBlockExpression(thenBranch);	  Node    thenOp    =    getBlockExpression(thenBranch);    	non-compiled	[CE]  	96	None	replace
277	[BUG]  [BUGGY]  Node  thenOp  =  getBlockExpression(thenBranch.cloneTree());  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  Node  thenOp  =  getBlockExpression(thenBranch.cloneTree());  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	Node  thenOp  =  getBlockExpression(thenBranch.cloneTree());	  Node    thenOp    =    getBlockExpression(thenBranch);    	non-compiled	[CE]  	96	None	replace
278	[BUG]  [BUGGY]  Node  thenAssign  =  getPropertyAssignment(elseBranch);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  Node  thenAssign  =  getPropertyAssignment(elseBranch);  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	Node  thenAssign  =  getPropertyAssignment(elseBranch);	  Node    thenAssign    =    getBlockExpression(thenBranch);    	non-compiled	[CE]  	94	None	replace
279	[BUG]  [BUGGY]  Node  thenAssign  =  getPropertyAssignmentInExpression(elseBranch);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  Node  thenAssign  =  getPropertyAssignmentInExpression(elseBranch);  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	Node  thenAssign  =  getPropertyAssignmentInExpression(elseBranch);	  Node    thenAssign    =    getBlockExpression(thenBranch);    	non-compiled	[CE]  	94	None	replace
280	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(thenBranch)||!isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(!isLowerPrecedenceInExpression(thenBranch)||!isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(!isLowerPrecedenceInExpression(thenBranch)||!isPropertyAssignmentInExpression(elseBranch))  {	  if(!isLowerPrecedenceInExpression(thenBranch)&&!isPropertyAssignmentInExpression(elseBranch))    {    	non-compiled	[CE]  	87	None	replace
281	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(thenBranch)||!isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(thenBranch)||!isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(thenBranch)||!isPropertyAssignmentInExpression(elseBranch))  {	  if(!isLowerPrecedenceInExpression(thenBranch)&&!isPropertyAssignmentInExpression(elseBranch))    {    	non-compiled	[CE]  	87	None	replace
282	[BUG]  [BUGGY]  if(!getBlockExpression(thenBranch)&&!isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(!getBlockExpression(thenBranch)&&!isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(!getBlockExpression(thenBranch)&&!isPropertyAssignmentInExpression(elseBranch))  {	  if(!isLowerPrecedenceInExpression(thenBranch)&&!isPropertyAssignmentInExpression(elseBranch))    {    	non-compiled	[CE]  	87	None	replace
283	[BUG]  [BUGGY]  if(getAssignmentInExpression(thenBranch)!=  null)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(getAssignmentInExpression(thenBranch)!=  null)  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(getAssignmentInExpression(thenBranch)!=  null)  {	  if(getAssignmentInExpression(elseBranch)!=    null)    {    	non-compiled	[CE]  	65	None	replace
284	[BUG]  [BUGGY]  if(getBlockExpression(thenBranch)!=  null  ||  getAssignmentInExpression(elseBranch)!=  null)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(getBlockExpression(thenBranch)!=  null  ||  getAssignmentInExpression(elseBranch)!=  null)  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(getBlockExpression(thenBranch)!=  null  ||  getAssignmentInExpression(elseBranch)!=  null)  {	  if(getAssignmentInExpression(elseBranch)!=    null)    {    	non-compiled	[CE]  	65	None	replace
285	[BUG]  [BUGGY]  if(getAssignmentInExpression(thenBranch)  ==  null)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(getAssignmentInExpression(thenBranch)  ==  null)  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(getAssignmentInExpression(thenBranch)  ==  null)  {	  if(getAssignmentInExpression(elseBranch)!=    null)    {    	non-compiled	[CE]  	65	None	replace
286	[BUG]  [BUGGY]  if(getAssignmentInExpression(thenBranch)!=  null  ||  getBlockExpression(thenBranch)!=  null)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(getAssignmentInExpression(thenBranch)!=  null  ||  getBlockExpression(thenBranch)!=  null)  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(getAssignmentInExpression(thenBranch)!=  null  ||  getBlockExpression(thenBranch)!=  null)  {	  if(getAssignmentInExpression(elseBranch)!=    null)    {    	non-compiled	[CE]  	65	None	replace
287	[BUG]  [BUGGY]  if(getBlockExpression(cond)!=  null  &&  isPropertyAssignmentInExpression(cond))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(getBlockExpression(cond)!=  null  &&  isPropertyAssignmentInExpression(cond))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(getBlockExpression(cond)!=  null  &&  isPropertyAssignmentInExpression(cond))  {	  if(getBlockExpression(thenBranch)!=    null    &&    isPropertyAssignmentInExpression(thenBranch))    {    	non-compiled	[CE]  	22	None	replace
288	[BUG]  [BUGGY]  if(isBlockExpression(thenBranch)||  isFoldableExpressBlock(propertyBranch))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isBlockExpression(thenBranch)||  isFoldableExpressBlock(propertyBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isBlockExpression(thenBranch)||  isFoldableExpressBlock(propertyBranch))  {	  if(isBlockExpression(thenBranch)&&    isFoldableExpressBlock(propertyBranch))    {    	non-compiled	[CE]  	77	None	replace
289	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpression(thenBranch)&&  isFoldableExpressBlock(propertyBranch))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isPropertyAssignmentInExpression(thenBranch)&&  isFoldableExpressBlock(propertyBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isPropertyAssignmentInExpression(thenBranch)&&  isFoldableExpressBlock(propertyBranch))  {	  if(isBlockExpression(thenBranch)&&    isFoldableExpressBlock(propertyBranch))    {    	non-compiled	[CE]  	77	None	replace
290	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond)&&  isFoldableExpressBlock(propertyBranch))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(cond)&&  isFoldableExpressBlock(propertyBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(cond)&&  isFoldableExpressBlock(propertyBranch))  {	  if(isBlockExpression(thenBranch)&&    isFoldableExpressBlock(propertyBranch))    {    	non-compiled	[CE]  	77	None	replace
291	[BUG]  [BUGGY]  if(getBlockExpression(thenBranch)||  isFoldableExpressBlock(propertyBranch))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(getBlockExpression(thenBranch)||  isFoldableExpressBlock(propertyBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(getBlockExpression(thenBranch)||  isFoldableExpressBlock(propertyBranch))  {	  if(isBlockExpression(thenBranch)&&    isFoldableExpressBlock(propertyBranch))    {    	non-compiled	[CE]  	77	None	replace
292	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpression(cond)&&  isFoldableExpressBlock(propertyBranch))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isPropertyAssignmentInExpression(cond)&&  isFoldableExpressBlock(propertyBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isPropertyAssignmentInExpression(cond)&&  isFoldableExpressBlock(propertyBranch))  {	  if(isBlockExpression(thenBranch)&&    isFoldableExpressBlock(propertyBranch))    {    	non-compiled	[CE]  	77	None	replace
293	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond)||!isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(cond)||!isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(cond)||!isPropertyAssignmentInExpression(elseBranch))  {	  if(!isPropertyAssignmentInExpression(thenBranch))    {    	non-compiled	[CE]  	52	None	replace
294	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond)||!isPropertyAssignmentInExpression(thenBranch))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(cond)||!isPropertyAssignmentInExpression(thenBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(cond)||!isPropertyAssignmentInExpression(thenBranch))  {	  if(!isPropertyAssignmentInExpression(thenBranch))    {    	non-compiled	[CE]  	52	None	replace
295	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&!isPropertyAssignmentInExpression(thenBranch))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&!isPropertyAssignmentInExpression(thenBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&!isPropertyAssignmentInExpression(thenBranch))  {	  if(!isPropertyAssignmentInExpression(thenBranch))    {    	non-compiled	[CE]  	52	None	replace
296	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&!isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&!isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&!isPropertyAssignmentInExpression(elseBranch))  {	  if(!isPropertyAssignmentInExpression(thenBranch))    {    	non-compiled	[CE]  	52	None	replace
297	[BUG]  [BUGGY]  Node  thenBranch  =  getBlockExpression(thenBranch,  elseBranch);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  Node  thenBranch  =  getBlockExpression(thenBranch,  elseBranch);  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	Node  thenBranch  =  getBlockExpression(thenBranch,  elseBranch);	  Node    thenBranch    =    getBlockExpression(thenBranch);    	non-compiled	[CE]  	18	None	replace
298	[BUG]  [BUGGY]  Node  thenBranch  =  getOwnExpression(thenBranch);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  Node  thenBranch  =  getOwnExpression(thenBranch);  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	Node  thenBranch  =  getOwnExpression(thenBranch);	  Node    thenBranch    =    getBlockExpression(thenBranch);    	non-compiled	[CE]  	18	None	replace
299	[BUG]  [BUGGY]  Node  thenBranch  =  getOwnExpression(elseBranch);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  Node  thenBranch  =  getOwnExpression(elseBranch);  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	Node  thenBranch  =  getOwnExpression(elseBranch);	  Node    thenBranch    =    getBlockExpression(thenBranch);    	non-compiled	[CE]  	18	None	replace
300	[BUG]  [BUGGY]  Node  thenBranch  =  getPropertyAssignmentInExpression(thenBranch);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  Node  thenBranch  =  getPropertyAssignmentInExpression(thenBranch);  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	Node  thenBranch  =  getPropertyAssignmentInExpression(thenBranch);	  Node    thenBranch    =    getBlockExpression(thenBranch);    	non-compiled	[CE]  	18	None	replace
301	[BUG]  [BUGGY]  Node  thenBranch  =  getBlockExpression(thenBranch.cloneTree());  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  Node  thenBranch  =  getBlockExpression(thenBranch.cloneTree());  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	Node  thenBranch  =  getBlockExpression(thenBranch.cloneTree());	  Node    thenBranch    =    getBlockExpression(thenBranch);    	non-compiled	[CE]  	18	None	replace
302	[BUG]  [BUGGY]  if(isBlockExpression(thenBranch)||  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)||  isPropertyAssignmentInExpression(cond))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isBlockExpression(thenBranch)||  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)||  isPropertyAssignmentInExpression(cond))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isBlockExpression(thenBranch)||  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)||  isPropertyAssignmentInExpression(cond))  {	  if(isLowerPrecedenceInExpression(cond,    OR_PRECEDENCE)||    isPropertyAssignmentInExpression(cond))    {    	non-compiled	[CE]  	100	None	replace
303	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(thenBranch))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(!isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(thenBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(!isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(thenBranch))  {	  if(!isLowerPrecedenceInExpression(cond,    OR_PRECEDENCE)&&    isPropertyAssignmentInExpression(cond))    {    	non-compiled	[CE]  	102	None	replace
304	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)||  isPropertyAssignmentInExpression(cond))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(!isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)||  isPropertyAssignmentInExpression(cond))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(!isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)||  isPropertyAssignmentInExpression(cond))  {	  if(!isLowerPrecedenceInExpression(cond,    OR_PRECEDENCE)&&    isPropertyAssignmentInExpression(cond))    {    	non-compiled	[CE]  	102	None	replace
305	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(thenBranch)||  getPropertyAssignmentInExpression(elseBranch)!=  null)  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(thenBranch)||  getPropertyAssignmentInExpression(elseBranch)!=  null)  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(thenBranch)||  getPropertyAssignmentInExpression(elseBranch)!=  null)  {	  if(getPropertyAssignmentInExpression(elseBranch)!=    null)    {    	non-compiled	[CE]  	63	None	replace
306	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(thenBranch)&&  getPropertyAssignmentInExpression(elseBranch)!=  null)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(thenBranch)&&  getPropertyAssignmentInExpression(elseBranch)!=  null)  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(thenBranch)&&  getPropertyAssignmentInExpression(elseBranch)!=  null)  {	  if(getPropertyAssignmentInExpression(elseBranch)!=    null)    {    	non-compiled	[CE]  	63	None	replace
307	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(thenBranch)||  isLowerPrecedenceInExpression(thenBranch))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(thenBranch)||  isLowerPrecedenceInExpression(thenBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(thenBranch)||  isLowerPrecedenceInExpression(thenBranch))  {	  if(getPropertyAssignmentInExpression(elseBranch)!=    null)    {    	non-compiled	[CE]  	63	None	replace
308	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(thenBranch)&&  getBlockExpression(thenBranch)!=  null)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(thenBranch)&&  getBlockExpression(thenBranch)!=  null)  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(thenBranch)&&  getBlockExpression(thenBranch)!=  null)  {	  if(getPropertyAssignmentInExpression(elseBranch)!=    null)    {    	non-compiled	[CE]  	63	None	replace
309	[BUG]  [BUGGY]  Node  thenBranch  =  nextBranch.getNext();  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  Node  thenBranch  =  nextBranch.getNext();  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	Node  thenBranch  =  nextBranch.getNext();	  Node    thenBranch    =    thenBranch.getNext();    	non-compiled	[CE]  	21	None	replace
310	[BUG]  [BUGGY]  Node  thenBranch  =  const.getNext();  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  Node  thenBranch  =  const.getNext();  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	Node  thenBranch  =  const.getNext();	  Node    thenBranch    =    thenBranch.getNext();    	non-compiled	[CE]  	21	None	replace
311	[BUG]  [BUGGY]  if(thenBranch!=  null  &&  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(thenBranch!=  null  &&  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(thenBranch!=  null  &&  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(cond,    OR_PRECEDENCE)&&    isLowerPrecedenceInExpression(cond,    OR_PRECEDENCE))    {    	non-compiled	[CE]  	103	None	replace
312	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpression(thenBranch,  OR_PRECEDENCE)&&  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isPropertyAssignmentInExpression(thenBranch,  OR_PRECEDENCE)&&  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isPropertyAssignmentInExpression(thenBranch,  OR_PRECEDENCE)&&  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(cond,    OR_PRECEDENCE)&&    isLowerPrecedenceInExpression(cond,    OR_PRECEDENCE))    {    	non-compiled	[CE]  	103	None	replace
313	[BUG]  [BUGGY]  if(isBlockExpression(thenBranch,  OR_PRECEDENCE)&&  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isBlockExpression(thenBranch,  OR_PRECEDENCE)&&  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isBlockExpression(thenBranch,  OR_PRECEDENCE)&&  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(cond,    OR_PRECEDENCE)&&    isLowerPrecedenceInExpression(cond,    OR_PRECEDENCE))    {    	non-compiled	[CE]  	103	None	replace
314	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)||  isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(!isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)||  isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(!isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)||  isPropertyAssignmentInExpression(elseBranch))  {	  if(!isLowerPrecedenceInExpression(cond,    OR_PRECEDENCE)&&    isPropertyAssignmentInExpression(elseBranch))    {    	non-compiled	[CE]  	88	None	replace
315	[BUG]  [BUGGY]  Node  thenBranch  =  thenBranch.getNext();  elseBranch  =  elseBranch.getNext();  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  Node  thenBranch  =  thenBranch.getNext();  elseBranch  =  elseBranch.getNext();  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	Node  thenBranch  =  thenBranch.getNext();  elseBranch  =  elseBranch.getNext();	  Node    thenBranch    =    cond.getNext();    elseBranch    =    elseBranch.getNext();    	non-compiled	[CE]  	20	None	replace
316	[BUG]  [BUGGY]  Node  thenBranch  =  cond.getFirstChild();  elseBranch  =  elseBranch.getNext();  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  Node  thenBranch  =  cond.getFirstChild();  elseBranch  =  elseBranch.getNext();  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	Node  thenBranch  =  cond.getFirstChild();  elseBranch  =  elseBranch.getNext();	  Node    thenBranch    =    cond.getNext();    elseBranch    =    elseBranch.getNext();    	non-compiled	[CE]  	20	None	replace
317	[BUG]  [BUGGY]  Node  thenBranch  =  cond.getParent();  elseBranch  =  elseBranch.getNext();  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  Node  thenBranch  =  cond.getParent();  elseBranch  =  elseBranch.getNext();  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	Node  thenBranch  =  cond.getParent();  elseBranch  =  elseBranch.getNext();	  Node    thenBranch    =    cond.getNext();    elseBranch    =    elseBranch.getNext();    	non-compiled	[CE]  	20	None	replace
318	[BUG]  [BUGGY]  Node  thenBranch  =  cond.getLastChild();  elseBranch  =  elseBranch.getNext();  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  Node  thenBranch  =  cond.getLastChild();  elseBranch  =  elseBranch.getNext();  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	Node  thenBranch  =  cond.getLastChild();  elseBranch  =  elseBranch.getNext();	  Node    thenBranch    =    cond.getNext();    elseBranch    =    elseBranch.getNext();    	non-compiled	[CE]  	20	None	replace
319	[BUG]  [BUGGY]  Node  thenBranch  =  cond.getPrevious();  elseBranch  =  elseBranch.getNext();  [CE]  [FE]                                            AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  Node  thenBranch  =  cond.getPrevious();  elseBranch  =  elseBranch.getNext();  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	Node  thenBranch  =  cond.getPrevious();  elseBranch  =  elseBranch.getNext();	  Node    thenBranch    =    cond.getNext();    elseBranch    =    elseBranch.getNext();    	non-compiled	[CE]  	20	None	replace
320	[BUG]  [BUGGY]  if(getBlockExpression(thenBranch)!=  null  ||  getPropertyAssignmentInExpression(elseBranch)  ==  null)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(getBlockExpression(thenBranch)!=  null  ||  getPropertyAssignmentInExpression(elseBranch)  ==  null)  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(getBlockExpression(thenBranch)!=  null  ||  getPropertyAssignmentInExpression(elseBranch)  ==  null)  {	  if(getPropertyAssignmentInExpression(elseBranch)    ==    null)    {    	non-compiled	[CE]  	64	None	replace
321	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(thenBranch)||  getPropertyAssignmentInExpression(elseBranch)  ==  null)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(thenBranch)||  getPropertyAssignmentInExpression(elseBranch)  ==  null)  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(thenBranch)||  getPropertyAssignmentInExpression(elseBranch)  ==  null)  {	  if(getPropertyAssignmentInExpression(elseBranch)    ==    null)    {    	non-compiled	[CE]  	64	None	replace
322	[BUG]  [BUGGY]  if(getBlockExpression(thenBranch)  ==  null  ||  getPropertyAssignmentInExpression(elseBranch)  ==  null)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(getBlockExpression(thenBranch)  ==  null  ||  getPropertyAssignmentInExpression(elseBranch)  ==  null)  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(getBlockExpression(thenBranch)  ==  null  ||  getPropertyAssignmentInExpression(elseBranch)  ==  null)  {	  if(getPropertyAssignmentInExpression(elseBranch)    ==    null)    {    	non-compiled	[CE]  	64	None	replace
323	[BUG]  [BUGGY]  if(getBlockExpression(thenBranch)  ==  null  ||  getPropertyAssignmentInExpression(elseBranch)!=  null)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(getBlockExpression(thenBranch)  ==  null  ||  getPropertyAssignmentInExpression(elseBranch)!=  null)  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(getBlockExpression(thenBranch)  ==  null  ||  getPropertyAssignmentInExpression(elseBranch)!=  null)  {	  if(getPropertyAssignmentInExpression(elseBranch)    ==    null)    {    	non-compiled	[CE]  	64	None	replace
324	[BUG]  [BUGGY]  if(isBlockExpression(thenBranch)||  isLowerPrecedenceInExpression(cond)||  isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isBlockExpression(thenBranch)||  isLowerPrecedenceInExpression(cond)||  isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isBlockExpression(thenBranch)||  isLowerPrecedenceInExpression(cond)||  isPropertyAssignmentInExpression(elseBranch))  {	  if(isLowerPrecedenceInExpression(cond)||    isPropertyAssignmentInExpression(elseBranch))    {    	non-compiled	[CE]  	23	None	replace
325	[BUG]  [BUGGY]  Node  thenBranch  =  getBlockExpression(elseBranch,  elseBranch);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  Node  thenBranch  =  getBlockExpression(elseBranch,  elseBranch);  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	Node  thenBranch  =  getBlockExpression(elseBranch,  elseBranch);	  Node    thenBranch    =    getBlockExpression(elseBranch);    	non-compiled	[CE]  	75	None	replace
326	[BUG]  [BUGGY]  Node  thenBranch  =  getBlockExpression(thenBranch.getNext());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  Node  thenBranch  =  getBlockExpression(thenBranch.getNext());  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	Node  thenBranch  =  getBlockExpression(thenBranch.getNext());	  Node    thenBranch    =    getBlockExpression(elseBranch);    	non-compiled	[CE]  	75	None	replace
327	[BUG]  [BUGGY]  if(getBlockExpression(thenBranch)!=  null  ||  getPropertyAssignmentInExpression(thenBranch)  ==  null)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(getBlockExpression(thenBranch)!=  null  ||  getPropertyAssignmentInExpression(thenBranch)  ==  null)  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(getBlockExpression(thenBranch)!=  null  ||  getPropertyAssignmentInExpression(thenBranch)  ==  null)  {	  if(getPropertyAssignmentInExpression(thenBranch)    ==    null)    {    	non-compiled	[CE]  	9	None	replace
328	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond)||  getPropertyAssignmentInExpression(elseBranch)  ==  null)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(cond)||  getPropertyAssignmentInExpression(elseBranch)  ==  null)  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(cond)||  getPropertyAssignmentInExpression(elseBranch)  ==  null)  {	  if(getPropertyAssignmentInExpression(thenBranch)    ==    null)    {    	non-compiled	[CE]  	9	None	replace
329	[BUG]  [BUGGY]  if(getBlockExpression(thenBranch)&&  isLowerPrecedenceInExpression(thenBranch)&&  isFoldableExpressBlock(elseBranch))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(getBlockExpression(thenBranch)&&  isLowerPrecedenceInExpression(thenBranch)&&  isFoldableExpressBlock(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(getBlockExpression(thenBranch)&&  isLowerPrecedenceInExpression(thenBranch)&&  isFoldableExpressBlock(elseBranch))  {	  if(getBlockExpression(thenBranch)||    isLowerPrecedenceInExpression(thenBranch)||    isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	29	None	replace
330	[BUG]  [BUGGY]  if(getBlockExpression(thenBranch)||  isLowerPrecedenceInExpression(elseBranch)||  isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(getBlockExpression(thenBranch)||  isLowerPrecedenceInExpression(elseBranch)||  isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(getBlockExpression(thenBranch)||  isLowerPrecedenceInExpression(elseBranch)||  isPropertyAssignmentInExpression(elseBranch))  {	  if(getBlockExpression(thenBranch)||    isLowerPrecedenceInExpression(thenBranch)||    isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	29	None	replace
331	[BUG]  [BUGGY]  if(getBlockExpression(thenBranch)||  isPropertyAssignmentInExpression(thenBranch)||  isFoldableExpressBlock(elseBranch))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(getBlockExpression(thenBranch)||  isPropertyAssignmentInExpression(thenBranch)||  isFoldableExpressBlock(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(getBlockExpression(thenBranch)||  isPropertyAssignmentInExpression(thenBranch)||  isFoldableExpressBlock(elseBranch))  {	  if(getBlockExpression(thenBranch)||    isLowerPrecedenceInExpression(thenBranch)||    isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	29	None	replace
332	[BUG]  [BUGGY]  if(getBlockExpression(thenBranch)||  isLowerPrecedenceInExpression(elseBranch)||  isFoldableExpressBlock(elseBranch))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(getBlockExpression(thenBranch)||  isLowerPrecedenceInExpression(elseBranch)||  isFoldableExpressBlock(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(getBlockExpression(thenBranch)||  isLowerPrecedenceInExpression(elseBranch)||  isFoldableExpressBlock(elseBranch))  {	  if(getBlockExpression(thenBranch)||    isLowerPrecedenceInExpression(thenBranch)||    isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	29	None	replace
333	[BUG]  [BUGGY]  if(getBlockExpression(thenBranch)||  isLowerPrecedenceInExpression(elseBranch)||  isFoldableExpressBlock(cond))  {  [CE]  [FE]                                AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(getBlockExpression(thenBranch)||  isLowerPrecedenceInExpression(elseBranch)||  isFoldableExpressBlock(cond))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(getBlockExpression(thenBranch)||  isLowerPrecedenceInExpression(elseBranch)||  isFoldableExpressBlock(cond))  {	  if(getBlockExpression(thenBranch)||    isLowerPrecedenceInExpression(thenBranch)||    isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	29	None	replace
334	[BUG]  [BUGGY]  if(isBlockExpression(thenBranch)&&  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isBlockExpression(thenBranch)&&  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isBlockExpression(thenBranch)&&  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(elseBranch))  {	  if(isLowerPrecedenceInExpression(cond,    OR_PRECEDENCE)&&    isPropertyAssignmentInExpression(elseBranch))    {    	non-compiled	[CE]  	3	None	replace
335	[BUG]  [BUGGY]  if(isBlockExpression(cond)||  isLowerPrecedenceInExpression(thenBranch)||  isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isBlockExpression(cond)||  isLowerPrecedenceInExpression(thenBranch)||  isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isBlockExpression(cond)||  isLowerPrecedenceInExpression(thenBranch)||  isPropertyAssignmentInExpression(elseBranch))  {	  if(isBlockExpression(cond)&&    isLowerPrecedenceInExpression(thenBranch)&&    isPropertyAssignmentInExpression(elseBranch))    {    	non-compiled	[CE]  	66	None	replace
336	[BUG]  [BUGGY]  if(getBlockExpression(thenBranch)||  isLowerPrecedenceInExpression(thenBranch)&&  isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(getBlockExpression(thenBranch)||  isLowerPrecedenceInExpression(thenBranch)&&  isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(getBlockExpression(thenBranch)||  isLowerPrecedenceInExpression(thenBranch)&&  isPropertyAssignmentInExpression(elseBranch))  {	  if(isBlockExpression(cond)&&    isLowerPrecedenceInExpression(thenBranch)&&    isPropertyAssignmentInExpression(elseBranch))    {    	non-compiled	[CE]  	66	None	replace
337	[BUG]  [BUGGY]  if(isBlockExpression(cond)||  isLowerPrecedenceInExpression(thenBranch)&&  isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isBlockExpression(cond)||  isLowerPrecedenceInExpression(thenBranch)&&  isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isBlockExpression(cond)||  isLowerPrecedenceInExpression(thenBranch)&&  isPropertyAssignmentInExpression(elseBranch))  {	  if(isBlockExpression(cond)&&    isLowerPrecedenceInExpression(thenBranch)&&    isPropertyAssignmentInExpression(elseBranch))    {    	non-compiled	[CE]  	66	None	replace
338	[BUG]  [BUGGY]  if(isBlockExpression(cond)&&  isLowerPrecedenceInExpression(elseBranch)&&  isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isBlockExpression(cond)&&  isLowerPrecedenceInExpression(elseBranch)&&  isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isBlockExpression(cond)&&  isLowerPrecedenceInExpression(elseBranch)&&  isPropertyAssignmentInExpression(elseBranch))  {	  if(isBlockExpression(cond)&&    isLowerPrecedenceInExpression(thenBranch)&&    isPropertyAssignmentInExpression(elseBranch))    {    	non-compiled	[CE]  	66	None	replace
339	[BUG]  [BUGGY]  if(isBlockExpression(cond)||  isLowerPrecedenceInExpression(cond)||  isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isBlockExpression(cond)||  isLowerPrecedenceInExpression(cond)||  isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isBlockExpression(cond)||  isLowerPrecedenceInExpression(cond)||  isPropertyAssignmentInExpression(elseBranch))  {	  if(isLowerPrecedenceInExpression(cond)||    isPropertyAssignmentInExpression(thenBranch))    {    	non-compiled	[CE]  	24	None	replace
340	[BUG]  [BUGGY]  if(isBlockExpression(cond)||  isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isBlockExpression(cond)||  isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isBlockExpression(cond)||  isPropertyAssignmentInExpression(elseBranch))  {	  if(isLowerPrecedenceInExpression(cond)||    isPropertyAssignmentInExpression(thenBranch))    {    	non-compiled	[CE]  	24	None	replace
341	[BUG]  [BUGGY]  if(isBlockExpression(cond)||  isLowerPrecedenceInExpression(cond)||  isPropertyAssignmentInExpression(thenBranch))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isBlockExpression(cond)||  isLowerPrecedenceInExpression(cond)||  isPropertyAssignmentInExpression(thenBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isBlockExpression(cond)||  isLowerPrecedenceInExpression(cond)||  isPropertyAssignmentInExpression(thenBranch))  {	  if(isLowerPrecedenceInExpression(cond)||    isPropertyAssignmentInExpression(thenBranch))    {    	non-compiled	[CE]  	24	None	replace
342	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(cond)&&  isPropertyAssignmentInExpression(thenBranch))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(!isLowerPrecedenceInExpression(cond)&&  isPropertyAssignmentInExpression(thenBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(!isLowerPrecedenceInExpression(cond)&&  isPropertyAssignmentInExpression(thenBranch))  {	  if(isLowerPrecedenceInExpression(cond)||    isPropertyAssignmentInExpression(thenBranch))    {    	non-compiled	[CE]  	24	None	replace
343	[BUG]  [BUGGY]  if(getBlockExpression(thenBranch)!=  null  &&  isLowerPrecedenceInExpression(thenBranch)&&  isPropertyAssignmentBlock(elseBranch))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(getBlockExpression(thenBranch)!=  null  &&  isLowerPrecedenceInExpression(thenBranch)&&  isPropertyAssignmentBlock(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(getBlockExpression(thenBranch)!=  null  &&  isLowerPrecedenceInExpression(thenBranch)&&  isPropertyAssignmentBlock(elseBranch))  {	  if(isLowerPrecedenceInExpression(thenBranch)&&    isPropertyAssignmentBlock(elseBranch))    {    	non-compiled	[CE]  	46	None	replace
344	[BUG]  [BUGGY]  if(isBlockExpression(thenBranch)&&  isPropertyAssignmentBlock(elseBranch))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isBlockExpression(thenBranch)&&  isPropertyAssignmentBlock(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isBlockExpression(thenBranch)&&  isPropertyAssignmentBlock(elseBranch))  {	  if(isLowerPrecedenceInExpression(thenBranch)&&    isPropertyAssignmentBlock(elseBranch))    {    	non-compiled	[CE]  	46	None	replace
345	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(thenBranch)&&  isPropertyAssignmentBlock(otherBranch))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(thenBranch)&&  isPropertyAssignmentBlock(otherBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(thenBranch)&&  isPropertyAssignmentBlock(otherBranch))  {	  if(isLowerPrecedenceInExpression(thenBranch)&&    isPropertyAssignmentBlock(elseBranch))    {    	non-compiled	[CE]  	46	None	replace
346	[BUG]  [BUGGY]  if(!isFoldableExpressBlock(thenBranch)&&!isPropertyAssignmentBlock(elseBranch))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(!isFoldableExpressBlock(thenBranch)&&!isPropertyAssignmentBlock(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(!isFoldableExpressBlock(thenBranch)&&!isPropertyAssignmentBlock(elseBranch))  {	  if(!isFoldableExpressBlock(thenBranch)||!isPropertyAssignmentBlock(elseBranch))    {    	non-compiled	[CE]  	85	None	replace
347	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(thenBranch)||!isPropertyAssignmentBlock(elseBranch))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(!isLowerPrecedenceInExpression(thenBranch)||!isPropertyAssignmentBlock(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(!isLowerPrecedenceInExpression(thenBranch)||!isPropertyAssignmentBlock(elseBranch))  {	  if(!isFoldableExpressBlock(thenBranch)||!isPropertyAssignmentBlock(elseBranch))    {    	non-compiled	[CE]  	85	None	replace
348	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(thenBranch)&&!isPropertyAssignmentBlock(elseBranch))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(!isLowerPrecedenceInExpression(thenBranch)&&!isPropertyAssignmentBlock(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(!isLowerPrecedenceInExpression(thenBranch)&&!isPropertyAssignmentBlock(elseBranch))  {	  if(!isFoldableExpressBlock(thenBranch)||!isPropertyAssignmentBlock(elseBranch))    {    	non-compiled	[CE]  	85	None	replace
349	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(cond)||!isPropertyAssignmentBlock(elseBranch))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(!isLowerPrecedenceInExpression(cond)||!isPropertyAssignmentBlock(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(!isLowerPrecedenceInExpression(cond)||!isPropertyAssignmentBlock(elseBranch))  {	  if(!isFoldableExpressBlock(thenBranch)||!isPropertyAssignmentBlock(elseBranch))    {    	non-compiled	[CE]  	85	None	replace
350	[BUG]  [BUGGY]  if(!isExpressionBlock(thenBranch)||!isPropertyAssignmentBlock(elseBranch))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(!isExpressionBlock(thenBranch)||!isPropertyAssignmentBlock(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(!isExpressionBlock(thenBranch)||!isPropertyAssignmentBlock(elseBranch))  {	  if(!isFoldableExpressBlock(thenBranch)||!isPropertyAssignmentBlock(elseBranch))    {    	non-compiled	[CE]  	85	None	replace
351	[BUG]  [BUGGY]  if(!isPropertyAssignmentBlock(thenBranch)||!isFoldableExpressBlock(elseBranch))  {  [CE]  [FE]                                AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(!isPropertyAssignmentBlock(thenBranch)||!isFoldableExpressBlock(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(!isPropertyAssignmentBlock(thenBranch)||!isFoldableExpressBlock(elseBranch))  {	  if(!isFoldableExpressBlock(thenBranch)||!isPropertyAssignmentBlock(elseBranch))    {    	non-compiled	[CE]  	85	None	replace
352	[BUG]  [BUGGY]  if(isBlockExpression(cond,  OR_PRECEDENCE)||  isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isBlockExpression(cond,  OR_PRECEDENCE)||  isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isBlockExpression(cond,  OR_PRECEDENCE)||  isPropertyAssignmentInExpression(elseBranch))  {	  if(isLowerPrecedenceInExpression(cond,    OR_PRECEDENCE)||    isPropertyAssignmentInExpression(thenBranch))    {    	non-compiled	[CE]  	5	None	replace
353	[BUG]  [BUGGY]  if(isBlockExpression(cond,  OR_PRECEDENCE)||  isPropertyAssignmentInExpression(thenBranch))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isBlockExpression(cond,  OR_PRECEDENCE)||  isPropertyAssignmentInExpression(thenBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isBlockExpression(cond,  OR_PRECEDENCE)||  isPropertyAssignmentInExpression(thenBranch))  {	  if(isLowerPrecedenceInExpression(cond,    OR_PRECEDENCE)||    isPropertyAssignmentInExpression(thenBranch))    {    	non-compiled	[CE]  	5	None	replace
354	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpression(thenBranch)||  isLowerPrecedenceInExpression(cond)&&  isFoldableExpressBlock(elseBranch))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isPropertyAssignmentInExpression(thenBranch)||  isLowerPrecedenceInExpression(cond)&&  isFoldableExpressBlock(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isPropertyAssignmentInExpression(thenBranch)||  isLowerPrecedenceInExpression(cond)&&  isFoldableExpressBlock(elseBranch))  {	  if(isLowerPrecedenceInExpression(cond)||    isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	25	None	replace
355	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpression(thenBranch)&&  isLowerPrecedenceInExpression(cond)||  isFoldableExpressBlock(elseBranch))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isPropertyAssignmentInExpression(thenBranch)&&  isLowerPrecedenceInExpression(cond)||  isFoldableExpressBlock(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isPropertyAssignmentInExpression(thenBranch)&&  isLowerPrecedenceInExpression(cond)||  isFoldableExpressBlock(elseBranch))  {	  if(isLowerPrecedenceInExpression(cond)||    isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	25	None	replace
356	[BUG]  [BUGGY]  if(isBlockExpression(thenBranch)||  isLowerPrecedenceInExpression(cond)||  isFoldableExpressBlock(elseBranch))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isBlockExpression(thenBranch)||  isLowerPrecedenceInExpression(cond)||  isFoldableExpressBlock(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isBlockExpression(thenBranch)||  isLowerPrecedenceInExpression(cond)||  isFoldableExpressBlock(elseBranch))  {	  if(isLowerPrecedenceInExpression(cond)||    isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	25	None	replace
357	[BUG]  [BUGGY]  Node  thenAssign  =  thenBranch.getFirstChild();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  Node  thenAssign  =  thenBranch.getFirstChild();  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	Node  thenAssign  =  thenBranch.getFirstChild();	  Node    thenAssign    =    n.getFirstChild();    	non-compiled	[CE]  	98	None	replace
358	[BUG]  [BUGGY]  Node  thenAssign  =  thenBranch.getLastChild();  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  Node  thenAssign  =  thenBranch.getLastChild();  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	Node  thenAssign  =  thenBranch.getLastChild();	  Node    thenAssign    =    n.getFirstChild();    	non-compiled	[CE]  	98	None	replace
359	[BUG]  [BUGGY]  Node  thenAssign  =  elseBranch.getFirstChild();  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  Node  thenAssign  =  elseBranch.getFirstChild();  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	Node  thenAssign  =  elseBranch.getFirstChild();	  Node    thenAssign    =    n.getFirstChild();    	non-compiled	[CE]  	98	None	replace
360	[BUG]  [BUGGY]  Node  thenAssign  =  n.getLastChild();  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  Node  thenAssign  =  n.getLastChild();  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	Node  thenAssign  =  n.getLastChild();	  Node    thenAssign    =    n.getFirstChild();    	non-compiled	[CE]  	98	None	replace
361	[BUG]  [BUGGY]  Node  thenAssign  =  firstBranch.getFirstChild();  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  Node  thenAssign  =  firstBranch.getFirstChild();  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	Node  thenAssign  =  firstBranch.getFirstChild();	  Node    thenAssign    =    n.getFirstChild();    	non-compiled	[CE]  	98	None	replace
362	[BUG]  [BUGGY]  Node  thenAssign  =  nextBranch.getFirstChild();  [CE]  [FE]                                            AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  Node  thenAssign  =  nextBranch.getFirstChild();  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	Node  thenAssign  =  nextBranch.getFirstChild();	  Node    thenAssign    =    n.getFirstChild();    	non-compiled	[CE]  	98	None	replace
363	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond)&&  elseBranchIsExpressionBlock  ||  isFoldableExpressBlock(thenBranch))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(cond)&&  elseBranchIsExpressionBlock  ||  isFoldableExpressBlock(thenBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(cond)&&  elseBranchIsExpressionBlock  ||  isFoldableExpressBlock(thenBranch))  {	  if(isLowerPrecedenceInExpression(cond)&&    isFoldableExpressBlock(thenBranch))    {    	non-compiled	[CE]  	42	None	replace
364	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond)&&  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(cond)&&  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(cond)&&  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE))  {	  if(isPropertyAssignmentInExpression(thenBranch)&&    isLowerPrecedenceInExpression(cond,    OR_PRECEDENCE))    {    	non-compiled	[CE]  	2	None	replace
365	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond)||  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(cond)||  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(cond)||  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE))  {	  if(isPropertyAssignmentInExpression(thenBranch)&&    isLowerPrecedenceInExpression(cond,    OR_PRECEDENCE))    {    	non-compiled	[CE]  	2	None	replace
366	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond)&&  isPropertyAssignmentInExpression(thenBranch,  OR_PRECEDENCE))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(cond)&&  isPropertyAssignmentInExpression(thenBranch,  OR_PRECEDENCE))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(cond)&&  isPropertyAssignmentInExpression(thenBranch,  OR_PRECEDENCE))  {	  if(isPropertyAssignmentInExpression(thenBranch)&&    isLowerPrecedenceInExpression(cond,    OR_PRECEDENCE))    {    	non-compiled	[CE]  	2	None	replace
367	[BUG]  [BUGGY]  if(isBlockExpression(thenBranch)&&  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isBlockExpression(thenBranch)&&  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isBlockExpression(thenBranch)&&  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE))  {	  if(isPropertyAssignmentInExpression(thenBranch)&&    isLowerPrecedenceInExpression(cond,    OR_PRECEDENCE))    {    	non-compiled	[CE]  	2	None	replace
368	[BUG]  [BUGGY]  if(isConstructorInExpression(thenBranch)||  isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isConstructorInExpression(thenBranch)||  isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isConstructorInExpression(thenBranch)||  isPropertyAssignmentInExpression(elseBranch))  {	  if(isBlockExpression(thenBranch)||    isPropertyAssignmentInExpression(elseBranch))    {    	non-compiled	[CE]  	13	None	replace
369	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(thenBranch)||  elseBranchIsExpressionBlock(elseBranch))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(thenBranch)||  elseBranchIsExpressionBlock(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(thenBranch)||  elseBranchIsExpressionBlock(elseBranch))  {	  if(isLowerPrecedenceInExpression(thenBranch)&&    elseBranchIsExpressionBlock(elseBranch))    {    	non-compiled	[CE]  	45	None	replace
370	[BUG]  [BUGGY]  if(getBlockExpression(thenBranch)!=  null  &&  isLowerPrecedenceInExpression(thenBranch)&&  elseBranchIsExpressionBlock(elseBranch))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(getBlockExpression(thenBranch)!=  null  &&  isLowerPrecedenceInExpression(thenBranch)&&  elseBranchIsExpressionBlock(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(getBlockExpression(thenBranch)!=  null  &&  isLowerPrecedenceInExpression(thenBranch)&&  elseBranchIsExpressionBlock(elseBranch))  {	  if(isLowerPrecedenceInExpression(thenBranch)&&    elseBranchIsExpressionBlock(elseBranch))    {    	non-compiled	[CE]  	45	None	replace
371	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpression(cond)&&  elseBranchIsExpressionBlock(elseBranch))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isPropertyAssignmentInExpression(cond)&&  elseBranchIsExpressionBlock(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isPropertyAssignmentInExpression(cond)&&  elseBranchIsExpressionBlock(elseBranch))  {	  if(isLowerPrecedenceInExpression(thenBranch)&&    elseBranchIsExpressionBlock(elseBranch))    {    	non-compiled	[CE]  	45	None	replace
372	[BUG]  [BUGGY]  if(getBlockExpression(elseBranch)!=  null  ||  isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(getBlockExpression(elseBranch)!=  null  ||  isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(getBlockExpression(elseBranch)!=  null  ||  isPropertyAssignmentInExpression(elseBranch))  {	  if(getBlockExpression(thenBranch)!=    null    ||    isPropertyAssignmentInExpression(elseBranch))    {    	non-compiled	[CE]  	37	None	replace
373	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(cond)||  isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(NodeUtil.isLiteralValue(cond)||  isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(NodeUtil.isLiteralValue(cond)||  isPropertyAssignmentInExpression(elseBranch))  {	  if(NodeUtil.isBlockExpression(thenBranch)||    isPropertyAssignmentInExpression(elseBranch))    {    	non-compiled	[CE]  	105	None	replace
374	[BUG]  [BUGGY]  if(NodeUtil.isAssignmentOp(elseBranch)||  isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(NodeUtil.isAssignmentOp(elseBranch)||  isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(NodeUtil.isAssignmentOp(elseBranch)||  isPropertyAssignmentInExpression(elseBranch))  {	  if(NodeUtil.isBlockExpression(thenBranch)||    isPropertyAssignmentInExpression(elseBranch))    {    	non-compiled	[CE]  	105	None	replace
375	[BUG]  [BUGGY]  if(NodeUtil.isBlockExpression(cond)||  isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(NodeUtil.isBlockExpression(cond)||  isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(NodeUtil.isBlockExpression(cond)||  isPropertyAssignmentInExpression(elseBranch))  {	  if(NodeUtil.isBlockExpression(thenBranch)||    isPropertyAssignmentInExpression(elseBranch))    {    	non-compiled	[CE]  	105	None	replace
376	[BUG]  [BUGGY]  if(NodeUtil.isBlockExpression(elseBranch)&&  isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(NodeUtil.isBlockExpression(elseBranch)&&  isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(NodeUtil.isBlockExpression(elseBranch)&&  isPropertyAssignmentInExpression(elseBranch))  {	  if(NodeUtil.isBlockExpression(thenBranch)||    isPropertyAssignmentInExpression(elseBranch))    {    	non-compiled	[CE]  	105	None	replace
377	[BUG]  [BUGGY]  if(NodeUtil.isImmutableValue(cond)||  isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(NodeUtil.isImmutableValue(cond)||  isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(NodeUtil.isImmutableValue(cond)||  isPropertyAssignmentInExpression(elseBranch))  {	  if(NodeUtil.isBlockExpression(thenBranch)||    isPropertyAssignmentInExpression(elseBranch))    {    	non-compiled	[CE]  	105	None	replace
378	[BUG]  [BUGGY]  if(elseBranch  ==  null  ||  isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(elseBranch  ==  null  ||  isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(elseBranch  ==  null  ||  isPropertyAssignmentInExpression(elseBranch))  {	  if(thenBranch    ==    null    ||    isPropertyAssignmentInExpression(elseBranch))    {    	non-compiled	[CE]  	60	None	replace
379	[BUG]  [BUGGY]  if(elseBranch  ==  null  ||  isPropertyAssignmentInExpression(thenBranch))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(elseBranch  ==  null  ||  isPropertyAssignmentInExpression(thenBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(elseBranch  ==  null  ||  isPropertyAssignmentInExpression(thenBranch))  {	  if(thenBranch    ==    null    ||    isPropertyAssignmentInExpression(elseBranch))    {    	non-compiled	[CE]  	60	None	replace
380	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond)||!isFoldableExpressBlock(elseBranch))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(cond)||!isFoldableExpressBlock(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(cond)||!isFoldableExpressBlock(elseBranch))  {	  if(isLowerPrecedenceInExpression(thenBranch)||!isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	54	None	replace
381	[BUG]  [BUGGY]  thenBranch  =  thenBranch.getNext();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  thenBranch  =  thenBranch.getNext();  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	thenBranch  =  thenBranch.getNext();	  thenBranch    =    elseBranch.getNext();    	non-compiled	[CE]  	17	None	replace
382	[BUG]  [BUGGY]  thenBranch  =  cond.getNext();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  thenBranch  =  cond.getNext();  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	thenBranch  =  cond.getNext();	  thenBranch    =    elseBranch.getNext();    	non-compiled	[CE]  	17	None	replace
383	[BUG]  [BUGGY]  thenBranch  =  secondBranch.getNext();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  thenBranch  =  secondBranch.getNext();  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	thenBranch  =  secondBranch.getNext();	  thenBranch    =    elseBranch.getNext();    	non-compiled	[CE]  	17	None	replace
384	[BUG]  [BUGGY]  thenBranch  =  nextBranch.getNext();  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  thenBranch  =  nextBranch.getNext();  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	thenBranch  =  nextBranch.getNext();	  thenBranch    =    elseBranch.getNext();    	non-compiled	[CE]  	17	None	replace
385	[BUG]  [BUGGY]  thenBranch  =  firstBranch.getNext();  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  thenBranch  =  firstBranch.getNext();  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	thenBranch  =  firstBranch.getNext();	  thenBranch    =    elseBranch.getNext();    	non-compiled	[CE]  	17	None	replace
386	[BUG]  [BUGGY]  thenBranch  =  thenBranch.getParent();  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  thenBranch  =  thenBranch.getParent();  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	thenBranch  =  thenBranch.getParent();	  thenBranch    =    elseBranch.getNext();    	non-compiled	[CE]  	17	None	replace
387	[BUG]  [BUGGY]  if(propertyBranch!=  null  &&  isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(propertyBranch!=  null  &&  isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(propertyBranch!=  null  &&  isPropertyAssignmentInExpression(elseBranch))  {	  if(thenBranch!=    null    &&    isPropertyAssignmentInExpression(propertyBranch))    {    	non-compiled	[CE]  	61	None	replace
388	[BUG]  [BUGGY]  if(elseBranch!=  null  &&  isPropertyAssignmentInExpression(propertyBranch))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(elseBranch!=  null  &&  isPropertyAssignmentInExpression(propertyBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(elseBranch!=  null  &&  isPropertyAssignmentInExpression(propertyBranch))  {	  if(thenBranch!=    null    &&    isPropertyAssignmentInExpression(propertyBranch))    {    	non-compiled	[CE]  	61	None	replace
389	[BUG]  [BUGGY]  if(propertyBranch!=  null  &&  isPropertyAssignmentInExpression(thenBranch))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(propertyBranch!=  null  &&  isPropertyAssignmentInExpression(thenBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(propertyBranch!=  null  &&  isPropertyAssignmentInExpression(thenBranch))  {	  if(thenBranch!=    null    &&    isPropertyAssignmentInExpression(propertyBranch))    {    	non-compiled	[CE]  	61	None	replace
390	[BUG]  [BUGGY]  if(getBlockExpression(thenBranch)!=  null  &&  isPropertyAssignmentInExpression(elseBranch)&&  isFoldableExpressBlock(elseBranch))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(getBlockExpression(thenBranch)!=  null  &&  isPropertyAssignmentInExpression(elseBranch)&&  isFoldableExpressBlock(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(getBlockExpression(thenBranch)!=  null  &&  isPropertyAssignmentInExpression(elseBranch)&&  isFoldableExpressBlock(elseBranch))  {	  if(isPropertyAssignmentInExpression(elseBranch)&&    isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	80	None	replace
391	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(thenBranch)||  isPropertyAssignmentInExpression(elseBranch)&&  isFoldableExpressBlock(elseBranch))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(thenBranch)||  isPropertyAssignmentInExpression(elseBranch)&&  isFoldableExpressBlock(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(thenBranch)||  isPropertyAssignmentInExpression(elseBranch)&&  isFoldableExpressBlock(elseBranch))  {	  if(isPropertyAssignmentInExpression(elseBranch)&&    isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	80	None	replace
392	[BUG]  [BUGGY]  if(isBlockExpression(thenBranch)&&  isPropertyAssignmentInExpression(cond))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isBlockExpression(thenBranch)&&  isPropertyAssignmentInExpression(cond))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isBlockExpression(thenBranch)&&  isPropertyAssignmentInExpression(cond))  {	  if(isBlockExpression(thenBranch)||    isPropertyAssignmentInExpression(cond))    {    	non-compiled	[CE]  	86	None	replace
393	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond)||  isPropertyAssignmentInExpression(cond))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(cond)||  isPropertyAssignmentInExpression(cond))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(cond)||  isPropertyAssignmentInExpression(cond))  {	  if(isBlockExpression(thenBranch)||    isPropertyAssignmentInExpression(cond))    {    	non-compiled	[CE]  	86	None	replace
394	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond)&&  isPropertyAssignmentInExpression(cond))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(cond)&&  isPropertyAssignmentInExpression(cond))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(cond)&&  isPropertyAssignmentInExpression(cond))  {	  if(isBlockExpression(thenBranch)||    isPropertyAssignmentInExpression(cond))    {    	non-compiled	[CE]  	86	None	replace
395	[BUG]  [BUGGY]  if(getBlockExpression(thenBranch)||  isPropertyAssignmentInExpression(cond))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(getBlockExpression(thenBranch)||  isPropertyAssignmentInExpression(cond))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(getBlockExpression(thenBranch)||  isPropertyAssignmentInExpression(cond))  {	  if(isBlockExpression(thenBranch)||    isPropertyAssignmentInExpression(cond))    {    	non-compiled	[CE]  	86	None	replace
396	[BUG]  [BUGGY]  if(getBlockExpression(thenBranch)||  isLowerPrecedenceInExpression(thenBranch)||  isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(getBlockExpression(thenBranch)||  isLowerPrecedenceInExpression(thenBranch)||  isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(getBlockExpression(thenBranch)||  isLowerPrecedenceInExpression(thenBranch)||  isPropertyAssignmentInExpression(elseBranch))  {	  if(isLowerPrecedenceInExpression(thenBranch)||    isPropertyAssignmentInExpression(elseBranch))    {    	non-compiled	[CE]  	12	None	replace
397	[BUG]  [BUGGY]  Node  thenAssign  =  cond.getLastChild();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  Node  thenAssign  =  cond.getLastChild();  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	Node  thenAssign  =  cond.getLastChild();	  Node    thenAssign    =    cond.getFirstChild();    	non-compiled	[CE]  	97	None	replace
398	[BUG]  [BUGGY]  Node  thenAssign  =  cond.getParent();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  Node  thenAssign  =  cond.getParent();  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	Node  thenAssign  =  cond.getParent();	  Node    thenAssign    =    cond.getFirstChild();    	non-compiled	[CE]  	97	None	replace
399	[BUG]  [BUGGY]  Node  thenAssign  =  cond.getPreviousChild();  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  Node  thenAssign  =  cond.getPreviousChild();  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	Node  thenAssign  =  cond.getPreviousChild();	  Node    thenAssign    =    cond.getFirstChild();    	non-compiled	[CE]  	97	None	replace
400	[BUG]  [BUGGY]  if(!isExpressionBlock(elseBranch))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(!isExpressionBlock(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(!isExpressionBlock(elseBranch))  {	  if(!isExpressionBlock(thenBranch))    {    	non-compiled	[CE]  	93	None	replace
401	[BUG]  [BUGGY]  if(!isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(!isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(!isPropertyAssignmentInExpression(elseBranch))  {	  if(!isExpressionBlock(thenBranch))    {    	non-compiled	[CE]  	93	None	replace
402	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(thenBranch,  OR_PRECEDENCE)||  isPropertyAssignmentInExpression(otherBranch))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(thenBranch,  OR_PRECEDENCE)||  isPropertyAssignmentInExpression(otherBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(thenBranch,  OR_PRECEDENCE)||  isPropertyAssignmentInExpression(otherBranch))  {	  if(isLowerPrecedenceInExpression(thenBranch,    OR_PRECEDENCE)||    isPropertyAssignmentInExpression(elseBranch))    {    	non-compiled	[CE]  	70	None	replace
403	[BUG]  [BUGGY]  Node  thenBranch  =  cond.getPrevious();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  Node  thenBranch  =  cond.getPrevious();  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	Node  thenBranch  =  cond.getPrevious();	  Node    thenBranch    =    cond.getNext();    	non-compiled	[CE]  	16	None	replace
404	[BUG]  [BUGGY]  if(getBlockExpression(elseBranch)  ==  null  ||  getBlockExpression(elseBranch)!=  null)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(getBlockExpression(elseBranch)  ==  null  ||  getBlockExpression(elseBranch)!=  null)  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(getBlockExpression(elseBranch)  ==  null  ||  getBlockExpression(elseBranch)!=  null)  {	  if(getBlockExpression(thenBranch)    ==    null    ||    getBlockExpression(thenBranch)!=    null)    {    	non-compiled	[CE]  	117	None	replace
405	[BUG]  [BUGGY]  if(isAssignmentInExpression(thenBranch)||  isFoldableExpressBlock(elseBranch))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isAssignmentInExpression(thenBranch)||  isFoldableExpressBlock(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isAssignmentInExpression(thenBranch)||  isFoldableExpressBlock(elseBranch))  {	  if(isAssignmentInExpression(thenBranch)&&    isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	49	None	replace
406	[BUG]  [BUGGY]  if(isAssignmentInExpression(thenBranch)&&  isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isAssignmentInExpression(thenBranch)&&  isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isAssignmentInExpression(thenBranch)&&  isPropertyAssignmentInExpression(elseBranch))  {	  if(isAssignmentInExpression(thenBranch)&&    isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	49	None	replace
407	[BUG]  [BUGGY]  if(isAssignmentInExpression(thenBranch)&&  isPropertyAssignmentBlock(elseBranch))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isAssignmentInExpression(thenBranch)&&  isPropertyAssignmentBlock(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isAssignmentInExpression(thenBranch)&&  isPropertyAssignmentBlock(elseBranch))  {	  if(isAssignmentInExpression(thenBranch)&&    isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	49	None	replace
408	[BUG]  [BUGGY]  if(isBlockExpression(cond,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isBlockExpression(cond,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isBlockExpression(cond,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(elseBranch))  {	  if(isLowerPrecedenceInExpression(cond,    OR_PRECEDENCE)&&    isPropertyAssignmentInExpression(thenBranch))    {    	non-compiled	[CE]  	1	None	replace
409	[BUG]  [BUGGY]  if(isBlockExpression(cond,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(thenBranch))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isBlockExpression(cond,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(thenBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isBlockExpression(cond,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(thenBranch))  {	  if(isLowerPrecedenceInExpression(cond,    OR_PRECEDENCE)&&    isPropertyAssignmentInExpression(thenBranch))    {    	non-compiled	[CE]  	1	None	replace
410	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpression(thenBranch)||  elseBranchIsExpressionBlock(elseBranch))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isPropertyAssignmentInExpression(thenBranch)||  elseBranchIsExpressionBlock(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isPropertyAssignmentInExpression(thenBranch)||  elseBranchIsExpressionBlock(elseBranch))  {	  if(isPropertyAssignmentInExpression(thenBranch)&&    elseBranchIsExpressionBlock(elseBranch))    {    	non-compiled	[CE]  	48	None	replace
411	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpression(thenBranch)&&  elseBranchIsVar(elseBranch))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isPropertyAssignmentInExpression(thenBranch)&&  elseBranchIsVar(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isPropertyAssignmentInExpression(thenBranch)&&  elseBranchIsVar(elseBranch))  {	  if(isPropertyAssignmentInExpression(thenBranch)&&    elseBranchIsExpressionBlock(elseBranch))    {    	non-compiled	[CE]  	48	None	replace
412	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpression(thenBranch)&&  elseBranchIsExpressionBlock(elseBranch)||  isLowerPrecedenceInExpression(cond))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isPropertyAssignmentInExpression(thenBranch)&&  elseBranchIsExpressionBlock(elseBranch)||  isLowerPrecedenceInExpression(cond))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isPropertyAssignmentInExpression(thenBranch)&&  elseBranchIsExpressionBlock(elseBranch)||  isLowerPrecedenceInExpression(cond))  {	  if(isPropertyAssignmentInExpression(thenBranch)&&    elseBranchIsExpressionBlock(elseBranch))    {    	non-compiled	[CE]  	48	None	replace
413	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpression(thenBranch)&&  elseBranchIsExpressionBlock(elseBranch)||  getBlockExpression(thenBranch))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isPropertyAssignmentInExpression(thenBranch)&&  elseBranchIsExpressionBlock(elseBranch)||  getBlockExpression(thenBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isPropertyAssignmentInExpression(thenBranch)&&  elseBranchIsExpressionBlock(elseBranch)||  getBlockExpression(thenBranch))  {	  if(isPropertyAssignmentInExpression(thenBranch)&&    elseBranchIsExpressionBlock(elseBranch))    {    	non-compiled	[CE]  	48	None	replace
414	[BUG]  [BUGGY]  if(isBlockExpression(thenBranch)&&  elseBranchIsExpressionBlock(elseBranch))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isBlockExpression(thenBranch)&&  elseBranchIsExpressionBlock(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isBlockExpression(thenBranch)&&  elseBranchIsExpressionBlock(elseBranch))  {	  if(isPropertyAssignmentInExpression(thenBranch)&&    elseBranchIsExpressionBlock(elseBranch))    {    	non-compiled	[CE]  	48	None	replace
415	[BUG]  [BUGGY]  if(isBlockExpression(thenBranch,  OR_PRECEDENCE)&&  isLowerPrecedenceInExpression(thenBranch,  OR_PRECEDENCE))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isBlockExpression(thenBranch,  OR_PRECEDENCE)&&  isLowerPrecedenceInExpression(thenBranch,  OR_PRECEDENCE))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isBlockExpression(thenBranch,  OR_PRECEDENCE)&&  isLowerPrecedenceInExpression(thenBranch,  OR_PRECEDENCE))  {	  if(isBlockExpression(cond,    OR_PRECEDENCE)&&    isLowerPrecedenceInExpression(cond,    OR_PRECEDENCE))    {    	non-compiled	[CE]  	110	None	replace
416	[BUG]  [BUGGY]  if(isBlockExpression(cond,  OR_PRECEDENCE)||  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isBlockExpression(cond,  OR_PRECEDENCE)||  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isBlockExpression(cond,  OR_PRECEDENCE)||  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE))  {	  if(isBlockExpression(cond,    OR_PRECEDENCE)&&    isLowerPrecedenceInExpression(cond,    OR_PRECEDENCE))    {    	non-compiled	[CE]  	110	None	replace
417	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpression(thenBranch)&&  isLowerPrecedenceInExpression(elseBranch)&&  isFoldableExpressBlock(elseBranch))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isPropertyAssignmentInExpression(thenBranch)&&  isLowerPrecedenceInExpression(elseBranch)&&  isFoldableExpressBlock(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isPropertyAssignmentInExpression(thenBranch)&&  isLowerPrecedenceInExpression(elseBranch)&&  isFoldableExpressBlock(elseBranch))  {	  if(isLowerPrecedenceInExpression(elseBranch)&&    isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	73	None	replace
418	[BUG]  [BUGGY]  if(elseBranch!=  null  &&  isLowerPrecedenceInExpression(elseBranch)&&  isFoldableExpressBlock(elseBranch))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(elseBranch!=  null  &&  isLowerPrecedenceInExpression(elseBranch)&&  isFoldableExpressBlock(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(elseBranch!=  null  &&  isLowerPrecedenceInExpression(elseBranch)&&  isFoldableExpressBlock(elseBranch))  {	  if(isLowerPrecedenceInExpression(elseBranch)&&    isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	73	None	replace
419	[BUG]  [BUGGY]  if(thenBranch!=  null  &&  isLowerPrecedenceInExpression(elseBranch)&&  isFoldableExpressBlock(elseBranch))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(thenBranch!=  null  &&  isLowerPrecedenceInExpression(elseBranch)&&  isFoldableExpressBlock(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(thenBranch!=  null  &&  isLowerPrecedenceInExpression(elseBranch)&&  isFoldableExpressBlock(elseBranch))  {	  if(isLowerPrecedenceInExpression(elseBranch)&&    isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	73	None	replace
420	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(thenBranch)&&  isBlockExpression(elseBranch))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(thenBranch)&&  isBlockExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(thenBranch)&&  isBlockExpression(elseBranch))  {	  if(isBlockExpression(thenBranch))    {    	non-compiled	[CE]  	11	None	replace
421	[BUG]  [BUGGY]  if(thenBranch!=  null  &&!isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(thenBranch!=  null  &&!isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(thenBranch!=  null  &&!isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(elseBranch))  {	  if(!isLowerPrecedenceInExpression(cond,    OR_PRECEDENCE)&&    isPropertyAssignmentInExpression(elseBranch))    {    	non-compiled	[CE]  	88	None	replace
422	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(thenBranch)&&  isPropertyAssignmentInExpression(cond))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(thenBranch)&&  isPropertyAssignmentInExpression(cond))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(thenBranch)&&  isPropertyAssignmentInExpression(cond))  {	  if(isPropertyAssignmentInExpression(cond)||    isLowerPrecedenceInExpression(thenBranch)&&    isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	28	None	replace
423	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isFoldableExpressBlock(elseBranch))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isFoldableExpressBlock(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isFoldableExpressBlock(elseBranch))  {	  if(isLowerPrecedenceInExpression(cond)&&    isFoldableExpressBlock(thenBranch))    {    	non-compiled	[CE]  	42	None	replace
424	[BUG]  [BUGGY]  if(!isPropertyAssignmentBlock(elseBranch))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(!isPropertyAssignmentBlock(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(!isPropertyAssignmentBlock(elseBranch))  {	  if(!isPropertyAssignmentBlock(thenBranch))    {    	non-compiled	[CE]  	84	None	replace
425	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(elseBranch))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(!isLowerPrecedenceInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(!isLowerPrecedenceInExpression(elseBranch))  {	  if(!isPropertyAssignmentBlock(thenBranch))    {    	non-compiled	[CE]  	84	None	replace
426	[BUG]  [BUGGY]  if(isLowerBlockExpression(elseBranch)&&  isFoldableExpressBlock(elseBranch))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerBlockExpression(elseBranch)&&  isFoldableExpressBlock(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerBlockExpression(elseBranch)&&  isFoldableExpressBlock(elseBranch))  {	  if(isLowerBlockExpression(thenBranch)&&    isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	109	None	replace
427	[BUG]  [BUGGY]  if(isLowerBlockExpression(thenBranch)&&  elseBranchIsExpressionBlock  ||  isFoldableExpressBlock(elseBranch))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerBlockExpression(thenBranch)&&  elseBranchIsExpressionBlock  ||  isFoldableExpressBlock(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerBlockExpression(thenBranch)&&  elseBranchIsExpressionBlock  ||  isFoldableExpressBlock(elseBranch))  {	  if(isLowerBlockExpression(thenBranch)&&    isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	109	None	replace
428	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(thenBranch,  OR_PRECEDENCE)||  isLowerPrecedenceInExpression(elseBranch))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(thenBranch,  OR_PRECEDENCE)||  isLowerPrecedenceInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(thenBranch,  OR_PRECEDENCE)||  isLowerPrecedenceInExpression(elseBranch))  {	  if(isLowerPrecedenceInExpression(cond,    OR_PRECEDENCE)||    isLowerPrecedenceInExpression(thenBranch))    {    	non-compiled	[CE]  	36	None	replace
429	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpression(cond)&&  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)||  isLowerPrecedenceInExpression(thenBranch))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isPropertyAssignmentInExpression(cond)&&  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)||  isLowerPrecedenceInExpression(thenBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isPropertyAssignmentInExpression(cond)&&  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)||  isLowerPrecedenceInExpression(thenBranch))  {	  if(isLowerPrecedenceInExpression(cond,    OR_PRECEDENCE)||    isLowerPrecedenceInExpression(thenBranch))    {    	non-compiled	[CE]  	36	None	replace
430	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isLowerPrecedenceInExpression(elseBranch))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isLowerPrecedenceInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isLowerPrecedenceInExpression(elseBranch))  {	  if(isLowerPrecedenceInExpression(cond,    OR_PRECEDENCE)||    isLowerPrecedenceInExpression(thenBranch))    {    	non-compiled	[CE]  	36	None	replace
431	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(thenBranch,  OR_PRECEDENCE)&&  isLowerPrecedenceInExpression(elseBranch))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(thenBranch,  OR_PRECEDENCE)&&  isLowerPrecedenceInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(thenBranch,  OR_PRECEDENCE)&&  isLowerPrecedenceInExpression(elseBranch))  {	  if(isLowerPrecedenceInExpression(cond,    OR_PRECEDENCE)||    isLowerPrecedenceInExpression(thenBranch))    {    	non-compiled	[CE]  	36	None	replace
432	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isLowerPrecedenceInExpression(thenBranch))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(!isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isLowerPrecedenceInExpression(thenBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(!isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isLowerPrecedenceInExpression(thenBranch))  {	  if(isLowerPrecedenceInExpression(cond,    OR_PRECEDENCE)||    isLowerPrecedenceInExpression(thenBranch))    {    	non-compiled	[CE]  	36	None	replace
433	[BUG]  [BUGGY]  if(thenBranchIsExpressionBlock  ||  elseBranchIsExpressionBlock  ||  isFoldableExpressBlock(elseBranch))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(thenBranchIsExpressionBlock  ||  elseBranchIsExpressionBlock  ||  isFoldableExpressBlock(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(thenBranchIsExpressionBlock  ||  elseBranchIsExpressionBlock  ||  isFoldableExpressBlock(elseBranch))  {	  if(isLowerPrecedenceInExpression(thenBranch)&&    elseBranchIsExpressionBlock    ||    isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	82	None	replace
434	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(thenBranch,  OR_PRECEDENCE)&&!isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(thenBranch,  OR_PRECEDENCE)&&!isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(thenBranch,  OR_PRECEDENCE)&&!isPropertyAssignmentInExpression(elseBranch))  {	  if(!isLowerPrecedenceInExpression(thenBranch))    {    	non-compiled	[CE]  	91	None	replace
435	[BUG]  [BUGGY]  if(thenBranch!=  null  &&  isLowerPrecedenceInExpression(elseBranch))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(thenBranch!=  null  &&  isLowerPrecedenceInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(thenBranch!=  null  &&  isLowerPrecedenceInExpression(elseBranch))  {	  if(thenBranch!=    null    &&    isLowerPrecedenceInExpression(cond))    {    	non-compiled	[CE]  	79	None	replace
436	[BUG]  [BUGGY]  if(isBlockExpression(thenBranch)&&  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)||  isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isBlockExpression(thenBranch)&&  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)||  isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isBlockExpression(thenBranch)&&  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)||  isPropertyAssignmentInExpression(elseBranch))  {	  if(isLowerPrecedenceInExpression(cond,    OR_PRECEDENCE)||    isPropertyAssignmentInExpression(elseBranch))    {    	non-compiled	[CE]  	6	None	replace
437	[BUG]  [BUGGY]  if(isBlockExpression(thenBranch)||  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isBlockExpression(thenBranch)||  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isBlockExpression(thenBranch)||  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(elseBranch))  {	  if(isLowerPrecedenceInExpression(cond,    OR_PRECEDENCE)||    isPropertyAssignmentInExpression(elseBranch))    {    	non-compiled	[CE]  	6	None	replace
438	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpression(thenBranch)||  isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isPropertyAssignmentInExpression(thenBranch)||  isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isPropertyAssignmentInExpression(thenBranch)||  isPropertyAssignmentInExpression(elseBranch))  {	  if(getBlockExpression(elseBranch)!=    null)    {    	non-compiled	[CE]  	7	None	replace
439	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpression(thenBranch)&&  getBlockExpression(elseBranch)!=  null)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isPropertyAssignmentInExpression(thenBranch)&&  getBlockExpression(elseBranch)!=  null)  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isPropertyAssignmentInExpression(thenBranch)&&  getBlockExpression(elseBranch)!=  null)  {	  if(getBlockExpression(elseBranch)!=    null)    {    	non-compiled	[CE]  	7	None	replace
440	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpression(thenBranch)||  getBlockExpression(elseBranch)!=  null)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isPropertyAssignmentInExpression(thenBranch)||  getBlockExpression(elseBranch)!=  null)  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isPropertyAssignmentInExpression(thenBranch)||  getBlockExpression(elseBranch)!=  null)  {	  if(getBlockExpression(elseBranch)!=    null)    {    	non-compiled	[CE]  	7	None	replace
441	[BUG]  [BUGGY]  if(elseBranch  ==  null  &&  isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(elseBranch  ==  null  &&  isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(elseBranch  ==  null  &&  isPropertyAssignmentInExpression(elseBranch))  {	  if(thenBranch!=    null    &&    isPropertyAssignmentInExpression(elseBranch))    {    	non-compiled	[CE]  	58	None	replace
442	[BUG]  [BUGGY]  if(firstBranch!=  null  &&  isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(firstBranch!=  null  &&  isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(firstBranch!=  null  &&  isPropertyAssignmentInExpression(elseBranch))  {	  if(thenBranch!=    null    &&    isPropertyAssignmentInExpression(elseBranch))    {    	non-compiled	[CE]  	58	None	replace
443	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(elseBranch)&&!isFoldableExpressBlock(elseBranch))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(elseBranch)&&!isFoldableExpressBlock(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(elseBranch)&&!isFoldableExpressBlock(elseBranch))  {	  if(isLowerPrecedenceInExpression(thenBranch)&&!isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	55	None	replace
444	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpression(elseBranch)&&  elseBranch!=  getBlockExpression(elseBranch))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isPropertyAssignmentInExpression(elseBranch)&&  elseBranch!=  getBlockExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isPropertyAssignmentInExpression(elseBranch)&&  elseBranch!=  getBlockExpression(elseBranch))  {	  if(isPropertyAssignmentInExpression(thenBranch)&&    elseBranch!=    getBlockExpression(elseBranch))    {    	non-compiled	[CE]  	81	None	replace
445	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(thenBranch)&&  elseBranch!=  getBlockExpression(elseBranch))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(!isLowerPrecedenceInExpression(thenBranch)&&  elseBranch!=  getBlockExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(!isLowerPrecedenceInExpression(thenBranch)&&  elseBranch!=  getBlockExpression(elseBranch))  {	  if(isPropertyAssignmentInExpression(thenBranch)&&    elseBranch!=    getBlockExpression(elseBranch))    {    	non-compiled	[CE]  	81	None	replace
446	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpression(thenBranch)&&  elseBranch!=  getBlockExpression(elseBranch)||  isLowerPrecedenceInExpression(elseBranch))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isPropertyAssignmentInExpression(thenBranch)&&  elseBranch!=  getBlockExpression(elseBranch)||  isLowerPrecedenceInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isPropertyAssignmentInExpression(thenBranch)&&  elseBranch!=  getBlockExpression(elseBranch)||  isLowerPrecedenceInExpression(elseBranch))  {	  if(isPropertyAssignmentInExpression(thenBranch)&&    elseBranch!=    getBlockExpression(elseBranch))    {    	non-compiled	[CE]  	81	None	replace
447	[BUG]  [BUGGY]  Node  thenOp  =  getBlockOperator(thenBranch);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  Node  thenOp  =  getBlockOperator(thenBranch);  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	Node  thenOp  =  getBlockOperator(thenBranch);	  Node    thenOp    =    getBlockExpression(thenBranch);    	non-compiled	[CE]  	96	None	replace
448	[BUG]  [BUGGY]  Node  thenOp  =  getBlockOperation(thenBranch);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  Node  thenOp  =  getBlockOperation(thenBranch);  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	Node  thenOp  =  getBlockOperation(thenBranch);	  Node    thenOp    =    getBlockExpression(thenBranch);    	non-compiled	[CE]  	96	None	replace
449	[BUG]  [BUGGY]  Node  thenOp  =  getAssignmentOp(elseBranch);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  Node  thenOp  =  getAssignmentOp(elseBranch);  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	Node  thenOp  =  getAssignmentOp(elseBranch);	  Node    thenOp    =    getBlockExpression(thenBranch);    	non-compiled	[CE]  	96	None	replace
450	[BUG]  [BUGGY]  Node  thenOp  =  getBlockAssignment(elseBranch);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  Node  thenOp  =  getBlockAssignment(elseBranch);  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	Node  thenOp  =  getBlockAssignment(elseBranch);	  Node    thenOp    =    getBlockExpression(thenBranch);    	non-compiled	[CE]  	96	None	replace
451	[BUG]  [BUGGY]  if(thenBranch!=  null  &&  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)||  isPropertyAssignmentInExpression(cond))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(thenBranch!=  null  &&  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)||  isPropertyAssignmentInExpression(cond))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(thenBranch!=  null  &&  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)||  isPropertyAssignmentInExpression(cond))  {	  if(isLowerPrecedenceInExpression(cond,    OR_PRECEDENCE)||    isPropertyAssignmentInExpression(cond))    {    	non-compiled	[CE]  	100	None	replace
452	[BUG]  [BUGGY]  Node  thenAssign  =  getBlockOperator(thenBranch);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  Node  thenAssign  =  getBlockOperator(thenBranch);  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	Node  thenAssign  =  getBlockOperator(thenBranch);	  Node    thenAssign    =    getBlockExpression(thenBranch);    	non-compiled	[CE]  	94	None	replace
453	[BUG]  [BUGGY]  Node  thenAssign  =  getBlockIsExpression(elseBranch);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  Node  thenAssign  =  getBlockIsExpression(elseBranch);  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	Node  thenAssign  =  getBlockIsExpression(elseBranch);	  Node    thenAssign    =    getBlockExpression(thenBranch);    	non-compiled	[CE]  	94	None	replace
454	[BUG]  [BUGGY]  Node  thenAssign  =  getBlockIsExpression(thenBranch);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  Node  thenAssign  =  getBlockIsExpression(thenBranch);  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	Node  thenAssign  =  getBlockIsExpression(thenBranch);	  Node    thenAssign    =    getBlockExpression(thenBranch);    	non-compiled	[CE]  	94	None	replace
455	[BUG]  [BUGGY]  if(thenBranch!=  null  &&!isExpressionBlock(elseBranch))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(thenBranch!=  null  &&!isExpressionBlock(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(thenBranch!=  null  &&!isExpressionBlock(elseBranch))  {	  if(!isExpressionBlock(thenBranch))    {    	non-compiled	[CE]  	93	None	replace
456	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpression(elseBranch)||!isExpressionBlock(elseBranch))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isPropertyAssignmentInExpression(elseBranch)||!isExpressionBlock(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isPropertyAssignmentInExpression(elseBranch)||!isExpressionBlock(elseBranch))  {	  if(!isExpressionBlock(thenBranch))    {    	non-compiled	[CE]  	93	None	replace
457	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpression(elseBranch)&&  elseBranchIsExpressionBlock(elseBranch))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isPropertyAssignmentInExpression(elseBranch)&&  elseBranchIsExpressionBlock(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isPropertyAssignmentInExpression(elseBranch)&&  elseBranchIsExpressionBlock(elseBranch))  {	  if(isPropertyAssignmentInExpression(thenBranch)&&    elseBranchIsExpressionBlock(elseBranch))    {    	non-compiled	[CE]  	48	None	replace
458	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(thenBranch)&&  elseBranchIsVar  ||  elseBranchIsExpressionBlock)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(thenBranch)&&  elseBranchIsVar  ||  elseBranchIsExpressionBlock)  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(thenBranch)&&  elseBranchIsVar  ||  elseBranchIsExpressionBlock)  {	  if(isLowerPrecedenceInExpression(thenBranch)&&    elseBranchIsExpressionBlock)    {    	non-compiled	[CE]  	114	None	replace
459	[BUG]  [BUGGY]  if(getBlockExpression(thenBranch)&&  isLowerPrecedenceInExpression(elseBranch)&&  isFoldableExpressBlock(elseBranch))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(getBlockExpression(thenBranch)&&  isLowerPrecedenceInExpression(elseBranch)&&  isFoldableExpressBlock(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(getBlockExpression(thenBranch)&&  isLowerPrecedenceInExpression(elseBranch)&&  isFoldableExpressBlock(elseBranch))  {	  if(getBlockExpression(thenBranch)||    isLowerPrecedenceInExpression(thenBranch)||    isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	29	None	replace
460	[BUG]  [BUGGY]  if(getBlockExpression(elseBranch)||  isLowerPrecedenceInExpression(elseBranch)||  isFoldableExpressBlock(elseBranch))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(getBlockExpression(elseBranch)||  isLowerPrecedenceInExpression(elseBranch)||  isFoldableExpressBlock(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(getBlockExpression(elseBranch)||  isLowerPrecedenceInExpression(elseBranch)||  isFoldableExpressBlock(elseBranch))  {	  if(getBlockExpression(thenBranch)||    isLowerPrecedenceInExpression(thenBranch)||    isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	29	None	replace
461	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(elseBranch)||  isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(elseBranch)||  isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(elseBranch)||  isPropertyAssignmentInExpression(elseBranch))  {	  if(getBlockExpression(thenBranch)||    isLowerPrecedenceInExpression(thenBranch)||    isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	29	None	replace
462	[BUG]  [BUGGY]  if(isBlockExpression(cond)||  isPropertyAssignmentInExpression(thenBranch)||  isLowerPrecedenceInExpression(elseBranch))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isBlockExpression(cond)||  isPropertyAssignmentInExpression(thenBranch)||  isLowerPrecedenceInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isBlockExpression(cond)||  isPropertyAssignmentInExpression(thenBranch)||  isLowerPrecedenceInExpression(elseBranch))  {	  if(isPropertyAssignmentInExpression(thenBranch)||    isLowerPrecedenceInExpression(thenBranch))    {    	non-compiled	[CE]  	57	None	replace
463	[BUG]  [BUGGY]  if(isBlockExpression(cond)||  isPropertyAssignmentInExpression(cond)||  isLowerPrecedenceInExpression(thenBranch)||  isFoldableExpressBlock(elseBranch))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isBlockExpression(cond)||  isPropertyAssignmentInExpression(cond)||  isLowerPrecedenceInExpression(thenBranch)||  isFoldableExpressBlock(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isBlockExpression(cond)||  isPropertyAssignmentInExpression(cond)||  isLowerPrecedenceInExpression(thenBranch)||  isFoldableExpressBlock(elseBranch))  {	  if(isPropertyAssignmentInExpression(cond)||    isLowerPrecedenceInExpression(thenBranch)||    isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	26	None	replace
464	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(thenBranch)||  isLowerPrecedenceInExpression(elseBranch))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(thenBranch)||  isLowerPrecedenceInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(thenBranch)||  isLowerPrecedenceInExpression(elseBranch))  {	  if(getPropertyAssignmentInExpression(thenBranch)!=    null)    {    	non-compiled	[CE]  	10	None	replace
465	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(thenBranch)&&  isPropertyAssignmentBlock(elseBranch))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(!isLowerPrecedenceInExpression(thenBranch)&&  isPropertyAssignmentBlock(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(!isLowerPrecedenceInExpression(thenBranch)&&  isPropertyAssignmentBlock(elseBranch))  {	  if(isLowerPrecedenceInExpression(thenBranch)&&    isPropertyAssignmentBlock(elseBranch))    {    	non-compiled	[CE]  	46	None	replace
466	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(elseBranch)&&  isPropertyAssignmentBlock(elseBranch))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(elseBranch)&&  isPropertyAssignmentBlock(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(elseBranch)&&  isPropertyAssignmentBlock(elseBranch))  {	  if(isLowerPrecedenceInExpression(thenBranch)&&    isPropertyAssignmentBlock(elseBranch))    {    	non-compiled	[CE]  	46	None	replace
467	[BUG]  [BUGGY]  if(isBlockExpression(elseBranch)||  isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isBlockExpression(elseBranch)||  isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isBlockExpression(elseBranch)||  isPropertyAssignmentInExpression(elseBranch))  {	  if(isBlockExpression(thenBranch)||    isPropertyAssignmentInExpression(elseBranch))    {    	non-compiled	[CE]  	13	None	replace
468	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond)||  isBlockExpression(thenBranch)&&  isPropertyAssignmentInExpression(cond))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(cond)||  isBlockExpression(thenBranch)&&  isPropertyAssignmentInExpression(cond))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(cond)||  isBlockExpression(thenBranch)&&  isPropertyAssignmentInExpression(cond))  {	  if(isBlockExpression(thenBranch)||    isPropertyAssignmentInExpression(cond))    {    	non-compiled	[CE]  	86	None	replace
469	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond)||  isBlockExpression(thenBranch)||  isPropertyAssignmentInExpression(cond))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(cond)||  isBlockExpression(thenBranch)||  isPropertyAssignmentInExpression(cond))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(cond)||  isBlockExpression(thenBranch)||  isPropertyAssignmentInExpression(cond))  {	  if(isBlockExpression(thenBranch)||    isPropertyAssignmentInExpression(cond))    {    	non-compiled	[CE]  	86	None	replace
470	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond)||  isBlockExpression(thenBranch)||  isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(cond)||  isBlockExpression(thenBranch)||  isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(cond)||  isBlockExpression(thenBranch)||  isPropertyAssignmentInExpression(elseBranch))  {	  if(isBlockExpression(thenBranch)||    isPropertyAssignmentInExpression(cond))    {    	non-compiled	[CE]  	86	None	replace
471	[BUG]  [BUGGY]  if(isBlockExpression(thenBranch)&&  isLowerPrecedenceInExpression(thenBranch,  OR_PRECEDENCE))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isBlockExpression(thenBranch)&&  isLowerPrecedenceInExpression(thenBranch,  OR_PRECEDENCE))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isBlockExpression(thenBranch)&&  isLowerPrecedenceInExpression(thenBranch,  OR_PRECEDENCE))  {	  if(isBlockExpression(cond,    OR_PRECEDENCE)&&    isLowerPrecedenceInExpression(cond,    OR_PRECEDENCE))    {    	non-compiled	[CE]  	110	None	replace
472	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpression(thenBranch)&&  isBlockExpression(cond,  OR_PRECEDENCE)&&  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isPropertyAssignmentInExpression(thenBranch)&&  isBlockExpression(cond,  OR_PRECEDENCE)&&  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isPropertyAssignmentInExpression(thenBranch)&&  isBlockExpression(cond,  OR_PRECEDENCE)&&  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE))  {	  if(isBlockExpression(cond,    OR_PRECEDENCE)&&    isLowerPrecedenceInExpression(cond,    OR_PRECEDENCE))    {    	non-compiled	[CE]  	110	None	replace
473	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpression(thenBranch)&&  isLowerPrecedenceInExpression(thenBranch,  OR_PRECEDENCE))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isPropertyAssignmentInExpression(thenBranch)&&  isLowerPrecedenceInExpression(thenBranch,  OR_PRECEDENCE))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isPropertyAssignmentInExpression(thenBranch)&&  isLowerPrecedenceInExpression(thenBranch,  OR_PRECEDENCE))  {	  if(isBlockExpression(cond,    OR_PRECEDENCE)&&    isLowerPrecedenceInExpression(cond,    OR_PRECEDENCE))    {    	non-compiled	[CE]  	110	None	replace
474	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)||  isBlockExpression(cond,  OR_PRECEDENCE))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)||  isBlockExpression(cond,  OR_PRECEDENCE))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)||  isBlockExpression(cond,  OR_PRECEDENCE))  {	  if(isBlockExpression(cond,    OR_PRECEDENCE)&&    isLowerPrecedenceInExpression(cond,    OR_PRECEDENCE))    {    	non-compiled	[CE]  	110	None	replace
475	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isBlockExpression(cond,  OR_PRECEDENCE))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isBlockExpression(cond,  OR_PRECEDENCE))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isBlockExpression(cond,  OR_PRECEDENCE))  {	  if(isBlockExpression(cond,    OR_PRECEDENCE)&&    isLowerPrecedenceInExpression(cond,    OR_PRECEDENCE))    {    	non-compiled	[CE]  	110	None	replace
476	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(thenBranch,  OR_PRECEDENCE)&&  isBlockExpression(cond,  OR_PRECEDENCE))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(thenBranch,  OR_PRECEDENCE)&&  isBlockExpression(cond,  OR_PRECEDENCE))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(thenBranch,  OR_PRECEDENCE)&&  isBlockExpression(cond,  OR_PRECEDENCE))  {	  if(isBlockExpression(cond,    OR_PRECEDENCE)&&    isLowerPrecedenceInExpression(cond,    OR_PRECEDENCE))    {    	non-compiled	[CE]  	110	None	replace
477	[BUG]  [BUGGY]  if(NodeUtil.isAssignmentOp(elseBranch)&&!NodeUtil.isLiteralValue(thenBranch)&&  isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(NodeUtil.isAssignmentOp(elseBranch)&&!NodeUtil.isLiteralValue(thenBranch)&&  isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(NodeUtil.isAssignmentOp(elseBranch)&&!NodeUtil.isLiteralValue(thenBranch)&&  isPropertyAssignmentInExpression(elseBranch))  {	  if(!NodeUtil.isLiteralValue(thenBranch)&&    isPropertyAssignmentInExpression(elseBranch))    {    	non-compiled	[CE]  	59	None	replace
478	[BUG]  [BUGGY]  if(NodeUtil.isImmutableValue(thenBranch)&&  isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(NodeUtil.isImmutableValue(thenBranch)&&  isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(NodeUtil.isImmutableValue(thenBranch)&&  isPropertyAssignmentInExpression(elseBranch))  {	  if(!NodeUtil.isLiteralValue(thenBranch)&&    isPropertyAssignmentInExpression(elseBranch))    {    	non-compiled	[CE]  	59	None	replace
479	[BUG]  [BUGGY]  if(!NodeUtil.isBlockExpression(thenBranch)&&  isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(!NodeUtil.isBlockExpression(thenBranch)&&  isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(!NodeUtil.isBlockExpression(thenBranch)&&  isPropertyAssignmentInExpression(elseBranch))  {	  if(!NodeUtil.isLiteralValue(thenBranch)&&    isPropertyAssignmentInExpression(elseBranch))    {    	non-compiled	[CE]  	59	None	replace
480	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(cond,  false)&&  isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(NodeUtil.isLiteralValue(cond,  false)&&  isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(NodeUtil.isLiteralValue(cond,  false)&&  isPropertyAssignmentInExpression(elseBranch))  {	  if(!NodeUtil.isLiteralValue(thenBranch)&&    isPropertyAssignmentInExpression(elseBranch))    {    	non-compiled	[CE]  	59	None	replace
481	[BUG]  [BUGGY]  if(NodeUtil.isLiteralValue(thenBranch)&&  isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(NodeUtil.isLiteralValue(thenBranch)&&  isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(NodeUtil.isLiteralValue(thenBranch)&&  isPropertyAssignmentInExpression(elseBranch))  {	  if(!NodeUtil.isLiteralValue(thenBranch)&&    isPropertyAssignmentInExpression(elseBranch))    {    	non-compiled	[CE]  	59	None	replace
482	[BUG]  [BUGGY]  if(thenBranch  ==  null  &&  isPropertyAssignmentInExpression(propertyBranch))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(thenBranch  ==  null  &&  isPropertyAssignmentInExpression(propertyBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(thenBranch  ==  null  &&  isPropertyAssignmentInExpression(propertyBranch))  {	  if(thenBranch!=    null    &&    isPropertyAssignmentInExpression(propertyBranch))    {    	non-compiled	[CE]  	61	None	replace
483	[BUG]  [BUGGY]  if(thenBranch!=  null  &&  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)||  getBlockExpression(elseBranch))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(thenBranch!=  null  &&  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)||  getBlockExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(thenBranch!=  null  &&  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)||  getBlockExpression(elseBranch))  {	  if(thenBranch!=    null    &&    isLowerPrecedenceInExpression(cond,    OR_PRECEDENCE))    {    	non-compiled	[CE]  	113	None	replace
484	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(elseBranch)&&!isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(!isLowerPrecedenceInExpression(elseBranch)&&!isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(!isLowerPrecedenceInExpression(elseBranch)&&!isPropertyAssignmentInExpression(elseBranch))  {	  if(!isLowerPrecedenceInExpression(thenBranch)&&!isPropertyAssignmentInExpression(elseBranch))    {    	non-compiled	[CE]  	87	None	replace
485	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(thenBranch)&&!isPropertyAssignmentInExpression(elseBranch)||  getBlockExpression(thenBranch))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(!isLowerPrecedenceInExpression(thenBranch)&&!isPropertyAssignmentInExpression(elseBranch)||  getBlockExpression(thenBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(!isLowerPrecedenceInExpression(thenBranch)&&!isPropertyAssignmentInExpression(elseBranch)||  getBlockExpression(thenBranch))  {	  if(!isLowerPrecedenceInExpression(thenBranch)&&!isPropertyAssignmentInExpression(elseBranch))    {    	non-compiled	[CE]  	87	None	replace
486	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpression(cond)&&  isBlockExpression(thenBranch)&&  isFoldableExpressBlock(elseBranch))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isPropertyAssignmentInExpression(cond)&&  isBlockExpression(thenBranch)&&  isFoldableExpressBlock(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isPropertyAssignmentInExpression(cond)&&  isBlockExpression(thenBranch)&&  isFoldableExpressBlock(elseBranch))  {	  if(isBlockExpression(thenBranch)&&    isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	47	None	replace
487	[BUG]  [BUGGY]  if(getBlockExpression(thenBranch)||  isFoldableExpressBlock(elseBranch))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(getBlockExpression(thenBranch)||  isFoldableExpressBlock(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(getBlockExpression(thenBranch)||  isFoldableExpressBlock(elseBranch))  {	  if(isBlockExpression(thenBranch)&&    isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	47	None	replace
488	[BUG]  [BUGGY]  if(isBlockExpression(thenBranch)||  isLowerPrecedenceInExpression(cond)&&  isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isBlockExpression(thenBranch)||  isLowerPrecedenceInExpression(cond)&&  isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isBlockExpression(thenBranch)||  isLowerPrecedenceInExpression(cond)&&  isPropertyAssignmentInExpression(elseBranch))  {	  if(isLowerPrecedenceInExpression(cond)||    isPropertyAssignmentInExpression(elseBranch))    {    	non-compiled	[CE]  	23	None	replace
489	[BUG]  [BUGGY]  if(isAssignmentInExpression(elseBranch)&&  isFoldableExpressBlock(elseBranch))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isAssignmentInExpression(elseBranch)&&  isFoldableExpressBlock(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isAssignmentInExpression(elseBranch)&&  isFoldableExpressBlock(elseBranch))  {	  if(isAssignmentInExpression(thenBranch)&&    isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	49	None	replace
490	[BUG]  [BUGGY]  if(isBlockExpression(thenBranch)||!isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isBlockExpression(thenBranch)||!isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isBlockExpression(thenBranch)||!isPropertyAssignmentInExpression(elseBranch))  {	  if(!isPropertyAssignmentInExpression(thenBranch))    {    	non-compiled	[CE]  	52	None	replace
491	[BUG]  [BUGGY]  if(!isBlockExpression(thenBranch))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(!isBlockExpression(thenBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(!isBlockExpression(thenBranch))  {	  if(!isPropertyAssignmentInExpression(thenBranch))    {    	non-compiled	[CE]  	52	None	replace
492	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(thenBranch)&&  isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(NodeUtil.isExpressionNode(thenBranch)&&  isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(NodeUtil.isExpressionNode(thenBranch)&&  isPropertyAssignmentInExpression(elseBranch))  {	  if(NodeUtil.isBlockExpression(thenBranch)&&    isPropertyAssignmentInExpression(elseBranch))    {    	non-compiled	[CE]  	62	None	replace
493	[BUG]  [BUGGY]  if(NodeUtil.isGetProp(thenBranch)&&  isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(NodeUtil.isGetProp(thenBranch)&&  isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(NodeUtil.isGetProp(thenBranch)&&  isPropertyAssignmentInExpression(elseBranch))  {	  if(NodeUtil.isBlockExpression(thenBranch)&&    isPropertyAssignmentInExpression(elseBranch))    {    	non-compiled	[CE]  	62	None	replace
494	[BUG]  [BUGGY]  if(NodeUtil.isBlockExpression(thenBranch)&&  elseBranch!=  getBlockExpression(elseBranch))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(NodeUtil.isBlockExpression(thenBranch)&&  elseBranch!=  getBlockExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(NodeUtil.isBlockExpression(thenBranch)&&  elseBranch!=  getBlockExpression(elseBranch))  {	  if(NodeUtil.isBlockExpression(thenBranch)&&    isPropertyAssignmentInExpression(elseBranch))    {    	non-compiled	[CE]  	62	None	replace
495	[BUG]  [BUGGY]  if(getBlockExpression(thenBranch)!=  null  &&  elseBranch.getType()  ==  Token.VOID)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(getBlockExpression(thenBranch)!=  null  &&  elseBranch.getType()  ==  Token.VOID)  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(getBlockExpression(thenBranch)!=  null  &&  elseBranch.getType()  ==  Token.VOID)  {	  if(getBlockExpression(thenBranch)!=    null    &&    elseBranch.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  	107	None	replace
496	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(thenBranch)&&  isFoldableExpressBlock(propertyBranch))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(thenBranch)&&  isFoldableExpressBlock(propertyBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(thenBranch)&&  isFoldableExpressBlock(propertyBranch))  {	  if(isBlockExpression(thenBranch)&&    isFoldableExpressBlock(propertyBranch))    {    	non-compiled	[CE]  	77	None	replace
497	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpression(propertyBranch)&&  isBlockExpression(thenBranch))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isPropertyAssignmentInExpression(propertyBranch)&&  isBlockExpression(thenBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isPropertyAssignmentInExpression(propertyBranch)&&  isBlockExpression(thenBranch))  {	  if(isBlockExpression(thenBranch)&&    isFoldableExpressBlock(propertyBranch))    {    	non-compiled	[CE]  	77	None	replace
498	[BUG]  [BUGGY]  if(isBlockExpression(elseBranch)&&  isFoldableExpressBlock(propertyBranch))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isBlockExpression(elseBranch)&&  isFoldableExpressBlock(propertyBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isBlockExpression(elseBranch)&&  isFoldableExpressBlock(propertyBranch))  {	  if(isBlockExpression(thenBranch)&&    isFoldableExpressBlock(propertyBranch))    {    	non-compiled	[CE]  	77	None	replace
499	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpression(elseBranch)||  isFoldableExpressBlock(elseBranch))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isPropertyAssignmentInExpression(elseBranch)||  isFoldableExpressBlock(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isPropertyAssignmentInExpression(elseBranch)||  isFoldableExpressBlock(elseBranch))  {	  if(isPropertyAssignmentInExpression(thenBranch)||    isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	39	None	replace
500	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(thenBranch,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(expr))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(thenBranch,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(expr))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(thenBranch,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(expr))  {	  if(isLowerPrecedenceInExpression(cond,    OR_PRECEDENCE)&&    isPropertyAssignmentInExpression(expr))    {    	non-compiled	[CE]  	111	None	replace
501	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(thenBranch,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(expr))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(!isLowerPrecedenceInExpression(thenBranch,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(expr))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(!isLowerPrecedenceInExpression(thenBranch,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(expr))  {	  if(isLowerPrecedenceInExpression(cond,    OR_PRECEDENCE)&&    isPropertyAssignmentInExpression(expr))    {    	non-compiled	[CE]  	111	None	replace
502	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpression(elseBranch)&&  elseBranchIsExpressionBlock)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isPropertyAssignmentInExpression(elseBranch)&&  elseBranchIsExpressionBlock)  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isPropertyAssignmentInExpression(elseBranch)&&  elseBranchIsExpressionBlock)  {	  if(isPropertyAssignmentInExpression(thenBranch)&&    elseBranchIsExpressionBlock)    {    	non-compiled	[CE]  	108	None	replace
503	[BUG]  [BUGGY]  if(!isFoldableExpressBlock(elseBranch)&&!isPropertyAssignmentBlock(elseBranch))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(!isFoldableExpressBlock(elseBranch)&&!isPropertyAssignmentBlock(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(!isFoldableExpressBlock(elseBranch)&&!isPropertyAssignmentBlock(elseBranch))  {	  if(!isFoldableExpressBlock(thenBranch)||!isPropertyAssignmentBlock(elseBranch))    {    	non-compiled	[CE]  	85	None	replace
504	[BUG]  [BUGGY]  if(!isBlockExpressBlock(thenBranch)||!isPropertyAssignmentBlock(elseBranch))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(!isBlockExpressBlock(thenBranch)||!isPropertyAssignmentBlock(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(!isBlockExpressBlock(thenBranch)||!isPropertyAssignmentBlock(elseBranch))  {	  if(!isFoldableExpressBlock(thenBranch)||!isPropertyAssignmentBlock(elseBranch))    {    	non-compiled	[CE]  	85	None	replace
505	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(elseBranch)&&!isPropertyAssignmentBlock(elseBranch))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(!isLowerPrecedenceInExpression(elseBranch)&&!isPropertyAssignmentBlock(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(!isLowerPrecedenceInExpression(elseBranch)&&!isPropertyAssignmentBlock(elseBranch))  {	  if(!isFoldableExpressBlock(thenBranch)||!isPropertyAssignmentBlock(elseBranch))    {    	non-compiled	[CE]  	85	None	replace
506	[BUG]  [BUGGY]  if(getBlockExpression(thenBranch)!=  null  &&  elseBranchIsExpressionBlock  &&  isLowerPrecedenceInExpression(thenBranch)&&  isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(getBlockExpression(thenBranch)!=  null  &&  elseBranchIsExpressionBlock  &&  isLowerPrecedenceInExpression(thenBranch)&&  isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(getBlockExpression(thenBranch)!=  null  &&  elseBranchIsExpressionBlock  &&  isLowerPrecedenceInExpression(thenBranch)&&  isPropertyAssignmentInExpression(elseBranch))  {	  if(getBlockExpression(thenBranch)!=    null    &&    isLowerPrecedenceInExpression(thenBranch)&&    isPropertyAssignmentInExpression(elseBranch))    {    	non-compiled	[CE]  	31	None	replace
507	[BUG]  [BUGGY]  if(getBlockExpression(thenBranch)  ==  null  &&  isLowerPrecedenceInExpression(thenBranch)&&  isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(getBlockExpression(thenBranch)  ==  null  &&  isLowerPrecedenceInExpression(thenBranch)&&  isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(getBlockExpression(thenBranch)  ==  null  &&  isLowerPrecedenceInExpression(thenBranch)&&  isPropertyAssignmentInExpression(elseBranch))  {	  if(getBlockExpression(thenBranch)!=    null    &&    isLowerPrecedenceInExpression(thenBranch)&&    isPropertyAssignmentInExpression(elseBranch))    {    	non-compiled	[CE]  	31	None	replace
508	[BUG]  [BUGGY]  Node  thenBranch  =  firstBranch.getNext();  elseBranch  =  elseBranch.getNext();  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  Node  thenBranch  =  firstBranch.getNext();  elseBranch  =  elseBranch.getNext();  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	Node  thenBranch  =  firstBranch.getNext();  elseBranch  =  elseBranch.getNext();	  Node    thenBranch    =    cond.getNext();    elseBranch    =    elseBranch.getNext();    	non-compiled	[CE]  	20	None	replace
509	[BUG]  [BUGGY]  Node  thenBranch  =  secondBranch.getNext();  elseBranch  =  elseBranch.getNext();  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  Node  thenBranch  =  secondBranch.getNext();  elseBranch  =  elseBranch.getNext();  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	Node  thenBranch  =  secondBranch.getNext();  elseBranch  =  elseBranch.getNext();	  Node    thenBranch    =    cond.getNext();    elseBranch    =    elseBranch.getNext();    	non-compiled	[CE]  	20	None	replace
510	[BUG]  [BUGGY]  if(elseBranch!=  null  &&  isPropertyAssignmentInExpression(elseBranch)&&  isFoldableExpressBlock(elseBranch))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(elseBranch!=  null  &&  isPropertyAssignmentInExpression(elseBranch)&&  isFoldableExpressBlock(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(elseBranch!=  null  &&  isPropertyAssignmentInExpression(elseBranch)&&  isFoldableExpressBlock(elseBranch))  {	  if(isPropertyAssignmentInExpression(elseBranch)&&    isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	80	None	replace
511	[BUG]  [BUGGY]  Node  thenBranch  =  getBlockExpression(elseBranch.getNext());  [CE]  [FE]                                AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  Node  thenBranch  =  getBlockExpression(elseBranch.getNext());  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	Node  thenBranch  =  getBlockExpression(elseBranch.getNext());	  Node    thenBranch    =    getBlockExpression(thenBranch);    	non-compiled	[CE]  	18	None	replace
512	[BUG]  [BUGGY]  Node  thenBranch  =  getBlockExpression(elseBranch.cloneTree());  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  Node  thenBranch  =  getBlockExpression(elseBranch.cloneTree());  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	Node  thenBranch  =  getBlockExpression(elseBranch.cloneTree());	  Node    thenBranch    =    getBlockExpression(thenBranch);    	non-compiled	[CE]  	18	None	replace
513	[BUG]  [BUGGY]  if(isBlockExpression(thenBranch)&&  isLowerPrecedenceInExpression(cond))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isBlockExpression(thenBranch)&&  isLowerPrecedenceInExpression(cond))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isBlockExpression(thenBranch)&&  isLowerPrecedenceInExpression(cond))  {	  if(isPropertyAssignmentInExpression(thenBranch)||    isLowerPrecedenceInExpression(cond))    {    	non-compiled	[CE]  	4	None	replace
514	[BUG]  [BUGGY]  if(thenBranch!=  null  &&  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(thenBranch!=  null  &&  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(thenBranch!=  null  &&  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(elseBranch))  {	  if(isLowerPrecedenceInExpression(cond,    OR_PRECEDENCE)&&    isPropertyAssignmentInExpression(elseBranch))    {    	non-compiled	[CE]  	3	None	replace
515	[BUG]  [BUGGY]  if(getBlockExpression(thenBranch)!=  null  &&  isPropertyAssignmentOutExpression(elseBranch))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(getBlockExpression(thenBranch)!=  null  &&  isPropertyAssignmentOutExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(getBlockExpression(thenBranch)!=  null  &&  isPropertyAssignmentOutExpression(elseBranch))  {	  if(getBlockExpression(thenBranch)!=    null    &&    isPropertyAssignmentInExpression(thenBranch))    {    	non-compiled	[CE]  	22	None	replace
516	[BUG]  [BUGGY]  if(elseBranch!=  null  &&  isLowerPrecedenceInExpression(elseBranch)&&  isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(elseBranch!=  null  &&  isLowerPrecedenceInExpression(elseBranch)&&  isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(elseBranch!=  null  &&  isLowerPrecedenceInExpression(elseBranch)&&  isPropertyAssignmentInExpression(elseBranch))  {	  if(isLowerPrecedenceInExpression(elseBranch)&&    isPropertyAssignmentInExpression(elseBranch))    {    	non-compiled	[CE]  	68	None	replace
517	[BUG]  [BUGGY]  if(thenBranch!=  null  &&  isLowerPrecedenceInExpression(elseBranch)&&  isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(thenBranch!=  null  &&  isLowerPrecedenceInExpression(elseBranch)&&  isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(thenBranch!=  null  &&  isLowerPrecedenceInExpression(elseBranch)&&  isPropertyAssignmentInExpression(elseBranch))  {	  if(isLowerPrecedenceInExpression(elseBranch)&&    isPropertyAssignmentInExpression(elseBranch))    {    	non-compiled	[CE]  	68	None	replace
518	[BUG]  [BUGGY]  if(isBlockExpression(thenBranch)&&  isLowerPrecedenceInExpression(cond)&&  isFoldableExpressBlock(elseBranch))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isBlockExpression(thenBranch)&&  isLowerPrecedenceInExpression(cond)&&  isFoldableExpressBlock(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isBlockExpression(thenBranch)&&  isLowerPrecedenceInExpression(cond)&&  isFoldableExpressBlock(elseBranch))  {	  if(isPropertyAssignmentInExpression(cond)&&    isLowerPrecedenceInExpression(thenBranch)&&    isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	44	None	replace
519	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond)&&  isPropertyAssignmentInExpression(elseBranch)&&  isFoldableExpressBlock(elseBranch))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(cond)&&  isPropertyAssignmentInExpression(elseBranch)&&  isFoldableExpressBlock(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(cond)&&  isPropertyAssignmentInExpression(elseBranch)&&  isFoldableExpressBlock(elseBranch))  {	  if(isPropertyAssignmentInExpression(cond)&&    isLowerPrecedenceInExpression(thenBranch)&&    isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	44	None	replace
520	[BUG]  [BUGGY]  Node  thenBranchIsExpressionBlock  =  nextBranch.getNext();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  Node  thenBranchIsExpressionBlock  =  nextBranch.getNext();  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	Node  thenBranchIsExpressionBlock  =  nextBranch.getNext();	  Node    thenBranchIsExpressionBlock    =    elseBranch.getNext();    	non-compiled	[CE]  	19	None	replace
521	[BUG]  [BUGGY]  if(NodeUtil.isBlockExpression(elseBranch)||  isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(NodeUtil.isBlockExpression(elseBranch)||  isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(NodeUtil.isBlockExpression(elseBranch)||  isPropertyAssignmentInExpression(elseBranch))  {	  if(NodeUtil.isBlockExpression(thenBranch)||    isPropertyAssignmentInExpression(elseBranch))    {    	non-compiled	[CE]  	105	None	replace
522	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(thenBranch)||  isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(NodeUtil.isExpressionNode(thenBranch)||  isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(NodeUtil.isExpressionNode(thenBranch)||  isPropertyAssignmentInExpression(elseBranch))  {	  if(NodeUtil.isBlockExpression(thenBranch)||    isPropertyAssignmentInExpression(elseBranch))    {    	non-compiled	[CE]  	105	None	replace
523	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(elseBranch)&&  isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(!isLowerPrecedenceInExpression(elseBranch)&&  isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(!isLowerPrecedenceInExpression(elseBranch)&&  isPropertyAssignmentInExpression(elseBranch))  {	  if(!isLowerPrecedenceInExpression(thenBranch)&&    isPropertyAssignmentInExpression(elseBranch))    {    	non-compiled	[CE]  	56	None	replace
524	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(thenBranch)&&  elseBranchIsVar(elseBranch))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(thenBranch)&&  elseBranchIsVar(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(thenBranch)&&  elseBranchIsVar(elseBranch))  {	  if(isLowerPrecedenceInExpression(thenBranch)&&    elseBranchIsExpressionBlock(elseBranch))    {    	non-compiled	[CE]  	45	None	replace
525	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(thenBranch)&&  elseBranchIsExpressionBlock(elseBranch)||  getBlockExpression(thenBranch))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(thenBranch)&&  elseBranchIsExpressionBlock(elseBranch)||  getBlockExpression(thenBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(thenBranch)&&  elseBranchIsExpressionBlock(elseBranch)||  getBlockExpression(thenBranch))  {	  if(isLowerPrecedenceInExpression(thenBranch)&&    elseBranchIsExpressionBlock(elseBranch))    {    	non-compiled	[CE]  	45	None	replace
526	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(thenBranch)&&  elseBranchIsExpressionBlock(elseBranch)||  isPropertyAssignmentInExpression(cond))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(thenBranch)&&  elseBranchIsExpressionBlock(elseBranch)||  isPropertyAssignmentInExpression(cond))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(thenBranch)&&  elseBranchIsExpressionBlock(elseBranch)||  isPropertyAssignmentInExpression(cond))  {	  if(isLowerPrecedenceInExpression(thenBranch)&&    elseBranchIsExpressionBlock(elseBranch))    {    	non-compiled	[CE]  	45	None	replace
527	[BUG]  [BUGGY]  Node  thenBranch  =  thenBranch.getFirstChild();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  Node  thenBranch  =  thenBranch.getFirstChild();  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	Node  thenBranch  =  thenBranch.getFirstChild();	  Node    thenBranch    =    cond.getFirstChild();    	non-compiled	[CE]  	76	None	replace
528	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(thenBranch,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(otherBranch))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(!isLowerPrecedenceInExpression(thenBranch,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(otherBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(!isLowerPrecedenceInExpression(thenBranch,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(otherBranch))  {	  if(isLowerPrecedenceInExpression(cond,    OR_PRECEDENCE)&&    isPropertyAssignmentInExpression(otherBranch))    {    	non-compiled	[CE]  	34	None	replace
529	[BUG]  [BUGGY]  if(thenBranch!=  null  &&  isBlockExpression(cond)&&  isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(thenBranch!=  null  &&  isBlockExpression(cond)&&  isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(thenBranch!=  null  &&  isBlockExpression(cond)&&  isPropertyAssignmentInExpression(elseBranch))  {	  if(isBlockExpression(cond)&&    isPropertyAssignmentInExpression(elseBranch))    {    	non-compiled	[CE]  	33	None	replace
530	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(thenBranch)&&  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(thenBranch)&&  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(thenBranch)&&  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE))  {	  if(isPropertyAssignmentInExpression(thenBranch)&&    isLowerPrecedenceInExpression(cond,    OR_PRECEDENCE))    {    	non-compiled	[CE]  	2	None	replace
531	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(thenBranch)&&  isPropertyAssignmentInExpression(cond,  OR_PRECEDENCE))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(thenBranch)&&  isPropertyAssignmentInExpression(cond,  OR_PRECEDENCE))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(thenBranch)&&  isPropertyAssignmentInExpression(cond,  OR_PRECEDENCE))  {	  if(isPropertyAssignmentInExpression(thenBranch)&&    isLowerPrecedenceInExpression(cond,    OR_PRECEDENCE))    {    	non-compiled	[CE]  	2	None	replace
532	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond)&&  isPropertyAssignmentInExpression(cond,  OR_PRECEDENCE))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(cond)&&  isPropertyAssignmentInExpression(cond,  OR_PRECEDENCE))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(cond)&&  isPropertyAssignmentInExpression(cond,  OR_PRECEDENCE))  {	  if(isPropertyAssignmentInExpression(thenBranch)&&    isLowerPrecedenceInExpression(cond,    OR_PRECEDENCE))    {    	non-compiled	[CE]  	2	None	replace
533	[BUG]  [BUGGY]  if(thenBranch!=  null  &&  isLowerPrecedenceInExpression(cond)&&  isFoldableExpressBlock(elseBranch))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(thenBranch!=  null  &&  isLowerPrecedenceInExpression(cond)&&  isFoldableExpressBlock(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(thenBranch!=  null  &&  isLowerPrecedenceInExpression(cond)&&  isFoldableExpressBlock(elseBranch))  {	  if(isLowerPrecedenceInExpression(cond)&&    isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	27	None	replace
534	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond)&&  elseBranchIsExpressionBlock  ||  elseBranchIsExpressBlock)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(cond)&&  elseBranchIsExpressionBlock  ||  elseBranchIsExpressBlock)  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(cond)&&  elseBranchIsExpressionBlock  ||  elseBranchIsExpressBlock)  {	  if(isLowerPrecedenceInExpression(cond)&&    isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	27	None	replace
535	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond)||!isFoldableExpressBlock(thenBranch)&&!isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(cond)||!isFoldableExpressBlock(thenBranch)&&!isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(cond)||!isFoldableExpressBlock(thenBranch)&&!isPropertyAssignmentInExpression(elseBranch))  {	  if(!isFoldableExpressBlock(thenBranch)&&!isPropertyAssignmentInExpression(elseBranch))    {    	non-compiled	[CE]  	83	None	replace
536	[BUG]  [BUGGY]  if(!isFoldableExpressBlock(elseBranch)&&!isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(!isFoldableExpressBlock(elseBranch)&&!isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(!isFoldableExpressBlock(elseBranch)&&!isPropertyAssignmentInExpression(elseBranch))  {	  if(!isFoldableExpressBlock(thenBranch)&&!isPropertyAssignmentInExpression(elseBranch))    {    	non-compiled	[CE]  	83	None	replace
537	[BUG]  [BUGGY]  if(!isFoldableExpressBlock(thenBranch)&&!isLowerPrecedenceInExpression(elseBranch))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(!isFoldableExpressBlock(thenBranch)&&!isLowerPrecedenceInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(!isFoldableExpressBlock(thenBranch)&&!isLowerPrecedenceInExpression(elseBranch))  {	  if(!isFoldableExpressBlock(thenBranch)&&!isPropertyAssignmentInExpression(elseBranch))    {    	non-compiled	[CE]  	83	None	replace
538	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(thenBranch)||  isPropertyAssignmentInExpression(elseBranch)||  getBlockExpression(elseBranch))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(thenBranch)||  isPropertyAssignmentInExpression(elseBranch)||  getBlockExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(thenBranch)||  isPropertyAssignmentInExpression(elseBranch)||  getBlockExpression(elseBranch))  {	  if(isLowerPrecedenceInExpression(thenBranch)&&    isPropertyAssignmentInExpression(elseBranch)||    getBlockExpression(thenBranch))    {    	non-compiled	[CE]  	67	None	replace
539	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(thenBranch)&&  isPropertyAssignmentInExpression(elseBranch)&&  getBlockExpression(elseBranch))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(thenBranch)&&  isPropertyAssignmentInExpression(elseBranch)&&  getBlockExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(thenBranch)&&  isPropertyAssignmentInExpression(elseBranch)&&  getBlockExpression(elseBranch))  {	  if(isLowerPrecedenceInExpression(thenBranch)&&    isPropertyAssignmentInExpression(elseBranch)||    getBlockExpression(thenBranch))    {    	non-compiled	[CE]  	67	None	replace
540	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(elseBranch)&&  isPropertyAssignmentInExpression(elseBranch)||  getBlockExpression(elseBranch))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(elseBranch)&&  isPropertyAssignmentInExpression(elseBranch)||  getBlockExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(elseBranch)&&  isPropertyAssignmentInExpression(elseBranch)||  getBlockExpression(elseBranch))  {	  if(isLowerPrecedenceInExpression(thenBranch)&&    isPropertyAssignmentInExpression(elseBranch)||    getBlockExpression(thenBranch))    {    	non-compiled	[CE]  	67	None	replace
541	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(thenBranch)&&  isPropertyAssignmentInExpression(elseBranch)||  getBlockExpression(elseBranch))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(!isLowerPrecedenceInExpression(thenBranch)&&  isPropertyAssignmentInExpression(elseBranch)||  getBlockExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(!isLowerPrecedenceInExpression(thenBranch)&&  isPropertyAssignmentInExpression(elseBranch)||  getBlockExpression(elseBranch))  {	  if(isLowerPrecedenceInExpression(thenBranch)&&    isPropertyAssignmentInExpression(elseBranch)||    getBlockExpression(thenBranch))    {    	non-compiled	[CE]  	67	None	replace
542	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(lastBranch)&&  isPropertyAssignmentInExpression(elseBranch)||  getBlockExpression(elseBranch))  {  [CE]  [FE]                                AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(lastBranch)&&  isPropertyAssignmentInExpression(elseBranch)||  getBlockExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(lastBranch)&&  isPropertyAssignmentInExpression(elseBranch)||  getBlockExpression(elseBranch))  {	  if(isLowerPrecedenceInExpression(thenBranch)&&    isPropertyAssignmentInExpression(elseBranch)||    getBlockExpression(thenBranch))    {    	non-compiled	[CE]  	67	None	replace
543	[BUG]  [BUGGY]  if(isBlockExpression(thenBranch)&&  isPropertyAssignmentInExpression(cond)&&  isFoldableExpressBlock(elseBranch))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isBlockExpression(thenBranch)&&  isPropertyAssignmentInExpression(cond)&&  isFoldableExpressBlock(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isBlockExpression(thenBranch)&&  isPropertyAssignmentInExpression(cond)&&  isFoldableExpressBlock(elseBranch))  {	  if(isPropertyAssignmentInExpression(cond)&&    isFoldableExpressBlock(thenBranch))    {    	non-compiled	[CE]  	41	None	replace
544	[BUG]  [BUGGY]  if(isBlockExpression(thenBranch)&&  isPropertyAssignmentInExpression(elseBranch)||  isLowerPrecedenceInExpression(elseBranch))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isBlockExpression(thenBranch)&&  isPropertyAssignmentInExpression(elseBranch)||  isLowerPrecedenceInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isBlockExpression(thenBranch)&&  isPropertyAssignmentInExpression(elseBranch)||  isLowerPrecedenceInExpression(elseBranch))  {	  if(isBlockExpression(thenBranch)&&    isPropertyAssignmentInExpression(elseBranch))    {    	non-compiled	[CE]  	32	None	replace
545	[BUG]  [BUGGY]  if(thenBranch!=  null  &&  isLowerPrecedenceInExpression(cond)&&  isPropertyAssignmentInExpression(propertyBranch)&&  isFoldableExpressBlock(elseBranch))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(thenBranch!=  null  &&  isLowerPrecedenceInExpression(cond)&&  isPropertyAssignmentInExpression(propertyBranch)&&  isFoldableExpressBlock(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(thenBranch!=  null  &&  isLowerPrecedenceInExpression(cond)&&  isPropertyAssignmentInExpression(propertyBranch)&&  isFoldableExpressBlock(elseBranch))  {	  if(isLowerPrecedenceInExpression(cond)&&    isPropertyAssignmentInExpression(propertyBranch)&&    isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	115	None	replace
546	[BUG]  [BUGGY]  if(thenBranch!=  null  &&!isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(cond))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(thenBranch!=  null  &&!isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(cond))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(thenBranch!=  null  &&!isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(cond))  {	  if(!isLowerPrecedenceInExpression(cond,    OR_PRECEDENCE)&&    isPropertyAssignmentInExpression(cond))    {    	non-compiled	[CE]  	102	None	replace
547	[BUG]  [BUGGY]  if(getBlockExpression(elseBranch)!=  null  ||  isLowerPrecedenceInExpression(elseBranch))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(getBlockExpression(elseBranch)!=  null  ||  isLowerPrecedenceInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(getBlockExpression(elseBranch)!=  null  ||  isLowerPrecedenceInExpression(elseBranch))  {	  if(getBlockExpression(thenBranch)    ==    null    ||    isLowerPrecedenceInExpression(thenBranch))    {    	non-compiled	[CE]  	119	None	replace
548	[BUG]  [BUGGY]  Node  thenBranch  =  getBlockExpression(elseBranch,  thenBranch);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  Node  thenBranch  =  getBlockExpression(elseBranch,  thenBranch);  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	Node  thenBranch  =  getBlockExpression(elseBranch,  thenBranch);	  Node    thenBranch    =    getBlockExpression(elseBranch);    	non-compiled	[CE]  	75	None	replace
549	[BUG]  [BUGGY]  Node  thenBranch  =  getBlockExpression(elseBranch,  false);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  Node  thenBranch  =  getBlockExpression(elseBranch,  false);  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	Node  thenBranch  =  getBlockExpression(elseBranch,  false);	  Node    thenBranch    =    getBlockExpression(elseBranch);    	non-compiled	[CE]  	75	None	replace
550	[BUG]  [BUGGY]  if(getBlockExpression(elseBranch)!=  null  &&  getBlockExpression(elseBranch)!=  null)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(getBlockExpression(elseBranch)!=  null  &&  getBlockExpression(elseBranch)!=  null)  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(getBlockExpression(elseBranch)!=  null  &&  getBlockExpression(elseBranch)!=  null)  {	  if(getBlockExpression(thenBranch)!=    null    ||    getBlockExpression(thenBranch)!=    null)    {    	non-compiled	[CE]  	38	None	replace
551	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isPropertyAssignmentBlock(elseBranch))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isPropertyAssignmentBlock(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isPropertyAssignmentBlock(elseBranch))  {	  if(isLowerPrecedenceInExpression(cond,    OR_PRECEDENCE)&&    isPropertyAssignmentInExpression(thenBranch))    {    	non-compiled	[CE]  	1	None	replace
552	[BUG]  [BUGGY]  if(getBlockExpression(thenBranch)!=  null  &&  isPropertyAssignmentInExpression(elseBranch)||  getLowerPrecedenceInExpression(elseBranch))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(getBlockExpression(thenBranch)!=  null  &&  isPropertyAssignmentInExpression(elseBranch)||  getLowerPrecedenceInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(getBlockExpression(thenBranch)!=  null  &&  isPropertyAssignmentInExpression(elseBranch)||  getLowerPrecedenceInExpression(elseBranch))  {	  if(getBlockExpression(thenBranch)!=    null    &&    isPropertyAssignmentInExpression(elseBranch))    {    	non-compiled	[CE]  	14	None	replace
553	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(thenBranch,  OR_PRECEDENCE)&&  isLowerPrecedenceInExpression(thenBranch,  OR_PRECEDENCE))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(thenBranch,  OR_PRECEDENCE)&&  isLowerPrecedenceInExpression(thenBranch,  OR_PRECEDENCE))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(thenBranch,  OR_PRECEDENCE)&&  isLowerPrecedenceInExpression(thenBranch,  OR_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(cond,    OR_PRECEDENCE)&&    isLowerPrecedenceInExpression(cond,    OR_PRECEDENCE))    {    	non-compiled	[CE]  	103	None	replace
554	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(thenBranch,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(elseBranch)||  getBlockExpression(thenBranch))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(thenBranch,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(elseBranch)||  getBlockExpression(thenBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(thenBranch,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(elseBranch)||  getBlockExpression(thenBranch))  {	  if(isLowerPrecedenceInExpression(thenBranch,    OR_PRECEDENCE)&&    isPropertyAssignmentInExpression(elseBranch))    {    	non-compiled	[CE]  	71	None	replace
555	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(thenBranch)&&  isPropertyAssignmentInExpression(cond))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(NodeUtil.isExpressionNode(thenBranch)&&  isPropertyAssignmentInExpression(cond))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(NodeUtil.isExpressionNode(thenBranch)&&  isPropertyAssignmentInExpression(cond))  {	  if(NodeUtil.isBlockExpression(thenBranch)&&    isPropertyAssignmentInExpression(cond))    {    	non-compiled	[CE]  	104	None	replace
556	[BUG]  [BUGGY]  if(NodeUtil.isGetProp(thenBranch)&&  isPropertyAssignmentInExpression(cond))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(NodeUtil.isGetProp(thenBranch)&&  isPropertyAssignmentInExpression(cond))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(NodeUtil.isGetProp(thenBranch)&&  isPropertyAssignmentInExpression(cond))  {	  if(NodeUtil.isBlockExpression(thenBranch)&&    isPropertyAssignmentInExpression(cond))    {    	non-compiled	[CE]  	104	None	replace
557	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(thenBranch)||  getAssignmentInExpression(elseBranch)!=  null)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(thenBranch)||  getAssignmentInExpression(elseBranch)!=  null)  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(thenBranch)||  getAssignmentInExpression(elseBranch)!=  null)  {	  if(getAssignmentInExpression(elseBranch)!=    null)    {    	non-compiled	[CE]  	65	None	replace
558	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(thenBranch)&&  getAssignmentInExpression(elseBranch)!=  null)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(thenBranch)&&  getAssignmentInExpression(elseBranch)!=  null)  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(thenBranch)&&  getAssignmentInExpression(elseBranch)!=  null)  {	  if(getAssignmentInExpression(elseBranch)!=    null)    {    	non-compiled	[CE]  	65	None	replace
559	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(elseBranch)&&  isFoldableExpressBlock(elseBranch))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(!isLowerPrecedenceInExpression(elseBranch)&&  isFoldableExpressBlock(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(!isLowerPrecedenceInExpression(elseBranch)&&  isFoldableExpressBlock(elseBranch))  {	  if(!isLowerPrecedenceInExpression(thenBranch)&&    isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	72	None	replace
560	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(thenBranch)&&  elseBranch  ==  isFoldableExpressBlock(elseBranch))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(!isLowerPrecedenceInExpression(thenBranch)&&  elseBranch  ==  isFoldableExpressBlock(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(!isLowerPrecedenceInExpression(thenBranch)&&  elseBranch  ==  isFoldableExpressBlock(elseBranch))  {	  if(!isLowerPrecedenceInExpression(thenBranch)&&    isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	72	None	replace
561	[BUG]  [BUGGY]  if(isBlockExpression(thenBranch)&&  isPropertyAssignmentInExpression(propertyBranch)&&  isLowerPrecedenceInExpression(elseBranch))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isBlockExpression(thenBranch)&&  isPropertyAssignmentInExpression(propertyBranch)&&  isLowerPrecedenceInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isBlockExpression(thenBranch)&&  isPropertyAssignmentInExpression(propertyBranch)&&  isLowerPrecedenceInExpression(elseBranch))  {	  if(isBlockExpression(thenBranch)&&    isPropertyAssignmentInExpression(propertyBranch)&&    isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	116	None	replace
562	[BUG]  [BUGGY]  if(isBlockExpression(elseBranch)&&  isPropertyAssignmentInExpression(propertyBranch)&&  isFoldableExpressBlock(elseBranch))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isBlockExpression(elseBranch)&&  isPropertyAssignmentInExpression(propertyBranch)&&  isFoldableExpressBlock(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isBlockExpression(elseBranch)&&  isPropertyAssignmentInExpression(propertyBranch)&&  isFoldableExpressBlock(elseBranch))  {	  if(isBlockExpression(thenBranch)&&    isPropertyAssignmentInExpression(propertyBranch)&&    isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	116	None	replace
563	[BUG]  [BUGGY]  if(isBlockExpression(thenBranch)&&  elseBranchIsExpressionBlock  &&  isFoldableExpressBlock(elseBranch))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isBlockExpression(thenBranch)&&  elseBranchIsExpressionBlock  &&  isFoldableExpressBlock(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isBlockExpression(thenBranch)&&  elseBranchIsExpressionBlock  &&  isFoldableExpressBlock(elseBranch))  {	  if(isBlockExpression(thenBranch)&&    isPropertyAssignmentInExpression(propertyBranch)&&    isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	116	None	replace
564	[BUG]  [BUGGY]  if(isBlockExpression(thenBranch)&&  isPropertyAssignmentInExpression(propertyBranch)&&  isFoldableExpressBlock(cond))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isBlockExpression(thenBranch)&&  isPropertyAssignmentInExpression(propertyBranch)&&  isFoldableExpressBlock(cond))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isBlockExpression(thenBranch)&&  isPropertyAssignmentInExpression(propertyBranch)&&  isFoldableExpressBlock(cond))  {	  if(isBlockExpression(thenBranch)&&    isPropertyAssignmentInExpression(propertyBranch)&&    isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	116	None	replace
565	[BUG]  [BUGGY]  Node  thenAssign  =  getBlockExpression(elseBranch,  thenBranch);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  Node  thenAssign  =  getBlockExpression(elseBranch,  thenBranch);  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	Node  thenAssign  =  getBlockExpression(elseBranch,  thenBranch);	  Node    thenAssign    =    getBlockExpression(elseBranch);    	non-compiled	[CE]  	99	None	replace
566	[BUG]  [BUGGY]  Node  thenAssign  =  getBlockExpression(elseBranch,  elseBranch);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  Node  thenAssign  =  getBlockExpression(elseBranch,  elseBranch);  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	Node  thenAssign  =  getBlockExpression(elseBranch,  elseBranch);	  Node    thenAssign    =    getBlockExpression(elseBranch);    	non-compiled	[CE]  	99	None	replace
567	[BUG]  [BUGGY]  Node  thenAssign  =  getBlockExpression(elseBranch,  cond);  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  Node  thenAssign  =  getBlockExpression(elseBranch,  cond);  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	Node  thenAssign  =  getBlockExpression(elseBranch,  cond);	  Node    thenAssign    =    getBlockExpression(elseBranch);    	non-compiled	[CE]  	99	None	replace
568	[BUG]  [BUGGY]  Node  thenAssign  =  getBlockExpression(elseBranch.getNext());  [CE]  [FE]                                          AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  Node  thenAssign  =  getBlockExpression(elseBranch.getNext());  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	Node  thenAssign  =  getBlockExpression(elseBranch.getNext());	  Node    thenAssign    =    getBlockExpression(elseBranch);    	non-compiled	[CE]  	99	None	replace
569	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpression(cond)&&  isBlockExpression(thenBranch)&&  isLowerPrecedenceInExpression(elseBranch))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isPropertyAssignmentInExpression(cond)&&  isBlockExpression(thenBranch)&&  isLowerPrecedenceInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isPropertyAssignmentInExpression(cond)&&  isBlockExpression(thenBranch)&&  isLowerPrecedenceInExpression(elseBranch))  {	  if(isBlockExpression(thenBranch)||    isLowerPrecedenceInExpression(elseBranch))    {    	non-compiled	[CE]  	74	None	replace
570	[BUG]  [BUGGY]  if(getBlockExpression(thenBranch)||  isLowerPrecedenceInExpression(elseBranch))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(getBlockExpression(thenBranch)||  isLowerPrecedenceInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(getBlockExpression(thenBranch)||  isLowerPrecedenceInExpression(elseBranch))  {	  if(isBlockExpression(thenBranch)||    isLowerPrecedenceInExpression(elseBranch))    {    	non-compiled	[CE]  	74	None	replace
571	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpression(thenBranch)&&  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isPropertyAssignmentInExpression(thenBranch)&&  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isPropertyAssignmentInExpression(thenBranch)&&  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&	  if(isLowerPrecedenceInExpression(cond,    OR_PRECEDENCE)&&    	non-compiled	[CE]  	112	None	replace
572	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpression(elseBranch))  {  return  n;  }  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isPropertyAssignmentInExpression(elseBranch))  {  return  n;  }  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isPropertyAssignmentInExpression(elseBranch))  {  return  n;  }	  if(isLowerPrecedenceInExpression(cond,    OR_PRECEDENCE)&&    	non-compiled	[CE]  	112	None	replace
573	[BUG]  [BUGGY]  if(isBlockExpression(thenBranch)||  isLowerPrecedenceInExpression(cond)&&  isFoldableExpressBlock(elseBranch))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isBlockExpression(thenBranch)||  isLowerPrecedenceInExpression(cond)&&  isFoldableExpressBlock(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isBlockExpression(thenBranch)||  isLowerPrecedenceInExpression(cond)&&  isFoldableExpressBlock(elseBranch))  {	  if(isLowerPrecedenceInExpression(cond)||    isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	25	None	replace
574	[BUG]  [BUGGY]  if(isBlockExpression(thenBranch)&&  isLowerPrecedenceInExpression(elseBranch)&&  isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isBlockExpression(thenBranch)&&  isLowerPrecedenceInExpression(elseBranch)&&  isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isBlockExpression(thenBranch)&&  isLowerPrecedenceInExpression(elseBranch)&&  isPropertyAssignmentInExpression(elseBranch))  {	  if(isBlockExpression(cond)&&    isLowerPrecedenceInExpression(thenBranch)&&    isPropertyAssignmentInExpression(elseBranch))    {    	non-compiled	[CE]  	66	None	replace
575	[BUG]  [BUGGY]  if(isBlockExpression(cond)&&  elseBranchIsExpressionBlock  &&  isLowerPrecedenceInExpression(thenBranch)&&  isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isBlockExpression(cond)&&  elseBranchIsExpressionBlock  &&  isLowerPrecedenceInExpression(thenBranch)&&  isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isBlockExpression(cond)&&  elseBranchIsExpressionBlock  &&  isLowerPrecedenceInExpression(thenBranch)&&  isPropertyAssignmentInExpression(elseBranch))  {	  if(isBlockExpression(cond)&&    isLowerPrecedenceInExpression(thenBranch)&&    isPropertyAssignmentInExpression(elseBranch))    {    	non-compiled	[CE]  	66	None	replace
576	[BUG]  [BUGGY]  if(isBlockExpression(cond)&&  isLowerPrecedenceInExpression(thenBranch)&&  isPropertyAssignmentInExpression(elseBranch)||  getBlockExpression(thenBranch))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isBlockExpression(cond)&&  isLowerPrecedenceInExpression(thenBranch)&&  isPropertyAssignmentInExpression(elseBranch)||  getBlockExpression(thenBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isBlockExpression(cond)&&  isLowerPrecedenceInExpression(thenBranch)&&  isPropertyAssignmentInExpression(elseBranch)||  getBlockExpression(thenBranch))  {	  if(isBlockExpression(cond)&&    isLowerPrecedenceInExpression(thenBranch)&&    isPropertyAssignmentInExpression(elseBranch))    {    	non-compiled	[CE]  	66	None	replace
577	[BUG]  [BUGGY]  if(!isFoldableExpressBlock(thenBranch)&&  isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(!isFoldableExpressBlock(thenBranch)&&  isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(!isFoldableExpressBlock(thenBranch)&&  isPropertyAssignmentInExpression(elseBranch))  {	  if(!isFoldableExpressBlock(thenBranch))    {    	non-compiled	[CE]  	92	None	replace
578	[BUG]  [BUGGY]  if(thenBranch!=  null  &&!isFoldableExpressBlock(thenBranch))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(thenBranch!=  null  &&!isFoldableExpressBlock(thenBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(thenBranch!=  null  &&!isFoldableExpressBlock(thenBranch))  {	  if(!isFoldableExpressBlock(thenBranch))    {    	non-compiled	[CE]  	92	None	replace
579	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpression(cond)&&  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isPropertyAssignmentInExpression(cond)&&  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isPropertyAssignmentInExpression(cond)&&  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE))  {	  if(isBlockExpression(thenBranch)||    isLowerPrecedenceInExpression(elseBranch))    {    	non-compiled	[CE]  	74	None	replace
580	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond)||  isBlockExpression(thenBranch))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(cond)||  isBlockExpression(thenBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(cond)||  isBlockExpression(thenBranch))  {	  if(isBlockExpression(thenBranch)||    isLowerPrecedenceInExpression(elseBranch))    {    	non-compiled	[CE]  	74	None	replace
581	[BUG]  [BUGGY]  if(isBlockExpression(cond)||  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)||  isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isBlockExpression(cond)||  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)||  isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isBlockExpression(cond)||  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)||  isPropertyAssignmentInExpression(elseBranch))  {	  if(isLowerPrecedenceInExpression(cond,    OR_PRECEDENCE)||    isPropertyAssignmentInExpression(thenBranch))    {    	non-compiled	[CE]  	5	None	replace
582	[BUG]  [BUGGY]  if(isBlockExpression(cond)||  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)||  isPropertyAssignmentInExpression(thenBranch))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isBlockExpression(cond)||  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)||  isPropertyAssignmentInExpression(thenBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isBlockExpression(cond)||  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)||  isPropertyAssignmentInExpression(thenBranch))  {	  if(isLowerPrecedenceInExpression(cond,    OR_PRECEDENCE)||    isPropertyAssignmentInExpression(thenBranch))    {    	non-compiled	[CE]  	5	None	replace
583	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)||  isPropertyAssignmentBlock(elseBranch))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)||  isPropertyAssignmentBlock(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)||  isPropertyAssignmentBlock(elseBranch))  {	  if(isLowerPrecedenceInExpression(cond,    OR_PRECEDENCE)||    isPropertyAssignmentInExpression(thenBranch))    {    	non-compiled	[CE]  	5	None	replace
584	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(thenBranch)&&  elseBranchIsExpressionBlock(elseBranch)||  isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(thenBranch)&&  elseBranchIsExpressionBlock(elseBranch)||  isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(thenBranch)&&  elseBranchIsExpressionBlock(elseBranch)||  isPropertyAssignmentInExpression(elseBranch))  {	  if(isLowerPrecedenceInExpression(thenBranch)&&    elseBranchIsExpressionBlock(elseBranch))    {    	non-compiled	[CE]  	45	None	replace
585	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpression(cond)&&  isLowerPrecedenceInExpression(thenBranch)&&  elseBranchIsExpressionBlock(elseBranch))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isPropertyAssignmentInExpression(cond)&&  isLowerPrecedenceInExpression(thenBranch)&&  elseBranchIsExpressionBlock(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isPropertyAssignmentInExpression(cond)&&  isLowerPrecedenceInExpression(thenBranch)&&  elseBranchIsExpressionBlock(elseBranch))  {	  if(isLowerPrecedenceInExpression(thenBranch)&&    elseBranchIsExpressionBlock(elseBranch))    {    	non-compiled	[CE]  	45	None	replace
586	[BUG]  [BUGGY]  if(isBlockExpression(cond)&&  isPropertyAssignmentInExpression(cond)&&  isLowerPrecedenceInExpression(thenBranch)&&  isFoldableExpressBlock(elseBranch))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isBlockExpression(cond)&&  isPropertyAssignmentInExpression(cond)&&  isLowerPrecedenceInExpression(thenBranch)&&  isFoldableExpressBlock(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isBlockExpression(cond)&&  isPropertyAssignmentInExpression(cond)&&  isLowerPrecedenceInExpression(thenBranch)&&  isFoldableExpressBlock(elseBranch))  {	  if(isPropertyAssignmentInExpression(cond)&&    isLowerPrecedenceInExpression(thenBranch)&&    isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	44	None	replace
587	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpression(cond)&&  isLowerPrecedenceInExpression(thenBranch)&&  elseBranch!=  getBlockExpression(elseBranch))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isPropertyAssignmentInExpression(cond)&&  isLowerPrecedenceInExpression(thenBranch)&&  elseBranch!=  getBlockExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isPropertyAssignmentInExpression(cond)&&  isLowerPrecedenceInExpression(thenBranch)&&  elseBranch!=  getBlockExpression(elseBranch))  {	  if(isPropertyAssignmentInExpression(cond)&&    isLowerPrecedenceInExpression(thenBranch)&&    isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	44	None	replace
588	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpression(cond)&&  isLowerPrecedenceInExpression(thenBranch)&&  elseBranchIsExpressionBlock)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isPropertyAssignmentInExpression(cond)&&  isLowerPrecedenceInExpression(thenBranch)&&  elseBranchIsExpressionBlock)  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isPropertyAssignmentInExpression(cond)&&  isLowerPrecedenceInExpression(thenBranch)&&  elseBranchIsExpressionBlock)  {	  if(isPropertyAssignmentInExpression(cond)&&    isLowerPrecedenceInExpression(thenBranch)&&    isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	44	None	replace
589	[BUG]  [BUGGY]  if(isBlockExpression(thenBranch)||  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(cond))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isBlockExpression(thenBranch)||  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(cond))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isBlockExpression(thenBranch)||  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(cond))  {	  if(isLowerPrecedenceInExpression(cond,    OR_PRECEDENCE)&&    isPropertyAssignmentInExpression(cond))    {    	non-compiled	[CE]  	101	None	replace
590	[BUG]  [BUGGY]  if(isBlockExpression(thenBranch)&&  isPropertyAssignmentInExpression(expr))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isBlockExpression(thenBranch)&&  isPropertyAssignmentInExpression(expr))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isBlockExpression(thenBranch)&&  isPropertyAssignmentInExpression(expr))  {	  if(isBlockExpression(thenBranch)&&    isPropertyAssignmentInExpression(propertyBranch))    {    	non-compiled	[CE]  	78	None	replace
591	[BUG]  [BUGGY]  if(isBlockExpression(cond)&&  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isBlockExpression(cond)&&  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isBlockExpression(cond)&&  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE))  {	  if(isPropertyAssignmentInExpression(thenBranch)&&    isLowerPrecedenceInExpression(cond,    OR_PRECEDENCE))    {    	non-compiled	[CE]  	2	None	replace
592	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpression(thenBranch)&&  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)||  getBlockExpression(thenBranch))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isPropertyAssignmentInExpression(thenBranch)&&  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)||  getBlockExpression(thenBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isPropertyAssignmentInExpression(thenBranch)&&  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)||  getBlockExpression(thenBranch))  {	  if(isPropertyAssignmentInExpression(thenBranch)&&    isLowerPrecedenceInExpression(cond,    OR_PRECEDENCE))    {    	non-compiled	[CE]  	2	None	replace
593	[BUG]  [BUGGY]  if(isBlockExpression(thenBranch)&&  isLowerPrecedenceInExpression(thenBranch)&&  isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isBlockExpression(thenBranch)&&  isLowerPrecedenceInExpression(thenBranch)&&  isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isBlockExpression(thenBranch)&&  isLowerPrecedenceInExpression(thenBranch)&&  isPropertyAssignmentInExpression(elseBranch))  {	  if(isLowerPrecedenceInExpression(thenBranch)||    isPropertyAssignmentInExpression(elseBranch))    {    	non-compiled	[CE]  	12	None	replace
594	[BUG]  [BUGGY]  if(NodeUtil.isExpressionNode(cond)&&  isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(NodeUtil.isExpressionNode(cond)&&  isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(NodeUtil.isExpressionNode(cond)&&  isPropertyAssignmentInExpression(elseBranch))  {	  if(NodeUtil.isBlockExpression(thenBranch)&&    isPropertyAssignmentInExpression(elseBranch))    {    	non-compiled	[CE]  	62	None	replace
595	[BUG]  [BUGGY]  if(NodeUtil.isBlockExpression(thenBranch)&&  isPropertyAssignmentInExpression(elseBranch)||  isLowerPrecedenceInExpression(elseBranch))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(NodeUtil.isBlockExpression(thenBranch)&&  isPropertyAssignmentInExpression(elseBranch)||  isLowerPrecedenceInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(NodeUtil.isBlockExpression(thenBranch)&&  isPropertyAssignmentInExpression(elseBranch)||  isLowerPrecedenceInExpression(elseBranch))  {	  if(NodeUtil.isBlockExpression(thenBranch)&&    isPropertyAssignmentInExpression(elseBranch))    {    	non-compiled	[CE]  	62	None	replace
596	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond)||  isPropertyAssignmentInExpression(elseBranch)||  getBlockExpression(elseBranch))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(cond)||  isPropertyAssignmentInExpression(elseBranch)||  getBlockExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(cond)||  isPropertyAssignmentInExpression(elseBranch)||  getBlockExpression(elseBranch))  {	  if(isLowerPrecedenceInExpression(thenBranch)&&    isPropertyAssignmentInExpression(elseBranch)||    getBlockExpression(thenBranch))    {    	non-compiled	[CE]  	67	None	replace
597	[BUG]  [BUGGY]  if(isBlockExpression(thenBranch)&&  isLowerPrecedenceInExpression(cond)||  isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isBlockExpression(thenBranch)&&  isLowerPrecedenceInExpression(cond)||  isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isBlockExpression(thenBranch)&&  isLowerPrecedenceInExpression(cond)||  isPropertyAssignmentInExpression(elseBranch))  {	  if(isLowerPrecedenceInExpression(cond)||    isPropertyAssignmentInExpression(elseBranch))    {    	non-compiled	[CE]  	23	None	replace
598	[BUG]  [BUGGY]  if(isBlockExpression(cond)&&  isLowerPrecedenceInExpression(thenBranch)||  isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isBlockExpression(cond)&&  isLowerPrecedenceInExpression(thenBranch)||  isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isBlockExpression(cond)&&  isLowerPrecedenceInExpression(thenBranch)||  isPropertyAssignmentInExpression(elseBranch))  {	  if(isBlockExpression(cond)&&    isLowerPrecedenceInExpression(thenBranch)&&    isPropertyAssignmentInExpression(elseBranch))    {    	non-compiled	[CE]  	66	None	replace
599	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  getBlockExpression(thenBranch)  ==  null)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  getBlockExpression(thenBranch)  ==  null)  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  getBlockExpression(thenBranch)  ==  null)  {	  if(getPropertyAssignmentInExpression(thenBranch)    ==    null)    {    	non-compiled	[CE]  	9	None	replace
600	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  getBlockExpression(thenBranch)!=  null)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  getBlockExpression(thenBranch)!=  null)  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  getBlockExpression(thenBranch)!=  null)  {	  if(getPropertyAssignmentInExpression(thenBranch)    ==    null)    {    	non-compiled	[CE]  	9	None	replace
601	[BUG]  [BUGGY]  if(getBlockExpression(thenBranch)!=  null  &&  elseBranchIsExpressionBlock  &&  isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(getBlockExpression(thenBranch)!=  null  &&  elseBranchIsExpressionBlock  &&  isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(getBlockExpression(thenBranch)!=  null  &&  elseBranchIsExpressionBlock  &&  isPropertyAssignmentInExpression(elseBranch))  {	  if(getBlockExpression(thenBranch)!=    null    &&    isLowerPrecedenceInExpression(thenBranch)&&    isPropertyAssignmentInExpression(elseBranch))    {    	non-compiled	[CE]  	31	None	replace
602	[BUG]  [BUGGY]  Node  thenBranch  =  getBlockExpression(thenBranchIsExpressionBlock);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  Node  thenBranch  =  getBlockExpression(thenBranchIsExpressionBlock);  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	Node  thenBranch  =  getBlockExpression(thenBranchIsExpressionBlock);	  Node    thenBranch    =    getBlockExpression(thenBranch);    	non-compiled	[CE]  	18	None	replace
603	[BUG]  [BUGGY]  Node  thenBranch  =  getBlockIsExpressionBlock(thenBranch);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  Node  thenBranch  =  getBlockIsExpressionBlock(thenBranch);  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	Node  thenBranch  =  getBlockIsExpressionBlock(thenBranch);	  Node    thenBranch    =    getBlockExpression(thenBranch);    	non-compiled	[CE]  	18	None	replace
604	[BUG]  [BUGGY]  if(NodeUtil.isImmutableValue(cond,  false)&&!NodeUtil.isLiteralValue(thenBranch)&&  isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(NodeUtil.isImmutableValue(cond,  false)&&!NodeUtil.isLiteralValue(thenBranch)&&  isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(NodeUtil.isImmutableValue(cond,  false)&&!NodeUtil.isLiteralValue(thenBranch)&&  isPropertyAssignmentInExpression(elseBranch))  {	  if(!NodeUtil.isLiteralValue(thenBranch)&&    isPropertyAssignmentInExpression(elseBranch))    {    	non-compiled	[CE]  	59	None	replace
605	[BUG]  [BUGGY]  if(isBlockExpression(thenBranch)&&  isPropertyAssignmentInExpression(propertyBranch)&&  elseBranch!=  null)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isBlockExpression(thenBranch)&&  isPropertyAssignmentInExpression(propertyBranch)&&  elseBranch!=  null)  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isBlockExpression(thenBranch)&&  isPropertyAssignmentInExpression(propertyBranch)&&  elseBranch!=  null)  {	  if(isBlockExpression(thenBranch)&&    isPropertyAssignmentInExpression(propertyBranch)&&    isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	116	None	replace
606	[BUG]  [BUGGY]  if(isBlockExpression(thenBranch)&&  isPropertyAssignmentInExpression(propertyBranch)&&  elseBranch!=  expr)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isBlockExpression(thenBranch)&&  isPropertyAssignmentInExpression(propertyBranch)&&  elseBranch!=  expr)  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isBlockExpression(thenBranch)&&  isPropertyAssignmentInExpression(propertyBranch)&&  elseBranch!=  expr)  {	  if(isBlockExpression(thenBranch)&&    isPropertyAssignmentInExpression(propertyBranch)&&    isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	116	None	replace
607	[BUG]  [BUGGY]  if(thenBranch!=  null  &&  isPropertyAssignmentInExpression(cond,  OR_PRECEDENCE))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(thenBranch!=  null  &&  isPropertyAssignmentInExpression(cond,  OR_PRECEDENCE))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(thenBranch!=  null  &&  isPropertyAssignmentInExpression(cond,  OR_PRECEDENCE))  {	  if(thenBranch!=    null    &&    isLowerPrecedenceInExpression(cond,    OR_PRECEDENCE))    {    	non-compiled	[CE]  	113	None	replace
608	[BUG]  [BUGGY]  if(thenBranch!=  null  &&  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)||  getBlockExpression(thenBranch))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(thenBranch!=  null  &&  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)||  getBlockExpression(thenBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(thenBranch!=  null  &&  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)||  getBlockExpression(thenBranch))  {	  if(thenBranch!=    null    &&    isLowerPrecedenceInExpression(cond,    OR_PRECEDENCE))    {    	non-compiled	[CE]  	113	None	replace
609	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond)&&  isPropertyAssignmentInExpression(propertyBranch)&&  elseBranch!=  null)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(cond)&&  isPropertyAssignmentInExpression(propertyBranch)&&  elseBranch!=  null)  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(cond)&&  isPropertyAssignmentInExpression(propertyBranch)&&  elseBranch!=  null)  {	  if(isLowerPrecedenceInExpression(cond)&&    isPropertyAssignmentInExpression(propertyBranch)&&    isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	115	None	replace
610	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond)&&  isPropertyAssignmentInExpression(thenBranch)&&  elseBranchIsExpressionBlock)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(cond)&&  isPropertyAssignmentInExpression(thenBranch)&&  elseBranchIsExpressionBlock)  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(cond)&&  isPropertyAssignmentInExpression(thenBranch)&&  elseBranchIsExpressionBlock)  {	  if(isLowerPrecedenceInExpression(cond)&&    isPropertyAssignmentInExpression(propertyBranch)&&    isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	115	None	replace
611	[BUG]  [BUGGY]  if(isExpressionBlock(thenBranch)&&  isFoldableExpressBlock(elseBranch))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isExpressionBlock(thenBranch)&&  isFoldableExpressBlock(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isExpressionBlock(thenBranch)&&  isFoldableExpressBlock(elseBranch))  {	  if(isBlockExpression(thenBranch)&&    isFoldableExpressBlock(propertyBranch))    {    	non-compiled	[CE]  	77	None	replace
612	[BUG]  [BUGGY]  if(isBlockExpression(thenBranch)&&  isPropertyIsExpressionBlock(elseBranch))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isBlockExpression(thenBranch)&&  isPropertyIsExpressionBlock(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isBlockExpression(thenBranch)&&  isPropertyIsExpressionBlock(elseBranch))  {	  if(isBlockExpression(thenBranch)&&    isFoldableExpressBlock(propertyBranch))    {    	non-compiled	[CE]  	77	None	replace
613	[BUG]  [BUGGY]  Node  thenAssign  =  findBlockExpression(thenBranch);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  Node  thenAssign  =  findBlockExpression(thenBranch);  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	Node  thenAssign  =  findBlockExpression(thenBranch);	  Node    thenAssign    =    getBlockExpression(elseBranch);    	non-compiled	[CE]  	99	None	replace
614	[BUG]  [BUGGY]  thenBranch  =  otherBranch.getNext();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  thenBranch  =  otherBranch.getNext();  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	thenBranch  =  otherBranch.getNext();	  thenBranch    =    elseBranch.getNext();    	non-compiled	[CE]  	17	None	replace
615	[BUG]  [BUGGY]  if(NodeUtil.isAssignmentOp(thenBranch)&&  isPropertyAssignmentInExpression(cond))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(NodeUtil.isAssignmentOp(thenBranch)&&  isPropertyAssignmentInExpression(cond))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(NodeUtil.isAssignmentOp(thenBranch)&&  isPropertyAssignmentInExpression(cond))  {	  if(NodeUtil.isBlockExpression(thenBranch)&&    isPropertyAssignmentInExpression(cond))    {    	non-compiled	[CE]  	104	None	replace
616	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(thenBranch)&&  isLowerPrecedenceInExpression(thenBranch))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(thenBranch)&&  isLowerPrecedenceInExpression(thenBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(thenBranch)&&  isLowerPrecedenceInExpression(thenBranch))  {	  if(getPropertyAssignmentInExpression(elseBranch)    ==    null)    {    	non-compiled	[CE]  	64	None	replace
617	[BUG]  [BUGGY]  if(getBlockExpression(thenBranch)!=  elseBranch)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(getBlockExpression(thenBranch)!=  elseBranch)  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(getBlockExpression(thenBranch)!=  elseBranch)  {	  if(getPropertyAssignmentInExpression(elseBranch)    ==    null)    {    	non-compiled	[CE]  	64	None	replace
618	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(thenBranch)&&  getBlockExpression(elseBranch)  ==  null)  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(thenBranch)&&  getBlockExpression(elseBranch)  ==  null)  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(thenBranch)&&  getBlockExpression(elseBranch)  ==  null)  {	  if(getPropertyAssignmentInExpression(elseBranch)    ==    null)    {    	non-compiled	[CE]  	64	None	replace
619	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(cond,  OR_PRECEDENCE))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(cond,  OR_PRECEDENCE))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(cond,  OR_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(cond,    OR_PRECEDENCE)&&    isLowerPrecedenceInExpression(cond,    OR_PRECEDENCE))    {    	non-compiled	[CE]  	103	None	replace
620	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&!isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(!isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&!isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(!isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&!isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(cond,    OR_PRECEDENCE)&&    isLowerPrecedenceInExpression(cond,    OR_PRECEDENCE))    {    	non-compiled	[CE]  	103	None	replace
621	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)||  isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)||  isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)||  isPropertyAssignmentInExpression(elseBranch))  {	  if(isLowerPrecedenceInExpression(cond,    OR_PRECEDENCE)&&    isLowerPrecedenceInExpression(cond,    OR_PRECEDENCE))    {    	non-compiled	[CE]  	103	None	replace
622	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(cond)&&!isFoldableExpressBlock(thenBranch)&&!isPropertyAssignmentBlock(elseBranch))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(!isLowerPrecedenceInExpression(cond)&&!isFoldableExpressBlock(thenBranch)&&!isPropertyAssignmentBlock(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(!isLowerPrecedenceInExpression(cond)&&!isFoldableExpressBlock(thenBranch)&&!isPropertyAssignmentBlock(elseBranch))  {	  if(!isFoldableExpressBlock(thenBranch)||!isPropertyAssignmentBlock(elseBranch))    {    	non-compiled	[CE]  	85	None	replace
623	[BUG]  [BUGGY]  if(!isLowerBlock(thenBranch)&&!isPropertyAssignmentBlock(elseBranch))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(!isLowerBlock(thenBranch)&&!isPropertyAssignmentBlock(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(!isLowerBlock(thenBranch)&&!isPropertyAssignmentBlock(elseBranch))  {	  if(!isFoldableExpressBlock(thenBranch)||!isPropertyAssignmentBlock(elseBranch))    {    	non-compiled	[CE]  	85	None	replace
624	[BUG]  [BUGGY]  if(!isExpressionBlock(thenBranch)&&!isPropertyAssignmentBlock(elseBranch))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(!isExpressionBlock(thenBranch)&&!isPropertyAssignmentBlock(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(!isExpressionBlock(thenBranch)&&!isPropertyAssignmentBlock(elseBranch))  {	  if(!isFoldableExpressBlock(thenBranch)||!isPropertyAssignmentBlock(elseBranch))    {    	non-compiled	[CE]  	85	None	replace
625	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(cond)||!isFoldableExpressBlock(thenBranch)||!isPropertyAssignmentBlock(elseBranch))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(!isLowerPrecedenceInExpression(cond)||!isFoldableExpressBlock(thenBranch)||!isPropertyAssignmentBlock(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(!isLowerPrecedenceInExpression(cond)||!isFoldableExpressBlock(thenBranch)||!isPropertyAssignmentBlock(elseBranch))  {	  if(!isFoldableExpressBlock(thenBranch)||!isPropertyAssignmentBlock(elseBranch))    {    	non-compiled	[CE]  	85	None	replace
626	[BUG]  [BUGGY]  Node  thenAssign  =  nextBranch.getNext();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  Node  thenAssign  =  nextBranch.getNext();  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	Node  thenAssign  =  nextBranch.getNext();	  Node    thenAssign    =    elseBranch.getNext();    	non-compiled	[CE]  	95	None	replace
627	[BUG]  [BUGGY]  if(isBlockExpression(cond)||  isPropertyAssignmentInExpression(thenBranch)||  isLowerPrecedenceInExpression(cond))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isBlockExpression(cond)||  isPropertyAssignmentInExpression(thenBranch)||  isLowerPrecedenceInExpression(cond))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isBlockExpression(cond)||  isPropertyAssignmentInExpression(thenBranch)||  isLowerPrecedenceInExpression(cond))  {	  if(isPropertyAssignmentInExpression(thenBranch)||    isLowerPrecedenceInExpression(cond))    {    	non-compiled	[CE]  	4	None	replace
628	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  getBlockExpression(thenBranch)!=  null  &&  isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  getBlockExpression(thenBranch)!=  null  &&  isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  getBlockExpression(thenBranch)!=  null  &&  isPropertyAssignmentInExpression(elseBranch))  {	  if(getBlockExpression(thenBranch)!=    null    &&    isPropertyAssignmentInExpression(elseBranch))    {    	non-compiled	[CE]  	14	None	replace
629	[BUG]  [BUGGY]  Node  thenBranch  =  cond.removeFirstChild();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  Node  thenBranch  =  cond.removeFirstChild();  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	Node  thenBranch  =  cond.removeFirstChild();	  Node    thenBranch    =    cond.getFirstChild();    	non-compiled	[CE]  	76	None	replace
630	[BUG]  [BUGGY]  Node  thenBranch  =  nextBranch.getFirstChild();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  Node  thenBranch  =  nextBranch.getFirstChild();  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	Node  thenBranch  =  nextBranch.getFirstChild();	  Node    thenBranch    =    cond.getFirstChild();    	non-compiled	[CE]  	76	None	replace
631	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(cond)&&!isFoldableExpressBlock(thenBranch)&&!isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(!isLowerPrecedenceInExpression(cond)&&!isFoldableExpressBlock(thenBranch)&&!isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(!isLowerPrecedenceInExpression(cond)&&!isFoldableExpressBlock(thenBranch)&&!isPropertyAssignmentInExpression(elseBranch))  {	  if(!isFoldableExpressBlock(thenBranch)&&!isPropertyAssignmentInExpression(elseBranch))    {    	non-compiled	[CE]  	83	None	replace
632	[BUG]  [BUGGY]  if(!isBlockExpressBlock(thenBranch)&&!isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(!isBlockExpressBlock(thenBranch)&&!isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(!isBlockExpressBlock(thenBranch)&&!isPropertyAssignmentInExpression(elseBranch))  {	  if(!isFoldableExpressBlock(thenBranch)&&!isPropertyAssignmentInExpression(elseBranch))    {    	non-compiled	[CE]  	83	None	replace
633	[BUG]  [BUGGY]  if(!isExpressionBlock(thenBranch)&&!isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(!isExpressionBlock(thenBranch)&&!isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(!isExpressionBlock(thenBranch)&&!isPropertyAssignmentInExpression(elseBranch))  {	  if(!isFoldableExpressBlock(thenBranch)&&!isPropertyAssignmentInExpression(elseBranch))    {    	non-compiled	[CE]  	83	None	replace
634	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  getBlockExpression(elseBranch)!=  null)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  getBlockExpression(elseBranch)!=  null)  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  getBlockExpression(elseBranch)!=  null)  {	  if(getPropertyAssignmentInExpression(thenBranch)!=    null)    {    	non-compiled	[CE]  	10	None	replace
635	[BUG]  [BUGGY]  if(thenBranch!=  null  &&  isPropertyAssignmentInExpression(cond))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(thenBranch!=  null  &&  isPropertyAssignmentInExpression(cond))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(thenBranch!=  null  &&  isPropertyAssignmentInExpression(cond))  {	  if(thenBranch!=    null    &&    isLowerPrecedenceInExpression(cond))    {    	non-compiled	[CE]  	79	None	replace
636	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpression(cond)&&  isLowerPrecedenceInExpression(cond)&&  isFoldableExpressBlock(elseBranch))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isPropertyAssignmentInExpression(cond)&&  isLowerPrecedenceInExpression(cond)&&  isFoldableExpressBlock(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isPropertyAssignmentInExpression(cond)&&  isLowerPrecedenceInExpression(cond)&&  isFoldableExpressBlock(elseBranch))  {	  if(isLowerPrecedenceInExpression(cond)&&    isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	27	None	replace
637	[BUG]  [BUGGY]  if(getBlockExpression(thenBranch)  ==  null  &&  isPropertyAssignmentInExpression(thenBranch))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(getBlockExpression(thenBranch)  ==  null  &&  isPropertyAssignmentInExpression(thenBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(getBlockExpression(thenBranch)  ==  null  &&  isPropertyAssignmentInExpression(thenBranch))  {	  if(getBlockExpression(thenBranch)!=    null    &&    isPropertyAssignmentInExpression(thenBranch))    {    	non-compiled	[CE]  	22	None	replace
638	[BUG]  [BUGGY]  if(isBlockExpression(thenBranch)&&  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)||  isPropertyAssignmentInExpression(cond))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isBlockExpression(thenBranch)&&  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)||  isPropertyAssignmentInExpression(cond))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isBlockExpression(thenBranch)&&  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)||  isPropertyAssignmentInExpression(cond))  {	  if(isLowerPrecedenceInExpression(cond,    OR_PRECEDENCE)||    isPropertyAssignmentInExpression(cond))    {    	non-compiled	[CE]  	100	None	replace
639	[BUG]  [BUGGY]  if(thenBranch!=  null  &&!isLowerBlock(elseBranch))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(thenBranch!=  null  &&!isLowerBlock(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(thenBranch!=  null  &&!isLowerBlock(elseBranch))  {	  if(thenBranch!=    null    &&!isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	50	None	replace
640	[BUG]  [BUGGY]  if(elseBranch!=  null  &&!isExpressionBlock(elseBranch))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(elseBranch!=  null  &&!isExpressionBlock(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(elseBranch!=  null  &&!isExpressionBlock(elseBranch))  {	  if(thenBranch!=    null    &&!isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	50	None	replace
641	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond)&&  isPropertyAssignmentInExpression(thenBranch)&&  isFoldableExpressBlock(cond))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(cond)&&  isPropertyAssignmentInExpression(thenBranch)&&  isFoldableExpressBlock(cond))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(cond)&&  isPropertyAssignmentInExpression(thenBranch)&&  isFoldableExpressBlock(cond))  {	  if(isPropertyAssignmentInExpression(thenBranch)&&    isFoldableExpressBlock(cond))    {    	non-compiled	[CE]  	40	None	replace
642	[BUG]  [BUGGY]  if(isBlockExpression(cond)&&  isPropertyAssignmentInExpression(thenBranch)&&  isFoldableExpressBlock(cond))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isBlockExpression(cond)&&  isPropertyAssignmentInExpression(thenBranch)&&  isFoldableExpressBlock(cond))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isBlockExpression(cond)&&  isPropertyAssignmentInExpression(thenBranch)&&  isFoldableExpressBlock(cond))  {	  if(isPropertyAssignmentInExpression(thenBranch)&&    isFoldableExpressBlock(cond))    {    	non-compiled	[CE]  	40	None	replace
643	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpression(cond)&&  isFoldableExpressBlock(cond))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isPropertyAssignmentInExpression(cond)&&  isFoldableExpressBlock(cond))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isPropertyAssignmentInExpression(cond)&&  isFoldableExpressBlock(cond))  {	  if(isPropertyAssignmentInExpression(thenBranch)&&    isFoldableExpressBlock(cond))    {    	non-compiled	[CE]  	40	None	replace
644	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  getBlockExpression(thenBranch)  ==  null  ||  isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  getBlockExpression(thenBranch)  ==  null  ||  isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  getBlockExpression(thenBranch)  ==  null  ||  isPropertyAssignmentInExpression(elseBranch))  {	  if(getBlockExpression(thenBranch)    ==    null    ||    isPropertyAssignmentInExpression(elseBranch))    {    	non-compiled	[CE]  	118	None	replace
645	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)||!isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)||!isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)||!isPropertyAssignmentInExpression(elseBranch))  {	  if(!isPropertyAssignmentInExpression(thenBranch))    {    	non-compiled	[CE]  	52	None	replace
646	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)||!isPropertyAssignmentInExpression(thenBranch))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)||!isPropertyAssignmentInExpression(thenBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)||!isPropertyAssignmentInExpression(thenBranch))  {	  if(!isPropertyAssignmentInExpression(thenBranch))    {    	non-compiled	[CE]  	52	None	replace
647	[BUG]  [BUGGY]  if(getBlockExpression(thenBranch)||  isPropertyAssignmentInExpression(elseBranch)||  isLowerPrecedenceInExpression(elseBranch)||  isFoldableExpressBlock(elseBranch))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(getBlockExpression(thenBranch)||  isPropertyAssignmentInExpression(elseBranch)||  isLowerPrecedenceInExpression(elseBranch)||  isFoldableExpressBlock(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(getBlockExpression(thenBranch)||  isPropertyAssignmentInExpression(elseBranch)||  isLowerPrecedenceInExpression(elseBranch)||  isFoldableExpressBlock(elseBranch))  {	  if(getBlockExpression(thenBranch)||    isLowerPrecedenceInExpression(thenBranch)||    isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	29	None	replace
648	[BUG]  [BUGGY]  if(getBlockExpression(thenBranch)||  isLowerPrecedenceInExpression(elseBranch)&&  isFoldableExpressBlock(elseBranch))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(getBlockExpression(thenBranch)||  isLowerPrecedenceInExpression(elseBranch)&&  isFoldableExpressBlock(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(getBlockExpression(thenBranch)||  isLowerPrecedenceInExpression(elseBranch)&&  isFoldableExpressBlock(elseBranch))  {	  if(getBlockExpression(thenBranch)||    isLowerPrecedenceInExpression(thenBranch)||    isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	29	None	replace
649	[BUG]  [BUGGY]  if(isBlockExpression(cond)&&  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isBlockExpression(cond)&&  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isBlockExpression(cond)&&  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(elseBranch))  {	  if(isLowerPrecedenceInExpression(cond,    OR_PRECEDENCE)&&    isPropertyAssignmentInExpression(thenBranch))    {    	non-compiled	[CE]  	1	None	replace
650	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(!isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(!isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE))  {	  if(!isLowerPrecedenceInExpression(thenBranch))    {    	non-compiled	[CE]  	91	None	replace
651	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&!isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&!isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&!isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE))  {	  if(!isLowerPrecedenceInExpression(thenBranch))    {    	non-compiled	[CE]  	91	None	replace
652	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&!isLowerPrecedenceInExpression(thenBranch))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&!isLowerPrecedenceInExpression(thenBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&!isLowerPrecedenceInExpression(thenBranch))  {	  if(!isLowerPrecedenceInExpression(thenBranch))    {    	non-compiled	[CE]  	91	None	replace
653	[BUG]  [BUGGY]  if(thenBranch!=  null  &&  isBlockExpression(elseBranch))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(thenBranch!=  null  &&  isBlockExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(thenBranch!=  null  &&  isBlockExpression(elseBranch))  {	  if(thenBranch!=    null    &&    isPropertyAssignmentInExpression(elseBranch))    {    	non-compiled	[CE]  	58	None	replace
654	[BUG]  [BUGGY]  if(thenBranch!=  null  &&  isLowerBlockExpression(elseBranch))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(thenBranch!=  null  &&  isLowerBlockExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(thenBranch!=  null  &&  isLowerBlockExpression(elseBranch))  {	  if(thenBranch!=    null    &&    isPropertyAssignmentInExpression(elseBranch))    {    	non-compiled	[CE]  	58	None	replace
655	[BUG]  [BUGGY]  if(thenBranch!=  null  &&  isPropertyAssignmentBlock(elseBranch))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(thenBranch!=  null  &&  isPropertyAssignmentBlock(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(thenBranch!=  null  &&  isPropertyAssignmentBlock(elseBranch))  {	  if(thenBranch!=    null    &&    isPropertyAssignmentInExpression(elseBranch))    {    	non-compiled	[CE]  	58	None	replace
656	[BUG]  [BUGGY]  if(isLowerBlockExpression(thenBranch)&&  elseBranchIsExpressionBlock)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerBlockExpression(thenBranch)&&  elseBranchIsExpressionBlock)  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerBlockExpression(thenBranch)&&  elseBranchIsExpressionBlock)  {	  if(isPropertyAssignmentInExpression(thenBranch)&&    elseBranchIsExpressionBlock)    {    	non-compiled	[CE]  	108	None	replace
657	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond)&&  isLowerPrecedenceInExpression(thenBranch)&&  elseBranchIsExpressionBlock)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(cond)&&  isLowerPrecedenceInExpression(thenBranch)&&  elseBranchIsExpressionBlock)  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(cond)&&  isLowerPrecedenceInExpression(thenBranch)&&  elseBranchIsExpressionBlock)  {	  if(isPropertyAssignmentInExpression(cond)||    isLowerPrecedenceInExpression(thenBranch)&&    isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	28	None	replace
658	[BUG]  [BUGGY]  if(isBlockExpression(cond)||  isLowerPrecedenceInExpression(thenBranch)&&  elseBranchIsExpressionBlock)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isBlockExpression(cond)||  isLowerPrecedenceInExpression(thenBranch)&&  elseBranchIsExpressionBlock)  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isBlockExpression(cond)||  isLowerPrecedenceInExpression(thenBranch)&&  elseBranchIsExpressionBlock)  {	  if(isPropertyAssignmentInExpression(cond)||    isLowerPrecedenceInExpression(thenBranch)&&    isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	28	None	replace
659	[BUG]  [BUGGY]  if(!isExpressionBlock(thenBranch)&&  isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(!isExpressionBlock(thenBranch)&&  isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(!isExpressionBlock(thenBranch)&&  isPropertyAssignmentInExpression(elseBranch))  {	  if(!isExpressionBlock(thenBranch))    {    	non-compiled	[CE]  	93	None	replace
660	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(thenBranch)||!isExpressionBlock(elseBranch))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(thenBranch)||!isExpressionBlock(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(thenBranch)||!isExpressionBlock(elseBranch))  {	  if(!isExpressionBlock(thenBranch))    {    	non-compiled	[CE]  	93	None	replace
661	[BUG]  [BUGGY]  if(isExpressionBlock(thenBranch)&&  isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isExpressionBlock(thenBranch)&&  isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isExpressionBlock(thenBranch)&&  isPropertyAssignmentInExpression(elseBranch))  {	  if(isBlockExpression(thenBranch)&&    isPropertyAssignmentInExpression(elseBranch))    {    	non-compiled	[CE]  	32	None	replace
662	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isPropertyAssignmentBlock(expr))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isPropertyAssignmentBlock(expr))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isPropertyAssignmentBlock(expr))  {	  if(isLowerPrecedenceInExpression(cond,    OR_PRECEDENCE)&&    isPropertyAssignmentInExpression(expr))    {    	non-compiled	[CE]  	111	None	replace
663	[BUG]  [BUGGY]  if(isBlockExpression(thenBranch)||  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(expr))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isBlockExpression(thenBranch)||  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(expr))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isBlockExpression(thenBranch)||  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isPropertyAssignmentInExpression(expr))  {	  if(isLowerPrecedenceInExpression(cond,    OR_PRECEDENCE)&&    isPropertyAssignmentInExpression(expr))    {    	non-compiled	[CE]  	111	None	replace
664	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isPropertyAssignmentBlock(elseBranch))  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(!isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isPropertyAssignmentBlock(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(!isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isPropertyAssignmentBlock(elseBranch))  {	  if(!isLowerPrecedenceInExpression(cond,    OR_PRECEDENCE)&&    isPropertyAssignmentInExpression(cond))    {    	non-compiled	[CE]  	102	None	replace
665	[BUG]  [BUGGY]  Node  thenAssign  =  getBlockIsExpressionBlock(thenBranch);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  Node  thenAssign  =  getBlockIsExpressionBlock(thenBranch);  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	Node  thenAssign  =  getBlockIsExpressionBlock(thenBranch);	  Node    thenAssign    =    getBlockExpression(thenBranch);    	non-compiled	[CE]  	94	None	replace
666	[BUG]  [BUGGY]  Node  thenAssign  =  getBlockExpression(thenBranch,  cond);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  Node  thenAssign  =  getBlockExpression(thenBranch,  cond);  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	Node  thenAssign  =  getBlockExpression(thenBranch,  cond);	  Node    thenAssign    =    getBlockExpression(thenBranch);    	non-compiled	[CE]  	94	None	replace
667	[BUG]  [BUGGY]  Node  thenAssign  =  getBlockExpression(thenBranch,  expr);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  Node  thenAssign  =  getBlockExpression(thenBranch,  expr);  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	Node  thenAssign  =  getBlockExpression(thenBranch,  expr);	  Node    thenAssign    =    getBlockExpression(thenBranch);    	non-compiled	[CE]  	94	None	replace
668	[BUG]  [BUGGY]  Node  thenOp  =  getBlockOp(elseBranch);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  Node  thenOp  =  getBlockOp(elseBranch);  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	Node  thenOp  =  getBlockOp(elseBranch);	  Node    thenOp    =    getBlockExpression(thenBranch);    	non-compiled	[CE]  	96	None	replace
669	[BUG]  [BUGGY]  Node  thenOp  =  getBlockExpression(thenBranch,  expr);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  Node  thenOp  =  getBlockExpression(thenBranch,  expr);  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	Node  thenOp  =  getBlockExpression(thenBranch,  expr);	  Node    thenOp    =    getBlockExpression(thenBranch);    	non-compiled	[CE]  	96	None	replace
670	[BUG]  [BUGGY]  Node  thenOp  =  getBlockOp(thenBranch);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  Node  thenOp  =  getBlockOp(thenBranch);  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	Node  thenOp  =  getBlockOp(thenBranch);	  Node    thenOp    =    getBlockExpression(thenBranch);    	non-compiled	[CE]  	96	None	replace
671	[BUG]  [BUGGY]  if(getBlockExpression(thenBranch)!=  null  &&  elseBranch.getType()  ==  Token.CATCH)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(getBlockExpression(thenBranch)!=  null  &&  elseBranch.getType()  ==  Token.CATCH)  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(getBlockExpression(thenBranch)!=  null  &&  elseBranch.getType()  ==  Token.CATCH)  {	  if(getBlockExpression(thenBranch)!=    null    &&    elseBranch.getType()    ==    Token.VAR)    {    	non-compiled	[CE]  	107	None	replace
672	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond)&&  isBlockExpression(thenBranch)&&  isPropertyAssignmentInExpression(cond))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(cond)&&  isBlockExpression(thenBranch)&&  isPropertyAssignmentInExpression(cond))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(cond)&&  isBlockExpression(thenBranch)&&  isPropertyAssignmentInExpression(cond))  {	  if(isBlockExpression(thenBranch)||    isPropertyAssignmentInExpression(cond))    {    	non-compiled	[CE]  	86	None	replace
673	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(thenBranch)&&  isIsExpressionBlock(elseBranch))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(!isLowerPrecedenceInExpression(thenBranch)&&  isIsExpressionBlock(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(!isLowerPrecedenceInExpression(thenBranch)&&  isIsExpressionBlock(elseBranch))  {	  if(!isLowerPrecedenceInExpression(thenBranch)&&    isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	72	None	replace
674	[BUG]  [BUGGY]  if(isBlockExpression(thenBranch)&&  isLowerPrecedenceInExpression(thenBranch))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isBlockExpression(thenBranch)&&  isLowerPrecedenceInExpression(thenBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isBlockExpression(thenBranch)&&  isLowerPrecedenceInExpression(thenBranch))  {	  if(isPropertyAssignmentInExpression(thenBranch)||    isLowerPrecedenceInExpression(thenBranch))    {    	non-compiled	[CE]  	57	None	replace
675	[BUG]  [BUGGY]  if(isBlockExpression(thenBranch)||  isPropertyAssignmentInExpression(thenBranch))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isBlockExpression(thenBranch)||  isPropertyAssignmentInExpression(thenBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isBlockExpression(thenBranch)||  isPropertyAssignmentInExpression(thenBranch))  {	  if(isPropertyAssignmentInExpression(thenBranch)||    isLowerPrecedenceInExpression(thenBranch))    {    	non-compiled	[CE]  	57	None	replace
676	[BUG]  [BUGGY]  if(isBlockExpression(cond)||  isLowerPrecedenceInExpression(cond))  {  [CE]  [FE]                              AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isBlockExpression(cond)||  isLowerPrecedenceInExpression(cond))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isBlockExpression(cond)||  isLowerPrecedenceInExpression(cond))  {	  if(isPropertyAssignmentInExpression(thenBranch)||    isLowerPrecedenceInExpression(thenBranch))    {    	non-compiled	[CE]  	57	None	replace
677	[BUG]  [BUGGY]  if(isLowerBlockExpression(thenBranch)&&  isPropertyAssignmentBlock(elseBranch))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerBlockExpression(thenBranch)&&  isPropertyAssignmentBlock(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerBlockExpression(thenBranch)&&  isPropertyAssignmentBlock(elseBranch))  {	  if(isLowerBlockExpression(thenBranch)&&    isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	109	None	replace
678	[BUG]  [BUGGY]  if(isLowerBlockExpression(thenBranch)&&!isFoldableExpressBlock(elseBranch))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerBlockExpression(thenBranch)&&!isFoldableExpressBlock(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerBlockExpression(thenBranch)&&!isFoldableExpressBlock(elseBranch))  {	  if(isPropertyAssignmentInExpression(thenBranch)&&!isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	53	None	replace
679	[BUG]  [BUGGY]  if(isConstructorInExpression(thenBranch)&&!isFoldableExpressBlock(elseBranch))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isConstructorInExpression(thenBranch)&&!isFoldableExpressBlock(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isConstructorInExpression(thenBranch)&&!isFoldableExpressBlock(elseBranch))  {	  if(isPropertyAssignmentInExpression(thenBranch)&&!isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	53	None	replace
680	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpression(thenBranch)&&!isLowerPrecedenceInExpression(elseBranch))  {  [CE]  [FE]                            AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isPropertyAssignmentInExpression(thenBranch)&&!isLowerPrecedenceInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isPropertyAssignmentInExpression(thenBranch)&&!isLowerPrecedenceInExpression(elseBranch))  {	  if(isPropertyAssignmentInExpression(thenBranch)&&!isFoldableExpressBlock(elseBranch))    {    	non-compiled	[CE]  	53	None	replace
681	[BUG]  [BUGGY]  Node  thenBranch  =(elseBranch!=  null)?  getBlockExpression(elseBranch):  null;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  Node  thenBranch  =(elseBranch!=  null)?  getBlockExpression(elseBranch):  null;  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	Node  thenBranch  =(elseBranch!=  null)?  getBlockExpression(elseBranch):  null;	  Node    thenBranch    =    getBlockExpression(elseBranch);    	non-compiled	[CE]  	75	None	replace
682	[BUG]  [BUGGY]  Node  thenBranch  =(elseBranch!=  null)?  getBlockExpression(thenBranch):  null;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  Node  thenBranch  =(elseBranch!=  null)?  getBlockExpression(thenBranch):  null;  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	Node  thenBranch  =(elseBranch!=  null)?  getBlockExpression(thenBranch):  null;	  Node    thenBranch    =    getBlockExpression(elseBranch);    	non-compiled	[CE]  	75	None	replace
683	[BUG]  [BUGGY]  Node  thenBranch  =(elseBranch!=  null)?  getBlockExpression(elseBranch):  n;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  Node  thenBranch  =(elseBranch!=  null)?  getBlockExpression(elseBranch):  n;  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	Node  thenBranch  =(elseBranch!=  null)?  getBlockExpression(elseBranch):  n;	  Node    thenBranch    =    getBlockExpression(elseBranch);    	non-compiled	[CE]  	75	None	replace
684	[BUG]  [BUGGY]  Node  thenBranch  =(elseBranch!=  null)?  getBlockExpression(elseBranch):  new  FoldArrayAction();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  Node  thenBranch  =(elseBranch!=  null)?  getBlockExpression(elseBranch):  new  FoldArrayAction();  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	Node  thenBranch  =(elseBranch!=  null)?  getBlockExpression(elseBranch):  new  FoldArrayAction();	  Node    thenBranch    =    getBlockExpression(elseBranch);    	non-compiled	[CE]  	75	None	replace
685	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  getBlockExpression(thenBranch)  ==  null  &&  isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  getBlockExpression(thenBranch)  ==  null  &&  isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  getBlockExpression(thenBranch)  ==  null  &&  isPropertyAssignmentInExpression(elseBranch))  {	  if(getBlockExpression(thenBranch)    ==    null    &&    isPropertyAssignmentInExpression(elseBranch))    {    	non-compiled	[CE]  	120	None	replace
686	[BUG]  [BUGGY]  if(getBlockExpression(thenBranch)!=  cond  &&  isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(getBlockExpression(thenBranch)!=  cond  &&  isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(getBlockExpression(thenBranch)!=  cond  &&  isPropertyAssignmentInExpression(elseBranch))  {	  if(getBlockExpression(thenBranch)    ==    null    &&    isPropertyAssignmentInExpression(elseBranch))    {    	non-compiled	[CE]  	120	None	replace
687	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpression(cond)&&  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isLowerPrecedenceInExpression(thenBranch))  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isPropertyAssignmentInExpression(cond)&&  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isLowerPrecedenceInExpression(thenBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isPropertyAssignmentInExpression(cond)&&  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isLowerPrecedenceInExpression(thenBranch))  {	  if(isLowerPrecedenceInExpression(cond,    OR_PRECEDENCE)||    isLowerPrecedenceInExpression(thenBranch))    {    	non-compiled	[CE]  	36	None	replace
688	[BUG]  [BUGGY]  if(isBlockExpression(cond)||  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)||  isLowerPrecedenceInExpression(thenBranch))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isBlockExpression(cond)||  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)||  isLowerPrecedenceInExpression(thenBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isBlockExpression(cond)||  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)||  isLowerPrecedenceInExpression(thenBranch))  {	  if(isLowerPrecedenceInExpression(cond,    OR_PRECEDENCE)||    isLowerPrecedenceInExpression(thenBranch))    {    	non-compiled	[CE]  	36	None	replace
689	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpression(cond)||  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)||  isLowerPrecedenceInExpression(elseBranch))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isPropertyAssignmentInExpression(cond)||  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)||  isLowerPrecedenceInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isPropertyAssignmentInExpression(cond)||  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)||  isLowerPrecedenceInExpression(elseBranch))  {	  if(isLowerPrecedenceInExpression(cond,    OR_PRECEDENCE)||    isLowerPrecedenceInExpression(thenBranch))    {    	non-compiled	[CE]  	36	None	replace
690	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpression(cond)||  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isLowerPrecedenceInExpression(thenBranch))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isPropertyAssignmentInExpression(cond)||  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isLowerPrecedenceInExpression(thenBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isPropertyAssignmentInExpression(cond)||  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isLowerPrecedenceInExpression(thenBranch))  {	  if(isLowerPrecedenceInExpression(cond,    OR_PRECEDENCE)||    isLowerPrecedenceInExpression(thenBranch))    {    	non-compiled	[CE]  	36	None	replace
691	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  elseBranchIsExpressionBlock)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  elseBranchIsExpressionBlock)  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  elseBranchIsExpressionBlock)  {	  if(isLowerPrecedenceInExpression(thenBranch)&&    elseBranchIsExpressionBlock)    {    	non-compiled	[CE]  	114	None	replace
692	[BUG]  [BUGGY]  if(!isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  [CE]  [FE]                    AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(!isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(!isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&	  if(isLowerPrecedenceInExpression(cond,    OR_PRECEDENCE)&&    	non-compiled	[CE]  	112	None	replace
693	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(thenBranch)&&  getBlockExpression(elseBranch)!=  null)  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(thenBranch)&&  getBlockExpression(elseBranch)!=  null)  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(thenBranch)&&  getBlockExpression(elseBranch)!=  null)  {	  if(getPropertyAssignmentInExpression(elseBranch)!=    null)    {    	non-compiled	[CE]  	63	None	replace
694	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isBlockExpression(thenBranch))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isBlockExpression(thenBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  isBlockExpression(thenBranch))  {	  if(isBlockExpression(cond))    {    	non-compiled	[CE]  	89	None	replace
695	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)||  isBlockExpression(cond))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)||  isBlockExpression(cond))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)||  isBlockExpression(cond))  {	  if(isBlockExpression(cond))    {    	non-compiled	[CE]  	89	None	replace
696	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond)||  isPropertyAssignmentInExpression(thenBranch)&&  elseBranch!=  getBlockExpression(elseBranch))  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(cond)||  isPropertyAssignmentInExpression(thenBranch)&&  elseBranch!=  getBlockExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(cond)||  isPropertyAssignmentInExpression(thenBranch)&&  elseBranch!=  getBlockExpression(elseBranch))  {	  if(isPropertyAssignmentInExpression(thenBranch)&&    elseBranch!=    getBlockExpression(elseBranch))    {    	non-compiled	[CE]  	81	None	replace
697	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond)&&  elseBranch!=  getBlockExpression(elseBranch))  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(cond)&&  elseBranch!=  getBlockExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(cond)&&  elseBranch!=  getBlockExpression(elseBranch))  {	  if(isPropertyAssignmentInExpression(thenBranch)&&    elseBranch!=    getBlockExpression(elseBranch))    {    	non-compiled	[CE]  	81	None	replace
698	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(thenBranch)||  elseBranch!=  getBlockExpression(elseBranch))  {  [CE]  [FE]                          AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(thenBranch)||  elseBranch!=  getBlockExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(thenBranch)||  elseBranch!=  getBlockExpression(elseBranch))  {	  if(isPropertyAssignmentInExpression(thenBranch)&&    elseBranch!=    getBlockExpression(elseBranch))    {    	non-compiled	[CE]  	81	None	replace
699	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond)&&  getBlockExpression(thenBranch)!=  null  &&  isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(cond)&&  getBlockExpression(thenBranch)!=  null  &&  isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(cond)&&  getBlockExpression(thenBranch)!=  null  &&  isPropertyAssignmentInExpression(elseBranch))  {	  if(getBlockExpression(thenBranch)!=    null    ||    isPropertyAssignmentInExpression(elseBranch))    {    	non-compiled	[CE]  	37	None	replace
700	[BUG]  [BUGGY]  if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  getBlockExpression(thenBranch)!=  null  ||  isPropertyAssignmentInExpression(elseBranch))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  getBlockExpression(thenBranch)!=  null  ||  isPropertyAssignmentInExpression(elseBranch))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)&&  getBlockExpression(thenBranch)!=  null  ||  isPropertyAssignmentInExpression(elseBranch))  {	  if(getBlockExpression(thenBranch)!=    null    ||    isPropertyAssignmentInExpression(elseBranch))    {    	non-compiled	[CE]  	37	None	replace
701	[BUG]  [BUGGY]  if(isPropertyAssignmentInExpression(cond,  OR_PRECEDENCE)&&  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE))  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]        if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }  Node  thenBranch  =  cond.getNext();  Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {      [BUGGY]  if(isPropertyAssignmentInExpression(cond,  OR_PRECEDENCE)&&  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE))  {  [BUGGY]      Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  if  (cond.getType()  ==  Token.NOT)  {  if  (isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE)  &&  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3333333333333333	275	275	1	replace	if(isPropertyAssignmentInExpression(cond,  OR_PRECEDENCE)&&  isLowerPrecedenceInExpression(cond,  OR_PRECEDENCE))  {	  if(isLowerPrecedenceInExpression(thenBranch,    OR_PRECEDENCE))    {    	non-compiled	[CE]  	69	None	replace
