bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  [CE]  [FE]    AssertionFailedError  [CONTEXT]  private  Node  getBlockExpression(Node  n)  {  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]  return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT);	Preconditions.checkState(isFoldableExpressBlock(n));  	non-compiled	[CE]  	51	None	replace
2	[BUG]  [BUGGY]  Preconditions.checkState(isFoldableExpression(n));  [CE]  [FE]      AssertionFailedError  [CONTEXT]  private  Node  getBlockExpression(Node  n)  {  [BUGGY]  Preconditions.checkState(isFoldableExpression(n));  [BUGGY]  return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isFoldableExpression(n));	Preconditions.checkState(isFoldableExpressBlock(n));  	non-compiled	[CE]  	51	None	replace
3	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK);  [CE]  [FE]        AssertionFailedError  [CONTEXT]  private  Node  getBlockExpression(Node  n)  {  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK);  [BUGGY]  return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.BLOCK);	Preconditions.checkState(isFoldableExpressBlock(n));  	non-compiled	[CE]  	51	None	replace
4	[BUG]  [BUGGY]  Preconditions.checkState(!isFoldableExpressBlock(n));  [CE]  [FE]          AssertionFailedError  [CONTEXT]  private  Node  getBlockExpression(Node  n)  {  [BUGGY]  Preconditions.checkState(!isFoldableExpressBlock(n));  [BUGGY]  return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(!isFoldableExpressBlock(n));	Preconditions.checkState(isFoldableExpressBlock(n));  	non-compiled	[CE]  	51	None	replace
5	[BUG]  [BUGGY]  Preconditions.checkState(isFoldExpressBlock(n));  [CE]  [FE]            AssertionFailedError  [CONTEXT]  private  Node  getBlockExpression(Node  n)  {  [BUGGY]  Preconditions.checkState(isFoldExpressBlock(n));  [BUGGY]  return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isFoldExpressBlock(n));	Preconditions.checkState(isFoldableExpressBlock(n));  	non-compiled	[CE]  	51	None	replace
6	[BUG]  [BUGGY]  Preconditions.checkState(isFoldableExpressionBlock(n));  [CE]  [FE]              AssertionFailedError  [CONTEXT]  private  Node  getBlockExpression(Node  n)  {  [BUGGY]  Preconditions.checkState(isFoldableExpressionBlock(n));  [BUGGY]  return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isFoldableExpressionBlock(n));	Preconditions.checkState(isFoldableExpressBlock(n));  	non-compiled	[CE]  	51	None	replace
7	[BUG]  [BUGGY]    [CE]  [FE]                AssertionFailedError  [CONTEXT]  private  Node  getBlockExpression(Node  n)  {  [BUGGY]    [BUGGY]  return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	  	Preconditions.checkState(isFoldableExpressBlock(n));  	non-compiled	[CE]  	51	None	replace
8	[BUG]  [BUGGY]  Preconditions.checkState(isExpressBlock(n));  [CE]  [FE]    AssertionFailedError  [CONTEXT]  private  Node  getBlockExpression(Node  n)  {  [BUGGY]  Preconditions.checkState(isExpressBlock(n));  [BUGGY]  return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isExpressBlock(n));	Preconditions.checkState(isFoldableExpressBlock(n));  	non-compiled	[CE]  	51	None	replace
9	[BUG]  [BUGGY]  Preconditions.checkState(isFoldableExpressBlock(n)||  n.getType()  ==  Token.EXPR_RESULT);  [CE]  [FE]      AssertionFailedError  [CONTEXT]  private  Node  getBlockExpression(Node  n)  {  [BUGGY]  Preconditions.checkState(isFoldableExpressBlock(n)||  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]  return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isFoldableExpressBlock(n)||  n.getType()  ==  Token.EXPR_RESULT);	Preconditions.checkState(isFoldableExpressBlock(n));  	non-compiled	[CE]  	51	None	replace
10	[BUG]  [BUGGY]  Preconditions.checkState(isFallThrough(n));  [CE]  [FE]    AssertionFailedError  [CONTEXT]  private  Node  getBlockExpression(Node  n)  {  [BUGGY]  Preconditions.checkState(isFallThrough(n));  [BUGGY]  return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isFallThrough(n));	Preconditions.checkState(isFoldableExpressBlock(n));  	non-compiled	[CE]  	51	None	replace
11	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK);  [CE]  [FE]      AssertionFailedError  [CONTEXT]  private  Node  getBlockExpression(Node  n)  {  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK);  [BUGGY]  return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.BLOCK);	Preconditions.checkState(isFoldableExpressBlock(n));  	non-compiled	[CE]  	51	None	replace
