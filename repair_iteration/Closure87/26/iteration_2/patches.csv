bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Preconditions.checkArgument(!isFoldableExpression(n));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkArgument(!isFoldableExpression(n));  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkArgument(!isFoldableExpression(n));	  Preconditions.checkArgument(!isFoldableExpressBlock(n));    	non-compiled	[CE]  	77	None	replace
2	[BUG]  [BUGGY]  Preconditions.checkArgument(!isFallThrough(n));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkArgument(!isFallThrough(n));  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkArgument(!isFallThrough(n));	  Preconditions.checkArgument(!isFoldableExpressBlock(n));    	non-compiled	[CE]  	77	None	replace
3	[BUG]  [BUGGY]  Preconditions.checkArgument(!isExpressionNode(n));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkArgument(!isExpressionNode(n));  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkArgument(!isExpressionNode(n));	  Preconditions.checkArgument(!isFoldableExpressBlock(n));    	non-compiled	[CE]  	77	None	replace
4	[BUG]  [BUGGY]  Preconditions.checkArgument(!isFoldableExpressionBlock(n));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkArgument(!isFoldableExpressionBlock(n));  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkArgument(!isFoldableExpressionBlock(n));	  Preconditions.checkArgument(!isFoldableExpressBlock(n));    	non-compiled	[CE]  	77	None	replace
5	[BUG]  [BUGGY]  Preconditions.checkState(!isFoldableExpressBlock(n)||  n.getType()!=  Token.EXPR_RESULT);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(!isFoldableExpressBlock(n)||  n.getType()!=  Token.EXPR_RESULT);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(!isFoldableExpressBlock(n)||  n.getType()!=  Token.EXPR_RESULT);	  Preconditions.checkState(!isFoldableExpressBlock(n)||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	15	None	replace
6	[BUG]  [BUGGY]  Preconditions.checkState(!isFoldableExpressBlock(n)&&  n.getType()  ==  Token.EXPR_RESULT);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(!isFoldableExpressBlock(n)&&  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(!isFoldableExpressBlock(n)&&  n.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(!isFoldableExpressBlock(n)||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	15	None	replace
7	[BUG]  [BUGGY]  Preconditions.checkState(!isFoldableExpression(n)||  n.getType()  ==  Token.EXPR_RESULT);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(!isFoldableExpression(n)||  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(!isFoldableExpression(n)||  n.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(!isFoldableExpressBlock(n)||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	15	None	replace
8	[BUG]  [BUGGY]  Preconditions.checkState(!isVarDeclaration(n)||  n.getType()  ==  Token.EXPR_RESULT);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(!isVarDeclaration(n)||  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(!isVarDeclaration(n)||  n.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(!isFoldableExpressBlock(n)||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	15	None	replace
9	[BUG]  [BUGGY]  Preconditions.checkState(!isBlockExpression(n)||  n.getType()  ==  Token.EXPR_RESULT);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(!isBlockExpression(n)||  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(!isBlockExpression(n)||  n.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(!isFoldableExpressBlock(n)||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	15	None	replace
10	[BUG]  [BUGGY]  Preconditions.checkState(!isExpressionFunction(n)||  n.getType()  ==  Token.EXPR_RESULT);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(!isExpressionFunction(n)||  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(!isExpressionFunction(n)||  n.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(!isFoldableExpressBlock(n)||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	15	None	replace
11	[BUG]  [BUGGY]  Predicates.checkState(n.getType()!=  Token.EXPR_RESULT);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Predicates.checkState(n.getType()!=  Token.EXPR_RESULT);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Predicates.checkState(n.getType()!=  Token.EXPR_RESULT);	  Predicates.checkState(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	61	None	replace
12	[BUG]  [BUGGY]  Predicates.checkState(n.getType()  ==  Token.EXPR_RESULT,  n.getFirstChild());  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Predicates.checkState(n.getType()  ==  Token.EXPR_RESULT,  n.getFirstChild());  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Predicates.checkState(n.getType()  ==  Token.EXPR_RESULT,  n.getFirstChild());	  Predicates.checkState(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	61	None	replace
13	[BUG]  [BUGGY]  Predicates.checkState(n.getType()  ==  Token.EXPR_RESULT,  n.getString());  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Predicates.checkState(n.getType()  ==  Token.EXPR_RESULT,  n.getString());  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Predicates.checkState(n.getType()  ==  Token.EXPR_RESULT,  n.getString());	  Predicates.checkState(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	61	None	replace
14	[BUG]  [BUGGY]  Predicates.checkState(n.getType()  ==  Token.EXPR_RESULT,  STANDARD_OBJECT_CONSTRUCTORS);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Predicates.checkState(n.getType()  ==  Token.EXPR_RESULT,  STANDARD_OBJECT_CONSTRUCTORS);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Predicates.checkState(n.getType()  ==  Token.EXPR_RESULT,  STANDARD_OBJECT_CONSTRUCTORS);	  Predicates.checkState(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	61	None	replace
15	[BUG]  [BUGGY]  Predicates.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.FUNCTION);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Predicates.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Predicates.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.FUNCTION);	  Predicates.checkState(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	61	None	replace
16	[BUG]  [BUGGY]  Predicates.checkState(n.getType()  ==  Token.EXPR_RESULT,  n.getChildCount());  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Predicates.checkState(n.getType()  ==  Token.EXPR_RESULT,  n.getChildCount());  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Predicates.checkState(n.getType()  ==  Token.EXPR_RESULT,  n.getChildCount());	  Predicates.checkState(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	61	None	replace
17	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK  &&  n.getFirstChild()  ==  n);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK  &&  n.getFirstChild()  ==  n);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.BLOCK  &&  n.getFirstChild()  ==  n);	  Preconditions.checkState(n.getType()    ==    Token.BLOCK    ||    n.getFirstChild()    ==    n);    	non-compiled	[CE]  	69	None	replace
18	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK  ||  n.getFirstChild()  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK  ||  n.getFirstChild()  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.BLOCK  ||  n.getFirstChild()  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE);	  Preconditions.checkState(n.getType()    ==    Token.BLOCK    ||    n.getFirstChild()    ==    n);    	non-compiled	[CE]  	69	None	replace
19	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK  ||  n.getFirstChild()  ==  STANDARD_OBJECT_CONSTRUCTORS);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK  ||  n.getFirstChild()  ==  STANDARD_OBJECT_CONSTRUCTORS);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.BLOCK  ||  n.getFirstChild()  ==  STANDARD_OBJECT_CONSTRUCTORS);	  Preconditions.checkState(n.getType()    ==    Token.BLOCK    ||    n.getFirstChild()    ==    n);    	non-compiled	[CE]  	69	None	replace
20	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK  ||  n.getFirstChild()  ==  null);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK  ||  n.getFirstChild()  ==  null);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.BLOCK  ||  n.getFirstChild()  ==  null);	  Preconditions.checkState(n.getType()    ==    Token.BLOCK    ||    n.getFirstChild()    ==    n);    	non-compiled	[CE]  	69	None	replace
21	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK  ||  n.getFirstChild()!=  n);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK  ||  n.getFirstChild()!=  n);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.BLOCK  ||  n.getFirstChild()!=  n);	  Preconditions.checkState(n.getType()    ==    Token.BLOCK    ||    n.getFirstChild()    ==    n);    	non-compiled	[CE]  	69	None	replace
22	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK  ||  n.getLastChild()  ==  n);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK  ||  n.getLastChild()  ==  n);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.BLOCK  ||  n.getLastChild()  ==  n);	  Preconditions.checkState(n.getType()    ==    Token.BLOCK    ||    n.getFirstChild()    ==    n);    	non-compiled	[CE]  	69	None	replace
23	[BUG]  [BUGGY]  Node  n  =  getBlockExpression(n.getLastChild());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Node  n  =  getBlockExpression(n.getLastChild());  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Node  n  =  getBlockExpression(n.getLastChild());	  Node    n    =    getBlockExpression(n.getFirstChild());    	non-compiled	[CE]  	43	None	replace
24	[BUG]  [BUGGY]  Node  n  =  getBlockExpression(n.getNext());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Node  n  =  getBlockExpression(n.getNext());  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Node  n  =  getBlockExpression(n.getNext());	  Node    n    =    getBlockExpression(n.getFirstChild());    	non-compiled	[CE]  	43	None	replace
25	[BUG]  [BUGGY]  Node  n  =  getBlockExpression(n.getType());  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Node  n  =  getBlockExpression(n.getType());  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Node  n  =  getBlockExpression(n.getType());	  Node    n    =    getBlockExpression(n.getFirstChild());    	non-compiled	[CE]  	43	None	replace
26	[BUG]  [BUGGY]  Node  n  =  getBlockExpression(n.getFirstChild(),  n.getLastChild());  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Node  n  =  getBlockExpression(n.getFirstChild(),  n.getLastChild());  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Node  n  =  getBlockExpression(n.getFirstChild(),  n.getLastChild());	  Node    n    =    getBlockExpression(n.getFirstChild());    	non-compiled	[CE]  	43	None	replace
27	[BUG]  [BUGGY]  Node  n  =  getBlockExpression(n.getString());  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Node  n  =  getBlockExpression(n.getString());  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Node  n  =  getBlockExpression(n.getString());	  Node    n    =    getBlockExpression(n.getFirstChild());    	non-compiled	[CE]  	43	None	replace
28	[BUG]  [BUGGY]  Node  n  =  getBlockExpression(n.getFirstChild(),  n.getType());  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Node  n  =  getBlockExpression(n.getFirstChild(),  n.getType());  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Node  n  =  getBlockExpression(n.getFirstChild(),  n.getType());	  Node    n    =    getBlockExpression(n.getFirstChild());    	non-compiled	[CE]  	43	None	replace
29	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  &&  n.getType()  ==  Token.VAR);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  &&  n.getType()  ==  Token.VAR);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  &&  n.getType()  ==  Token.VAR);	  Preconditions.checkArgument(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  	75	None	replace
30	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  ||  n.getType()!=  Token.VAR);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  ||  n.getType()!=  Token.VAR);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  ||  n.getType()!=  Token.VAR);	  Preconditions.checkArgument(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  	75	None	replace
31	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK  ||  n.getType()  ==  Token.VAR);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK  ||  n.getType()  ==  Token.VAR);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.BLOCK  ||  n.getType()  ==  Token.VAR);	  Preconditions.checkArgument(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  	75	None	replace
32	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.BLOCK  ||  n.getType()  ==  Token.VAR);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.BLOCK  ||  n.getType()  ==  Token.VAR);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkArgument(n.getType()!=  Token.BLOCK  ||  n.getType()  ==  Token.VAR);	  Preconditions.checkArgument(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  	75	None	replace
33	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  ||  n.getFirstChild().getType()  ==  Token.VAR);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  ||  n.getFirstChild().getType()  ==  Token.VAR);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  ||  n.getFirstChild().getType()  ==  Token.VAR);	  Preconditions.checkArgument(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  	75	None	replace
34	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.BLOCK);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.BLOCK);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.BLOCK);	  Preconditions.checkArgument(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  	75	None	replace
35	[BUG]  [BUGGY]  Preconditions.checkState(!isImmutableExpression(n));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(!isImmutableExpression(n));  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(!isImmutableExpression(n));	  Preconditions.checkState(!isImmutableExpressBlock(n));    	non-compiled	[CE]  	51	None	replace
36	[BUG]  [BUGGY]  Preconditions.checkState(isImmutableExpressBlock(n));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(isImmutableExpressBlock(n));  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isImmutableExpressBlock(n));	  Preconditions.checkState(!isImmutableExpressBlock(n));    	non-compiled	[CE]  	51	None	replace
37	[BUG]  [BUGGY]  Preconditions.checkState(!isImmutableExpressionBlock(n));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(!isImmutableExpressionBlock(n));  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(!isImmutableExpressionBlock(n));	  Preconditions.checkState(!isImmutableExpressBlock(n));    	non-compiled	[CE]  	51	None	replace
38	[BUG]  [BUGGY]  Preconditions.checkState(!isImmutableExpressBlock(n)||  n.getType()  ==  Token.EXPR_RESULT);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(!isImmutableExpressBlock(n)||  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(!isImmutableExpressBlock(n)||  n.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(!isImmutableExpressBlock(n));    	non-compiled	[CE]  	51	None	replace
39	[BUG]  [BUGGY]  Preconditions.checkState(!isImmutableExpressBlock(n),  isImmutableSet);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(!isImmutableExpressBlock(n),  isImmutableSet);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(!isImmutableExpressBlock(n),  isImmutableSet);	  Preconditions.checkState(!isImmutableExpressBlock(n));    	non-compiled	[CE]  	51	None	replace
40	[BUG]  [BUGGY]  Preconditions.checkState(isFoldExpression(n)||  isFoldExpression(n));  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(isFoldExpression(n)||  isFoldExpression(n));  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isFoldExpression(n)||  isFoldExpression(n));	  Preconditions.checkState(isFoldExpression(n));    	non-compiled	[CE]  	23	None	replace
41	[BUG]  [BUGGY]  Preconditions.checkState(!isFoldExpression(n));  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(!isFoldExpression(n));  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(!isFoldExpression(n));	  Preconditions.checkState(isFoldExpression(n));    	non-compiled	[CE]  	23	None	replace
42	[BUG]  [BUGGY]  Preconditions.checkState(isFinally(n)||  isFinally(n));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(isFinally(n)||  isFinally(n));  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isFinally(n)||  isFinally(n));	  Preconditions.checkState(isFinally(n));    	non-compiled	[CE]  	22	None	replace
43	[BUG]  [BUGGY]  Preconditions.checkState(!isFinally(n));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(!isFinally(n));  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(!isFinally(n));	  Preconditions.checkState(isFinally(n));    	non-compiled	[CE]  	22	None	replace
44	[BUG]  [BUGGY]  Preconditions.checkState(isFallThrough(n)||  n.getType()!=  Token.EXPR_RESULT);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(isFallThrough(n)||  n.getType()!=  Token.EXPR_RESULT);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isFallThrough(n)||  n.getType()!=  Token.EXPR_RESULT);	  Preconditions.checkState(isFallThrough(n)||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	62	None	replace
45	[BUG]  [BUGGY]  Preconditions.checkState(isExpressionFailed(n)||  n.getType()  ==  Token.EXPR_RESULT);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(isExpressionFailed(n)||  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isExpressionFailed(n)||  n.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(isFallThrough(n)||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	62	None	replace
46	[BUG]  [BUGGY]  Preconditions.checkState(isEmpty(n)||  n.getType()  ==  Token.EXPR_RESULT);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(isEmpty(n)||  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isEmpty(n)||  n.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(isFallThrough(n)||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	62	None	replace
47	[BUG]  [BUGGY]  Preconditions.checkState(isFallThrough(n)&&  n.getType()  ==  Token.EXPR_RESULT);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(isFallThrough(n)&&  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isFallThrough(n)&&  n.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(isFallThrough(n)||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	62	None	replace
48	[BUG]  [BUGGY]  Preconditions.checkState(isExpressBlock(n)||  n.getType()!=  Token.EXPR_RESULT);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(isExpressBlock(n)||  n.getType()!=  Token.EXPR_RESULT);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isExpressBlock(n)||  n.getType()!=  Token.EXPR_RESULT);	  Preconditions.checkState(isExpressBlock(n)||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	35	None	replace
49	[BUG]  [BUGGY]  Preconditions.checkState(isExpressBlock(n)&&  n.getType()  ==  Token.EXPR_RESULT);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(isExpressBlock(n)&&  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isExpressBlock(n)&&  n.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(isExpressBlock(n)||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	35	None	replace
50	[BUG]  [BUGGY]  Preconditions.checkState(isExpressBlock(n)||  n.getType()  ==  Token.EXPR_RESULT,  STANDARD_OBJECT_CONSTRUCTORS);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(isExpressBlock(n)||  n.getType()  ==  Token.EXPR_RESULT,  STANDARD_OBJECT_CONSTRUCTORS);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isExpressBlock(n)||  n.getType()  ==  Token.EXPR_RESULT,  STANDARD_OBJECT_CONSTRUCTORS);	  Preconditions.checkState(isExpressBlock(n)||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	35	None	replace
51	[BUG]  [BUGGY]  Preconditions.checkState(!isExpressBlock(n)||  n.getType()  ==  Token.EXPR_RESULT);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(!isExpressBlock(n)||  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(!isExpressBlock(n)||  n.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(isExpressBlock(n)||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	35	None	replace
52	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK  &&  n.getType()  ==  Token.CATCH);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK  &&  n.getType()  ==  Token.CATCH);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.BLOCK  &&  n.getType()  ==  Token.CATCH);	  Preconditions.checkState(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.CATCH);    	non-compiled	[CE]  	70	None	replace
53	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK  ||  n.getType()!=  Token.CATCH);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK  ||  n.getType()!=  Token.CATCH);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.BLOCK  ||  n.getType()!=  Token.CATCH);	  Preconditions.checkState(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.CATCH);    	non-compiled	[CE]  	70	None	replace
54	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.BLOCK  ||  n.getType()  ==  Token.CATCH);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.BLOCK  ||  n.getType()  ==  Token.CATCH);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()!=  Token.BLOCK  ||  n.getType()  ==  Token.CATCH);	  Preconditions.checkState(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.CATCH);    	non-compiled	[CE]  	70	None	replace
55	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CATCH  ||  n.getType()  ==  Token.BLOCK);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CATCH  ||  n.getType()  ==  Token.BLOCK);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.CATCH  ||  n.getType()  ==  Token.BLOCK);	  Preconditions.checkState(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.CATCH);    	non-compiled	[CE]  	70	None	replace
56	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK  ||  n.getFirstChild().getType()  ==  Token.CATCH);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK  ||  n.getFirstChild().getType()  ==  Token.CATCH);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.BLOCK  ||  n.getFirstChild().getType()  ==  Token.CATCH);	  Preconditions.checkState(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.CATCH);    	non-compiled	[CE]  	70	None	replace
57	[BUG]  [BUGGY]  Preconditions.checkState(isExpressBlock(n)||  n.getType()!=  Token.GETPROP);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(isExpressBlock(n)||  n.getType()!=  Token.GETPROP);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isExpressBlock(n)||  n.getType()!=  Token.GETPROP);	  Preconditions.checkState(isExpressBlock(n)||    n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  	65	None	replace
58	[BUG]  [BUGGY]  Preconditions.checkState(isExpressBlock(n)&&  n.getType()  ==  Token.GETPROP);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(isExpressBlock(n)&&  n.getType()  ==  Token.GETPROP);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isExpressBlock(n)&&  n.getType()  ==  Token.GETPROP);	  Preconditions.checkState(isExpressBlock(n)||    n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  	65	None	replace
59	[BUG]  [BUGGY]  Preconditions.checkState(isExpressBlock(n)||  n.getType()  ==  Token.GETELEM);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(isExpressBlock(n)||  n.getType()  ==  Token.GETELEM);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isExpressBlock(n)||  n.getType()  ==  Token.GETELEM);	  Preconditions.checkState(isExpressBlock(n)||    n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  	65	None	replace
60	[BUG]  [BUGGY]  Preconditions.checkState(isExpressionBlock(n)||  n.getType()  ==  Token.GETPROP);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(isExpressionBlock(n)||  n.getType()  ==  Token.GETPROP);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isExpressionBlock(n)||  n.getType()  ==  Token.GETPROP);	  Preconditions.checkState(isExpressBlock(n)||    n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  	65	None	replace
61	[BUG]  [BUGGY]  Preconditions.checkState(isExpressBlock(n)||  n.getType()  ==  Token.GETPROP;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(isExpressBlock(n)||  n.getType()  ==  Token.GETPROP;  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isExpressBlock(n)||  n.getType()  ==  Token.GETPROP;	  Preconditions.checkState(isExpressBlock(n)||    n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  	65	None	replace
62	[BUG]  [BUGGY]  Preconditions.checkState(isExpressBlock(n)||  n.getType()  ==  Token.GETPROP,  STANDARD_OBJECT_CONSTRUCTORS);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(isExpressBlock(n)||  n.getType()  ==  Token.GETPROP,  STANDARD_OBJECT_CONSTRUCTORS);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isExpressBlock(n)||  n.getType()  ==  Token.GETPROP,  STANDARD_OBJECT_CONSTRUCTORS);	  Preconditions.checkState(isExpressBlock(n)||    n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  	65	None	replace
63	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  >=  Token.EXPR_RESULT);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  >=  Token.EXPR_RESULT);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  >=  Token.EXPR_RESULT);	  Preconditions.checkState(n.getType()!=    Token.EXPR_RESULT);    	non-compiled	[CE]  	1	None	replace
64	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.EMPTY);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.EMPTY);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()!=  Token.EMPTY);	  Preconditions.checkState(n.getType()!=    Token.EXPR_RESULT);    	non-compiled	[CE]  	1	None	replace
65	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  >=  Token.BLOCK);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  >=  Token.BLOCK);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  >=  Token.BLOCK);	  Preconditions.checkState(n.getType()!=    Token.BLOCK);    	non-compiled	[CE]  	27	None	replace
66	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.GETPROP);	  Preconditions.checkState(n.getType()!=    Token.BLOCK);    	non-compiled	[CE]  	27	None	replace
67	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLACK);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLACK);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.BLACK);	  Preconditions.checkState(n.getType()!=    Token.BLOCK);    	non-compiled	[CE]  	27	None	replace
68	[BUG]  [BUGGY]  Preconditions.checkState(isBlockExpression(n)&&  n.getType()  ==  Token.EXPR_RESULT);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(isBlockExpression(n)&&  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isBlockExpression(n)&&  n.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(isFoldableExpressBlock(n)&&    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	37	None	replace
69	[BUG]  [BUGGY]  Preconditions.checkState(isFoldableExpressBlock(n)||  n.getType()  ==  Token.EXPR_RESULT;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(isFoldableExpressBlock(n)||  n.getType()  ==  Token.EXPR_RESULT;  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isFoldableExpressBlock(n)||  n.getType()  ==  Token.EXPR_RESULT;	  Preconditions.checkState(isFoldableExpressBlock(n)&&    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	37	None	replace
70	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.EXPR_RESULT);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.EXPR_RESULT);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkArgument(n.getType()!=  Token.EXPR_RESULT);	  Preconditions.checkArgument(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	60	None	replace
71	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT,  n.getFirstChild());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT,  n.getFirstChild());  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT,  n.getFirstChild());	  Preconditions.checkArgument(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	60	None	replace
72	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT,  n.getString());  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT,  n.getString());  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT,  n.getString());	  Preconditions.checkArgument(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	60	None	replace
73	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.FUNCTION);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.FUNCTION);	  Preconditions.checkArgument(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	60	None	replace
74	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.BLOCK);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.BLOCK);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.BLOCK);	  Preconditions.checkArgument(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	60	None	replace
75	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  &&  n.getType()  ==  Token.EXPR_RESULT);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  &&  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  &&  n.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkArgument(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	8	None	replace
76	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  ||  n.getType()!=  Token.EXPR_RESULT);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  ||  n.getType()!=  Token.EXPR_RESULT);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  ||  n.getType()!=  Token.EXPR_RESULT);	  Preconditions.checkArgument(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	8	None	replace
77	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.BLOCK  ||  n.getType()  ==  Token.EXPR_RESULT);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.BLOCK  ||  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkArgument(n.getType()!=  Token.BLOCK  ||  n.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkArgument(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	8	None	replace
78	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  ||  n.getFirstChild().getType()  ==  Token.EXPR_RESULT);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  ||  n.getFirstChild().getType()  ==  Token.EXPR_RESULT);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  ||  n.getFirstChild().getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkArgument(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	8	None	replace
79	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.BLOCK  &&  n.getType()  ==  Token.EXPR_RESULT);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.BLOCK  &&  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkArgument(n.getType()!=  Token.BLOCK  &&  n.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkArgument(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	8	None	replace
80	[BUG]  [BUGGY]  Preconditions.checkState(isExpressBlock(n)||  n.getType()!=  Token.EXPRESSION);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(isExpressBlock(n)||  n.getType()!=  Token.EXPRESSION);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isExpressBlock(n)||  n.getType()!=  Token.EXPRESSION);	  Preconditions.checkState(isExpressBlock(n)||    n.getType()    ==    Token.EXPRESSION);    	non-compiled	[CE]  	64	None	replace
81	[BUG]  [BUGGY]  Preconditions.checkState(isExpressionBlock(n)||  n.getType()  ==  Token.EXPRESSION);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(isExpressionBlock(n)||  n.getType()  ==  Token.EXPRESSION);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isExpressionBlock(n)||  n.getType()  ==  Token.EXPRESSION);	  Preconditions.checkState(isExpressBlock(n)||    n.getType()    ==    Token.EXPRESSION);    	non-compiled	[CE]  	64	None	replace
82	[BUG]  [BUGGY]  Preconditions.checkState(isExpressBlock(n)&&  n.getType()  ==  Token.EXPRESSION);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(isExpressBlock(n)&&  n.getType()  ==  Token.EXPRESSION);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isExpressBlock(n)&&  n.getType()  ==  Token.EXPRESSION);	  Preconditions.checkState(isExpressBlock(n)||    n.getType()    ==    Token.EXPRESSION);    	non-compiled	[CE]  	64	None	replace
83	[BUG]  [BUGGY]  Preconditions.checkState(isExpressBlock(n)||  n.getType()  ==  Token.EMPTY);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(isExpressBlock(n)||  n.getType()  ==  Token.EMPTY);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isExpressBlock(n)||  n.getType()  ==  Token.EMPTY);	  Preconditions.checkState(isExpressBlock(n)||    n.getType()    ==    Token.EXPRESSION);    	non-compiled	[CE]  	64	None	replace
84	[BUG]  [BUGGY]  Preconditions.checkState(!isExpressBlock(n)||  n.getType()  ==  Token.EXPRESSION);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(!isExpressBlock(n)||  n.getType()  ==  Token.EXPRESSION);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(!isExpressBlock(n)||  n.getType()  ==  Token.EXPRESSION);	  Preconditions.checkState(isExpressBlock(n)||    n.getType()    ==    Token.EXPRESSION);    	non-compiled	[CE]  	64	None	replace
85	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  >=  Token.BLOCK);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  >=  Token.BLOCK);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkArgument(n.getType()  >=  Token.BLOCK);	  Preconditions.checkArgument(n.getType()!=    Token.BLOCK);    	non-compiled	[CE]  	7	None	replace
86	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  &&  n.getFirstChild().getString().equals( "function "));  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  &&  n.getFirstChild().getString().equals( "function "));  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  &&  n.getFirstChild().getString().equals( "function "));	  Preconditions.checkArgument(n.getType()!=    Token.BLOCK);    	non-compiled	[CE]  	7	None	replace
87	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  &&  n.getFirstChild().getType()  ==  Token.EXPR_RESULT);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  &&  n.getFirstChild().getType()  ==  Token.EXPR_RESULT);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  &&  n.getFirstChild().getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkArgument(n.getType()!=    Token.BLOCK);    	non-compiled	[CE]  	7	None	replace
88	[BUG]  [BUGGY]  Preconditions.checkState(isFoldExpressBlock(n)||  n.getFirstChild().getType()  ==  Token.EXPR_RESULT);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(isFoldExpressBlock(n)||  n.getFirstChild().getType()  ==  Token.EXPR_RESULT);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isFoldExpressBlock(n)||  n.getFirstChild().getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(isFoldExpressBlock(n),    n.getFirstChild());    	non-compiled	[CE]  	68	None	replace
89	[BUG]  [BUGGY]  Preconditions.checkState(isFoldExpressBlock(n),  n.getType()  ==  Token.EXPRESSION);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(isFoldExpressBlock(n),  n.getType()  ==  Token.EXPRESSION);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isFoldExpressBlock(n),  n.getType()  ==  Token.EXPRESSION);	  Preconditions.checkState(isFoldExpressBlock(n),    n.getFirstChild());    	non-compiled	[CE]  	68	None	replace
90	[BUG]  [BUGGY]  Preconditions.checkState(isFoldExpressBlock(n),  n.getType()  ==  Token.CALL);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(isFoldExpressBlock(n),  n.getType()  ==  Token.CALL);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isFoldExpressBlock(n),  n.getType()  ==  Token.CALL);	  Preconditions.checkState(isFoldExpressBlock(n),    n.getFirstChild());    	non-compiled	[CE]  	68	None	replace
91	[BUG]  [BUGGY]  Preconditions.checkState(isFoldExpressBlock(n),  n.getType()  ==  Token.GETPROP);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(isFoldExpressBlock(n),  n.getType()  ==  Token.GETPROP);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isFoldExpressBlock(n),  n.getType()  ==  Token.GETPROP);	  Preconditions.checkState(isFoldExpressBlock(n),    n.getFirstChild());    	non-compiled	[CE]  	68	None	replace
92	[BUG]  [BUGGY]  Preconditions.checkState(isFoldExpressBlock(n),  n.getType()  ==  Token.VAR);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(isFoldExpressBlock(n),  n.getType()  ==  Token.VAR);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isFoldExpressBlock(n),  n.getType()  ==  Token.VAR);	  Preconditions.checkState(isFoldExpressBlock(n),    n.getFirstChild());    	non-compiled	[CE]  	68	None	replace
93	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK,  n.getLastChild());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK,  n.getLastChild());  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.BLOCK,  n.getLastChild());	  Preconditions.checkArgument(n.getType()    ==    Token.BLOCK,    n.getFirstChild());    	non-compiled	[CE]  	11	None	replace
94	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK,  n.getChildCount());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK,  n.getChildCount());  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.BLOCK,  n.getChildCount());	  Preconditions.checkArgument(n.getType()    ==    Token.BLOCK,    n.getFirstChild());    	non-compiled	[CE]  	11	None	replace
95	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK,  n.getString());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK,  n.getString());  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.BLOCK,  n.getString());	  Preconditions.checkArgument(n.getType()    ==    Token.BLOCK,    n.getFirstChild());    	non-compiled	[CE]  	11	None	replace
96	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK,  n.getNext());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK,  n.getNext());  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.BLOCK,  n.getNext());	  Preconditions.checkArgument(n.getType()    ==    Token.BLOCK,    n.getFirstChild());    	non-compiled	[CE]  	11	None	replace
97	[BUG]  [BUGGY]  Preconditions.checkState(isFoldExpressBlock(n)||  n.getType()!=  Token.GETPROP);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(isFoldExpressBlock(n)||  n.getType()!=  Token.GETPROP);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isFoldExpressBlock(n)||  n.getType()!=  Token.GETPROP);	  Preconditions.checkState(isFoldExpressBlock(n)||    n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  	53	None	replace
98	[BUG]  [BUGGY]  Preconditions.checkState(isFoldExpressBlock(n)||  n.getType()  ==  Token.GETELEM);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(isFoldExpressBlock(n)||  n.getType()  ==  Token.GETELEM);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isFoldExpressBlock(n)||  n.getType()  ==  Token.GETELEM);	  Preconditions.checkState(isFoldExpressBlock(n)||    n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  	53	None	replace
99	[BUG]  [BUGGY]  Preconditions.checkState(isFoldExpressBlock(n)&&  n.getType()  ==  Token.GETPROP);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(isFoldExpressBlock(n)&&  n.getType()  ==  Token.GETPROP);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isFoldExpressBlock(n)&&  n.getType()  ==  Token.GETPROP);	  Preconditions.checkState(isFoldExpressBlock(n)||    n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  	53	None	replace
100	[BUG]  [BUGGY]  Preconditions.checkState(isFoldExpressBlock(n)||  n.getType()  ==  Token.GETPROP;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(isFoldExpressBlock(n)||  n.getType()  ==  Token.GETPROP;  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isFoldExpressBlock(n)||  n.getType()  ==  Token.GETPROP;	  Preconditions.checkState(isFoldExpressBlock(n)||    n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  	53	None	replace
101	[BUG]  [BUGGY]  Node  n  =  n.getNext();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Node  n  =  n.getNext();  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Node  n  =  n.getNext();	  Node    n    =    n.getFirstChild();    	non-compiled	[CE]  	41	None	replace
102	[BUG]  [BUGGY]  Node  n  =  n.getParent();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Node  n  =  n.getParent();  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Node  n  =  n.getParent();	  Node    n    =    n.getFirstChild();    	non-compiled	[CE]  	41	None	replace
103	[BUG]  [BUGGY]  Node  n  =  n.getPreviousChild();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Node  n  =  n.getPreviousChild();  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Node  n  =  n.getPreviousChild();	  Node    n    =    n.getFirstChild();    	non-compiled	[CE]  	41	None	replace
104	[BUG]  [BUGGY]  Node  n  =  n.getAncestor(1);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Node  n  =  n.getAncestor(1);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Node  n  =  n.getAncestor(1);	  Node    n    =    n.getFirstChild();    	non-compiled	[CE]  	41	None	replace
105	[BUG]  [BUGGY]  Node  n  =  n.getType();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Node  n  =  n.getType();  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Node  n  =  n.getType();	  Node    n    =    n.getFirstChild();    	non-compiled	[CE]  	41	None	replace
106	[BUG]  [BUGGY]  Preconditions.checkState(isFoldExpressBlock(n)||  n.getType()!=  Token.EXPRESSION);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(isFoldExpressBlock(n)||  n.getType()!=  Token.EXPRESSION);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isFoldExpressBlock(n)||  n.getType()!=  Token.EXPRESSION);	  Preconditions.checkState(isFoldExpressBlock(n)||    n.getType()    ==    Token.EXPRESSION);    	non-compiled	[CE]  	54	None	replace
107	[BUG]  [BUGGY]  Preconditions.checkState(isFoldExpressBlock(n)&&  n.getType()  ==  Token.EXPRESSION);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(isFoldExpressBlock(n)&&  n.getType()  ==  Token.EXPRESSION);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isFoldExpressBlock(n)&&  n.getType()  ==  Token.EXPRESSION);	  Preconditions.checkState(isFoldExpressBlock(n)||    n.getType()    ==    Token.EXPRESSION);    	non-compiled	[CE]  	54	None	replace
108	[BUG]  [BUGGY]  Preconditions.checkState(isBlockExpression(n)||  n.getType()  ==  Token.EXPRESSION);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(isBlockExpression(n)||  n.getType()  ==  Token.EXPRESSION);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isBlockExpression(n)||  n.getType()  ==  Token.EXPRESSION);	  Preconditions.checkState(isFoldExpressBlock(n)||    n.getType()    ==    Token.EXPRESSION);    	non-compiled	[CE]  	54	None	replace
109	[BUG]  [BUGGY]  Preconditions.checkState(isFoldExpressBlock(n)||  n.getType()  ==  Token.EMPTY);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(isFoldExpressBlock(n)||  n.getType()  ==  Token.EMPTY);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isFoldExpressBlock(n)||  n.getType()  ==  Token.EMPTY);	  Preconditions.checkState(isFoldExpressBlock(n)||    n.getType()    ==    Token.EXPRESSION);    	non-compiled	[CE]  	54	None	replace
110	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  &&  n.getType()  ==  Token.SCRIPT);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  &&  n.getType()  ==  Token.SCRIPT);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  &&  n.getType()  ==  Token.SCRIPT);	  Preconditions.checkArgument(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.SCRIPT);    	non-compiled	[CE]  	72	None	replace
111	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  ||  n.getType()!=  Token.SCRIPT);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  ||  n.getType()!=  Token.SCRIPT);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  ||  n.getType()!=  Token.SCRIPT);	  Preconditions.checkArgument(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.SCRIPT);    	non-compiled	[CE]  	72	None	replace
112	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.BLOCK  ||  n.getType()  ==  Token.SCRIPT);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.BLOCK  ||  n.getType()  ==  Token.SCRIPT);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkArgument(n.getType()!=  Token.BLOCK  ||  n.getType()  ==  Token.SCRIPT);	  Preconditions.checkArgument(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.SCRIPT);    	non-compiled	[CE]  	72	None	replace
113	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  ||  n.getFirstChild().getType()  ==  Token.SCRIPT);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  ||  n.getFirstChild().getType()  ==  Token.SCRIPT);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  ||  n.getFirstChild().getType()  ==  Token.SCRIPT);	  Preconditions.checkArgument(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.SCRIPT);    	non-compiled	[CE]  	72	None	replace
114	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.SCRIPT  ||  n.getType()  ==  Token.BLOCK);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.SCRIPT  ||  n.getType()  ==  Token.BLOCK);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.SCRIPT  ||  n.getType()  ==  Token.BLOCK);	  Preconditions.checkArgument(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.SCRIPT);    	non-compiled	[CE]  	72	None	replace
115	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.VAR);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.VAR);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()!=  Token.VAR);	  Preconditions.checkState(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  	24	None	replace
116	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  	24	None	replace
117	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR,  n.getFirstChild());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR,  n.getFirstChild());  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.VAR,  n.getFirstChild());	  Preconditions.checkState(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  	24	None	replace
118	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.BLOCK);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.BLOCK);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.BLOCK);	  Preconditions.checkState(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  	24	None	replace
119	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  &&  n.getChildCount()  ==  2);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  &&  n.getChildCount()  ==  2);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  &&  n.getChildCount()  ==  2);	  Preconditions.checkArgument(n.getType()    ==    Token.BLOCK    ||    n.getChildCount()    ==    2);    	non-compiled	[CE]  	57	None	replace
120	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  ||  n.getChildCount()  ==  1);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  ||  n.getChildCount()  ==  1);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  ||  n.getChildCount()  ==  1);	  Preconditions.checkArgument(n.getType()    ==    Token.BLOCK    ||    n.getChildCount()    ==    2);    	non-compiled	[CE]  	57	None	replace
121	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  ||  n.getChildCount()  ==  3);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  ||  n.getChildCount()  ==  3);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  ||  n.getChildCount()  ==  3);	  Preconditions.checkArgument(n.getType()    ==    Token.BLOCK    ||    n.getChildCount()    ==    2);    	non-compiled	[CE]  	57	None	replace
122	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK  ||  n.getChildCount()  ==  2);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK  ||  n.getChildCount()  ==  2);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.BLOCK  ||  n.getChildCount()  ==  2);	  Preconditions.checkArgument(n.getType()    ==    Token.BLOCK    ||    n.getChildCount()    ==    2);    	non-compiled	[CE]  	57	None	replace
123	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  ||  n.getChildCount()  ==  4);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  ||  n.getChildCount()  ==  4);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  ||  n.getChildCount()  ==  4);	  Preconditions.checkArgument(n.getType()    ==    Token.BLOCK    ||    n.getChildCount()    ==    2);    	non-compiled	[CE]  	57	None	replace
124	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  ||  n.getFirstChild()  ==  2);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  ||  n.getFirstChild()  ==  2);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  ||  n.getFirstChild()  ==  2);	  Preconditions.checkArgument(n.getType()    ==    Token.BLOCK    ||    n.getChildCount()    ==    2);    	non-compiled	[CE]  	57	None	replace
125	[BUG]  [BUGGY]  Node  n  =  getBlockExpression(n.getJSDocInfo());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Node  n  =  getBlockExpression(n.getJSDocInfo());  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Node  n  =  getBlockExpression(n.getJSDocInfo());	  Node    n    =    getBlockExpression(n);    	non-compiled	[CE]  	44	None	replace
126	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  &&  n.getType()  ==  Token.FUNCTION);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  &&  n.getType()  ==  Token.FUNCTION);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  &&  n.getType()  ==  Token.FUNCTION);	  Preconditions.checkArgument(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	10	None	replace
127	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  ||  n.getType()!=  Token.FUNCTION);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  ||  n.getType()!=  Token.FUNCTION);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  ||  n.getType()!=  Token.FUNCTION);	  Preconditions.checkArgument(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	10	None	replace
128	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.BLOCK  ||  n.getType()  ==  Token.FUNCTION);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.BLOCK  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkArgument(n.getType()!=  Token.BLOCK  ||  n.getType()  ==  Token.FUNCTION);	  Preconditions.checkArgument(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	10	None	replace
129	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  ||  n.getFirstChild().getType()  ==  Token.FUNCTION);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  ||  n.getFirstChild().getType()  ==  Token.FUNCTION);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  ||  n.getFirstChild().getType()  ==  Token.FUNCTION);	  Preconditions.checkArgument(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	10	None	replace
130	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.BLOCK);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.BLOCK);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.BLOCK);	  Preconditions.checkArgument(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	10	None	replace
131	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  n.getLastChild());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  n.getLastChild());  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  n.getLastChild());	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT,    n.getFirstChild());    	non-compiled	[CE]  	2	None	replace
132	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  n.getChildCount());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  n.getChildCount());  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  n.getChildCount());	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT,    n.getFirstChild());    	non-compiled	[CE]  	2	None	replace
133	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  n.getLineno());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  n.getLineno());  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  n.getLineno());	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT,    n.getFirstChild());    	non-compiled	[CE]  	2	None	replace
134	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  n.getNext());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  n.getNext());  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  n.getNext());	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT,    n.getFirstChild());    	non-compiled	[CE]  	2	None	replace
135	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  n.getType());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  n.getType());  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  n.getType());	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT,    n.getFirstChild());    	non-compiled	[CE]  	2	None	replace
136	[BUG]  [BUGGY]  Preconditions.checkState(!isFunctionExpressionBlock(n));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(!isFunctionExpressionBlock(n));  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(!isFunctionExpressionBlock(n));	  Preconditions.checkState(!isFoldableExpressionBlock(n));    	non-compiled	[CE]  	14	None	replace
137	[BUG]  [BUGGY]  Preconditions.checkState(!isFinallyEmpty(n));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(!isFinallyEmpty(n));  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(!isFinallyEmpty(n));	  Preconditions.checkState(!isFoldableExpressionBlock(n));    	non-compiled	[CE]  	14	None	replace
138	[BUG]  [BUGGY]  Preconditions.checkState(!isFunctionExpression(n));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(!isFunctionExpression(n));  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(!isFunctionExpression(n));	  Preconditions.checkState(!isFoldableExpressionBlock(n));    	non-compiled	[CE]  	14	None	replace
139	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  &&  n.hasChildren());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  &&  n.hasChildren());  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  &&  n.hasChildren());	  Preconditions.checkArgument(n.getType()    ==    Token.BLOCK    ||    n.hasChildren());    	non-compiled	[CE]  	56	None	replace
140	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK  ||  n.hasChildren());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK  ||  n.hasChildren());  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.BLOCK  ||  n.hasChildren());	  Preconditions.checkArgument(n.getType()    ==    Token.BLOCK    ||    n.hasChildren());    	non-compiled	[CE]  	56	None	replace
141	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.BLOCK  ||  n.hasChildren());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.BLOCK  ||  n.hasChildren());  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkArgument(n.getType()!=  Token.BLOCK  ||  n.hasChildren());	  Preconditions.checkArgument(n.getType()    ==    Token.BLOCK    ||    n.hasChildren());    	non-compiled	[CE]  	56	None	replace
142	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  ||  n.isExtern());  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  ||  n.isExtern());  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  ||  n.isExtern());	  Preconditions.checkArgument(n.getType()    ==    Token.BLOCK    ||    n.hasChildren());    	non-compiled	[CE]  	56	None	replace
143	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  ||  n.getFirstChild().hasChildren());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  ||  n.getFirstChild().hasChildren());  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  ||  n.getFirstChild().hasChildren());	  Preconditions.checkArgument(n.getType()    ==    Token.BLOCK    ||    n.hasChildren());    	non-compiled	[CE]  	56	None	replace
144	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.BLOCK  &&  n.hasChildren());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.BLOCK  &&  n.hasChildren());  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkArgument(n.getType()!=  Token.BLOCK  &&  n.hasChildren());	  Preconditions.checkArgument(n.getType()    ==    Token.BLOCK    ||    n.hasChildren());    	non-compiled	[CE]  	56	None	replace
145	[BUG]  [BUGGY]  Preconditions.checkState(isExpressionFolder(n)||  n.getType()!=  Token.EXPR_RESULT);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(isExpressionFolder(n)||  n.getType()!=  Token.EXPR_RESULT);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isExpressionFolder(n)||  n.getType()!=  Token.EXPR_RESULT);	  Preconditions.checkState(isExpressionFolder(n)||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	63	None	replace
146	[BUG]  [BUGGY]  Preconditions.checkState(isExpressionFolder(n)&&  n.getType()  ==  Token.EXPR_RESULT);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(isExpressionFolder(n)&&  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isExpressionFolder(n)&&  n.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(isExpressionFolder(n)||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	63	None	replace
147	[BUG]  [BUGGY]  Preconditions.checkState(isExpressionFolder(n)||  n.getType()  ==  Token.EXPR_RESULT,  STANDARD_OBJECT_CONSTRUCTORS);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(isExpressionFolder(n)||  n.getType()  ==  Token.EXPR_RESULT,  STANDARD_OBJECT_CONSTRUCTORS);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isExpressionFolder(n)||  n.getType()  ==  Token.EXPR_RESULT,  STANDARD_OBJECT_CONSTRUCTORS);	  Preconditions.checkState(isExpressionFolder(n)||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	63	None	replace
148	[BUG]  [BUGGY]  Preconditions.checkState(isExpressionFolder(n)||  n.getFirstChild().getType()  ==  Token.EXPR_RESULT);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(isExpressionFolder(n)||  n.getFirstChild().getType()  ==  Token.EXPR_RESULT);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isExpressionFolder(n)||  n.getFirstChild().getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(isExpressionFolder(n)||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	63	None	replace
149	[BUG]  [BUGGY]  Preconditions.checkState(isExpressionFolder(n)||  n.getType()  ==  Token.EMPTY);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(isExpressionFolder(n)||  n.getType()  ==  Token.EMPTY);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isExpressionFolder(n)||  n.getType()  ==  Token.EMPTY);	  Preconditions.checkState(isExpressionFolder(n)||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	63	None	replace
150	[BUG]  [BUGGY]  Preconditions.checkState(!isBlockExpression(n));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(!isBlockExpression(n));  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(!isBlockExpression(n));	  Preconditions.checkState(!isFoldableExpression(n));    	non-compiled	[CE]  	12	None	replace
151	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK  &&  n.getFirstChild()!=  null);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK  &&  n.getFirstChild()!=  null);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.BLOCK  &&  n.getFirstChild()!=  null);	  Preconditions.checkState(n.getType()    ==    Token.BLOCK    ||    n.getFirstChild()!=    null);    	non-compiled	[CE]  	49	None	replace
152	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.BLOCK  &&  n.getFirstChild()!=  null);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.BLOCK  &&  n.getFirstChild()!=  null);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()!=  Token.BLOCK  &&  n.getFirstChild()!=  null);	  Preconditions.checkState(n.getType()    ==    Token.BLOCK    ||    n.getFirstChild()!=    null);    	non-compiled	[CE]  	49	None	replace
153	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK  ||  n.getLastChild()!=  null);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK  ||  n.getLastChild()!=  null);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.BLOCK  ||  n.getLastChild()!=  null);	  Preconditions.checkState(n.getType()    ==    Token.BLOCK    ||    n.getFirstChild()!=    null);    	non-compiled	[CE]  	49	None	replace
154	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.BLOCK  ||  n.getFirstChild()  ==  null);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.BLOCK  ||  n.getFirstChild()  ==  null);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()!=  Token.BLOCK  ||  n.getFirstChild()  ==  null);	  Preconditions.checkState(n.getType()    ==    Token.BLOCK    ||    n.getFirstChild()!=    null);    	non-compiled	[CE]  	49	None	replace
155	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK  ||  n.getChildCount()!=  0);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK  ||  n.getChildCount()!=  0);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.BLOCK  ||  n.getChildCount()!=  0);	  Preconditions.checkState(n.getType()    ==    Token.BLOCK    ||    n.getFirstChild()!=    null);    	non-compiled	[CE]  	49	None	replace
156	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getFirstChild());  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getFirstChild());  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getFirstChild());	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  	50	None	replace
157	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  STANDARD_OBJECT_CONSTRUCTORS);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  STANDARD_OBJECT_CONSTRUCTORS);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  STANDARD_OBJECT_CONSTRUCTORS);	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  	50	None	replace
158	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.NAME);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()!=  Token.NAME);	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  	50	None	replace
159	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getString());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getString());  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getString());	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  	50	None	replace
160	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getChildCount());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getChildCount());  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME,  n.getChildCount());	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  	50	None	replace
161	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.FUNCTION);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  	50	None	replace
162	[BUG]  [BUGGY]  Preconditions.checkState(!isVarDeclaration(n)||  isVarDeclaration(n));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(!isVarDeclaration(n)||  isVarDeclaration(n));  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(!isVarDeclaration(n)||  isVarDeclaration(n));	  Preconditions.checkState(!isVarDeclaration(n));    	non-compiled	[CE]  	52	None	replace
163	[BUG]  [BUGGY]  Preconditions.checkState(isVarDeclaration(n));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(isVarDeclaration(n));  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isVarDeclaration(n));	  Preconditions.checkState(!isVarDeclaration(n));    	non-compiled	[CE]  	52	None	replace
164	[BUG]  [BUGGY]  Preconditions.checkState(!isFunctionDeclaration(n));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(!isFunctionDeclaration(n));  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(!isFunctionDeclaration(n));	  Preconditions.checkState(!isVarDeclaration(n));    	non-compiled	[CE]  	52	None	replace
165	[BUG]  [BUGGY]  Preconditions.checkState(isVarDeclaration(n)||  isVarDeclaration(n));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(isVarDeclaration(n)||  isVarDeclaration(n));  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isVarDeclaration(n)||  isVarDeclaration(n));	  Preconditions.checkState(!isVarDeclaration(n));    	non-compiled	[CE]  	52	None	replace
166	[BUG]  [BUGGY]  Preconditions.checkState(!isVarDeclaration(n)||  n.getType()  ==  Token.BLOCK);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(!isVarDeclaration(n)||  n.getType()  ==  Token.BLOCK);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(!isVarDeclaration(n)||  n.getType()  ==  Token.BLOCK);	  Preconditions.checkState(!isVarDeclaration(n));    	non-compiled	[CE]  	52	None	replace
167	[BUG]  [BUGGY]  Preconditions.checkState(!isVarDeclaration(n),  n.getType()  ==  Token.BLOCK);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(!isVarDeclaration(n),  n.getType()  ==  Token.BLOCK);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(!isVarDeclaration(n),  n.getType()  ==  Token.BLOCK);	  Preconditions.checkState(!isVarDeclaration(n));    	non-compiled	[CE]  	52	None	replace
168	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.FUNCTION);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.FUNCTION);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()!=  Token.FUNCTION);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	21	None	replace
169	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	21	None	replace
170	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION,  n.getFirstChild());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION,  n.getFirstChild());  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION,  n.getFirstChild());	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	21	None	replace
171	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION,  STANDARD_OBJECT_CONSTRUCTORS);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION,  STANDARD_OBJECT_CONSTRUCTORS);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION,  STANDARD_OBJECT_CONSTRUCTORS);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	21	None	replace
172	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  &&  n.getType()  ==  Token.BLOCK);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  &&  n.getType()  ==  Token.BLOCK);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  &&  n.getType()  ==  Token.BLOCK);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT    ||    n.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  	6	None	replace
173	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getFirstChild().getType()  ==  Token.BLOCK);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getFirstChild().getType()  ==  Token.BLOCK);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getFirstChild().getType()  ==  Token.BLOCK);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT    ||    n.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  	6	None	replace
174	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()!=  Token.BLOCK);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()!=  Token.BLOCK);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()!=  Token.BLOCK);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT    ||    n.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  	6	None	replace
175	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.EXPR_RESULT  ||  n.getType()  ==  Token.BLOCK);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.EXPR_RESULT  ||  n.getType()  ==  Token.BLOCK);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()!=  Token.EXPR_RESULT  ||  n.getType()  ==  Token.BLOCK);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT    ||    n.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  	6	None	replace
176	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getChildCount()  ==  Token.BLOCK);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getChildCount()  ==  Token.BLOCK);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getChildCount()  ==  Token.BLOCK);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT    ||    n.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  	6	None	replace
177	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.EXPR_RESULT  &&  n.getType()  ==  Token.BLOCK);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.EXPR_RESULT  &&  n.getType()  ==  Token.BLOCK);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()!=  Token.EXPR_RESULT  &&  n.getType()  ==  Token.BLOCK);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT    ||    n.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  	6	None	replace
178	[BUG]  [BUGGY]  Preconditions.checkState(!isFallThrough(n)||  isFallThrough(n));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(!isFallThrough(n)||  isFallThrough(n));  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(!isFallThrough(n)||  isFallThrough(n));	  Preconditions.checkState(!isFallThrough(n));    	non-compiled	[CE]  	13	None	replace
179	[BUG]  [BUGGY]  Preconditions.checkState(!isFallThrough(n),  isFallThrough(n));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(!isFallThrough(n),  isFallThrough(n));  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(!isFallThrough(n),  isFallThrough(n));	  Preconditions.checkState(!isFallThrough(n));    	non-compiled	[CE]  	13	None	replace
180	[BUG]  [BUGGY]  Preconditions.checkState(isExpressionBlock(n)||  n.getType()!=  Token.EXPR_RESULT);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(isExpressionBlock(n)||  n.getType()!=  Token.EXPR_RESULT);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isExpressionBlock(n)||  n.getType()!=  Token.EXPR_RESULT);	  Preconditions.checkState(isExpressionBlock(n)||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	76	None	replace
181	[BUG]  [BUGGY]  Preconditions.checkState(isExpressionBlock(n)&&  n.getType()  ==  Token.EXPR_RESULT);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(isExpressionBlock(n)&&  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isExpressionBlock(n)&&  n.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(isExpressionBlock(n)||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	76	None	replace
182	[BUG]  [BUGGY]  Preconditions.checkState(isExpressionBlock(n)||  n.getType()  ==  Token.EXPR_RESULT,  STANDARD_OBJECT_CONSTRUCTORS);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(isExpressionBlock(n)||  n.getType()  ==  Token.EXPR_RESULT,  STANDARD_OBJECT_CONSTRUCTORS);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isExpressionBlock(n)||  n.getType()  ==  Token.EXPR_RESULT,  STANDARD_OBJECT_CONSTRUCTORS);	  Preconditions.checkState(isExpressionBlock(n)||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	76	None	replace
183	[BUG]  [BUGGY]  Preconditions.checkState(isExpressionBlock(n)||  n.getFirstChild().getType()  ==  Token.EXPR_RESULT);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(isExpressionBlock(n)||  n.getFirstChild().getType()  ==  Token.EXPR_RESULT);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isExpressionBlock(n)||  n.getFirstChild().getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(isExpressionBlock(n)||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	76	None	replace
184	[BUG]  [BUGGY]  Preconditions.checkState(isExpressionBlock(n)||  n.getType()  ==  Token.EMPTY);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(isExpressionBlock(n)||  n.getType()  ==  Token.EMPTY);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isExpressionBlock(n)||  n.getType()  ==  Token.EMPTY);	  Preconditions.checkState(isExpressionBlock(n)||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	76	None	replace
185	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EMPTY  ||  n.getType()  ==  Token.BLOCK);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EMPTY  ||  n.getType()  ==  Token.BLOCK);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.EMPTY  ||  n.getType()  ==  Token.BLOCK);	  Preconditions.checkState(n.getType()    ==    Token.EMPTY);    	non-compiled	[CE]  	47	None	replace
186	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EMPTY  ||  n.getType()  ==  Token.EXPR_RESULT);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EMPTY  ||  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.EMPTY  ||  n.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(n.getType()    ==    Token.EMPTY);    	non-compiled	[CE]  	47	None	replace
187	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EMPTY  ||  n.getType()  ==  Token.FUNCTION);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EMPTY  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.EMPTY  ||  n.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n.getType()    ==    Token.EMPTY);    	non-compiled	[CE]  	47	None	replace
188	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EMPTY  ||  n.getType()  ==  Token.NAME);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EMPTY  ||  n.getType()  ==  Token.NAME);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.EMPTY  ||  n.getType()  ==  Token.NAME);	  Preconditions.checkState(n.getType()    ==    Token.EMPTY);    	non-compiled	[CE]  	47	None	replace
189	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  REGEXP_FLAGS);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  REGEXP_FLAGS);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	NodeTraversal.traverse(compiler,  n,  this,  REGEXP_FLAGS);	  NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  	59	None	replace
190	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	NodeTraversal.traverse(compiler,  n,  this,  INVALID_REGULAR_EXPRESSION_FLAGS);	  NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  	59	None	replace
191	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  STANDARD_OBJECT_CONSTRUCTORS);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  STANDARD_OBJECT_CONSTRUCTORS);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	NodeTraversal.traverse(compiler,  n,  this,  STANDARD_OBJECT_CONSTRUCTORS);	  NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  	59	None	replace
192	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	NodeTraversal.traverse(compiler,  n,  INVALID_REGULAR_EXPRESSION_FLAGS);	  NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  	59	None	replace
193	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  DEFAULT_OBJECT_CONSTRUCTORS);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  DEFAULT_OBJECT_CONSTRUCTORS);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	NodeTraversal.traverse(compiler,  n,  this,  DEFAULT_OBJECT_CONSTRUCTORS);	  NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  	59	None	replace
194	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  INVALID_REGULAR_EXPRESSION);  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  INVALID_REGULAR_EXPRESSION);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	NodeTraversal.traverse(compiler,  n,  this,  INVALID_REGULAR_EXPRESSION);	  NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  	59	None	replace
195	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  null);  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  null);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	NodeTraversal.traverse(compiler,  n,  this,  null);	  NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  	59	None	replace
196	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK  &&  n.getType()  ==  Token.GETPROP);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK  &&  n.getType()  ==  Token.GETPROP);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.BLOCK  &&  n.getType()  ==  Token.GETPROP);	  Preconditions.checkState(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  	29	None	replace
197	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP  ||  n.getType()  ==  Token.BLOCK);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.GETPROP  ||  n.getType()  ==  Token.BLOCK);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.GETPROP  ||  n.getType()  ==  Token.BLOCK);	  Preconditions.checkState(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  	29	None	replace
198	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK  ||  n.getType()!=  Token.GETPROP);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK  ||  n.getType()!=  Token.GETPROP);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.BLOCK  ||  n.getType()!=  Token.GETPROP);	  Preconditions.checkState(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  	29	None	replace
199	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.BLOCK  ||  n.getType()  ==  Token.GETPROP);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.BLOCK  ||  n.getType()  ==  Token.GETPROP);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()!=  Token.BLOCK  ||  n.getType()  ==  Token.GETPROP);	  Preconditions.checkState(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  	29	None	replace
200	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK  ||  n.getFirstChild().getType()  ==  Token.GETPROP);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK  ||  n.getFirstChild().getType()  ==  Token.GETPROP);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.BLOCK  ||  n.getFirstChild().getType()  ==  Token.GETPROP);	  Preconditions.checkState(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  	29	None	replace
201	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.BLOCK  &&  n.getType()  ==  Token.GETPROP);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.BLOCK  &&  n.getType()  ==  Token.GETPROP);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()!=  Token.BLOCK  &&  n.getType()  ==  Token.GETPROP);	  Preconditions.checkState(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  	29	None	replace
202	[BUG]  [BUGGY]  Preconditions.checkState(!isExpressionBlock(n)||  n.getType()  ==  Token.EXPR_RESULT);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(!isExpressionBlock(n)||  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(!isExpressionBlock(n)||  n.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(!isExpressionBlock(n));    	non-compiled	[CE]  	78	None	replace
203	[BUG]  [BUGGY]  Preconditions.checkState(!isExpressionDeclaration(n));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(!isExpressionDeclaration(n));  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(!isExpressionDeclaration(n));	  Preconditions.checkState(!isExpressionBlock(n));    	non-compiled	[CE]  	78	None	replace
204	[BUG]  [BUGGY]  Preconditions.checkState(!isExpressionBlock(n)||  n.getType()  ==  Token.VAR);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(!isExpressionBlock(n)||  n.getType()  ==  Token.VAR);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(!isExpressionBlock(n)||  n.getType()  ==  Token.VAR);	  Preconditions.checkState(!isExpressionBlock(n));    	non-compiled	[CE]  	78	None	replace
205	[BUG]  [BUGGY]  Preconditions.checkState(!isExpressionFallThrough(n));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(!isExpressionFallThrough(n));  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(!isExpressionFallThrough(n));	  Preconditions.checkState(!isExpressionBlock(n));    	non-compiled	[CE]  	78	None	replace
206	[BUG]  [BUGGY]  Preconditions.checkState(!isExpressionBlock(n)||  n.getType()  ==  Token.GETPROP);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(!isExpressionBlock(n)||  n.getType()  ==  Token.GETPROP);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(!isExpressionBlock(n)||  n.getType()  ==  Token.GETPROP);	  Preconditions.checkState(!isExpressionBlock(n));    	non-compiled	[CE]  	78	None	replace
207	[BUG]  [BUGGY]  Preconditions.checkState(!isFoldExpressBlock(n)||  n.getType()  ==  Token.EXPR_RESULT);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(!isFoldExpressBlock(n)||  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(!isFoldExpressBlock(n)||  n.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(!isFoldExpressBlock(n));    	non-compiled	[CE]  	38	None	replace
208	[BUG]  [BUGGY]  Preconditions.checkState(!isFoldExpressBlock(n)||  n.getType()  ==  Token.VAR);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(!isFoldExpressBlock(n)||  n.getType()  ==  Token.VAR);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(!isFoldExpressBlock(n)||  n.getType()  ==  Token.VAR);	  Preconditions.checkState(!isFoldExpressBlock(n));    	non-compiled	[CE]  	38	None	replace
209	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.CATCH);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.CATCH);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()!=  Token.CATCH);	  Preconditions.checkState(n.getType()    ==    Token.CATCH);    	non-compiled	[CE]  	67	None	replace
210	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CATCH  ||  n.getType()  ==  Token.EXPR_RESULT);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CATCH  ||  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.CATCH  ||  n.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(n.getType()    ==    Token.CATCH);    	non-compiled	[CE]  	67	None	replace
211	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CATCH  ||  n.getType()  ==  Token.GETPROP);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CATCH  ||  n.getType()  ==  Token.GETPROP);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.CATCH  ||  n.getType()  ==  Token.GETPROP);	  Preconditions.checkState(n.getType()    ==    Token.CATCH);    	non-compiled	[CE]  	67	None	replace
212	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CATCH  ||  n.getType()  ==  Token.FUNCTION);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CATCH  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.CATCH  ||  n.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n.getType()    ==    Token.CATCH);    	non-compiled	[CE]  	67	None	replace
213	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CATCH  ||  n.getType()  ==  Token.NAME);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CATCH  ||  n.getType()  ==  Token.NAME);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.CATCH  ||  n.getType()  ==  Token.NAME);	  Preconditions.checkState(n.getType()    ==    Token.CATCH);    	non-compiled	[CE]  	67	None	replace
214	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  &&  n.getType()  ==  Token.CATCH);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  &&  n.getType()  ==  Token.CATCH);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  &&  n.getType()  ==  Token.CATCH);	  Preconditions.checkArgument(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.CATCH);    	non-compiled	[CE]  	74	None	replace
215	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  ||  n.getType()!=  Token.CATCH);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  ||  n.getType()!=  Token.CATCH);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  ||  n.getType()!=  Token.CATCH);	  Preconditions.checkArgument(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.CATCH);    	non-compiled	[CE]  	74	None	replace
216	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.CATCH  ||  n.getType()  ==  Token.BLOCK);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.CATCH  ||  n.getType()  ==  Token.BLOCK);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.CATCH  ||  n.getType()  ==  Token.BLOCK);	  Preconditions.checkArgument(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.CATCH);    	non-compiled	[CE]  	74	None	replace
217	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  ||  n.getFirstChild().getType()  ==  Token.CATCH);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  ||  n.getFirstChild().getType()  ==  Token.CATCH);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  ||  n.getFirstChild().getType()  ==  Token.CATCH);	  Preconditions.checkArgument(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.CATCH);    	non-compiled	[CE]  	74	None	replace
218	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.BLOCK  ||  n.getType()  ==  Token.CATCH);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.BLOCK  ||  n.getType()  ==  Token.CATCH);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkArgument(n.getType()!=  Token.BLOCK  ||  n.getType()  ==  Token.CATCH);	  Preconditions.checkArgument(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.CATCH);    	non-compiled	[CE]  	74	None	replace
219	[BUG]  [BUGGY]  Preconditions.checkState(isFoldExpressBlock(n)||  n.getType()!=  Token.EXPR_RESULT);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(isFoldExpressBlock(n)||  n.getType()!=  Token.EXPR_RESULT);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isFoldExpressBlock(n)||  n.getType()!=  Token.EXPR_RESULT);	  Preconditions.checkState(isFoldExpressBlock(n)||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	39	None	replace
220	[BUG]  [BUGGY]  Preconditions.checkState(isFoldExpressBlock(n)&&  n.getType()  ==  Token.EXPR_RESULT);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(isFoldExpressBlock(n)&&  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isFoldExpressBlock(n)&&  n.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(isFoldExpressBlock(n)||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	39	None	replace
221	[BUG]  [BUGGY]  Preconditions.checkState(isExpressBlock(n)||  n.getType()!=  Token.VAR);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(isExpressBlock(n)||  n.getType()!=  Token.VAR);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isExpressBlock(n)||  n.getType()!=  Token.VAR);	  Preconditions.checkState(isExpressBlock(n)||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  	66	None	replace
222	[BUG]  [BUGGY]  Preconditions.checkState(isExpressionBlock(n)||  n.getType()  ==  Token.VAR);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(isExpressionBlock(n)||  n.getType()  ==  Token.VAR);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isExpressionBlock(n)||  n.getType()  ==  Token.VAR);	  Preconditions.checkState(isExpressBlock(n)||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  	66	None	replace
223	[BUG]  [BUGGY]  Preconditions.checkState(isExpressBlock(n)&&  n.getType()  ==  Token.VAR);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(isExpressBlock(n)&&  n.getType()  ==  Token.VAR);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isExpressBlock(n)&&  n.getType()  ==  Token.VAR);	  Preconditions.checkState(isExpressBlock(n)||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  	66	None	replace
224	[BUG]  [BUGGY]  Preconditions.checkState(!isExpressBlock(n)||  n.getType()  ==  Token.VAR);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(!isExpressBlock(n)||  n.getType()  ==  Token.VAR);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(!isExpressBlock(n)||  n.getType()  ==  Token.VAR);	  Preconditions.checkState(isExpressBlock(n)||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  	66	None	replace
225	[BUG]  [BUGGY]  Preconditions.checkState(isExpressBlock(n)||  n.getType()  ==  Token.FUNCTION);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(isExpressBlock(n)||  n.getType()  ==  Token.FUNCTION);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isExpressBlock(n)||  n.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(isExpressBlock(n)||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  	66	None	replace
226	[BUG]  [BUGGY]  Preconditions.checkState(isExpressBlock(n)||  n.getType()  ==  Token.VAR  ||  n.getFirstChild().getType()  ==  Token.FUNCTION);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(isExpressBlock(n)||  n.getType()  ==  Token.VAR  ||  n.getFirstChild().getType()  ==  Token.FUNCTION);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isExpressBlock(n)||  n.getType()  ==  Token.VAR  ||  n.getFirstChild().getType()  ==  Token.FUNCTION);	  Preconditions.checkState(isExpressBlock(n)||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  	66	None	replace
227	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  &&  n.getType()  ==  Token.FUNCTION);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  &&  n.getType()  ==  Token.FUNCTION);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  &&  n.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT    ||    n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	3	None	replace
228	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getFirstChild().getType()  ==  Token.FUNCTION);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getFirstChild().getType()  ==  Token.FUNCTION);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getFirstChild().getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT    ||    n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	3	None	replace
229	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()!=  Token.FUNCTION);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()!=  Token.FUNCTION);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()!=  Token.FUNCTION);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT    ||    n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	3	None	replace
230	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.EXPR_RESULT  ||  n.getType()  ==  Token.FUNCTION);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.EXPR_RESULT  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()!=  Token.EXPR_RESULT  ||  n.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT    ||    n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	3	None	replace
231	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getChildCount()  ==  Token.FUNCTION);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getChildCount()  ==  Token.FUNCTION);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getChildCount()  ==  Token.FUNCTION);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT    ||    n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	3	None	replace
232	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.EXPR_RESULT  &&  n.getType()  ==  Token.FUNCTION);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.EXPR_RESULT  &&  n.getType()  ==  Token.FUNCTION);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()!=  Token.EXPR_RESULT  &&  n.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT    ||    n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	3	None	replace
233	[BUG]  [BUGGY]  Preconditions.checkState(isFoldableExpressBlock(n)&&  n.getType()!=  Token.EXPR_RESULT);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(isFoldableExpressBlock(n)&&  n.getType()!=  Token.EXPR_RESULT);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isFoldableExpressBlock(n)&&  n.getType()!=  Token.EXPR_RESULT);	  Preconditions.checkState(isFoldableExpressBlock(n)||    n.getType()!=    Token.EXPR_RESULT);    	non-compiled	[CE]  	34	None	replace
234	[BUG]  [BUGGY]  Preconditions.checkState(isFoldableExpression(n)||  n.getType()!=  Token.EXPR_RESULT);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(isFoldableExpression(n)||  n.getType()!=  Token.EXPR_RESULT);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isFoldableExpression(n)||  n.getType()!=  Token.EXPR_RESULT);	  Preconditions.checkState(isFoldableExpressBlock(n)||    n.getType()!=    Token.EXPR_RESULT);    	non-compiled	[CE]  	34	None	replace
235	[BUG]  [BUGGY]  Preconditions.checkState(isBlockExpression(n)||  n.getType()!=  Token.EXPR_RESULT);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(isBlockExpression(n)||  n.getType()!=  Token.EXPR_RESULT);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isBlockExpression(n)||  n.getType()!=  Token.EXPR_RESULT);	  Preconditions.checkState(isFoldableExpressBlock(n)||    n.getType()!=    Token.EXPR_RESULT);    	non-compiled	[CE]  	34	None	replace
236	[BUG]  [BUGGY]  Preconditions.checkState(isExpressBlock(n),  n.getType()  ==  Token.EXPRESSION);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(isExpressBlock(n),  n.getType()  ==  Token.EXPRESSION);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isExpressBlock(n),  n.getType()  ==  Token.EXPRESSION);	  Preconditions.checkState(isExpressBlock(n),    n.getFirstChild());    	non-compiled	[CE]  	80	None	replace
237	[BUG]  [BUGGY]  Preconditions.checkState(isExpressBlock(n),  n.getType()  ==  Token.EXPR_RESULT);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(isExpressBlock(n),  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isExpressBlock(n),  n.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(isExpressBlock(n),    n.getFirstChild());    	non-compiled	[CE]  	80	None	replace
238	[BUG]  [BUGGY]  Preconditions.checkState(isExpressBlock(n)||  n.getFirstChild().getType()  ==  Token.EXPR_RESULT);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(isExpressBlock(n)||  n.getFirstChild().getType()  ==  Token.EXPR_RESULT);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isExpressBlock(n)||  n.getFirstChild().getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(isExpressBlock(n),    n.getFirstChild());    	non-compiled	[CE]  	80	None	replace
239	[BUG]  [BUGGY]  Preconditions.checkState(isExpressBlock(n)||  n.getFirstChild().getType()  ==  Token.EXPRESSION);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(isExpressBlock(n)||  n.getFirstChild().getType()  ==  Token.EXPRESSION);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isExpressBlock(n)||  n.getFirstChild().getType()  ==  Token.EXPRESSION);	  Preconditions.checkState(isExpressBlock(n),    n.getFirstChild());    	non-compiled	[CE]  	80	None	replace
240	[BUG]  [BUGGY]  Preconditions.checkState(isExpressBlock(n),  n.getType()  ==  Token.GETPROP);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(isExpressBlock(n),  n.getType()  ==  Token.GETPROP);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isExpressBlock(n),  n.getType()  ==  Token.GETPROP);	  Preconditions.checkState(isExpressBlock(n),    n.getFirstChild());    	non-compiled	[CE]  	80	None	replace
241	[BUG]  [BUGGY]  Preconditions.checkState(isExpressBlock(n),  n.getType()  ==  Token.CALL);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(isExpressBlock(n),  n.getType()  ==  Token.CALL);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isExpressBlock(n),  n.getType()  ==  Token.CALL);	  Preconditions.checkState(isExpressBlock(n),    n.getFirstChild());    	non-compiled	[CE]  	80	None	replace
242	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK  &&  n.getType()  ==  Token.FUNCTION);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK  &&  n.getType()  ==  Token.FUNCTION);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.BLOCK  &&  n.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	31	None	replace
243	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK  ||  n.getType()!=  Token.FUNCTION);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK  ||  n.getType()!=  Token.FUNCTION);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.BLOCK  ||  n.getType()!=  Token.FUNCTION);	  Preconditions.checkState(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	31	None	replace
244	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.BLOCK  ||  n.getType()  ==  Token.FUNCTION);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.BLOCK  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()!=  Token.BLOCK  ||  n.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	31	None	replace
245	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.BLOCK);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.BLOCK);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION  ||  n.getType()  ==  Token.BLOCK);	  Preconditions.checkState(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	31	None	replace
246	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.BLOCK  &&  n.getType()  ==  Token.FUNCTION);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.BLOCK  &&  n.getType()  ==  Token.FUNCTION);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()!=  Token.BLOCK  &&  n.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	31	None	replace
247	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK  ||  n.getFirstChild()  ==  Token.FUNCTION);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK  ||  n.getFirstChild()  ==  Token.FUNCTION);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.BLOCK  ||  n.getFirstChild()  ==  Token.FUNCTION);	  Preconditions.checkState(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	31	None	replace
248	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.EXPRESSION);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.EXPRESSION);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()!=  Token.EXPRESSION);	  Preconditions.checkState(n.getType()    ==    Token.EXPRESSION);    	non-compiled	[CE]  	26	None	replace
249	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPRESSION  ||  n.getType()  ==  Token.BLOCK);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPRESSION  ||  n.getType()  ==  Token.BLOCK);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPRESSION  ||  n.getType()  ==  Token.BLOCK);	  Preconditions.checkState(n.getType()    ==    Token.EXPRESSION);    	non-compiled	[CE]  	26	None	replace
250	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPRESSION,  n.getFirstChild());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPRESSION,  n.getFirstChild());  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPRESSION,  n.getFirstChild());	  Preconditions.checkState(n.getType()    ==    Token.EXPRESSION);    	non-compiled	[CE]  	26	None	replace
251	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPRESSION  ||  n.getType()  ==  Token.FUNCTION);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPRESSION  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPRESSION  ||  n.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n.getType()    ==    Token.EXPRESSION);    	non-compiled	[CE]  	26	None	replace
252	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPRESSION,  STANDARD_OBJECT_CONSTRUCTORS);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPRESSION,  STANDARD_OBJECT_CONSTRUCTORS);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPRESSION,  STANDARD_OBJECT_CONSTRUCTORS);	  Preconditions.checkState(n.getType()    ==    Token.EXPRESSION);    	non-compiled	[CE]  	26	None	replace
253	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  STANDARD_OBJECT_CONSTRUCTORS,  ImmutableSet);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  STANDARD_OBJECT_CONSTRUCTORS,  ImmutableSet);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  STANDARD_OBJECT_CONSTRUCTORS,  ImmutableSet);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT,    STANDARD_OBJECT_CONSTRUCTORS);    	non-compiled	[CE]  	5	None	replace
254	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  STANDARD_OBJECT_CONSTRUCTORS,  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  STANDARD_OBJECT_CONSTRUCTORS,  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  STANDARD_OBJECT_CONSTRUCTORS,  INVALID_REGULAR_EXPRESSION_FLAGS);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT,    STANDARD_OBJECT_CONSTRUCTORS);    	non-compiled	[CE]  	5	None	replace
255	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  STANDARD_OBJECT_CONSTRUCTORS,  n.getFirstChild());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  STANDARD_OBJECT_CONSTRUCTORS,  n.getFirstChild());  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  STANDARD_OBJECT_CONSTRUCTORS,  n.getFirstChild());	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT,    STANDARD_OBJECT_CONSTRUCTORS);    	non-compiled	[CE]  	5	None	replace
256	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  STANDARD_OBJECT_CONSTRUCTORS,  immutableSet);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  STANDARD_OBJECT_CONSTRUCTORS,  immutableSet);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  STANDARD_OBJECT_CONSTRUCTORS,  immutableSet);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT,    STANDARD_OBJECT_CONSTRUCTORS);    	non-compiled	[CE]  	5	None	replace
257	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.EXPR_RESULT,  STANDARD_OBJECT_CONSTRUCTORS);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.EXPR_RESULT,  STANDARD_OBJECT_CONSTRUCTORS);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.EXPR_RESULT,  STANDARD_OBJECT_CONSTRUCTORS);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT,    STANDARD_OBJECT_CONSTRUCTORS);    	non-compiled	[CE]  	5	None	replace
258	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  STANDARD_OBJECT_CONSTRUCTORS,  REGEXP_FLAGS_RE);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  STANDARD_OBJECT_CONSTRUCTORS,  REGEXP_FLAGS_RE);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  STANDARD_OBJECT_CONSTRUCTORS,  REGEXP_FLAGS_RE);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT,    STANDARD_OBJECT_CONSTRUCTORS);    	non-compiled	[CE]  	5	None	replace
259	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  &&  n.getType()  ==  Token.VAR);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  &&  n.getType()  ==  Token.VAR);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  &&  n.getType()  ==  Token.VAR);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT    ||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  	71	None	replace
260	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()!=  Token.VAR);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()!=  Token.VAR);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()!=  Token.VAR);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT    ||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  	71	None	replace
261	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getFirstChild().getType()  ==  Token.VAR);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getFirstChild().getType()  ==  Token.VAR);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getFirstChild().getType()  ==  Token.VAR);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT    ||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  	71	None	replace
262	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.EXPR_RESULT  ||  n.getType()  ==  Token.VAR);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.EXPR_RESULT  ||  n.getType()  ==  Token.VAR);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()!=  Token.EXPR_RESULT  ||  n.getType()  ==  Token.VAR);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT    ||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  	71	None	replace
263	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.EXPR_RESULT  &&  n.getType()  ==  Token.VAR);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.EXPR_RESULT  &&  n.getType()  ==  Token.VAR);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()!=  Token.EXPR_RESULT  &&  n.getType()  ==  Token.VAR);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT    ||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  	71	None	replace
264	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getChildCount()  ==  Token.VAR);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getChildCount()  ==  Token.VAR);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getChildCount()  ==  Token.VAR);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT    ||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  	71	None	replace
265	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK,  n.getLastChild());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK,  n.getLastChild());  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.BLOCK,  n.getLastChild());	  Preconditions.checkState(n.getType()    ==    Token.BLOCK,    n.getFirstChild());    	non-compiled	[CE]  	32	None	replace
266	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK,  n.getChildCount());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK,  n.getChildCount());  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.BLOCK,  n.getChildCount());	  Preconditions.checkState(n.getType()    ==    Token.BLOCK,    n.getFirstChild());    	non-compiled	[CE]  	32	None	replace
267	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK,  n.getString());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK,  n.getString());  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.BLOCK,  n.getString());	  Preconditions.checkState(n.getType()    ==    Token.BLOCK,    n.getFirstChild());    	non-compiled	[CE]  	32	None	replace
268	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK,  n.getLineno());  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK,  n.getLineno());  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.BLOCK,  n.getLineno());	  Preconditions.checkState(n.getType()    ==    Token.BLOCK,    n.getFirstChild());    	non-compiled	[CE]  	32	None	replace
269	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK  &&  n.getType()  ==  Token.EXPR_RESULT);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK  &&  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.BLOCK  &&  n.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	28	None	replace
270	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK  ||  n.getType()!=  Token.EXPR_RESULT);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK  ||  n.getType()!=  Token.EXPR_RESULT);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.BLOCK  ||  n.getType()!=  Token.EXPR_RESULT);	  Preconditions.checkState(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	28	None	replace
271	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.BLOCK  ||  n.getType()  ==  Token.EXPR_RESULT);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.BLOCK  ||  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()!=  Token.BLOCK  ||  n.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	28	None	replace
272	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.BLOCK  &&  n.getType()  ==  Token.EXPR_RESULT);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.BLOCK  &&  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()!=  Token.BLOCK  &&  n.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	28	None	replace
273	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK  ||  n.getFirstChild()  ==  Token.EXPR_RESULT);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK  ||  n.getFirstChild()  ==  Token.EXPR_RESULT);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.BLOCK  ||  n.getFirstChild()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	28	None	replace
274	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CALL  ||  n.getType()  ==  Token.EXPR_RESULT);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CALL  ||  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.CALL  ||  n.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	28	None	replace
275	[BUG]  [BUGGY]  Preconditions.checkState(isExpressionTree(n));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(isExpressionTree(n));  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isExpressionTree(n));	  Preconditions.checkState(!isExpressionTree(n));    	non-compiled	[CE]  	79	None	replace
276	[BUG]  [BUGGY]  Preconditions.checkState(!isExpressionTree(n)||  isExpressionTree(n));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(!isExpressionTree(n)||  isExpressionTree(n));  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(!isExpressionTree(n)||  isExpressionTree(n));	  Preconditions.checkState(!isExpressionTree(n));    	non-compiled	[CE]  	79	None	replace
277	[BUG]  [BUGGY]  Preconditions.checkState(!isExpressionTree(n)||  n.getType()  ==  Token.EXPR_RESULT);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(!isExpressionTree(n)||  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(!isExpressionTree(n)||  n.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(!isExpressionTree(n));    	non-compiled	[CE]  	79	None	replace
278	[BUG]  [BUGGY]  Preconditions.checkState(isExpressionTree(n)||  isExpressionTree(n));  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(isExpressionTree(n)||  isExpressionTree(n));  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isExpressionTree(n)||  isExpressionTree(n));	  Preconditions.checkState(!isExpressionTree(n));    	non-compiled	[CE]  	79	None	replace
279	[BUG]  [BUGGY]  Preconditions.checkState(!isExpressionTree(n)||  n.getType()  ==  Token.BLOCK);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(!isExpressionTree(n)||  n.getType()  ==  Token.BLOCK);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(!isExpressionTree(n)||  n.getType()  ==  Token.BLOCK);	  Preconditions.checkState(!isExpressionTree(n));    	non-compiled	[CE]  	79	None	replace
280	[BUG]  [BUGGY]  Preconditions.checkState(!isExpressionTree(n)||  n.getType()  ==  Token.VAR);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(!isExpressionTree(n)||  n.getType()  ==  Token.VAR);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(!isExpressionTree(n)||  n.getType()  ==  Token.VAR);	  Preconditions.checkState(!isExpressionTree(n));    	non-compiled	[CE]  	79	None	replace
281	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.CALL);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.CALL);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()!=  Token.CALL);	  Preconditions.checkState(n.getType()    ==    Token.CALL);    	non-compiled	[CE]  	19	None	replace
282	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CALL  ||  n.getType()  ==  Token.GETPROP);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CALL  ||  n.getType()  ==  Token.GETPROP);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.CALL  ||  n.getType()  ==  Token.GETPROP);	  Preconditions.checkState(n.getType()    ==    Token.CALL);    	non-compiled	[CE]  	19	None	replace
283	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CALL  ||  n.getType()  ==  Token.BLOCK);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CALL  ||  n.getType()  ==  Token.BLOCK);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.CALL  ||  n.getType()  ==  Token.BLOCK);	  Preconditions.checkState(n.getType()    ==    Token.CALL);    	non-compiled	[CE]  	19	None	replace
284	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK  &&  n.getType()  ==  Token.SCRIPT);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK  &&  n.getType()  ==  Token.SCRIPT);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.BLOCK  &&  n.getType()  ==  Token.SCRIPT);	  Preconditions.checkState(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.SCRIPT);    	non-compiled	[CE]  	30	None	replace
285	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK  ||  n.getType()!=  Token.SCRIPT);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK  ||  n.getType()!=  Token.SCRIPT);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.BLOCK  ||  n.getType()!=  Token.SCRIPT);	  Preconditions.checkState(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.SCRIPT);    	non-compiled	[CE]  	30	None	replace
286	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.BLOCK  ||  n.getType()  ==  Token.SCRIPT);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.BLOCK  ||  n.getType()  ==  Token.SCRIPT);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()!=  Token.BLOCK  ||  n.getType()  ==  Token.SCRIPT);	  Preconditions.checkState(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.SCRIPT);    	non-compiled	[CE]  	30	None	replace
287	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.SCRIPT  ||  n.getType()  ==  Token.BLOCK);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.SCRIPT  ||  n.getType()  ==  Token.BLOCK);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.SCRIPT  ||  n.getType()  ==  Token.BLOCK);	  Preconditions.checkState(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.SCRIPT);    	non-compiled	[CE]  	30	None	replace
288	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.BLOCK  &&  n.getType()  ==  Token.SCRIPT);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.BLOCK  &&  n.getType()  ==  Token.SCRIPT);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()!=  Token.BLOCK  &&  n.getType()  ==  Token.SCRIPT);	  Preconditions.checkState(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.SCRIPT);    	non-compiled	[CE]  	30	None	replace
289	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK  ||  n.getFirstChild().getType()  ==  Token.SCRIPT);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK  ||  n.getFirstChild().getType()  ==  Token.SCRIPT);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.BLOCK  ||  n.getFirstChild().getType()  ==  Token.SCRIPT);	  Preconditions.checkState(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.SCRIPT);    	non-compiled	[CE]  	30	None	replace
290	[BUG]  [BUGGY]  Preconditions.checkState(isFoldExpressBlock(n),  n.getType()  ==  Token.EXPR_RESULT,  STANDARD_OBJECT_CONSTRUCTORS);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(isFoldExpressBlock(n),  n.getType()  ==  Token.EXPR_RESULT,  STANDARD_OBJECT_CONSTRUCTORS);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isFoldExpressBlock(n),  n.getType()  ==  Token.EXPR_RESULT,  STANDARD_OBJECT_CONSTRUCTORS);	  Preconditions.checkState(isFoldExpressBlock(n),    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	40	None	replace
291	[BUG]  [BUGGY]  Preconditions.checkState(isFoldExpressBlock(n),  n.getType()!=  Token.EXPR_RESULT);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(isFoldExpressBlock(n),  n.getType()!=  Token.EXPR_RESULT);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isFoldExpressBlock(n),  n.getType()!=  Token.EXPR_RESULT);	  Preconditions.checkState(isFoldExpressBlock(n),    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	40	None	replace
292	[BUG]  [BUGGY]  Preconditions.checkState(isFoldExpressBlock(n),  n.getType()  ==  Token.EXPR_RESULT,  n.getFirstChild());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(isFoldExpressBlock(n),  n.getType()  ==  Token.EXPR_RESULT,  n.getFirstChild());  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isFoldExpressBlock(n),  n.getType()  ==  Token.EXPR_RESULT,  n.getFirstChild());	  Preconditions.checkState(isFoldExpressBlock(n),    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	40	None	replace
293	[BUG]  [BUGGY]  Preconditions.checkState(isExpressionBlock(n),  n.getType()  ==  Token.EXPR_RESULT);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(isExpressionBlock(n),  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isExpressionBlock(n),  n.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(isFoldExpressBlock(n),    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	40	None	replace
294	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  &&  n.getFirstChild()  ==  n);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  &&  n.getFirstChild()  ==  n);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  &&  n.getFirstChild()  ==  n);	  Preconditions.checkArgument(n.getType()    ==    Token.BLOCK    ||    n.getFirstChild()    ==    n);    	non-compiled	[CE]  	73	None	replace
295	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  ||  n.getFirstChild()  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  ||  n.getFirstChild()  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  ||  n.getFirstChild()  ==  DONT_TRAVERSE_FUNCTIONS_PREDICATE);	  Preconditions.checkArgument(n.getType()    ==    Token.BLOCK    ||    n.getFirstChild()    ==    n);    	non-compiled	[CE]  	73	None	replace
296	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  ||  n.getFirstChild()  ==  null);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  ||  n.getFirstChild()  ==  null);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  ||  n.getFirstChild()  ==  null);	  Preconditions.checkArgument(n.getType()    ==    Token.BLOCK    ||    n.getFirstChild()    ==    n);    	non-compiled	[CE]  	73	None	replace
297	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  ||  n.getLastChild()  ==  n);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  ||  n.getLastChild()  ==  n);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  ||  n.getLastChild()  ==  n);	  Preconditions.checkArgument(n.getType()    ==    Token.BLOCK    ||    n.getFirstChild()    ==    n);    	non-compiled	[CE]  	73	None	replace
298	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  ||  n.getFirstChild()!=  n);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  ||  n.getFirstChild()!=  n);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  ||  n.getFirstChild()!=  n);	  Preconditions.checkArgument(n.getType()    ==    Token.BLOCK    ||    n.getFirstChild()    ==    n);    	non-compiled	[CE]  	73	None	replace
299	[BUG]  [BUGGY]  Preconditions.checkState(isFoldableExpressionBlock(n)||  n.getType()!=  Token.EXPR_RESULT);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(isFoldableExpressionBlock(n)||  n.getType()!=  Token.EXPR_RESULT);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isFoldableExpressionBlock(n)||  n.getType()!=  Token.EXPR_RESULT);	  Preconditions.checkState(isFoldableExpressionBlock(n)||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	18	None	replace
300	[BUG]  [BUGGY]  Preconditions.checkState(isFoldableExpressionBlock(n)||  n.getType()  ==  Token.EXPR_RESULT,  STANDARD_OBJECT_CONSTRUCTORS);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(isFoldableExpressionBlock(n)||  n.getType()  ==  Token.EXPR_RESULT,  STANDARD_OBJECT_CONSTRUCTORS);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isFoldableExpressionBlock(n)||  n.getType()  ==  Token.EXPR_RESULT,  STANDARD_OBJECT_CONSTRUCTORS);	  Preconditions.checkState(isFoldableExpressionBlock(n)||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	18	None	replace
301	[BUG]  [BUGGY]  Preconditions.checkState(isFoldableExpressionBlock(n)&&  n.getType()  ==  Token.EXPR_RESULT);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(isFoldableExpressionBlock(n)&&  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isFoldableExpressionBlock(n)&&  n.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(isFoldableExpressionBlock(n)||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	18	None	replace
302	[BUG]  [BUGGY]  Preconditions.checkState(isFoldableExpressionBlock(n)||  n.getType()  ==  Token.EMPTY);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(isFoldableExpressionBlock(n)||  n.getType()  ==  Token.EMPTY);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isFoldableExpressionBlock(n)||  n.getType()  ==  Token.EMPTY);	  Preconditions.checkState(isFoldableExpressionBlock(n)||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	18	None	replace
303	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  &&  n.getFirstChild()!=  null);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  &&  n.getFirstChild()!=  null);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  &&  n.getFirstChild()!=  null);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT    ||    n.getFirstChild()!=    null);    	non-compiled	[CE]  	46	None	replace
304	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getFirstChild()  ==  null);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getFirstChild()  ==  null);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getFirstChild()  ==  null);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT    ||    n.getFirstChild()!=    null);    	non-compiled	[CE]  	46	None	replace
305	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getLastChild()!=  null);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getLastChild()!=  null);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getLastChild()!=  null);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT    ||    n.getFirstChild()!=    null);    	non-compiled	[CE]  	46	None	replace
306	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.EXPR_RESULT  &&  n.getFirstChild()!=  null);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.EXPR_RESULT  &&  n.getFirstChild()!=  null);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()!=  Token.EXPR_RESULT  &&  n.getFirstChild()!=  null);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT    ||    n.getFirstChild()!=    null);    	non-compiled	[CE]  	46	None	replace
307	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.EXPR_RESULT  ||  n.getFirstChild()  ==  null);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.EXPR_RESULT  ||  n.getFirstChild()  ==  null);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()!=  Token.EXPR_RESULT  ||  n.getFirstChild()  ==  null);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT    ||    n.getFirstChild()!=    null);    	non-compiled	[CE]  	46	None	replace
308	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getChildCount()!=  0);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getChildCount()!=  0);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getChildCount()!=  0);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT    ||    n.getFirstChild()!=    null);    	non-compiled	[CE]  	46	None	replace
309	[BUG]  [BUGGY]  Preconditions.checkState(isFoldExpressionBlock(n)||  n.getType()  ==  Token.EXPR_RESULT);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(isFoldExpressionBlock(n)||  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isFoldExpressionBlock(n)||  n.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(isFoldExpressionBlock(n));    	non-compiled	[CE]  	17	None	replace
310	[BUG]  [BUGGY]  Preconditions.checkState(!isFoldExpressionBlock(n));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(!isFoldExpressionBlock(n));  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(!isFoldExpressionBlock(n));	  Preconditions.checkState(isFoldExpressionBlock(n));    	non-compiled	[CE]  	17	None	replace
311	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.EXPR_RESULT,  n.getString());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.EXPR_RESULT,  n.getString());  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()!=  Token.EXPR_RESULT,  n.getString());	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT,    n.getString());    	non-compiled	[CE]  	4	None	replace
312	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  n.getJSDocInfo());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  n.getJSDocInfo());  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  n.getJSDocInfo());	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT,    n.getString());    	non-compiled	[CE]  	4	None	replace
313	[BUG]  [BUGGY]  Preconditions.checkState(isExpression(n)||  n.getType()  ==  Token.EXPR_RESULT);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(isExpression(n)||  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isExpression(n)||  n.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(isBlockExpression(n)||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	36	None	replace
314	[BUG]  [BUGGY]  Preconditions.checkState(isFunctionExpression(n)||  n.getType()  ==  Token.EXPR_RESULT);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(isFunctionExpression(n)||  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isFunctionExpression(n)||  n.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(isBlockExpression(n)||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	36	None	replace
315	[BUG]  [BUGGY]  Preconditions.checkState(isBlockExpression(n)||  n.getType()  ==  Token.EMPTY);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(isBlockExpression(n)||  n.getType()  ==  Token.EMPTY);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isBlockExpression(n)||  n.getType()  ==  Token.EMPTY);	  Preconditions.checkState(isBlockExpression(n)||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	36	None	replace
316	[BUG]  [BUGGY]  Preconditions.checkState(isFoldableExpression(n)||  n.getType()  ==  Token.EXPR_RESULT,  STANDARD_OBJECT_CONSTRUCTORS);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(isFoldableExpression(n)||  n.getType()  ==  Token.EXPR_RESULT,  STANDARD_OBJECT_CONSTRUCTORS);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isFoldableExpression(n)||  n.getType()  ==  Token.EXPR_RESULT,  STANDARD_OBJECT_CONSTRUCTORS);	  Preconditions.checkState(isFoldableExpression(n)||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	33	None	replace
317	[BUG]  [BUGGY]  Preconditions.checkState(isFoldableExpression(n)&&  n.getType()  ==  Token.EXPR_RESULT);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(isFoldableExpression(n)&&  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isFoldableExpression(n)&&  n.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(isFoldableExpression(n)||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	33	None	replace
318	[BUG]  [BUGGY]  Preconditions.checkState(isFoldableExpression(n)||  n.getFirstChild().getType()  ==  Token.EXPR_RESULT);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(isFoldableExpression(n)||  n.getFirstChild().getType()  ==  Token.EXPR_RESULT);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isFoldableExpression(n)||  n.getFirstChild().getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(isFoldableExpression(n)||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	33	None	replace
319	[BUG]  [BUGGY]  Node  n  =  getExpression(n.getLastChild());  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Node  n  =  getExpression(n.getLastChild());  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Node  n  =  getExpression(n.getLastChild());	  Node    n    =    getExpression(n.getFirstChild());    	non-compiled	[CE]  	45	None	replace
320	[BUG]  [BUGGY]  Node  n  =  getExpression(n.getNext());  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Node  n  =  getExpression(n.getNext());  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Node  n  =  getExpression(n.getNext());	  Node    n    =    getExpression(n.getFirstChild());    	non-compiled	[CE]  	45	None	replace
321	[BUG]  [BUGGY]  Node  n  =  getExpression(n.getType());  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Node  n  =  getExpression(n.getType());  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Node  n  =  getExpression(n.getType());	  Node    n    =    getExpression(n.getFirstChild());    	non-compiled	[CE]  	45	None	replace
322	[BUG]  [BUGGY]  Node  n  =  getExpression(n.getFirstChild(),  n.getLastChild());  [CE]  [FE]                                      AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Node  n  =  getExpression(n.getFirstChild(),  n.getLastChild());  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Node  n  =  getExpression(n.getFirstChild(),  n.getLastChild());	  Node    n    =    getExpression(n.getFirstChild());    	non-compiled	[CE]  	45	None	replace
323	[BUG]  [BUGGY]  Node  n  =  getExpression(n.getString());  [CE]  [FE]                                        AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Node  n  =  getExpression(n.getString());  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Node  n  =  getExpression(n.getString());	  Node    n    =    getExpression(n.getFirstChild());    	non-compiled	[CE]  	45	None	replace
324	[BUG]  [BUGGY]  Node  n  =  n.removeFirstChild();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Node  n  =  n.removeFirstChild();  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Node  n  =  n.removeFirstChild();	  Node    n    =    n.getLastChild();    	non-compiled	[CE]  	42	None	replace
325	[BUG]  [BUGGY]  Node  n  =  node.getFirstChild();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Node  n  =  node.getFirstChild();  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Node  n  =  node.getFirstChild();	  Node    n    =    n.getLastChild();    	non-compiled	[CE]  	42	None	replace
326	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  &&  n.getType()  ==  Token.GETPROP);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  &&  n.getType()  ==  Token.GETPROP);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  &&  n.getType()  ==  Token.GETPROP);	  Preconditions.checkArgument(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  	9	None	replace
327	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.GETPROP  ||  n.getType()  ==  Token.BLOCK);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.GETPROP  ||  n.getType()  ==  Token.BLOCK);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.GETPROP  ||  n.getType()  ==  Token.BLOCK);	  Preconditions.checkArgument(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  	9	None	replace
328	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  ||  n.getType()!=  Token.GETPROP);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  ||  n.getType()!=  Token.GETPROP);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  ||  n.getType()!=  Token.GETPROP);	  Preconditions.checkArgument(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  	9	None	replace
329	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  ||  n.getFirstChild().getType()  ==  Token.GETPROP);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  ||  n.getFirstChild().getType()  ==  Token.GETPROP);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  ||  n.getFirstChild().getType()  ==  Token.GETPROP);	  Preconditions.checkArgument(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  	9	None	replace
330	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.BLOCK  ||  n.getType()  ==  Token.GETPROP);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.BLOCK  ||  n.getType()  ==  Token.GETPROP);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkArgument(n.getType()!=  Token.BLOCK  ||  n.getType()  ==  Token.GETPROP);	  Preconditions.checkArgument(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  	9	None	replace
331	[BUG]  [BUGGY]  Preconditions.checkState(isEmpty(n)||  isEmpty(n));  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(isEmpty(n)||  isEmpty(n));  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isEmpty(n)||  isEmpty(n));	  Preconditions.checkState(isFallThrough(n)||    isFallThrough(n));    	non-compiled	[CE]  	20	None	replace
332	[BUG]  [BUGGY]  Preconditions.checkState(isFallThrough(n)&&  isFallThrough(n));  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(isFallThrough(n)&&  isFallThrough(n));  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isFallThrough(n)&&  isFallThrough(n));	  Preconditions.checkState(isFallThrough(n)||    isFallThrough(n));    	non-compiled	[CE]  	20	None	replace
333	[BUG]  [BUGGY]  Preconditions.checkState(isVarArgs(n)||  isVarArgs(n));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(isVarArgs(n)||  isVarArgs(n));  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isVarArgs(n)||  isVarArgs(n));	  Preconditions.checkState(isFallThrough(n)||    isFallThrough(n));    	non-compiled	[CE]  	20	None	replace
334	[BUG]  [BUGGY]  Preconditions.checkState(isBlockExpression(n)||  isBlockExpression(n));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(isBlockExpression(n)||  isBlockExpression(n));  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isBlockExpression(n)||  isBlockExpression(n));	  Preconditions.checkState(isFallThrough(n)||    isFallThrough(n));    	non-compiled	[CE]  	20	None	replace
335	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  FoldArrayAction(),  REGEXP_FLAGS_RE);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  FoldArrayAction(),  REGEXP_FLAGS_RE);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	NodeTraversal.traverse(compiler,  n,  new  FoldArrayAction(),  REGEXP_FLAGS_RE);	  NodeTraversal.traverse(compiler,    n,    new    FoldArrayAction());    	non-compiled	[CE]  	58	None	replace
336	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  FoldArrayAction(),  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  FoldArrayAction(),  DONT_TRAVERSE_FUNCTIONS_PREDICATE);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	NodeTraversal.traverse(compiler,  n,  new  FoldArrayAction(),  DONT_TRAVERSE_FUNCTIONS_PREDICATE);	  NodeTraversal.traverse(compiler,    n,    new    FoldArrayAction());    	non-compiled	[CE]  	58	None	replace
337	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  FoldArrayAction(),  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  FoldArrayAction(),  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	NodeTraversal.traverse(compiler,  n,  new  FoldArrayAction(),  INVALID_REGULAR_EXPRESSION_FLAGS);	  NodeTraversal.traverse(compiler,    n,    new    FoldArrayAction());    	non-compiled	[CE]  	58	None	replace
338	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  FoldArrayAction(),  STANDARD_OBJECT_CONSTRUCTORS);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  FoldArrayAction(),  STANDARD_OBJECT_CONSTRUCTORS);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	NodeTraversal.traverse(compiler,  n,  new  FoldArrayAction(),  STANDARD_OBJECT_CONSTRUCTORS);	  NodeTraversal.traverse(compiler,    n,    new    FoldArrayAction());    	non-compiled	[CE]  	58	None	replace
339	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  FoldArrayAction(),  this);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  FoldArrayAction(),  this);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	NodeTraversal.traverse(compiler,  n,  new  FoldArrayAction(),  this);	  NodeTraversal.traverse(compiler,    n,    new    FoldArrayAction());    	non-compiled	[CE]  	58	None	replace
340	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  &&  n.getChildCount()  ==  2);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  &&  n.getChildCount()  ==  2);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  &&  n.getChildCount()  ==  2);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT    ||    n.getChildCount()    ==    2);    	non-compiled	[CE]  	48	None	replace
341	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getChildCount()  ==  1);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getChildCount()  ==  1);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getChildCount()  ==  1);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT    ||    n.getChildCount()    ==    2);    	non-compiled	[CE]  	48	None	replace
342	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getChildCount()  ==  3);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getChildCount()  ==  3);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getChildCount()  ==  3);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT    ||    n.getChildCount()    ==    2);    	non-compiled	[CE]  	48	None	replace
343	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getChildCount()  ==  4);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getChildCount()  ==  4);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getChildCount()  ==  4);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT    ||    n.getChildCount()    ==    2);    	non-compiled	[CE]  	48	None	replace
344	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getChildCount()!=  2);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getChildCount()!=  2);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getChildCount()!=  2);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT    ||    n.getChildCount()    ==    2);    	non-compiled	[CE]  	48	None	replace
345	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getChildCount()  >=  2);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getChildCount()  >=  2);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getChildCount()  >=  2);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT    ||    n.getChildCount()    ==    2);    	non-compiled	[CE]  	48	None	replace
346	[BUG]  [BUGGY]  Preconditions.checkState(!isExpressionFunction(n));  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(!isExpressionFunction(n));  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(!isExpressionFunction(n));	  Preconditions.checkState(!isExpressBlock(n));    	non-compiled	[CE]  	25	None	replace
347	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  &&  n.getFirstChild()!=  null);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  &&  n.getFirstChild()!=  null);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  &&  n.getFirstChild()!=  null);	  Preconditions.checkArgument(n.getType()    ==    Token.BLOCK    ||    n.getFirstChild()!=    null);    	non-compiled	[CE]  	55	None	replace
348	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.BLOCK  &&  n.getFirstChild()!=  null);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.BLOCK  &&  n.getFirstChild()!=  null);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkArgument(n.getType()!=  Token.BLOCK  &&  n.getFirstChild()!=  null);	  Preconditions.checkArgument(n.getType()    ==    Token.BLOCK    ||    n.getFirstChild()!=    null);    	non-compiled	[CE]  	55	None	replace
349	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  ||  n.getLastChild()!=  null);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  ||  n.getLastChild()!=  null);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  ||  n.getLastChild()!=  null);	  Preconditions.checkArgument(n.getType()    ==    Token.BLOCK    ||    n.getFirstChild()!=    null);    	non-compiled	[CE]  	55	None	replace
350	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  ||  n.getChildCount()!=  0);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  ||  n.getChildCount()!=  0);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  ||  n.getChildCount()!=  0);	  Preconditions.checkArgument(n.getType()    ==    Token.BLOCK    ||    n.getFirstChild()!=    null);    	non-compiled	[CE]  	55	None	replace
351	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  null);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  null);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	NodeTraversal.traverse(compiler,  n,  null);	  NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  	59	None	replace
352	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  ||  n.hasFirstChild());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  ||  n.hasFirstChild());  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  ||  n.hasFirstChild());	  Preconditions.checkArgument(n.getType()    ==    Token.BLOCK    ||    n.hasChildren());    	non-compiled	[CE]  	56	None	replace
353	[BUG]  [BUGGY]  Preconditions.checkState(isExpressBlock(n)||  n.getType()  ==  Token.EXPR_RESULT,  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(isExpressBlock(n)||  n.getType()  ==  Token.EXPR_RESULT,  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isExpressBlock(n)||  n.getType()  ==  Token.EXPR_RESULT,  INVALID_REGULAR_EXPRESSION_FLAGS);	  Preconditions.checkState(isExpressBlock(n)||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	35	None	replace
354	[BUG]  [BUGGY]  Preconditions.checkState(!isExpressionNode(n));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(!isExpressionNode(n));  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(!isExpressionNode(n));	  Preconditions.checkState(!isExpressionBlock(n));    	non-compiled	[CE]  	78	None	replace
355	[BUG]  [BUGGY]  Preconditions.checkState(!isExpressionVar(n));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(!isExpressionVar(n));  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(!isExpressionVar(n));	  Preconditions.checkState(!isExpressionBlock(n));    	non-compiled	[CE]  	78	None	replace
356	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EMPTY  ||  n.getType()  ==  Token.VAR);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EMPTY  ||  n.getType()  ==  Token.VAR);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.EMPTY  ||  n.getType()  ==  Token.VAR);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT    ||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  	71	None	replace
357	[BUG]  [BUGGY]  Preconditions.checkState(!isFallThrough(n)||  n.getType()  ==  Token.EXPR_RESULT);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(!isFallThrough(n)||  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(!isFallThrough(n)||  n.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(!isFoldableExpressBlock(n)||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	15	None	replace
358	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK  ||  n.getNext()!=  null);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK  ||  n.getNext()!=  null);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.BLOCK  ||  n.getNext()!=  null);	  Preconditions.checkState(n.getType()    ==    Token.BLOCK    ||    n.getFirstChild()!=    null);    	non-compiled	[CE]  	49	None	replace
359	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK  ||  n.getChildCount()  ==  0);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK  ||  n.getChildCount()  ==  0);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.BLOCK  ||  n.getChildCount()  ==  0);	  Preconditions.checkState(n.getType()    ==    Token.BLOCK    ||    n.getFirstChild()!=    null);    	non-compiled	[CE]  	49	None	replace
360	[BUG]  [BUGGY]  Node  n  =  n.cloneTree();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Node  n  =  n.cloneTree();  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Node  n  =  n.cloneTree();	  Node    n    =    n.getLastChild();    	non-compiled	[CE]  	42	None	replace
361	[BUG]  [BUGGY]  Node  n  =  n.getfirstChild();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Node  n  =  n.getfirstChild();  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Node  n  =  n.getfirstChild();	  Node    n    =    n.getLastChild();    	non-compiled	[CE]  	42	None	replace
362	[BUG]  [BUGGY]  Preconditions.checkState(isExpressionBlock(n)||  n.getType()  ==  Token.EXPR_RESULT,  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(isExpressionBlock(n)||  n.getType()  ==  Token.EXPR_RESULT,  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isExpressionBlock(n)||  n.getType()  ==  Token.EXPR_RESULT,  INVALID_REGULAR_EXPRESSION_FLAGS);	  Preconditions.checkState(isExpressionBlock(n)||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	76	None	replace
363	[BUG]  [BUGGY]  Preconditions.checkState(isExpressionFold(n)||  n.getType()  ==  Token.EXPR_RESULT);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(isExpressionFold(n)||  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isExpressionFold(n)||  n.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(isFoldExpressBlock(n)||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	39	None	replace
364	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  n.getLocalPart());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  n.getLocalPart());  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  n.getLocalPart());	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT,    n.getFirstChild());    	non-compiled	[CE]  	2	None	replace
365	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  n.getOwnerChild());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  n.getOwnerChild());  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  n.getOwnerChild());	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT,    n.getFirstChild());    	non-compiled	[CE]  	2	None	replace
366	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK  ||  n.getType()  ==  Token.GETELEM);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK  ||  n.getType()  ==  Token.GETELEM);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.BLOCK  ||  n.getType()  ==  Token.GETELEM);	  Preconditions.checkState(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  	29	None	replace
367	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  ||  n.getFirstChild()  ==  Token.FUNCTION);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  ||  n.getFirstChild()  ==  Token.FUNCTION);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  ||  n.getFirstChild()  ==  Token.FUNCTION);	  Preconditions.checkArgument(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	10	None	replace
368	[BUG]  [BUGGY]  Preconditions.checkState(isFallThrough(n)||  n.getType()  ==  Token.EXPRESSION);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(isFallThrough(n)||  n.getType()  ==  Token.EXPRESSION);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isFallThrough(n)||  n.getType()  ==  Token.EXPRESSION);	  Preconditions.checkState(isFoldExpressBlock(n)||    n.getType()    ==    Token.EXPRESSION);    	non-compiled	[CE]  	54	None	replace
369	[BUG]  [BUGGY]  Preconditions.checkState(isFoldBlock(n)||  n.getType()  ==  Token.EXPRESSION);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(isFoldBlock(n)||  n.getType()  ==  Token.EXPRESSION);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isFoldBlock(n)||  n.getType()  ==  Token.EXPRESSION);	  Preconditions.checkState(isFoldExpressBlock(n)||    n.getType()    ==    Token.EXPRESSION);    	non-compiled	[CE]  	54	None	replace
370	[BUG]  [BUGGY]  Preconditions.checkState(isFoldExpressBlock(n)||  n.getFirstChild()!=  null);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(isFoldExpressBlock(n)||  n.getFirstChild()!=  null);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isFoldExpressBlock(n)||  n.getFirstChild()!=  null);	  Preconditions.checkState(isFoldExpressBlock(n),    n.getFirstChild());    	non-compiled	[CE]  	68	None	replace
371	[BUG]  [BUGGY]  Preconditions.checkState(isFoldExpressBlock(n)||  n.getFirstChild()  ==  null);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(isFoldExpressBlock(n)||  n.getFirstChild()  ==  null);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isFoldExpressBlock(n)||  n.getFirstChild()  ==  null);	  Preconditions.checkState(isFoldExpressBlock(n),    n.getFirstChild());    	non-compiled	[CE]  	68	None	replace
372	[BUG]  [BUGGY]  Preconditions.checkState(isFoldExpressBlock(n),  n.getLastChild());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(isFoldExpressBlock(n),  n.getLastChild());  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isFoldExpressBlock(n),  n.getLastChild());	  Preconditions.checkState(isFoldExpressBlock(n),    n.getFirstChild());    	non-compiled	[CE]  	68	None	replace
373	[BUG]  [BUGGY]  Node  n  =  getBlockExpression(n.cloneTree());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Node  n  =  getBlockExpression(n.cloneTree());  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Node  n  =  getBlockExpression(n.cloneTree());	  Node    n    =    getBlockExpression(n.getFirstChild());    	non-compiled	[CE]  	43	None	replace
374	[BUG]  [BUGGY]  Node  n  =  getBlockExpression(n.getParent());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Node  n  =  getBlockExpression(n.getParent());  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Node  n  =  getBlockExpression(n.getParent());	  Node    n    =    getBlockExpression(n.getFirstChild());    	non-compiled	[CE]  	43	None	replace
375	[BUG]  [BUGGY]  Node  n  =  getBlock(n.getFirstChild());  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Node  n  =  getBlock(n.getFirstChild());  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Node  n  =  getBlock(n.getFirstChild());	  Node    n    =    getBlockExpression(n.getFirstChild());    	non-compiled	[CE]  	43	None	replace
376	[BUG]  [BUGGY]  Preconditions.checkState(isFoldExpression(n)||  n.getType()  ==  Token.EXPR_RESULT);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(isFoldExpression(n)||  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isFoldExpression(n)||  n.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(isFoldableExpression(n)||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	33	None	replace
377	[BUG]  [BUGGY]  Preconditions.checkState(isFoldableExpression(n)||  n.getType()  ==  Token.EXPR_RESULT,  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(isFoldableExpression(n)||  n.getType()  ==  Token.EXPR_RESULT,  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isFoldableExpression(n)||  n.getType()  ==  Token.EXPR_RESULT,  INVALID_REGULAR_EXPRESSION_FLAGS);	  Preconditions.checkState(isFoldableExpression(n)||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	33	None	replace
378	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.hasChildren());  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.hasChildren());  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.hasChildren());	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT    ||    n.getFirstChild()!=    null);    	non-compiled	[CE]  	46	None	replace
379	[BUG]  [BUGGY]  Preconditions.checkState(!isImmutableExpressBlock(n)||  n.getType()  ==  Token.GETPROP);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(!isImmutableExpressBlock(n)||  n.getType()  ==  Token.GETPROP);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(!isImmutableExpressBlock(n)||  n.getType()  ==  Token.GETPROP);	  Preconditions.checkState(!isImmutableExpressBlock(n));    	non-compiled	[CE]  	51	None	replace
380	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK  ||  n.getFirstChild()  ==  Token.SCRIPT);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK  ||  n.getFirstChild()  ==  Token.SCRIPT);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.BLOCK  ||  n.getFirstChild()  ==  Token.SCRIPT);	  Preconditions.checkState(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.SCRIPT);    	non-compiled	[CE]  	30	None	replace
381	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CALL  ||  n.getType()  ==  Token.SCRIPT);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CALL  ||  n.getType()  ==  Token.SCRIPT);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.CALL  ||  n.getType()  ==  Token.SCRIPT);	  Preconditions.checkState(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.SCRIPT);    	non-compiled	[CE]  	30	None	replace
382	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK  ||  n.getFirstChild()  ==  Token.CATCH);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK  ||  n.getFirstChild()  ==  Token.CATCH);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.BLOCK  ||  n.getFirstChild()  ==  Token.CATCH);	  Preconditions.checkState(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.CATCH);    	non-compiled	[CE]  	70	None	replace
383	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  INVALID_REGULAR_EXPRESSION_FLAGS);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT,    STANDARD_OBJECT_CONSTRUCTORS);    	non-compiled	[CE]  	5	None	replace
384	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  REGEXP_FLAGS_RE);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  REGEXP_FLAGS_RE);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  REGEXP_FLAGS_RE);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT,    STANDARD_OBJECT_CONSTRUCTORS);    	non-compiled	[CE]  	5	None	replace
385	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  OBJECT_CONSTRUCTORS);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  OBJECT_CONSTRUCTORS);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  OBJECT_CONSTRUCTORS);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT,    STANDARD_OBJECT_CONSTRUCTORS);    	non-compiled	[CE]  	5	None	replace
386	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  DEFAULT_OBJECT_CONSTRUCTORS);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  DEFAULT_OBJECT_CONSTRUCTORS);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  DEFAULT_OBJECT_CONSTRUCTORS);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT,    STANDARD_OBJECT_CONSTRUCTORS);    	non-compiled	[CE]  	5	None	replace
387	[BUG]  [BUGGY]  Preconditions.checkState(n.hasChildren()  &&  n.getType()!=  Token.EXPR_RESULT);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.hasChildren()  &&  n.getType()!=  Token.EXPR_RESULT);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.hasChildren()  &&  n.getType()!=  Token.EXPR_RESULT);	  Preconditions.checkState(n.getType()!=    Token.EXPR_RESULT);    	non-compiled	[CE]  	1	None	replace
388	[BUG]  [BUGGY]  Preconditions.checkState(n!=  null  &&  n.getType()!=  Token.EXPR_RESULT);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n!=  null  &&  n.getType()!=  Token.EXPR_RESULT);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n!=  null  &&  n.getType()!=  Token.EXPR_RESULT);	  Preconditions.checkState(n.getType()!=    Token.EXPR_RESULT);    	non-compiled	[CE]  	1	None	replace
389	[BUG]  [BUGGY]  Preconditions.checkState(n.hasChildren()  &&  n.getType()  ==  Token.EXPR_RESULT);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.hasChildren()  &&  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.hasChildren()  &&  n.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(n.getType()!=    Token.EXPR_RESULT);    	non-compiled	[CE]  	1	None	replace
390	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  ||  n.getFirstChild()  ==  Token.SCRIPT);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  ||  n.getFirstChild()  ==  Token.SCRIPT);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  ||  n.getFirstChild()  ==  Token.SCRIPT);	  Preconditions.checkArgument(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.SCRIPT);    	non-compiled	[CE]  	72	None	replace
391	[BUG]  [BUGGY]  Node  n  =  n.getOwnerChild();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Node  n  =  n.getOwnerChild();  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Node  n  =  n.getOwnerChild();	  Node    n    =    n.getFirstChild();    	non-compiled	[CE]  	41	None	replace
392	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  n.getChars());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  n.getChars());  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  n.getChars());	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT,    n.getString());    	non-compiled	[CE]  	4	None	replace
393	[BUG]  [BUGGY]  Preconditions.checkState(!isEmpty(n));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(!isEmpty(n));  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(!isEmpty(n));	  Preconditions.checkState(!isFallThrough(n));    	non-compiled	[CE]  	13	None	replace
394	[BUG]  [BUGGY]  Preconditions.checkState(!isExpressionFactory(n));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(!isExpressionFactory(n));  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(!isExpressionFactory(n));	  Preconditions.checkState(!isFallThrough(n));    	non-compiled	[CE]  	13	None	replace
395	[BUG]  [BUGGY]  Preconditions.checkState(!isImmutableWith(n));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(!isImmutableWith(n));  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(!isImmutableWith(n));	  Preconditions.checkState(!isFallThrough(n));    	non-compiled	[CE]  	13	None	replace
396	[BUG]  [BUGGY]  Preconditions.checkState(!isFlag(n));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(!isFlag(n));  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(!isFlag(n));	  Preconditions.checkState(!isFoldableExpression(n));    	non-compiled	[CE]  	12	None	replace
397	[BUG]  [BUGGY]  Preconditions.checkState(isExpressBlock(n)||  n.getFirstChild()!=  null);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(isExpressBlock(n)||  n.getFirstChild()!=  null);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isExpressBlock(n)||  n.getFirstChild()!=  null);	  Preconditions.checkState(isExpressBlock(n),    n.getFirstChild());    	non-compiled	[CE]  	80	None	replace
398	[BUG]  [BUGGY]  Preconditions.checkState(isExpressBlock(n)||  n.getFirstChild()  ==  null);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(isExpressBlock(n)||  n.getFirstChild()  ==  null);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isExpressBlock(n)||  n.getFirstChild()  ==  null);	  Preconditions.checkState(isExpressBlock(n),    n.getFirstChild());    	non-compiled	[CE]  	80	None	replace
399	[BUG]  [BUGGY]  Preconditions.checkState(isExpressBlock(n),  n.getType()  ==  Token.EMPTY);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(isExpressBlock(n),  n.getType()  ==  Token.EMPTY);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isExpressBlock(n),  n.getType()  ==  Token.EMPTY);	  Preconditions.checkState(isExpressBlock(n),    n.getFirstChild());    	non-compiled	[CE]  	80	None	replace
400	[BUG]  [BUGGY]  Preconditions.checkState(isExpressBlock(n)||  n.getType()  ==  Token.VAR  ||  n.getFirstChild()!=  null);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(isExpressBlock(n)||  n.getType()  ==  Token.VAR  ||  n.getFirstChild()!=  null);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isExpressBlock(n)||  n.getType()  ==  Token.VAR  ||  n.getFirstChild()!=  null);	  Preconditions.checkState(isExpressBlock(n)||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  	66	None	replace
401	[BUG]  [BUGGY]  Preconditions.checkArgument(!isFoldExpressBlock(n));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkArgument(!isFoldExpressBlock(n));  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkArgument(!isFoldExpressBlock(n));	  Preconditions.checkState(!isFoldExpressBlock(n));    	non-compiled	[CE]  	38	None	replace
402	[BUG]  [BUGGY]  Preconditions.checkState(!isFoldExpressBlock(n)||  n.getType()  ==  Token.GETPROP);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(!isFoldExpressBlock(n)||  n.getType()  ==  Token.GETPROP);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(!isFoldExpressBlock(n)||  n.getType()  ==  Token.GETPROP);	  Preconditions.checkState(!isFoldExpressBlock(n));    	non-compiled	[CE]  	38	None	replace
403	[BUG]  [BUGGY]  Preconditions.checkState(isFinally(n)||  n.getType()  ==  Token.EXPR_RESULT);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(isFinally(n)||  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isFinally(n)||  n.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(isFinally(n));    	non-compiled	[CE]  	22	None	replace
404	[BUG]  [BUGGY]  Preconditions.checkState(isFinally(n)||  n.getType()  ==  Token.BLOCK);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(isFinally(n)||  n.getType()  ==  Token.BLOCK);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isFinally(n)||  n.getType()  ==  Token.BLOCK);	  Preconditions.checkState(isFinally(n));    	non-compiled	[CE]  	22	None	replace
405	[BUG]  [BUGGY]  Preconditions.checkState(isExpressionFactory(n)||  n.getType()  ==  Token.EXPR_RESULT);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(isExpressionFactory(n)||  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isExpressionFactory(n)||  n.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(isFallThrough(n)||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	62	None	replace
406	[BUG]  [BUGGY]  Preconditions.checkState(isFallThrough(n)||  n.getType()  ==  Token.GETPROP);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(isFallThrough(n)||  n.getType()  ==  Token.GETPROP);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isFallThrough(n)||  n.getType()  ==  Token.GETPROP);	  Preconditions.checkState(isFoldExpressBlock(n)||    n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  	53	None	replace
407	[BUG]  [BUGGY]  Preconditions.checkState(isFoldBlock(n)||  n.getType()  ==  Token.GETPROP);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(isFoldBlock(n)||  n.getType()  ==  Token.GETPROP);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isFoldBlock(n)||  n.getType()  ==  Token.GETPROP);	  Preconditions.checkState(isFoldExpressBlock(n)||    n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  	53	None	replace
408	[BUG]  [BUGGY]  Preconditions.checkState(isExpressBlock(n)||  n.getType()  ==  Token.SETPROP);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(isExpressBlock(n)||  n.getType()  ==  Token.SETPROP);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isExpressBlock(n)||  n.getType()  ==  Token.SETPROP);	  Preconditions.checkState(isExpressBlock(n)||    n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  	65	None	replace
409	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CATCH  ||  n.getFirstChild()!=  null);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CATCH  ||  n.getFirstChild()!=  null);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.CATCH  ||  n.getFirstChild()!=  null);	  Preconditions.checkState(n.getType()    ==    Token.CATCH);    	non-compiled	[CE]  	67	None	replace
410	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CATCH  ||  n.getChildCount()  ==  2);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CATCH  ||  n.getChildCount()  ==  2);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.CATCH  ||  n.getChildCount()  ==  2);	  Preconditions.checkState(n.getType()    ==    Token.CATCH);    	non-compiled	[CE]  	67	None	replace
411	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CATCH  ||  n.getFirstChild()  ==  null);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CATCH  ||  n.getFirstChild()  ==  null);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.CATCH  ||  n.getFirstChild()  ==  null);	  Preconditions.checkState(n.getType()    ==    Token.CATCH);    	non-compiled	[CE]  	67	None	replace
412	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CATCH  ||  n.getChildCount()  ==  1);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CATCH  ||  n.getChildCount()  ==  1);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.CATCH  ||  n.getChildCount()  ==  1);	  Preconditions.checkState(n.getType()    ==    Token.CATCH);    	non-compiled	[CE]  	67	None	replace
413	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.BLOCK  &&  n.getFirstChild()  ==  null);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.BLOCK  &&  n.getFirstChild()  ==  null);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkArgument(n.getType()!=  Token.BLOCK  &&  n.getFirstChild()  ==  null);	  Preconditions.checkArgument(n.getType()!=    Token.BLOCK);    	non-compiled	[CE]  	7	None	replace
414	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getFirstChild()!=  null);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getFirstChild()!=  null);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getFirstChild()!=  null);	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  	50	None	replace
415	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getChildCount()  ==  2);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getChildCount()  ==  2);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getChildCount()  ==  2);	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  	50	None	replace
416	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  &&  n.getFirstChild()!=  null);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  &&  n.getFirstChild()!=  null);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  &&  n.getFirstChild()!=  null);	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  	50	None	replace
417	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.GETPROP);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.GETPROP);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getType()  ==  Token.GETPROP);	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  	50	None	replace
418	[BUG]  [BUGGY]  Preconditions.checkArgument(!isExpressBlock(n));  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkArgument(!isExpressBlock(n));  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkArgument(!isExpressBlock(n));	  Preconditions.checkState(!isExpressBlock(n));    	non-compiled	[CE]  	25	None	replace
419	[BUG]  [BUGGY]  Preconditions.checkState(!isExpressBlock(n)||  n.getType()  ==  Token.GETPROP);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(!isExpressBlock(n)||  n.getType()  ==  Token.GETPROP);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(!isExpressBlock(n)||  n.getType()  ==  Token.GETPROP);	  Preconditions.checkState(!isExpressBlock(n));    	non-compiled	[CE]  	25	None	replace
420	[BUG]  [BUGGY]  Preconditions.checkState(isFollowNode(n)||  isFollowNode(n));  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(isFollowNode(n)||  isFollowNode(n));  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isFollowNode(n)||  isFollowNode(n));	  Preconditions.checkState(isFallThrough(n)||    isFallThrough(n));    	non-compiled	[CE]  	20	None	replace
421	[BUG]  [BUGGY]  Preconditions.checkState(isFalse(n)||  isFalse(n));  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(isFalse(n)||  isFalse(n));  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isFalse(n)||  isFalse(n));	  Preconditions.checkState(isFallThrough(n)||    isFallThrough(n));    	non-compiled	[CE]  	20	None	replace
422	[BUG]  [BUGGY]  Preconditions.checkState(isEmpty(n)||  isFallThrough(n));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(isEmpty(n)||  isFallThrough(n));  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isEmpty(n)||  isFallThrough(n));	  Preconditions.checkState(isFallThrough(n)||    isFallThrough(n));    	non-compiled	[CE]  	20	None	replace
423	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  ||  n.getChildCount()!=  2);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  ||  n.getChildCount()!=  2);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  ||  n.getChildCount()!=  2);	  Preconditions.checkArgument(n.getType()    ==    Token.BLOCK    ||    n.getChildCount()    ==    2);    	non-compiled	[CE]  	57	None	replace
424	[BUG]  [BUGGY]  Node  n  =  getExpression(n.cloneTree());  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Node  n  =  getExpression(n.cloneTree());  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Node  n  =  getExpression(n.cloneTree());	  Node    n    =    getExpression(n.getFirstChild());    	non-compiled	[CE]  	45	None	replace
425	[BUG]  [BUGGY]  Node  n  =  getExpression(n.getFirstChild()  +  1);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Node  n  =  getExpression(n.getFirstChild()  +  1);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Node  n  =  getExpression(n.getFirstChild()  +  1);	  Node    n    =    getExpression(n.getFirstChild());    	non-compiled	[CE]  	45	None	replace
426	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  n.getFirstChild()!=  null);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  n.getFirstChild()!=  null);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  n.getFirstChild()!=  null);	  Preconditions.checkArgument(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	60	None	replace
427	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EMPTY);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EMPTY);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.EMPTY);	  Preconditions.checkArgument(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	60	None	replace
428	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  &&  n.getFirstChild()!=  null);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  &&  n.getFirstChild()!=  null);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  &&  n.getFirstChild()!=  null);	  Preconditions.checkArgument(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	60	None	replace
429	[BUG]  [BUGGY]  Predicates.checkState(n.getType()  ==  Token.EMPTY);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Predicates.checkState(n.getType()  ==  Token.EMPTY);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Predicates.checkState(n.getType()  ==  Token.EMPTY);	  Predicates.checkState(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	61	None	replace
430	[BUG]  [BUGGY]  Predicates.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getFirstChild()!=  null);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Predicates.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getFirstChild()!=  null);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Predicates.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getFirstChild()!=  null);	  Predicates.checkState(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	61	None	replace
431	[BUG]  [BUGGY]  Preconditions.checkState(isFoldExpressBlock(n),  n.getFirstChild().getType()  ==  Token.EXPR_RESULT);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(isFoldExpressBlock(n),  n.getFirstChild().getType()  ==  Token.EXPR_RESULT);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isFoldExpressBlock(n),  n.getFirstChild().getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(isFoldExpressBlock(n),    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	40	None	replace
432	[BUG]  [BUGGY]  Preconditions.checkState(isFallThrough(n),  n.getType()  ==  Token.EXPR_RESULT);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(isFallThrough(n),  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isFallThrough(n),  n.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(isFoldExpressBlock(n),    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	40	None	replace
433	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EMPTY  ||  n.getFirstChild()!=  null);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EMPTY  ||  n.getFirstChild()!=  null);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.EMPTY  ||  n.getFirstChild()!=  null);	  Preconditions.checkState(n.getType()    ==    Token.EMPTY);    	non-compiled	[CE]  	47	None	replace
434	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EMPTY  ||  n.getType()  ==  Token.STRING);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EMPTY  ||  n.getType()  ==  Token.STRING);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.EMPTY  ||  n.getType()  ==  Token.STRING);	  Preconditions.checkState(n.getType()    ==    Token.EMPTY);    	non-compiled	[CE]  	47	None	replace
435	[BUG]  [BUGGY]  Preconditions.checkState(isFoldToExpressBlock(n)||  n.getType()  ==  Token.EXPR_RESULT);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(isFoldToExpressBlock(n)||  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isFoldToExpressBlock(n)||  n.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(isFoldableExpressBlock(n)&&    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	37	None	replace
436	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  FoldArrayAction  <  Node>());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  FoldArrayAction  <  Node>());  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	NodeTraversal.traverse(compiler,  n,  new  FoldArrayAction  <  Node>());	  NodeTraversal.traverse(compiler,    n,    new    FoldArrayAction());    	non-compiled	[CE]  	58	None	replace
437	[BUG]  [BUGGY]  Preconditions.checkState(n.hasChildren()  &&  n.getType()!=  Token.BLOCK);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.hasChildren()  &&  n.getType()!=  Token.BLOCK);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.hasChildren()  &&  n.getType()!=  Token.BLOCK);	  Preconditions.checkState(n.getType()!=    Token.BLOCK);    	non-compiled	[CE]  	27	None	replace
438	[BUG]  [BUGGY]  Preconditions.checkState(n!=  null  &&  n.getType()!=  Token.BLOCK);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n!=  null  &&  n.getType()!=  Token.BLOCK);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n!=  null  &&  n.getType()!=  Token.BLOCK);	  Preconditions.checkState(n.getType()!=    Token.BLOCK);    	non-compiled	[CE]  	27	None	replace
439	[BUG]  [BUGGY]  Preconditions.checkState(n.hasChildren()  &&  n.getType()  ==  Token.BLOCK);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.hasChildren()  &&  n.getType()  ==  Token.BLOCK);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.hasChildren()  &&  n.getType()  ==  Token.BLOCK);	  Preconditions.checkState(n.getType()!=    Token.BLOCK);    	non-compiled	[CE]  	27	None	replace
440	[BUG]  [BUGGY]  Preconditions.checkState(isExpressionFolder(n)||  n.getType()  ==  Token.EXPR_RESULT,  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(isExpressionFolder(n)||  n.getType()  ==  Token.EXPR_RESULT,  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isExpressionFolder(n)||  n.getType()  ==  Token.EXPR_RESULT,  INVALID_REGULAR_EXPRESSION_FLAGS);	  Preconditions.checkState(isExpressionFolder(n)||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	63	None	replace
441	[BUG]  [BUGGY]  Preconditions.checkState(isFoldExpression(n)||  n.getType()  ==  Token.BLOCK);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(isFoldExpression(n)||  n.getType()  ==  Token.BLOCK);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isFoldExpression(n)||  n.getType()  ==  Token.BLOCK);	  Preconditions.checkState(isFoldExpression(n));    	non-compiled	[CE]  	23	None	replace
442	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  ||  n.getType()  ==  Token.GETELEM);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  ||  n.getType()  ==  Token.GETELEM);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  ||  n.getType()  ==  Token.GETELEM);	  Preconditions.checkArgument(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  	9	None	replace
443	[BUG]  [BUGGY]  Preconditions.checkArgument(!isExpressionTree(n));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkArgument(!isExpressionTree(n));  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkArgument(!isExpressionTree(n));	  Preconditions.checkState(!isExpressionTree(n));    	non-compiled	[CE]  	79	None	replace
444	[BUG]  [BUGGY]  Preconditions.checkState(!isExpressionTree(n)||  n.getType()  ==  Token.GETPROP);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(!isExpressionTree(n)||  n.getType()  ==  Token.GETPROP);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(!isExpressionTree(n)||  n.getType()  ==  Token.GETPROP);	  Preconditions.checkState(!isExpressionTree(n));    	non-compiled	[CE]  	79	None	replace
445	[BUG]  [BUGGY]  Preconditions.checkState(!isDeclaration(n));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(!isDeclaration(n));  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(!isDeclaration(n));	  Preconditions.checkState(!isVarDeclaration(n));    	non-compiled	[CE]  	52	None	replace
446	[BUG]  [BUGGY]  Preconditions.checkArgument(!isVarDeclaration(n));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkArgument(!isVarDeclaration(n));  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkArgument(!isVarDeclaration(n));	  Preconditions.checkState(!isVarDeclaration(n));    	non-compiled	[CE]  	52	None	replace
447	[BUG]  [BUGGY]  Preconditions.checkState(!isVarDeclaration(n)||  n.getType()  ==  Token.FUNCTION);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(!isVarDeclaration(n)||  n.getType()  ==  Token.FUNCTION);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(!isVarDeclaration(n)||  n.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(!isVarDeclaration(n));    	non-compiled	[CE]  	52	None	replace
448	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPRESSION);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPRESSION);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.EXPRESSION);	  Preconditions.checkState(n.getType()    ==    Token.EXPRESSION);    	non-compiled	[CE]  	26	None	replace
449	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPRESSION  ||  n.getFirstChild()!=  null);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPRESSION  ||  n.getFirstChild()!=  null);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPRESSION  ||  n.getFirstChild()!=  null);	  Preconditions.checkState(n.getType()    ==    Token.EXPRESSION);    	non-compiled	[CE]  	26	None	replace
450	[BUG]  [BUGGY]  Preconditions.checkArgument(!isImmutableExpressBlock(n));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkArgument(!isImmutableExpressBlock(n));  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkArgument(!isImmutableExpressBlock(n));	  Preconditions.checkArgument(!isFoldableExpressBlock(n));    	non-compiled	[CE]  	77	None	replace
451	[BUG]  [BUGGY]  Preconditions.checkArgument(!isFoldableExpressBlock(n)||  n.getType()  ==  Token.EXPR_RESULT);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkArgument(!isFoldableExpressBlock(n)||  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkArgument(!isFoldableExpressBlock(n)||  n.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkArgument(!isFoldableExpressBlock(n));    	non-compiled	[CE]  	77	None	replace
452	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CALL  ||  n.getFirstChild()!=  null);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CALL  ||  n.getFirstChild()!=  null);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.CALL  ||  n.getFirstChild()!=  null);	  Preconditions.checkState(n.getType()    ==    Token.CALL);    	non-compiled	[CE]  	19	None	replace
453	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CALL  &&  n.getFirstChild()!=  null);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CALL  &&  n.getFirstChild()!=  null);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.CALL  &&  n.getFirstChild()!=  null);	  Preconditions.checkState(n.getType()    ==    Token.CALL);    	non-compiled	[CE]  	19	None	replace
454	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CALL  ||  n.getFirstChild()  ==  null);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CALL  ||  n.getFirstChild()  ==  null);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.CALL  ||  n.getFirstChild()  ==  null);	  Preconditions.checkState(n.getType()    ==    Token.CALL);    	non-compiled	[CE]  	19	None	replace
455	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getChildCount()  >  2);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getChildCount()  >  2);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getChildCount()  >  2);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT    ||    n.getChildCount()    ==    2);    	non-compiled	[CE]  	48	None	replace
456	[BUG]  [BUGGY]  Preconditions.checkArgument(!isExpressionBlock(n));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkArgument(!isExpressionBlock(n));  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkArgument(!isExpressionBlock(n));	  Preconditions.checkArgument(!isFoldableExpressBlock(n));    	non-compiled	[CE]  	77	None	replace
457	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.BLOCK  &&  n.getFirstChild()  ==  n);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.BLOCK  &&  n.getFirstChild()  ==  n);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()!=  Token.BLOCK  &&  n.getFirstChild()  ==  n);	  Preconditions.checkState(n.getType()!=    Token.BLOCK);    	non-compiled	[CE]  	27	None	replace
458	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.EXPR_RESULT,  STANDARD_OBJECT_CONSTRUCTORS);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.EXPR_RESULT,  STANDARD_OBJECT_CONSTRUCTORS);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()!=  Token.EXPR_RESULT,  STANDARD_OBJECT_CONSTRUCTORS);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT,    STANDARD_OBJECT_CONSTRUCTORS);    	non-compiled	[CE]  	5	None	replace
459	[BUG]  [BUGGY]  Preconditions.checkState(isExpressBlock(n)||  n.getFirstChild()  ==  n);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(isExpressBlock(n)||  n.getFirstChild()  ==  n);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isExpressBlock(n)||  n.getFirstChild()  ==  n);	  Preconditions.checkState(isExpressBlock(n),    n.getFirstChild());    	non-compiled	[CE]  	80	None	replace
460	[BUG]  [BUGGY]  Preconditions.checkState(isExpressBlock(n),  n.getType()  ==  Token.VAR);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(isExpressBlock(n),  n.getType()  ==  Token.VAR);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isExpressBlock(n),  n.getType()  ==  Token.VAR);	  Preconditions.checkState(isExpressBlock(n),    n.getFirstChild());    	non-compiled	[CE]  	80	None	replace
461	[BUG]  [BUGGY]  Preconditions.checkState(isExpressionFold(n)||  n.getType()  ==  Token.EXPRESSION);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(isExpressionFold(n)||  n.getType()  ==  Token.EXPRESSION);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isExpressionFold(n)||  n.getType()  ==  Token.EXPRESSION);	  Preconditions.checkState(isFoldExpressBlock(n)||    n.getType()    ==    Token.EXPRESSION);    	non-compiled	[CE]  	54	None	replace
462	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.VAR);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.VAR);	  Preconditions.checkState(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  	24	None	replace
463	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.GETPROP);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.GETPROP);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.GETPROP);	  Preconditions.checkState(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  	24	None	replace
464	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.SCRIPT);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.SCRIPT);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.SCRIPT);	  Preconditions.checkState(n.getType()    ==    Token.VAR);    	non-compiled	[CE]  	24	None	replace
465	[BUG]  [BUGGY]  Preconditions.checkState(isFoldableExpressionBlock(n)||  n.getType()  ==  Token.EXPR_RESULT,  n.getFirstChild());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(isFoldableExpressionBlock(n)||  n.getType()  ==  Token.EXPR_RESULT,  n.getFirstChild());  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isFoldableExpressionBlock(n)||  n.getType()  ==  Token.EXPR_RESULT,  n.getFirstChild());	  Preconditions.checkState(isFoldableExpressionBlock(n)||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	18	None	replace
466	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EMPTY  ||  n.getType()  ==  Token.SCRIPT);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EMPTY  ||  n.getType()  ==  Token.SCRIPT);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.EMPTY  ||  n.getType()  ==  Token.SCRIPT);	  Preconditions.checkState(n.getType()    ==    Token.EMPTY);    	non-compiled	[CE]  	47	None	replace
467	[BUG]  [BUGGY]  Preconditions.checkState(isFoldableExpression(n)||  n.getType()  ==  Token.EXPR_RESULT,  n.getFirstChild());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(isFoldableExpression(n)||  n.getType()  ==  Token.EXPR_RESULT,  n.getFirstChild());  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isFoldableExpression(n)||  n.getType()  ==  Token.EXPR_RESULT,  n.getFirstChild());	  Preconditions.checkState(isFoldableExpression(n)||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	33	None	replace
468	[BUG]  [BUGGY]  Preconditions.checkState(isFoldableExpression(n)||  n.getType()  ==  Token.EXPR_RESULT  ||  n.getFirstChild()!=  null);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(isFoldableExpression(n)||  n.getType()  ==  Token.EXPR_RESULT  ||  n.getFirstChild()!=  null);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isFoldableExpression(n)||  n.getType()  ==  Token.EXPR_RESULT  ||  n.getFirstChild()!=  null);	  Preconditions.checkState(isFoldableExpression(n)||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	33	None	replace
469	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getFirstChild()  ==  Token.FUNCTION);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getFirstChild()  ==  Token.FUNCTION);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getFirstChild()  ==  Token.FUNCTION);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT    ||    n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	3	None	replace
470	[BUG]  [BUGGY]  Preconditions.checkArgument(isExpressBlock(n)||  n.getType()  ==  Token.VAR);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkArgument(isExpressBlock(n)||  n.getType()  ==  Token.VAR);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkArgument(isExpressBlock(n)||  n.getType()  ==  Token.VAR);	  Preconditions.checkState(isExpressBlock(n)||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  	66	None	replace
471	[BUG]  [BUGGY]  Preconditions.checkState(isExpressBlock(n)||  n.getType()  ==  Token.VAR  ||  n.getFirstChild()  ==  n);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(isExpressBlock(n)||  n.getType()  ==  Token.VAR  ||  n.getFirstChild()  ==  n);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isExpressBlock(n)||  n.getType()  ==  Token.VAR  ||  n.getFirstChild()  ==  n);	  Preconditions.checkState(isExpressBlock(n)||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  	66	None	replace
472	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n.getType()    ==    Token.FUNCTION);    	non-compiled	[CE]  	21	None	replace
473	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  new  FoldArrayAction());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  new  FoldArrayAction());  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	NodeTraversal.traverse(compiler,  n,  this,  new  FoldArrayAction());	  NodeTraversal.traverse(compiler,    n,    new    FoldArrayAction());    	non-compiled	[CE]  	58	None	replace
474	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  FoldArrayAction(),  INVALID_REGULAR_FLAGS);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  FoldArrayAction(),  INVALID_REGULAR_FLAGS);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	NodeTraversal.traverse(compiler,  n,  new  FoldArrayAction(),  INVALID_REGULAR_FLAGS);	  NodeTraversal.traverse(compiler,    n,    new    FoldArrayAction());    	non-compiled	[CE]  	58	None	replace
475	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK  ||  n.getFirstChild()  ==  Token.GETPROP);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK  ||  n.getFirstChild()  ==  Token.GETPROP);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.BLOCK  ||  n.getFirstChild()  ==  Token.GETPROP);	  Preconditions.checkState(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  	29	None	replace
476	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.BLOCK  ||  n.getFirstChild()  ==  n);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()!=  Token.BLOCK  ||  n.getFirstChild()  ==  n);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()!=  Token.BLOCK  ||  n.getFirstChild()  ==  n);	  Preconditions.checkState(n.getType()    ==    Token.BLOCK    ||    n.getFirstChild()    ==    n);    	non-compiled	[CE]  	69	None	replace
477	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  n.removeFirstChild());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  n.removeFirstChild());  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  n.removeFirstChild());	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT,    n.getFirstChild());    	non-compiled	[CE]  	2	None	replace
478	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  n.getOwnerDocument());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  n.getOwnerDocument());  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  n.getOwnerDocument());	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT,    n.getFirstChild());    	non-compiled	[CE]  	2	None	replace
479	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.VAR);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.VAR);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.VAR);	  Preconditions.checkArgument(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	60	None	replace
480	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.BLOCK  ||  n.getFirstChild()  ==  null);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.BLOCK  ||  n.getFirstChild()  ==  null);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkArgument(n.getType()!=  Token.BLOCK  ||  n.getFirstChild()  ==  null);	  Preconditions.checkArgument(n.getType()    ==    Token.BLOCK    ||    n.getFirstChild()!=    null);    	non-compiled	[CE]  	55	None	replace
481	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  n.toString());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  n.toString());  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  n.toString());	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT,    n.getString());    	non-compiled	[CE]  	4	None	replace
482	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPRESSION  ||  n.getFirstChild()  ==  n);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPRESSION  ||  n.getFirstChild()  ==  n);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPRESSION  ||  n.getFirstChild()  ==  n);	  Preconditions.checkState(n.getType()    ==    Token.EXPRESSION);    	non-compiled	[CE]  	26	None	replace
483	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK  ||  n.getType()  ==  Token.EMPTY);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK  ||  n.getType()  ==  Token.EMPTY);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.BLOCK  ||  n.getType()  ==  Token.EMPTY);	  Preconditions.checkState(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	28	None	replace
484	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CATCH  ||  n.getFirstChild()  ==  n);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CATCH  ||  n.getFirstChild()  ==  n);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.CATCH  ||  n.getFirstChild()  ==  n);	  Preconditions.checkState(n.getType()    ==    Token.CATCH);    	non-compiled	[CE]  	67	None	replace
485	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CATCH  ||  n.getType()  ==  Token.VAR);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CATCH  ||  n.getType()  ==  Token.VAR);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.CATCH  ||  n.getType()  ==  Token.VAR);	  Preconditions.checkState(n.getType()    ==    Token.CATCH);    	non-compiled	[CE]  	67	None	replace
486	[BUG]  [BUGGY]  Preconditions.checkState(isExpressionTree(n)||  n.getType()  ==  Token.EXPR_RESULT);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(isExpressionTree(n)||  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isExpressionTree(n)||  n.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(isFallThrough(n)||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	62	None	replace
487	[BUG]  [BUGGY]  Preconditions.checkState(isFunction(n)||  n.getType()  ==  Token.EXPR_RESULT);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(isFunction(n)||  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isFunction(n)||  n.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(isFallThrough(n)||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	62	None	replace
488	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CATCH  ||  n.getType()  ==  Token.SCRIPT);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CATCH  ||  n.getType()  ==  Token.SCRIPT);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.CATCH  ||  n.getType()  ==  Token.SCRIPT);	  Preconditions.checkState(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.SCRIPT);    	non-compiled	[CE]  	30	None	replace
489	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK  &&  n.getFirstChild());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK  &&  n.getFirstChild());  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.BLOCK  &&  n.getFirstChild());	  Preconditions.checkState(n.getType()    ==    Token.BLOCK,    n.getFirstChild());    	non-compiled	[CE]  	32	None	replace
490	[BUG]  [BUGGY]  Preconditions.checkState(isBlockExpression(n)||  n.getType()  ==  Token.EXPR_RESULT,  n.getFirstChild());  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(isBlockExpression(n)||  n.getType()  ==  Token.EXPR_RESULT,  n.getFirstChild());  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isBlockExpression(n)||  n.getType()  ==  Token.EXPR_RESULT,  n.getFirstChild());	  Preconditions.checkState(isBlockExpression(n)||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	36	None	replace
491	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CALL  ||  n.getFirstChild()  ==  n);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CALL  ||  n.getFirstChild()  ==  n);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.CALL  ||  n.getFirstChild()  ==  n);	  Preconditions.checkState(n.getType()    ==    Token.CALL);    	non-compiled	[CE]  	19	None	replace
492	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CALL  ||  n.getType()  ==  Token.FUNCTION);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CALL  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.CALL  ||  n.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n.getType()    ==    Token.CALL);    	non-compiled	[CE]  	19	None	replace
493	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CALL  ||  n.getType()  ==  Token.VAR);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CALL  ||  n.getType()  ==  Token.VAR);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.CALL  ||  n.getType()  ==  Token.VAR);	  Preconditions.checkState(n.getType()    ==    Token.CALL);    	non-compiled	[CE]  	19	None	replace
494	[BUG]  [BUGGY]  Predicates.checkArgument(n.getType()  ==  Token.EXPR_RESULT);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Predicates.checkArgument(n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Predicates.checkArgument(n.getType()  ==  Token.EXPR_RESULT);	  Predicates.checkState(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	61	None	replace
495	[BUG]  [BUGGY]  Predicates.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.VAR);  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Predicates.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.VAR);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Predicates.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.VAR);	  Predicates.checkState(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	61	None	replace
496	[BUG]  [BUGGY]  Node  n  =  getBlockExpression(n.removeFirstChild());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Node  n  =  getBlockExpression(n.removeFirstChild());  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Node  n  =  getBlockExpression(n.removeFirstChild());	  Node    n    =    getBlockExpression(n.getFirstChild());    	non-compiled	[CE]  	43	None	replace
497	[BUG]  [BUGGY]  Preconditions.checkState(!isExpressionRequired(n)||  n.getType()  ==  Token.EXPR_RESULT);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(!isExpressionRequired(n)||  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(!isExpressionRequired(n)||  n.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(!isFoldableExpressBlock(n)||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	15	None	replace
498	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  ||  n.getFirstChild()  ==  Token.EXPR_RESULT);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  ||  n.getFirstChild()  ==  Token.EXPR_RESULT);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  ||  n.getFirstChild()  ==  Token.EXPR_RESULT);	  Preconditions.checkArgument(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	8	None	replace
499	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.NAME);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.NAME);	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  	50	None	replace
500	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getFirstChild()  ==  n);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getFirstChild()  ==  n);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getFirstChild()  ==  n);	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  	50	None	replace
501	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getChildCount()  ==  1);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getChildCount()  ==  1);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME  ||  n.getChildCount()  ==  1);	  Preconditions.checkState(n.getType()    ==    Token.NAME);    	non-compiled	[CE]  	50	None	replace
502	[BUG]  [BUGGY]  Preconditions.checkArgument(isFallThrough(n)||  isFallThrough(n));  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkArgument(isFallThrough(n)||  isFallThrough(n));  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkArgument(isFallThrough(n)||  isFallThrough(n));	  Preconditions.checkState(isFallThrough(n)||    isFallThrough(n));    	non-compiled	[CE]  	20	None	replace
503	[BUG]  [BUGGY]  Preconditions.checkState(isFallThrough(n)||  isFallThrough(n),  STANDARD_OBJECT_CONSTRUCTORS);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(isFallThrough(n)||  isFallThrough(n),  STANDARD_OBJECT_CONSTRUCTORS);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isFallThrough(n)||  isFallThrough(n),  STANDARD_OBJECT_CONSTRUCTORS);	  Preconditions.checkState(isFallThrough(n)||    isFallThrough(n));    	non-compiled	[CE]  	20	None	replace
504	[BUG]  [BUGGY]  Preconditions.checkState(isFallThrough(n)||  isFallThrough(n,  STANDARD_OBJECT_CONSTRUCTORS));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(isFallThrough(n)||  isFallThrough(n,  STANDARD_OBJECT_CONSTRUCTORS));  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isFallThrough(n)||  isFallThrough(n,  STANDARD_OBJECT_CONSTRUCTORS));	  Preconditions.checkState(isFallThrough(n)||    isFallThrough(n));    	non-compiled	[CE]  	20	None	replace
505	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT)||  n.getFirstChild()  ==  null);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT)||  n.getFirstChild()  ==  null);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT)||  n.getFirstChild()  ==  null);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT    ||    n.getFirstChild()!=    null);    	non-compiled	[CE]  	46	None	replace
506	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  ||  n.getChildCount()  >  2);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  ||  n.getChildCount()  >  2);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  ||  n.getChildCount()  >  2);	  Preconditions.checkArgument(n.getType()    ==    Token.BLOCK    ||    n.getChildCount()    ==    2);    	non-compiled	[CE]  	57	None	replace
507	[BUG]  [BUGGY]  Preconditions.checkState(!isExpressionRequired(n));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(!isExpressionRequired(n));  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(!isExpressionRequired(n));	  Preconditions.checkState(!isImmutableExpressBlock(n));    	non-compiled	[CE]  	51	None	replace
508	[BUG]  [BUGGY]  Preconditions.checkArgument(isExpressBlock(n)||  n.getType()  ==  Token.EXPRESSION);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkArgument(isExpressBlock(n)||  n.getType()  ==  Token.EXPRESSION);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkArgument(isExpressBlock(n)||  n.getType()  ==  Token.EXPRESSION);	  Preconditions.checkState(isExpressBlock(n)||    n.getType()    ==    Token.EXPRESSION);    	non-compiled	[CE]  	64	None	replace
509	[BUG]  [BUGGY]  Preconditions.checkState(isExpressBlock(n)||  n.getType()  ==  Token.EXPRESSION  ||  n.getFirstChild()  ==  n);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(isExpressBlock(n)||  n.getType()  ==  Token.EXPRESSION  ||  n.getFirstChild()  ==  n);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isExpressBlock(n)||  n.getType()  ==  Token.EXPRESSION  ||  n.getFirstChild()  ==  n);	  Preconditions.checkState(isExpressBlock(n)||    n.getType()    ==    Token.EXPRESSION);    	non-compiled	[CE]  	64	None	replace
510	[BUG]  [BUGGY]  Preconditions.checkState(isExpressBlock(n)||  n.getType()  ==  Token.EXPR_RESULT,  n.getFirstChild());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(isExpressBlock(n)||  n.getType()  ==  Token.EXPR_RESULT,  n.getFirstChild());  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isExpressBlock(n)||  n.getType()  ==  Token.EXPR_RESULT,  n.getFirstChild());	  Preconditions.checkState(isExpressBlock(n)||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	35	None	replace
511	[BUG]  [BUGGY]  Preconditions.checkArgument(isExpressBlock(n)||  n.getType()  ==  Token.EXPR_RESULT);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkArgument(isExpressBlock(n)||  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkArgument(isExpressBlock(n)||  n.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(isExpressBlock(n)||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	35	None	replace
512	[BUG]  [BUGGY]  Preconditions.checkState(isExpressBlock(n)||  n.getType()  ==  Token.EXPR_RESULT  ||  n.getFirstChild()!=  null);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(isExpressBlock(n)||  n.getType()  ==  Token.EXPR_RESULT  ||  n.getFirstChild()!=  null);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isExpressBlock(n)||  n.getType()  ==  Token.EXPR_RESULT  ||  n.getFirstChild()!=  null);	  Preconditions.checkState(isExpressBlock(n)||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	35	None	replace
513	[BUG]  [BUGGY]  Node  n  =  getExpression(n.removeFirstChild());  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Node  n  =  getExpression(n.removeFirstChild());  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Node  n  =  getExpression(n.removeFirstChild());	  Node    n    =    getExpression(n.getFirstChild());    	non-compiled	[CE]  	45	None	replace
514	[BUG]  [BUGGY]  Node  n  =(n.getFirstChild()  ==  null)?  n.getLastChild()  :  n;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Node  n  =(n.getFirstChild()  ==  null)?  n.getLastChild()  :  n;  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Node  n  =(n.getFirstChild()  ==  null)?  n.getLastChild()  :  n;	  Node    n    =    n.getLastChild();    	non-compiled	[CE]  	42	None	replace
515	[BUG]  [BUGGY]  Node  n  =(n.getFirstChild()  ==  null)?  null  :  n.getLastChild();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Node  n  =(n.getFirstChild()  ==  null)?  null  :  n.getLastChild();  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Node  n  =(n.getFirstChild()  ==  null)?  null  :  n.getLastChild();	  Node    n    =    n.getLastChild();    	non-compiled	[CE]  	42	None	replace
516	[BUG]  [BUGGY]  Node  n  =(n.getFirstChild()!=  null)?  n.getLastChild()  :  n;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Node  n  =(n.getFirstChild()!=  null)?  n.getLastChild()  :  n;  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Node  n  =(n.getFirstChild()!=  null)?  n.getLastChild()  :  n;	  Node    n    =    n.getLastChild();    	non-compiled	[CE]  	42	None	replace
517	[BUG]  [BUGGY]  Node  n  =(n.getFirstChild()  ==  null)?  n  :  n.getLastChild();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Node  n  =(n.getFirstChild()  ==  null)?  n  :  n.getLastChild();  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Node  n  =(n.getFirstChild()  ==  null)?  n  :  n.getLastChild();	  Node    n    =    n.getLastChild();    	non-compiled	[CE]  	42	None	replace
518	[BUG]  [BUGGY]  Node  n  =(n.getFirstChild()  ==  null)?  this  :  n.getLastChild();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Node  n  =(n.getFirstChild()  ==  null)?  this  :  n.getLastChild();  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Node  n  =(n.getFirstChild()  ==  null)?  this  :  n.getLastChild();	  Node    n    =    n.getLastChild();    	non-compiled	[CE]  	42	None	replace
519	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  ||  n.getFirstChild()  ==  Token.VAR);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  ||  n.getFirstChild()  ==  Token.VAR);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  ||  n.getFirstChild()  ==  Token.VAR);	  Preconditions.checkArgument(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  	75	None	replace
520	[BUG]  [BUGGY]  Preconditions.checkState(isFoldExpressBlock(n)||  n.getFirstChild()  ==  n);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(isFoldExpressBlock(n)||  n.getFirstChild()  ==  n);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isFoldExpressBlock(n)||  n.getFirstChild()  ==  n);	  Preconditions.checkState(isFoldExpressBlock(n),    n.getFirstChild());    	non-compiled	[CE]  	68	None	replace
521	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.EXPR_RESULT);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.VAR  ||  n.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT    ||    n.getType()    ==    Token.VAR);    	non-compiled	[CE]  	71	None	replace
522	[BUG]  [BUGGY]  Preconditions.checkState(isExpressionBlock(n)||  n.getType()  ==  Token.EXPR_RESULT,  n.getFirstChild());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(isExpressionBlock(n)||  n.getType()  ==  Token.EXPR_RESULT,  n.getFirstChild());  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isExpressionBlock(n)||  n.getType()  ==  Token.EXPR_RESULT,  n.getFirstChild());	  Preconditions.checkState(isExpressionBlock(n)||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	76	None	replace
523	[BUG]  [BUGGY]  Preconditions.checkArgument(isExpressionBlock(n)||  n.getType()  ==  Token.EXPR_RESULT);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkArgument(isExpressionBlock(n)||  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkArgument(isExpressionBlock(n)||  n.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(isExpressionBlock(n)||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	76	None	replace
524	[BUG]  [BUGGY]  Preconditions.checkState(isExpressionBlock(n)||  n.getType()  ==  Token.EXPR_RESULT  ||  n.getFirstChild()!=  null);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(isExpressionBlock(n)||  n.getType()  ==  Token.EXPR_RESULT  ||  n.getFirstChild()!=  null);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isExpressionBlock(n)||  n.getType()  ==  Token.EXPR_RESULT  ||  n.getFirstChild()!=  null);	  Preconditions.checkState(isExpressionBlock(n)||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	76	None	replace
525	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  REGEXP_FLAGS_RE);  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  REGEXP_FLAGS_RE);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	NodeTraversal.traverse(compiler,  n,  this,  REGEXP_FLAGS_RE);	  NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  	59	None	replace
526	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  READARD_OBJECT_CONSTRUCTORS);  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  NodeTraversal.traverse(compiler,  n,  this,  READARD_OBJECT_CONSTRUCTORS);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	NodeTraversal.traverse(compiler,  n,  this,  READARD_OBJECT_CONSTRUCTORS);	  NodeTraversal.traverse(compiler,    n,    this);    	non-compiled	[CE]  	59	None	replace
527	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK  ||  n.getChildCount()  ==  1);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK  ||  n.getChildCount()  ==  1);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.BLOCK  ||  n.getChildCount()  ==  1);	  Preconditions.checkState(n.getType()    ==    Token.BLOCK    ||    n.getFirstChild()!=    null);    	non-compiled	[CE]  	49	None	replace
528	[BUG]  [BUGGY]  Node  n  =  n.getOwnerDocument();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Node  n  =  n.getOwnerDocument();  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Node  n  =  n.getOwnerDocument();	  Node    n    =    n.getFirstChild();    	non-compiled	[CE]  	41	None	replace
529	[BUG]  [BUGGY]  Preconditions.checkState(isExpressionFolder(n)||  n.getType()  ==  Token.EXPR_RESULT,  n.getFirstChild());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(isExpressionFolder(n)||  n.getType()  ==  Token.EXPR_RESULT,  n.getFirstChild());  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isExpressionFolder(n)||  n.getType()  ==  Token.EXPR_RESULT,  n.getFirstChild());	  Preconditions.checkState(isExpressionFolder(n)||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	63	None	replace
530	[BUG]  [BUGGY]  Preconditions.checkArgument(isExpressionFolder(n)||  n.getType()  ==  Token.EXPR_RESULT);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkArgument(isExpressionFolder(n)||  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkArgument(isExpressionFolder(n)||  n.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(isExpressionFolder(n)||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	63	None	replace
531	[BUG]  [BUGGY]  Preconditions.checkState(isExpressionFolder(n)||  n.getType()  ==  Token.EXPR_RESULT;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(isExpressionFolder(n)||  n.getType()  ==  Token.EXPR_RESULT;  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isExpressionFolder(n)||  n.getType()  ==  Token.EXPR_RESULT;	  Preconditions.checkState(isExpressionFolder(n)||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	63	None	replace
532	[BUG]  [BUGGY]  Preconditions.checkState(isExpressionFolder(n)||  n.getType()  ==  Token.EXPR_RESULT  ||  n.getFirstChild()!=  null);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(isExpressionFolder(n)||  n.getType()  ==  Token.EXPR_RESULT  ||  n.getFirstChild()!=  null);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isExpressionFolder(n)||  n.getType()  ==  Token.EXPR_RESULT  ||  n.getFirstChild()!=  null);	  Preconditions.checkState(isExpressionFolder(n)||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	63	None	replace
533	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  ||  n.getFirstChild()  ==  Token.CATCH);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  ||  n.getFirstChild()  ==  Token.CATCH);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  ||  n.getFirstChild()  ==  Token.CATCH);	  Preconditions.checkArgument(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.CATCH);    	non-compiled	[CE]  	74	None	replace
534	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  ||  n.getType()  ==  Token.GETPROP,  n.getFirstChild());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  ||  n.getType()  ==  Token.GETPROP,  n.getFirstChild());  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  ||  n.getType()  ==  Token.GETPROP,  n.getFirstChild());	  Preconditions.checkArgument(n.getType()    ==    Token.BLOCK    ||    n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  	9	None	replace
535	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.BLOCK  ||  n.getFirstChild()  ==  n);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.BLOCK  ||  n.getFirstChild()  ==  n);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkArgument(n.getType()!=  Token.BLOCK  ||  n.getFirstChild()  ==  n);	  Preconditions.checkArgument(n.getType()!=    Token.BLOCK);    	non-compiled	[CE]  	7	None	replace
536	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  ||  n.hasOneChild());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  ||  n.hasOneChild());  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  ||  n.hasOneChild());	  Preconditions.checkArgument(n.getType()    ==    Token.BLOCK    ||    n.hasChildren());    	non-compiled	[CE]  	56	None	replace
537	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  ||  n.hasChildren();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  ||  n.hasChildren();  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  ||  n.hasChildren();	  Preconditions.checkArgument(n.getType()    ==    Token.BLOCK    ||    n.hasChildren());    	non-compiled	[CE]  	56	None	replace
538	[BUG]  [BUGGY]  Preconditions.checkState(isExpressBlock(n)||  n.getType()  ==  Token.GETPROP  ||  n.getFirstChild()  ==  n);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(isExpressBlock(n)||  n.getType()  ==  Token.GETPROP  ||  n.getFirstChild()  ==  n);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isExpressBlock(n)||  n.getType()  ==  Token.GETPROP  ||  n.getFirstChild()  ==  n);	  Preconditions.checkState(isExpressBlock(n)||    n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  	65	None	replace
539	[BUG]  [BUGGY]  Preconditions.checkState(isExpressBlock(n)||  n.getType()  ==  Token.GETPROP,  n);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  getBlockExpression(Node  n)  {      [BUGGY]  Preconditions.checkState(isExpressBlock(n)||  n.getType()  ==  Token.GETPROP,  n);  [BUGGY]      return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isExpressBlock(n)||  n.getType()  ==  Token.GETPROP,  n);	  Preconditions.checkState(isExpressBlock(n)||    n.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  	65	None	replace
