bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.EXPR_RESULT);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  Node  getBlockExpression(Node  n)  {    [BUGGY]  Preconditions.checkState(n.getType()!=  Token.EXPR_RESULT);  [BUGGY]    return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()!=  Token.EXPR_RESULT);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	1	None	replace
2	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  n.getFirstChild());  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  Node  getBlockExpression(Node  n)  {    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  n.getFirstChild());  [BUGGY]    return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  n.getFirstChild());	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	1	None	replace
3	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.FUNCTION);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  Node  getBlockExpression(Node  n)  {    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]    return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	1	None	replace
4	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  n.getString());  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  Node  getBlockExpression(Node  n)  {    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  n.getString());  [BUGGY]    return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  n.getString());	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	1	None	replace
5	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  STANDARD_OBJECT_CONSTRUCTORS);  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  Node  getBlockExpression(Node  n)  {    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  STANDARD_OBJECT_CONSTRUCTORS);  [BUGGY]    return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT,  STANDARD_OBJECT_CONSTRUCTORS);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	1	None	replace
6	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.BLOCK);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  getBlockExpression(Node  n)  {    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.BLOCK);  [BUGGY]    return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.BLOCK);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	1	None	replace
7	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.BLOCK);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  Node  getBlockExpression(Node  n)  {    [BUGGY]  Preconditions.checkArgument(n.getType()!=  Token.BLOCK);  [BUGGY]    return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkArgument(n.getType()!=  Token.BLOCK);	  Preconditions.checkArgument(n.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  	11	None	replace
8	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  ||  n.getType()  ==  Token.EXPR_RESULT);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  Node  getBlockExpression(Node  n)  {    [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  ||  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]    return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  ||  n.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkArgument(n.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  	11	None	replace
9	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  ||  n.getType()  ==  Token.GETPROP);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  Node  getBlockExpression(Node  n)  {    [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  ||  n.getType()  ==  Token.GETPROP);  [BUGGY]    return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  ||  n.getType()  ==  Token.GETPROP);	  Preconditions.checkArgument(n.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  	11	None	replace
10	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  ||  n.getType()  ==  Token.FUNCTION);  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  Node  getBlockExpression(Node  n)  {    [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]    return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  ||  n.getType()  ==  Token.FUNCTION);	  Preconditions.checkArgument(n.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  	11	None	replace
11	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK,  n.getFirstChild());  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  getBlockExpression(Node  n)  {    [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK,  n.getFirstChild());  [BUGGY]    return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.BLOCK,  n.getFirstChild());	  Preconditions.checkArgument(n.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  	11	None	replace
12	[BUG]  [BUGGY]  Preconditions.checkState(!isFoldableExpression(n));  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  Node  getBlockExpression(Node  n)  {    [BUGGY]  Preconditions.checkState(!isFoldableExpression(n));  [BUGGY]    return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(!isFoldableExpression(n));	  Preconditions.checkState(!isFoldableExpressBlock(n));    	non-compiled	[CE]  	4	None	replace
13	[BUG]  [BUGGY]  Preconditions.checkState(!isFallThrough(n));  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  Node  getBlockExpression(Node  n)  {    [BUGGY]  Preconditions.checkState(!isFallThrough(n));  [BUGGY]    return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(!isFallThrough(n));	  Preconditions.checkState(!isFoldableExpressBlock(n));    	non-compiled	[CE]  	4	None	replace
14	[BUG]  [BUGGY]  Preconditions.checkState(!isFoldableExpressionBlock(n));  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  getBlockExpression(Node  n)  {    [BUGGY]  Preconditions.checkState(!isFoldableExpressionBlock(n));  [BUGGY]    return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(!isFoldableExpressionBlock(n));	  Preconditions.checkState(!isFoldableExpressBlock(n));    	non-compiled	[CE]  	4	None	replace
15	[BUG]  [BUGGY]  Preconditions.checkState(!isFoldableExpressBlock(n)||  n.getType()  ==  Token.EXPR_RESULT);  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    private  Node  getBlockExpression(Node  n)  {    [BUGGY]  Preconditions.checkState(!isFoldableExpressBlock(n)||  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]    return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(!isFoldableExpressBlock(n)||  n.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(!isFoldableExpressBlock(n));    	non-compiled	[CE]  	4	None	replace
16	[BUG]  [BUGGY]  Preconditions.checkState(isExpressionBlock(n));  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  getBlockExpression(Node  n)  {    [BUGGY]  Preconditions.checkState(isExpressionBlock(n));  [BUGGY]    return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isExpressionBlock(n));	  Preconditions.checkState(isFoldableExpressionBlock(n));    	non-compiled	[CE]  	6	None	replace
17	[BUG]  [BUGGY]  Preconditions.checkState(isFoldExpressionBlock(n));  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    private  Node  getBlockExpression(Node  n)  {    [BUGGY]  Preconditions.checkState(isFoldExpressionBlock(n));  [BUGGY]    return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isFoldExpressionBlock(n));	  Preconditions.checkState(isFoldableExpressionBlock(n));    	non-compiled	[CE]  	6	None	replace
18	[BUG]  [BUGGY]  Preconditions.checkState(isFoldableExpressionBlock(n)||  n.getType()  ==  Token.EXPR_RESULT);  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    private  Node  getBlockExpression(Node  n)  {    [BUGGY]  Preconditions.checkState(isFoldableExpressionBlock(n)||  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]    return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isFoldableExpressionBlock(n)||  n.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(isFoldableExpressionBlock(n));    	non-compiled	[CE]  	6	None	replace
19	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CALL);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  Node  getBlockExpression(Node  n)  {    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CALL);  [BUGGY]    return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.CALL);	  Preconditions.checkState(isFallThrough(n));    	non-compiled	[CE]  	10	None	replace
20	[BUG]  [BUGGY]  Preconditions.checkState(isFallThrough(n)||  isFallThrough(n));  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  Node  getBlockExpression(Node  n)  {    [BUGGY]  Preconditions.checkState(isFallThrough(n)||  isFallThrough(n));  [BUGGY]    return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isFallThrough(n)||  isFallThrough(n));	  Preconditions.checkState(isFallThrough(n));    	non-compiled	[CE]  	10	None	replace
21	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  Node  getBlockExpression(Node  n)  {    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.FUNCTION);  [BUGGY]    return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(isFallThrough(n));    	non-compiled	[CE]  	10	None	replace
22	[BUG]  [BUGGY]  Preconditions.checkState(isFinally(n));  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  Node  getBlockExpression(Node  n)  {    [BUGGY]  Preconditions.checkState(isFinally(n));  [BUGGY]    return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isFinally(n));	  Preconditions.checkState(isFallThrough(n));    	non-compiled	[CE]  	10	None	replace
23	[BUG]  [BUGGY]  Preconditions.checkState(isFoldExpression(n));  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  Node  getBlockExpression(Node  n)  {    [BUGGY]  Preconditions.checkState(isFoldExpression(n));  [BUGGY]    return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isFoldExpression(n));	  Preconditions.checkState(isFoldableExpression(n));    	non-compiled	[CE]  	2	None	replace
24	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  Node  getBlockExpression(Node  n)  {    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.VAR);  [BUGGY]    return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.VAR);	  Preconditions.checkState(isFoldableExpression(n));    	non-compiled	[CE]  	2	None	replace
25	[BUG]  [BUGGY]  Preconditions.checkState(!isExpressBlock(n));  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  Node  getBlockExpression(Node  n)  {    [BUGGY]  Preconditions.checkState(!isExpressBlock(n));  [BUGGY]    return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(!isExpressBlock(n));	  Preconditions.checkState(isExpressBlock(n));    	non-compiled	[CE]  	8	None	replace
26	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPRESSION);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  Node  getBlockExpression(Node  n)  {    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPRESSION);  [BUGGY]    return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPRESSION);	  Preconditions.checkState(isExpressBlock(n));    	non-compiled	[CE]  	8	None	replace
27	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()!=  Token.BLOCK);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  Node  getBlockExpression(Node  n)  {    [BUGGY]  Preconditions.checkState(n.getType()!=  Token.BLOCK);  [BUGGY]    return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()!=  Token.BLOCK);	  Preconditions.checkState(n.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  	3	None	replace
28	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK  ||  n.getType()  ==  Token.EXPR_RESULT);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  Node  getBlockExpression(Node  n)  {    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK  ||  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]    return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.BLOCK  ||  n.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(n.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  	3	None	replace
29	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK  ||  n.getType()  ==  Token.GETPROP);  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  Node  getBlockExpression(Node  n)  {    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK  ||  n.getType()  ==  Token.GETPROP);  [BUGGY]    return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.BLOCK  ||  n.getType()  ==  Token.GETPROP);	  Preconditions.checkState(n.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  	3	None	replace
30	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK  ||  n.getType()  ==  Token.SCRIPT);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  getBlockExpression(Node  n)  {    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK  ||  n.getType()  ==  Token.SCRIPT);  [BUGGY]    return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.BLOCK  ||  n.getType()  ==  Token.SCRIPT);	  Preconditions.checkState(n.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  	3	None	replace
31	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK  ||  n.getType()  ==  Token.FUNCTION);  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    private  Node  getBlockExpression(Node  n)  {    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK  ||  n.getType()  ==  Token.FUNCTION);  [BUGGY]    return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.BLOCK  ||  n.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(n.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  	3	None	replace
32	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK,  n.getFirstChild());  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    private  Node  getBlockExpression(Node  n)  {    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK,  n.getFirstChild());  [BUGGY]    return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.BLOCK,  n.getFirstChild());	  Preconditions.checkState(n.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  	3	None	replace
33	[BUG]  [BUGGY]  Preconditions.checkState(isFoldableExpression(n)||  n.getType()  ==  Token.EXPR_RESULT);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  Node  getBlockExpression(Node  n)  {    [BUGGY]  Preconditions.checkState(isFoldableExpression(n)||  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]    return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isFoldableExpression(n)||  n.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(isFoldableExpressBlock(n)||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	9	None	replace
34	[BUG]  [BUGGY]  Preconditions.checkState(isFoldableExpressBlock(n)||  n.getType()!=  Token.EXPR_RESULT);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  Node  getBlockExpression(Node  n)  {    [BUGGY]  Preconditions.checkState(isFoldableExpressBlock(n)||  n.getType()!=  Token.EXPR_RESULT);  [BUGGY]    return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isFoldableExpressBlock(n)||  n.getType()!=  Token.EXPR_RESULT);	  Preconditions.checkState(isFoldableExpressBlock(n)||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	9	None	replace
35	[BUG]  [BUGGY]  Preconditions.checkState(isExpressBlock(n)||  n.getType()  ==  Token.EXPR_RESULT);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  Node  getBlockExpression(Node  n)  {    [BUGGY]  Preconditions.checkState(isExpressBlock(n)||  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]    return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isExpressBlock(n)||  n.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(isFoldableExpressBlock(n)||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	9	None	replace
36	[BUG]  [BUGGY]  Preconditions.checkState(isBlockExpression(n)||  n.getType()  ==  Token.EXPR_RESULT);  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  Node  getBlockExpression(Node  n)  {    [BUGGY]  Preconditions.checkState(isBlockExpression(n)||  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]    return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isBlockExpression(n)||  n.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(isFoldableExpressBlock(n)||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	9	None	replace
37	[BUG]  [BUGGY]  Preconditions.checkState(isFoldableExpressBlock(n)&&  n.getType()  ==  Token.EXPR_RESULT);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  getBlockExpression(Node  n)  {    [BUGGY]  Preconditions.checkState(isFoldableExpressBlock(n)&&  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]    return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isFoldableExpressBlock(n)&&  n.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(isFoldableExpressBlock(n)||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	9	None	replace
38	[BUG]  [BUGGY]  Preconditions.checkState(!isFoldExpressBlock(n));  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  Node  getBlockExpression(Node  n)  {    [BUGGY]  Preconditions.checkState(!isFoldExpressBlock(n));  [BUGGY]    return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(!isFoldExpressBlock(n));	  Preconditions.checkState(isFoldExpressBlock(n));    	non-compiled	[CE]  	5	None	replace
39	[BUG]  [BUGGY]  Preconditions.checkState(isFoldExpressBlock(n)||  n.getType()  ==  Token.EXPR_RESULT);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  getBlockExpression(Node  n)  {    [BUGGY]  Preconditions.checkState(isFoldExpressBlock(n)||  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]    return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isFoldExpressBlock(n)||  n.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(isFoldExpressBlock(n));    	non-compiled	[CE]  	5	None	replace
40	[BUG]  [BUGGY]  Preconditions.checkState(isFoldExpressBlock(n),  n.getType()  ==  Token.EXPR_RESULT);  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    private  Node  getBlockExpression(Node  n)  {    [BUGGY]  Preconditions.checkState(isFoldExpressBlock(n),  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]    return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isFoldExpressBlock(n),  n.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(isFoldExpressBlock(n));    	non-compiled	[CE]  	5	None	replace
41	[BUG]  [BUGGY]  Node  n  =  n.getFirstChild();  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    private  Node  getBlockExpression(Node  n)  {    [BUGGY]  Node  n  =  n.getFirstChild();  [BUGGY]    return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Node  n  =  n.getFirstChild();	      	non-compiled	[CE]  	7	None	replace
42	[BUG]  [BUGGY]  Node  n  =  n.getLastChild();  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    private  Node  getBlockExpression(Node  n)  {    [BUGGY]  Node  n  =  n.getLastChild();  [BUGGY]    return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Node  n  =  n.getLastChild();	      	non-compiled	[CE]  	7	None	replace
43	[BUG]  [BUGGY]  Node  n  =  getBlockExpression(n.getFirstChild());  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    private  Node  getBlockExpression(Node  n)  {    [BUGGY]  Node  n  =  getBlockExpression(n.getFirstChild());  [BUGGY]    return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Node  n  =  getBlockExpression(n.getFirstChild());	      	non-compiled	[CE]  	7	None	replace
44	[BUG]  [BUGGY]  Node  n  =  getBlockExpression(n);  [CE]  [FE]                          AssertionFailedError    [CONTEXT]    private  Node  getBlockExpression(Node  n)  {    [BUGGY]  Node  n  =  getBlockExpression(n);  [BUGGY]    return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Node  n  =  getBlockExpression(n);	      	non-compiled	[CE]  	7	None	replace
45	[BUG]  [BUGGY]  Node  n  =  getExpression(n.getFirstChild());  [CE]  [FE]                            AssertionFailedError    [CONTEXT]    private  Node  getBlockExpression(Node  n)  {    [BUGGY]  Node  n  =  getExpression(n.getFirstChild());  [BUGGY]    return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Node  n  =  getExpression(n.getFirstChild());	      	non-compiled	[CE]  	7	None	replace
46	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getFirstChild()!=  null);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  Node  getBlockExpression(Node  n)  {    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getFirstChild()!=  null);  [BUGGY]    return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getFirstChild()!=  null);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	1	None	replace
47	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EMPTY);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  Node  getBlockExpression(Node  n)  {    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EMPTY);  [BUGGY]    return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.EMPTY);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	1	None	replace
48	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getChildCount()  ==  2);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  Node  getBlockExpression(Node  n)  {    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getChildCount()  ==  2);  [BUGGY]    return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getChildCount()  ==  2);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	1	None	replace
49	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK  ||  n.getFirstChild()!=  null);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  Node  getBlockExpression(Node  n)  {    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK  ||  n.getFirstChild()!=  null);  [BUGGY]    return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.BLOCK  ||  n.getFirstChild()!=  null);	  Preconditions.checkState(n.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  	3	None	replace
50	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  Node  getBlockExpression(Node  n)  {    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.NAME);  [BUGGY]    return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.NAME);	  Preconditions.checkState(isFallThrough(n));    	non-compiled	[CE]  	10	None	replace
51	[BUG]  [BUGGY]  Preconditions.checkState(!isImmutableExpressBlock(n));  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  Node  getBlockExpression(Node  n)  {    [BUGGY]  Preconditions.checkState(!isImmutableExpressBlock(n));  [BUGGY]    return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(!isImmutableExpressBlock(n));	  Preconditions.checkState(!isFoldableExpressBlock(n));    	non-compiled	[CE]  	4	None	replace
52	[BUG]  [BUGGY]  Preconditions.checkState(!isVarDeclaration(n));  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  Node  getBlockExpression(Node  n)  {    [BUGGY]  Preconditions.checkState(!isVarDeclaration(n));  [BUGGY]    return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(!isVarDeclaration(n));	  Preconditions.checkState(!isFoldableExpressBlock(n));    	non-compiled	[CE]  	4	None	replace
53	[BUG]  [BUGGY]  Preconditions.checkState(isFoldExpressBlock(n)||  n.getType()  ==  Token.GETPROP);  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  Node  getBlockExpression(Node  n)  {    [BUGGY]  Preconditions.checkState(isFoldExpressBlock(n)||  n.getType()  ==  Token.GETPROP);  [BUGGY]    return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isFoldExpressBlock(n)||  n.getType()  ==  Token.GETPROP);	  Preconditions.checkState(isFoldExpressBlock(n));    	non-compiled	[CE]  	5	None	replace
54	[BUG]  [BUGGY]  Preconditions.checkState(isFoldExpressBlock(n)||  n.getType()  ==  Token.EXPRESSION);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  getBlockExpression(Node  n)  {    [BUGGY]  Preconditions.checkState(isFoldExpressBlock(n)||  n.getType()  ==  Token.EXPRESSION);  [BUGGY]    return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isFoldExpressBlock(n)||  n.getType()  ==  Token.EXPRESSION);	  Preconditions.checkState(isFoldExpressBlock(n));    	non-compiled	[CE]  	5	None	replace
55	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  ||  n.getFirstChild()!=  null);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  Node  getBlockExpression(Node  n)  {    [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  ||  n.getFirstChild()!=  null);  [BUGGY]    return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  ||  n.getFirstChild()!=  null);	  Preconditions.checkArgument(n.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  	11	None	replace
56	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  ||  n.hasChildren());  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  Node  getBlockExpression(Node  n)  {    [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  ||  n.hasChildren());  [BUGGY]    return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  ||  n.hasChildren());	  Preconditions.checkArgument(n.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  	11	None	replace
57	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  ||  n.getChildCount()  ==  2);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  Node  getBlockExpression(Node  n)  {    [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  ||  n.getChildCount()  ==  2);  [BUGGY]    return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  ||  n.getChildCount()  ==  2);	  Preconditions.checkArgument(n.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  	11	None	replace
58	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  FoldArrayAction());  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    private  Node  getBlockExpression(Node  n)  {    [BUGGY]  NodeTraversal.traverse(compiler,  n,  new  FoldArrayAction());  [BUGGY]    return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	NodeTraversal.traverse(compiler,  n,  new  FoldArrayAction());	      	non-compiled	[CE]  	7	None	replace
59	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  n,  this);  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    private  Node  getBlockExpression(Node  n)  {    [BUGGY]  NodeTraversal.traverse(compiler,  n,  this);  [BUGGY]    return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	NodeTraversal.traverse(compiler,  n,  this);	      	non-compiled	[CE]  	7	None	replace
60	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT);  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    private  Node  getBlockExpression(Node  n)  {    [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]    return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.EXPR_RESULT);	      	non-compiled	[CE]  	7	None	replace
61	[BUG]  [BUGGY]  Predicates.checkState(n.getType()  ==  Token.EXPR_RESULT);  [CE]  [FE]                          AssertionFailedError    [CONTEXT]    private  Node  getBlockExpression(Node  n)  {    [BUGGY]  Predicates.checkState(n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]    return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Predicates.checkState(n.getType()  ==  Token.EXPR_RESULT);	      	non-compiled	[CE]  	7	None	replace
62	[BUG]  [BUGGY]  Preconditions.checkState(isFallThrough(n)||  n.getType()  ==  Token.EXPR_RESULT);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  Node  getBlockExpression(Node  n)  {    [BUGGY]  Preconditions.checkState(isFallThrough(n)||  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]    return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isFallThrough(n)||  n.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(isFoldableExpressBlock(n)||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	9	None	replace
63	[BUG]  [BUGGY]  Preconditions.checkState(isExpressionFolder(n)||  n.getType()  ==  Token.EXPR_RESULT);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  Node  getBlockExpression(Node  n)  {    [BUGGY]  Preconditions.checkState(isExpressionFolder(n)||  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]    return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isExpressionFolder(n)||  n.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(isFoldableExpressBlock(n)||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	9	None	replace
64	[BUG]  [BUGGY]  Preconditions.checkState(isExpressBlock(n)||  n.getType()  ==  Token.EXPRESSION);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  Node  getBlockExpression(Node  n)  {    [BUGGY]  Preconditions.checkState(isExpressBlock(n)||  n.getType()  ==  Token.EXPRESSION);  [BUGGY]    return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isExpressBlock(n)||  n.getType()  ==  Token.EXPRESSION);	  Preconditions.checkState(isExpressBlock(n));    	non-compiled	[CE]  	8	None	replace
65	[BUG]  [BUGGY]  Preconditions.checkState(isExpressBlock(n)||  n.getType()  ==  Token.GETPROP);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  Node  getBlockExpression(Node  n)  {    [BUGGY]  Preconditions.checkState(isExpressBlock(n)||  n.getType()  ==  Token.GETPROP);  [BUGGY]    return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isExpressBlock(n)||  n.getType()  ==  Token.GETPROP);	  Preconditions.checkState(isExpressBlock(n));    	non-compiled	[CE]  	8	None	replace
66	[BUG]  [BUGGY]  Preconditions.checkState(isExpressBlock(n)||  n.getType()  ==  Token.VAR);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  Node  getBlockExpression(Node  n)  {    [BUGGY]  Preconditions.checkState(isExpressBlock(n)||  n.getType()  ==  Token.VAR);  [BUGGY]    return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isExpressBlock(n)||  n.getType()  ==  Token.VAR);	  Preconditions.checkState(isExpressBlock(n));    	non-compiled	[CE]  	8	None	replace
67	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CATCH);  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  Node  getBlockExpression(Node  n)  {    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.CATCH);  [BUGGY]    return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.CATCH);	  Preconditions.checkState(isFoldExpressBlock(n));    	non-compiled	[CE]  	5	None	replace
68	[BUG]  [BUGGY]  Preconditions.checkState(isFoldExpressBlock(n),  n.getFirstChild());  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  getBlockExpression(Node  n)  {    [BUGGY]  Preconditions.checkState(isFoldExpressBlock(n),  n.getFirstChild());  [BUGGY]    return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isFoldExpressBlock(n),  n.getFirstChild());	  Preconditions.checkState(isFoldExpressBlock(n));    	non-compiled	[CE]  	5	None	replace
69	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK  ||  n.getFirstChild()  ==  n);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  Node  getBlockExpression(Node  n)  {    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK  ||  n.getFirstChild()  ==  n);  [BUGGY]    return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.BLOCK  ||  n.getFirstChild()  ==  n);	  Preconditions.checkState(n.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  	3	None	replace
70	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK  ||  n.getType()  ==  Token.CATCH);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  Node  getBlockExpression(Node  n)  {    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.BLOCK  ||  n.getType()  ==  Token.CATCH);  [BUGGY]    return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.BLOCK  ||  n.getType()  ==  Token.CATCH);	  Preconditions.checkState(n.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  	3	None	replace
71	[BUG]  [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.VAR);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  Node  getBlockExpression(Node  n)  {    [BUGGY]  Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.VAR);  [BUGGY]    return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(n.getType()  ==  Token.EXPR_RESULT  ||  n.getType()  ==  Token.VAR);	  Preconditions.checkState(n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	1	None	replace
72	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  ||  n.getType()  ==  Token.SCRIPT);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  Node  getBlockExpression(Node  n)  {    [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  ||  n.getType()  ==  Token.SCRIPT);  [BUGGY]    return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  ||  n.getType()  ==  Token.SCRIPT);	  Preconditions.checkArgument(n.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  	11	None	replace
73	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  ||  n.getFirstChild()  ==  n);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  Node  getBlockExpression(Node  n)  {    [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  ||  n.getFirstChild()  ==  n);  [BUGGY]    return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  ||  n.getFirstChild()  ==  n);	  Preconditions.checkArgument(n.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  	11	None	replace
74	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  ||  n.getType()  ==  Token.CATCH);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  Node  getBlockExpression(Node  n)  {    [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  ||  n.getType()  ==  Token.CATCH);  [BUGGY]    return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  ||  n.getType()  ==  Token.CATCH);	  Preconditions.checkArgument(n.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  	11	None	replace
75	[BUG]  [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  ||  n.getType()  ==  Token.VAR);  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  Node  getBlockExpression(Node  n)  {    [BUGGY]  Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  ||  n.getType()  ==  Token.VAR);  [BUGGY]    return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkArgument(n.getType()  ==  Token.BLOCK  ||  n.getType()  ==  Token.VAR);	  Preconditions.checkArgument(n.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  	11	None	replace
76	[BUG]  [BUGGY]  Preconditions.checkState(isExpressionBlock(n)||  n.getType()  ==  Token.EXPR_RESULT);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  Node  getBlockExpression(Node  n)  {    [BUGGY]  Preconditions.checkState(isExpressionBlock(n)||  n.getType()  ==  Token.EXPR_RESULT);  [BUGGY]    return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isExpressionBlock(n)||  n.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(isFoldableExpressBlock(n)||    n.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  	9	None	replace
77	[BUG]  [BUGGY]  Preconditions.checkArgument(!isFoldableExpressBlock(n));  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  Node  getBlockExpression(Node  n)  {    [BUGGY]  Preconditions.checkArgument(!isFoldableExpressBlock(n));  [BUGGY]    return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkArgument(!isFoldableExpressBlock(n));	  Preconditions.checkState(!isFoldableExpressBlock(n));    	non-compiled	[CE]  	4	None	replace
78	[BUG]  [BUGGY]  Preconditions.checkState(!isExpressionBlock(n));  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  Node  getBlockExpression(Node  n)  {    [BUGGY]  Preconditions.checkState(!isExpressionBlock(n));  [BUGGY]    return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(!isExpressionBlock(n));	  Preconditions.checkState(!isFoldableExpressBlock(n));    	non-compiled	[CE]  	4	None	replace
79	[BUG]  [BUGGY]  Preconditions.checkState(!isExpressionTree(n));  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  getBlockExpression(Node  n)  {    [BUGGY]  Preconditions.checkState(!isExpressionTree(n));  [BUGGY]    return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(!isExpressionTree(n));	  Preconditions.checkState(!isFoldableExpressBlock(n));    	non-compiled	[CE]  	4	None	replace
80	[BUG]  [BUGGY]  Preconditions.checkState(isExpressBlock(n),  n.getFirstChild());  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  Node  getBlockExpression(Node  n)  {    [BUGGY]  Preconditions.checkState(isExpressBlock(n),  n.getFirstChild());  [BUGGY]    return  n.getFirstChild();  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  getBlockExpression  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	544	544	1	replace	Preconditions.checkState(isExpressBlock(n),  n.getFirstChild());	  Preconditions.checkState(isExpressBlock(n));    	non-compiled	[CE]  	8	None	replace
