bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getBooleanValue(left);  [CE]  [FE]    AssertionFailedError  [CONTEXT]    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getBooleanValue(left);  [BUGGY]  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getBooleanValue(left);	TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  	non-compiled	[CE]  	63	None	replace
2	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getRightValue(left);  [CE]  [FE]      AssertionFailedError  [CONTEXT]    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getRightValue(left);  [BUGGY]  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getRightValue(left);	TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  	non-compiled	[CE]  	63	None	replace
3	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getRightValue(right);  [CE]  [FE]        AssertionFailedError  [CONTEXT]    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getRightValue(right);  [BUGGY]  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getRightValue(right);	TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  	non-compiled	[CE]  	63	None	replace
4	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getRawValue(left);  [CE]  [FE]          AssertionFailedError  [CONTEXT]    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getRawValue(left);  [BUGGY]  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getRawValue(left);	TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  	non-compiled	[CE]  	63	None	replace
5	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getLocalValue(left);  [CE]  [FE]            AssertionFailedError  [CONTEXT]    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getLocalValue(left);  [BUGGY]  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getLocalValue(left);	TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  	non-compiled	[CE]  	63	None	replace
6	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getLastChild();  [CE]  [FE]              AssertionFailedError  [CONTEXT]    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getLastChild();  [BUGGY]  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getLastChild();	TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  	non-compiled	[CE]  	63	None	replace
7	[BUG]  [BUGGY]    [CE]  [FE]                AssertionFailedError  [CONTEXT]    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        [BUGGY]    [BUGGY]  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	  	TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  	non-compiled	[CE]  	63	None	replace
8	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getOptValue(left);  [CE]  [FE]    AssertionFailedError  [CONTEXT]    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getOptValue(left);  [BUGGY]  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getOptValue(left);	TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  	non-compiled	[CE]  	63	None	replace
9	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right,  trueNode);  [CE]  [FE]      AssertionFailedError  [CONTEXT]    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right,  trueNode);  [BUGGY]  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right,  trueNode);	TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  	non-compiled	[CE]  	63	None	replace
10	[BUG]  [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getAssignedValue(left);  [CE]  [FE]        AssertionFailedError  [CONTEXT]    left  =  tryMinimizeCondition(left);  right  =  tryMinimizeCondition(right);        [BUGGY]  TernaryValue  rightVal  =  NodeUtil.getAssignedValue(left);  [BUGGY]  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  Node  replacement  =  null;  boolean  rval  =  rightVal.toBoolean(true);    if  (type  ==  Token.OR  &&  !rval  ||  type  ==  Token.AND  &&  rval)  {  replacement  =  left;  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	727	727	1	replace	TernaryValue  rightVal  =  NodeUtil.getAssignedValue(left);	TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  	non-compiled	[CE]  	63	None	replace
